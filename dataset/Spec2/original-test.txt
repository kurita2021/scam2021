method: aMethod  method := aMethod-======-taskbarIcon  ^self windowIcon ifNil: [ self presenter ifNil: [ super taskbarIcon ] ifNotNil: #taskbarIcon ]-======-label  ^self presenter label-======-selectedItems  | wrappers items |  wrappers := listPresenter listItems.  items := wrappers collect: [:e |  | value |        value := associationsWrapperToItem at: e ifAbsent: [ nil ].        (value isNil or: [ e state not ]) ifTrue: [ nil ] ifFalse: [ value ] ] thenSelect: [:e |  e notNil ].  ^items-======-whenSelectedItemsChanged: aBlock  self deprecated: 'Use #whenSelectionChangedDo: instead' transformWith: '`@receiver whenSelectedItemsChanged: `@argument' -> '`@receiver whenSelectionChangedDo: [ :selection | `@argument cull: selection selectedItems ]'.  self selection whenChangedDo: [:selection |  aBlock cull: selection selectedItems ]-======-adoptMenuItemModel: item accumulator: controls  item subMenu ifNil: [ | button |        button := self buildButtonFor: item.        controls add: button ] ifNotNil: [ self emptyAccumulator: controls.        widget addMorphBack: (self theme newToolSpacerIn: widget).        widget add: item name font: self theme menuBarFont icon: item icon help: item description subMenu: item subMenu buildWithSpecAsPopup.        widget addMorphBack: (self theme newToolSpacerIn: widget) ]-======-addPage: each to: aNotebook  aNotebook addLazyPage: [ self buildContentForPage: each ] label: (self buildLabelForPage: each).  aNotebook pages last model: each-======-spec: anObject  spec := anObject-======-widget  ^self adapter widget-======-display: aBlock  ^self list display: aBlock-======-listModel  self deprecated: 'It is not wise to allow external user access the content of a sub presenter. If this is accessed directly, the behavior should probably be moved to the MessageBrowser.'.  ^messageList listModel-======-hasContentToShow  ^self nodeModel hasContentToShow-======-testSelectPresenterItemSetsSelectedIndexInWidget  presenter selectItem: 20.  self assert: (self adapter selectedIndexes includes: 2)-======-testSubscriptionsAreTransfered  | count |  count := 0.  presenter beMultipleSelection.  presenter whenSelectionChangedDo: [ count := count + 1 ].  presenter beSingleSelection.  presenter selectIndex: 2.  self assert: count equals: 1-======-rememberMe: anObject  rememberMe := anObject-======-isOverlay  ^overlay = true-======-testStartsWithoutSelection  self assert: self adapter selectedItem equals: nil-======-fileOutClass: aClass from: aChangeSet  | aSet |  aSet := ChangeSet newChangeSet: aClass name.  aSet ifNil: [ ^self ].  aSet absorbClass: aClass name from: aChangeSet.  aSet fileOut.  ChangeSet removeChangeSet: aSet-======-open  self presenter windowIsOpening-======-leftOffset  ^layoutFrame leftOffset-======-testSelectManyIndexesKeepsLastSelectionInWidget  presenter selectIndex: 1.  presenter selectIndex: 2.  self assert: self adapter selectedIndexes equals: #(2)-======-testInitialSelectedTab  self assert: presenter selectedTab equals: nil.  presenter addTab: redTab.  self assert: presenter selectedTab equals: redTab.  presenter addTab: self redMorphTab.  self assert: presenter selectedTab equals: redTab-======-whenSelectionIndexChanged: aBlock  self list whenSelectionIndexChanged: aBlock-======-testDayBeforeMonthOf  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 9 day: 1)) equals: 6.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 9 day: 14)) equals: 6.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 9 day: 30)) equals: 6.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 10 day: 1)) equals: 1.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 10 day: 17)) equals: 1.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 10 day: 30)) equals: 1-======-testSelectPathSetsSelectedItem  presenter selectPath: #(1 3).  self assert: presenter selection selectedItem equals: 10-======-initializeWindow  self presenter initializeWindow: self-======-morph  ^self widget-======-applyTo: aMorph  -======-selectedPaths  ^selection-======-newText  ^self instantiate: SpTextPresenter-======-wantsVisualFeedback  ^wantsVisualFeedback-======-setFocus  self focusOrder     add: changesListPresenter;     add: classesListPresenter;     add: methodsListPresenter;     add: textPresenter-======-testActivationOnDoubleClickShouldActivateOnDoubleClick  | activatedItem |  activatedItem := nil.  presenter     activateOnDoubleClick;     whenActivatedDo: [:selection |  activatedItem := selection selectedItem ].  presenter doubleClickAtIndex: 1.  self assert: activatedItem equals: 10-======-aboutToStyle: aBoolean  self deprecated: 'Use #withSyntaxHighlight, #withoutSyntaxHighlight or #syntaxHighlight: instead.' transformWith: '`@receiver aboutToStyle: `@argument' -> '`@receiver syntaxHighlight: `@argument'.  self syntaxHighlight: aBoolean-======-execute  self evaluateSelectionAndDo: [:result |  self inspectObject: result ]-======-contextMenu  ^contextMenu-======-updatePresenter  self modelChanged-======-testIconNameFrom  self assert: command iconProvider equals: Smalltalk ui icons.  command iconName: #banana from: self.  self assert: command iconProvider equals: self.  self assert: command icon equals: self banana-======-resizerWidth  ^self model resizerWidth-======-whenCurrentActivatedChanged: aBlock  self deprecated: 'Use #whenCurrentActivatedChangedDo: instead.' transformWith: '`@receiver whenCurrentActivatedChanged: `@statements' -> '`@receiver whenCurrentActivatedChangedDo: `@statements'.  self whenCurrentActivatedChangedDo: aBlock-======-menuColumn: column row: rowIndex  | menuPresenter |  menuPresenter := self model contextMenu.  menuPresenter ifNil: [ ^nil ].  ^SpBindings value: self model application adapterBindings during: [ menuPresenter value buildWithSpec ]-======-resizingSetSelector  ^layout isHorizontal ifTrue: [ #hResizing: ] ifFalse: [ #vResizing: ]-======-leftLabel  ^leftLabel-======-whenNumberTypeChangedDo: aBlock  self property: #numberType whenChangedDo: aBlock-======-setSelectedItem: anItem  self deprecated: 'Use #selectedItem: instead' transformWith: '`@receiver setSelectedItem: `@argument' -> '`@receiver selectedItem:`@argument'.  ^self selectedItem: anItem-======-oldPage: anObject  oldPage := anObject-======-registerClassShortcuts: aWidget  aWidget bindKeyCombination: PharoShortcuts current browseShortcut toAction: [ self selectedClass ifNotNil: [ self browseMethodFull ] ].  aWidget bindKeyCombination: $d meta toAction: [ self selectedClass ifNotNil: [ self forgetClass ] ].  aWidget bindKeyCombination: PharoShortcuts current removeShortcut toAction: [ self selectedClass ifNotNil: [ self removeClass ] ]-======-action: aBlock  action := aBlock-======-presenterAt: aName  ^self basicPresenters at: aName-======-initialize  super initialize.  self withSyntaxHighlight.  self registerEventsForStyling.  self contextMenu: self buildCodeMenu.  self contextKeyBindings: self buildCodeKeyBindings-======-y: anObject  y := anObject-======-iconName: aSymbol  self icon: (self iconNamed: aSymbol)-======-pages  ^layout presenters-======-isMultipleSelection  ^true-======-whenCurrentlyActivatedChanged: aBlock  self deprecated: 'Use #whenCurrentlyActivatedChangedDo: instead.' transformWith: '`@receiver whenCurrentlyActivatedChanged: `@statements' -> '`@receiver whenCurrentlyActivatedChangedDo: `@statements'.  self whenCurrentlyActivatedChangedDo: aBlock-======-passenger  ^[ self model passenger ]-======-objectClassPage  ^SpNotebookPage title: 'Object class' icon: (self iconNamed: #nautilusIcon) provider: [ MessageBrowser new messages: Object methods ]-======-pathOfItem: anItem root: aRoot  aRoot isExpanded ifFalse: [ ^#() ].  (aRoot children includes: anItem) ifTrue: [ ^{(aRoot children indexOf: anItem)} ].  aRoot children withIndexDo: [:aChild :index |  | aSubPath |        aSubPath := self pathOfItem: anItem root: aChild.        aSubPath ifNotEmpty: [ ^{index} , aSubPath ] ].  ^#()-======-askOkToClose  ^askOkToClose-======-expandAll  self changed: #expandAll with: #()-======-configureButton: aButton item: aToolbarItem  self subclassResponsibility-======-buildWidget  ^SpTransferMorph new     model: self;     passenger: self passenger;     source: self source;     yourself-======-value  ^self presenter value-======-buildWidget  ^SpStubTreeView new-======-drawOn: aCanvas  | area |  area := self innerBounds.  aCanvas fillRectangle: area fillStyle: self fillStyle.  value > 0 ifTrue: [ cachedWidth := self completedWidth.        area := (area left + (cachedWidth - (area width / 2.5))) @ area top corner: area origin + (cachedWidth @ area height).        aCanvas fillRectangle: area fillStyle: self barFillStyle ].  self borderStyle frameRectangle: self bounds on: aCanvas-======-askBeforeChanging  ^self model askBeforeChanging-======-isEmpty  ^self items isEmpty-======-content  ^'I am a modal demo with default actions buttons. I set closeOnBackdropClick to true (which is the default value) to close the modal if the user click on the backdrop of the modal. This will trigger the cancel action of the modal.'-======-headerTitle: aString  headerTitle := aString-======-maxWidth: aNumber  self maxExtent: aNumber @ self maxExtentOrDefault y-======-includesIndex: anIndex  ^self selectedIndexes includes: anIndex-======-addItemLeft: aMorph  leftPanel addMorphBack: (aMorph           vResizing: #spaceFill;           yourself)-======-selectPaths: pathArray  self subclassResponsibility-======-isStyleProperty  ^true-======-selectionMode  ^selectionMode-======-contextMenuFromCommandsGroup: aValuable  self contextMenu: [ aValuable value beRoot asMenuPresenter ]-======-displayedIcon  self model hasIcons ifFalse: [ ^nil ].  ^self widget currentIcon-======-step  self model step-======-whenChangedDo: aBlock  self announcer when: ValueChanged do: [:ann |  aBlock cull: ann newValue cull: ann oldValue cull: ann ]-======-apply  fromPort attachTransmission: self-======-onActivation: anObject  onActivation := anObject-======-manualFractionComputation  | delta |  delta := numberOfProportionals isZero ifTrue: [ 0 ] ifFalse: [ 1 / numberOfProportionals ].  self commands doWithIndex: [:e :idx |  e layoutFrame hasNoOffsets ifTrue: [ self setWidgetLayoutWithNoOffset: e at: idx delta: delta ] ifFalse: [ self setWidgetLayoutWithOffset: e at: idx ] ]-======-methodsListPresenter  ^methodsListPresenter-======-removeRootsSuchAs: aBlock  self widgetDo: [:w |  w model rootNodes removeAllSuchThat: [:node |  aBlock value: node nodeModel ] ]-======-initializePresenters  super initializePresenters.  textModel := self newCode.  textModel whenBuiltDo: [:ann |  ann widget font: self codeFont ].  refreshingBlock := [:item |  true ].  self     initializeDropList;     setFocus-======-buildWidget  widget := FTTableMorph new     hResizing: #spaceFill;     vResizing: #spaceFill;     intercellSpacing: self class intercellSpacing;     yourself.  self addModelTo: widget.  ^widget-======-checkboxLabel: anObject  checkboxLabel := anObject-======-addModelItemsToWindowMenu: aMenu  self presenter addModelItemsToWindowMenu: aMenu-======-leftFraction: aNumber  ^0-======-beep  widget flash-======-initialize  super initialize.  bottomFraction := 1.  bottomOffset := 0.  leftFraction := 0.  leftOffset := 0.  rightFraction := 1.  rightOffset := 0.  topFraction := 0.  topOffset := 0-======-borderWidth: aNumber  borderWidth := aNumber-======-object: anObject  object := anObject-======-whenSelectedItemChanged: aBlock  self list whenSelectedItemChanged: aBlock-======-propertyAt: aKey ifPresent: aBlock ifAbsent: absentBlock  ^self properties at: aKey ifPresent: aBlock ifAbsent: absentBlock-======-startWithoutSelection  startsWithSelection := false-======-model: anObject  model := anObject-======-testWhenMaximumChangedDo  | count result |  count := 0.  presenter whenMaximumChangedDo: [:value |  count := count + 1.        result := value ].  presenter maximum: 10.  self assert: count equals: 1.  self assert: result equals: 10-======-testSelectItemSetsSelectedIndex  presenter selectItem: 20.  self assert: presenter selection selectedIndex equals: 2-======-includesPath: aPath  ^selection includes: aPath-======-application  ^self hasOwner ifTrue: [ self owner application ] ifFalse: [ application ifNil: [ self flag: #TODO.              application := SpApplication defaultApplication ] ]-======-property: aName rawValue: anObject  (self observablePropertyNamed: aName) rawValue: anObject-======-descriptionPresenter: anObject  descriptionPresenter := anObject-======-checkThatSidesDiffer: escapeBlock  changeSorterLeft selectedChangeSet == changeSorterRight selectedChangeSet ifFalse: [ ^self ].  self inform: 'This command requires that thechange sets selected on the twosides of the change sorter *not*be the same.'.  ^escapeBlock value-======-send: aSelector withArguments: arguments  self commands add: (SpLayoutSend selector: aSelector)-======-buildWidget  | instance |  instance := SpAthensMorph new.  self presenter whenDrawBlockChangedDo: [:newBlock |  instance drawBlock: newBlock ].  self presenter whenExtentChangedDo: [:newExtent |  instance extent: newExtent ].  instance extent: self presenter surfaceExtent.  instance drawBlock: self presenter drawBlock.  instance setBalloonText: self model help.  self presenter whenHelpChangedDo: [ instance setBalloonText: self model help ].  ^instance-======-shortcuts  | collection |  collection := OrderedCollection new.  KMRepository default categories do: [:cat |  cat keymaps do: [:keymapping |  collection add: (KMShortcutDeclaration new                       shortcutName: keymapping name;                       categoryName: cat name;                       yourself) ] ].  ^collection sorted: #categoryName ascending-======-buildAdapterWithSpecLayout: aSpecLayout  ^SpBindings value: self application adapterBindings during: [ self basicBuildAdapterWithSpecLayout: aSpecLayout ]-======-children  ^childrenBlock-======-instantiateModels: aCollectionOfPairs  self deprecated: 'Use #instantiatePresenters: instead' transformWith: '`@receiver instantiateModels: `@statement' -> '`@receiver instantiatePresenters: `@statement'.  ^self instantiatePresenters: aCollectionOfPairs-======-pushMessage: message to: aMorph  pushedMessages add: message.  aMorph     removeAllMorphs;     addMorph: message asStringMorph-======-defaultDate  ^Date today-======-presenter: aPresenter  presenter := aPresenter-======-addConstraits: constraints toChild: childMorph  | theMorph |  theMorph := childMorph.  theMorph setProperty: #constraints toValue: constraints.  ^theMorph-======-addModelTo: tableMorph  self model columns do: [:each |  tableMorph addColumn: (self newColumnFrom: each) ].  self ensureAtLeastOneColumnIn: tableMorph.  self isResizable ifTrue: [ tableMorph beResizable ] ifFalse: [ tableMorph beNotResizable ].  tableMorph setMultipleSelection: self model isMultipleSelection.  self refreshShowColumnHeaders.  self refreshWidgetSelection.  self presenter whenShowColumnHeadersChangedDo: [:showColumns |  self refreshShowColumnHeaders ].  self presenter whenModelChangedDo: [ widget refresh ].  self presenter whenColumnsChangedDo: [ self refreshColumnsInWidget ].  tableMorph setBalloonText: self help.  self configureScrolling.  tableMorph     onAnnouncement: FTSelectionChanged send: #selectionChanged: to: self;     onAnnouncement: FTStrongSelectionChanged send: #strongSelectionChanged: to: self.  tableMorph dataSource: self newDataSource.  self presenter whenItemFilterBlockChangedDo: [:block |  self updateItemFilterBlockWith: block ].  self presenter whenSearchChangedDo: [ self updateSearch ].  self updateItemFilterBlockWith: self itemFilter-======-addColumn: aTableColumn  columns add: aTableColumn-======-submitButton  ^submitButton-======-enabled: aBoolean  ^self subclassResponsibility-======-addItemsFromContext: aContext  self flag: #TODO-======-hasCustomSearch  ^searchBlock notNil-======-unregisterShortcut: oldShortcut  | receiver |  receiver := self window.  (receiver isNil or: [ oldShortcut isNil ]) ifTrue: [ ^self ].  receiver model removeKeyCombination: oldShortcut-======-inspectValue  ^self value inspect-======-columns  ^widget columns-======-testSmokeTestForDemoPages  self timeLimit: 1 minute.  SpDemoPage availablePages do: [:demoPage |  [ [ window := demoPage new openWithSpec ] on: Error do: [:e |  self fail: 'Broken demo page: ' , demoPage asString , '' , e signalerContext shortStack ] ] ensure: [ window ifNotNil: #close ] ]-======-buildWidget  ^SpStubGridView new-======-objectAsUnicodeCodePoint  ^String streamContents: [:stream |  stream << 'U+'.        self object codePoint printOn: stream base: 16 nDigits: 4 ]-======-classToTest  ^SpMethodToolbar-======-initialize  self flag: #pharoTodo.  super initialize.  oddPassage := true-======-initializeTestedInstance  presenter     min: 1;     max: 100;     quantum: 1;     value: 20-======-taskbarIcon  ^self model taskbarIcon-======-defineInputPorts  ^{SpTextPort new}-======-whenMenuChangedDo: aBlock  self property: #menu whenChangedDo: aBlock-======-hasButtonWithLabel: aString  ^self widget leftPanel submorphs , self widget rightPanel submorphs detect: [:e |  (e isKindOf: SpToolBarButtonMorph) and: [ e label = aString ] ] ifFound: [ true ] ifNone: [ false ]-======-visiblePages  ^visiblePages-======-vShrinkWrap  self subclassResponsibility-======-show  self widgetDo: #show-======-selectedElement  ^self list selection selectedItem ifNil: [ self list selectedIndex ifNotNil: [:currentIndex |  currentIndex = 0 ifTrue: [ ^nil ].              self list listItems ifNotEmpty: [:aList |  aList at: currentIndex ] ] ]-======-initializePresenters  super initializePresenters.  self content: SpInputTextDropList-======-testSelectInvalidPathsIsEmpty  presenter selectPaths: {#(40) .         #(10 20)}.  self assert: presenter selection isEmpty-======-add: aBlock withSpec: aSpec left: left right: right  self add: aBlock withSpec: aSpec top: nil bottom: nil left: left right: right-======-exploreValue  ^self value inspect-======-enabled  ^self presenter isEnabled-======-basicSelectIndex: indexToSelect  selectedIndex := indexToSelect-======-acceptDroppingMorph: draggedMorph event: event inMorph: source  | item |  item := self widget ifNotNil: [:w |  w scrollerSubMorphFromPoint: event position ].  item ifNil: [ ^self ].  ^self acceptDropBlock valueWithEnoughArguments: {draggedMorph model model .         event .         source model model model .         item model nodeModel}-======-observablePropertyNamed: aName  | slot |  slot := self class slotNamed: aName.  slot isObservableSlot ifFalse: [ SpNonObservableSlotError signal: aName ].  ^slot rawRead: self-======-page: anObject  page := anObject-======-step  | oldAngle transform |  oldAngle := transformationMorph rotationDegrees.  transform := transformationMorph transform withAngle: (oldAngle + 15) degreesToRadians negated.  transformationMorph     transform: transform;     invalidRect: transformationMorph fullBounds-======-testShortcutKey  self should: [ command shortcutKey ] raise: CmNoShortcutIsDefined.  command shortcutKey: $a asKeyCombination.  self assert: command shortcutKey equals: $a asKeyCombination-======-addPaneSplitters  self removePaneSplitters.  self addPaneVSplitters.  self addPaneHSplitters.  self linkSplittersToSplitters-======-rebuildWithSpecLayout: aSpec  | sub |  sub := self model window submorphs copy.  self model window removeAllMorphs.  sub allButLast do: [:e |  self model window addMorphBack: e ].  self model addPresenterIn: self widget withSpecLayout: aSpec.  self widget model: self-======-label  ^label-======-initialize  super initialize.  name := 'some name'.  surname := ''.  number1 := 1.  number2 := 12.009.  scale := 42.  password := 'password'.  rememberMe := true.  date := '2018-01-01' asDate.  gender := #male.  selectedItems := {(self items at: 3) .   (self items at: 4)}-======-shortcut  ^shortcut-======-labelClickable: aBoolean  labelClickableHolder value: aBoolean-======-menuColumn: column row: rowIndex  | menuPresenter |  menuPresenter := self model contextMenu.  menuPresenter ifNil: [ ^nil ].  ^SpBindings value: self model application adapterBindings during: [ | m |        m := menuPresenter value.        m isMorph ifTrue: [ m ] ifFalse: [ m buildWithSpec ] ]-======-target  ^self owner ifNotNil: [:aMorph |  aMorph submorphs before: self ]-======-limit2  ^10-======-prepareAsStandaloneApplication  -======-open  ^self openWithSpec-======-whenQuantumChangedDo: aBlock  self property: #quantum whenChangedDo: aBlock-======-testTextWithStyle  | text |  presenter     behavior: nil;     doItReceiver: Object;     type: 'self asString.'.  text := self adapter textWithStyle.  self assertText: text atInterval: (1 to: 4) isStyle: #self.  self assertText: text atInterval: (6 to: 13) isStyle: #unary.  presenter type: '10 + 42.0'.  text := self adapter textWithStyle.  self assertText: text atInterval: (1 to: 2) isStyle: #integer.  self assertText: text atInterval: (4 to: 4) isStyle: #binary.  self assertText: text atInterval: (6 to: 9) isStyle: #number.  presenter behavior: Object.  presenter type: 'm1 ^ "test" 42'.  text := self adapter textWithStyle.  self assertText: text atInterval: (1 to: 2) isStyle: #patternKeyword.  self assertText: text atInterval: (4 to: 4) isStyle: #return.  self assertText: text atInterval: (6 to: 11) isStyle: #comment.  self assertText: text atInterval: (13 to: 14) isStyle: #number-======-testRightClickShowsMenu  | menu |  presenter contextMenu: (menu := SpMockMenuPresenter new).  self deny: menu shown.  self emulateRightClick.  self assert: menu shown-======-spacing  ^spacing-======-buildAdapterFor: aPresenter bindings: bindings  adapter := (aPresenter needRebuild or: [ aPresenter adapter isNil ]) ifTrue: [ (bindings adapterClass: self adapterName) adapt: aPresenter ] ifFalse: [ aPresenter adapter           removeSubWidgets;           yourself ].  aPresenter needRebuild: true.  adapter layout: self.  children keysAndValuesDo: [:presenterNameOrLayout :constraints |  adapter add: (self resolvePresenter: presenterNameOrLayout presenter: aPresenter bindings: bindings) constraints: constraints ].  ^adapter-======-oldPage  ^oldPage-======-asMenuPresenterWith: aBlock  | builder |  builder := SpMenuPresenterBuilder new.  aBlock value: builder menuPresenter.  ^builder     visit: self;     menuPresenter-======-newNumberInput  ^self instantiate: SpNumberInputFieldPresenter-======-redMorphTab  presenter     label: 'Red Morph';     icon: (presenter iconNamed: #smallBackIcon);     contents: (Morph new           color: Color red;           yourself)-======-topologicSort: anObject  topologySort := anObject-======-presenter  ^presenter-======-label  ^label-======-shown  ^shown-======-newListColumn  ^SpMorphicTableColumn new     model: (SpStringTableColumn title: self presenter headerTitle evaluated: self presenter display);     yourself-======-classToTest  ^SpTextInputFieldPresenter-======-surnameTextInput: anObject  surnameTextInput := anObject-======-buildLabel: text withIcon: icon  icon ifNil: [ ^text ifNil: [ '' ] ifNotNil: [ text ] ].  ^IconicListItem text: text icon: icon-======-fromSpec: aSpec  | grps subgroup |  grps := OrderedCollection new.  aSpec label ifNotNil: [:label |  self title: label ].  subgroup := OrderedCollection new.  aSpec items do: [:each |  subgroup add: each.        each separator ifTrue: [ grps add: subgroup copy.              subgroup removeAll ] ].  subgroup ifNotEmpty: [ grps add: subgroup copy ].  grps do: [:each |  self addGroup: [:group |  each do: [:spec |  group addItem: [:item |  item fromSpec: spec ] ] ] ]-======-initialize: anInteger  text label: anInteger asString-======-initialize  super initialize.  borderWidth := 0.  borderColor := Color transparent.  enabled := true.  dragEnabled := false.  dropEnabled := false.  dragTransformationBlock := [:item :source |  item ].  wantDropBlock := [:draggedItem :event :source |  self dropEnabled ].  acceptDropBlock := [:draggedItem :event :source |   ].  transferBlock := [:passenger :source |  self defaultTransferFor: passenger from: source ].  color := self defaultColor.  self whenHelpChangedDo: [:string |  self withAdapterDo: [:w |  w update: #setBalloonText: with: {string} ] ].  self whenBorderWidthChangedDo: [:int |  self withWidgetDo: [:w |  w update: #borderWidth: with: {int} ] ].  self whenBorderColorChangedDo: [:newColor |  self withWidgetDo: [:w |  w update: #borderColor: with: {newColor} ] ].  self property: #color whenChangedDo: [:newColor |  self withAdapterDo: [:w |  w update: #color: with: {newColor} ] ].  self whenEnabledChangedDo: [:b |  self withAdapterDo: [:w |  w update: #enabled: with: {b} ] ].  self property: #dragEnabled whenChangedDo: [:b |  self withWidgetDo: [:w |  w update: #dragEnabled: with: {b} ] ].  self property: #dropEnabled whenChangedDo: [:b |  self withWidgetDo: [:w |  w update: #dropEnabled: with: {b} ] ].  styles := #()-======-menu  ^menuBlockHolder value-======-assertText: text at: index isStyle: styleName  | tag |  tag := SpCodeStyleForTest new.  text attributesAt: index do: [:each |  self fillTag: tag withAttribute: each ].  self assert: tag equals: (self style: styleName)-======-newMultiColumnList  self deprecated: 'Use newTable instead' on: '2019-02-05' in: #Pharo8.  ^self instantiate: SpMultiColumnListPresenter-======-actionArguments  ^[ Array with: self ]-======-whenSelectionChanged: aBlock  self deprecated: 'Use #whenSelectionChangedDo: instead' transformWith: '`@receiver whenSelectionChanged: `@argument' -> '`@receiver whenSelectionChangedDo: `@argument'.  ^self whenSelectionChangedDo: aBlock-======-testModelSettingValueHolderToModel  | model point valueHolder presenter |  point := 1 @ 0.  model := SpTestingPointModel x: 1 y: 2.  valueHolder := NewValueHolder value: point.  presenter := SpTestingPresenterWithModel on: model.  self assert: presenter announcingObject isSpAnnouncingObject.  self deny: presenter announcingObject isValueHolder.  self assert: valueHolder isSpAnnouncingObject.  self assert: valueHolder isValueHolder.  presenter model: valueHolder.  self assert: presenter announcingObject isSpAnnouncingObject.  self assert: presenter announcingObject isValueHolder.  self assert: presenter announcingObject == valueHolder.  self assert: presenter announcingObject announcer numberOfSubscriptions > 0-======-resizeCursor  ^Cursor resizeForEdge: self edgeName-======-createNullPresenters: anInteger  nullPresentersInstVarNames := self generateNullPresentersInstVarNames: anInteger.  dynamicPresenter instantiatePresenters: self nullPresentersInstVarNamesAndPresenterNamesArray-======-block: aBlock layoutFrame: aLayoutFrame  | column |  column := SpColumnLayout composed.  aBlock value: column.  subwidget := column.  self layoutFrame: aLayoutFrame-======-addInstancesVariable: elements  -======-number: aNumber  self text: aNumber asString-======-currentlyActivated  ^currentlyActivated-======-whenCanDeselectByClickChangedDo: aBlock  self deprecated: 'It is not clear what option to select if deselected'-======-newTextInput  ^self instantiate: SpTextInputFieldPresenter-======-testDaysAfterMonthOf  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 9 day: 1)) equals: 6.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 9 day: 14)) equals: 6.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 9 day: 30)) equals: 6.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 10 day: 1)) equals: 10.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 10 day: 17)) equals: 10.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 10 day: 30)) equals: 10-======-testIsDisplayed  windowPresenter := SpTextPresenter new openWithSpec.  self assert: windowPresenter isDisplayed.  windowPresenter window minimize.  self assert: windowPresenter isDisplayed.  windowPresenter window close.  self assert: windowPresenter isDisplayed not-======-calculateHomogeneousColumnWidths  | columnWidth |  columnWidth := 0.  morphs do: [:each |  columnWidth := columnWidth max: (self minWidthOf: each) ].  ^Array new: numColumns withAll: (self baseColumnWidth max: columnWidth)-======-theme  ^theme-======-forgetSelector: selector inClass: aClass fromChangeSet: aChangeSet  aChangeSet removeSelectorChanges: selector class: aClass-======-dateInput: anObject  dateInput := anObject-======-testRemoveHeaderTitleInPresenterRemovesColumnHeaderMorph  self flag: #pharo7.  SystemVersion current major < 8 ifTrue: [ self skip ].  self presenter headerTitle: 'test'.  self presenter hideHeaderTitle.  backendForTest denyHasHeader: self adapter-======-initialize  self class initializeSlots: self.  super initialize-======-commands: anObject  commands := anObject-======-initialize  super initialize.  self spec: #defaultSpec-======-initializeWindow: aWindowPresenter  aWindowPresenter     title: self title;     initialExtent: 500 @ 350-======-ensureHeightPosition: aMorph in: aRect  | firstMorph |  self position ifNil: [ ^self ].  firstMorph := aMorph submorphs first.  firstMorph vResizing = #rigid ifFalse: [ firstMorph vResizing: #rigid ].  firstMorph privateBounds: (firstMorph bounds withHeight: (self heightPositionIn: aRect extent))-======-takeKeyboardFocus  ^self inspector takeKeyboardFocus-======-resetArrayComputation  super resetArrayComputation.  currentOffset := 0.  currentProportional := 0.  numberOfProportionals := 0.  lastFractionIndex := 0.  autoFractionComputation := true.  size := self commands size-======-fillItem: aMenuItem with: aCommand  aMenuItem     name: aCommand name;     description: aCommand description;     icon: aCommand icon;     action: [ aCommand execute ].  aCommand hasShortcutKey ifTrue: [ aMenuItem shortcut: aCommand shortcutKey ].  ^aMenuItem-======-surnameLabel  ^surnameLabel-======-valueAtColumn: aColumn row: aRow  ^(columns at: aColumn) readObject: (self model items at: aRow)-======-testActivateRaisesActivatedEvent  presenter state: false.  self assertEvent: #whenActivatedDo: isRaisedInPresenter: presenter whenDoing: [ presenter state: true ]-======-hSpaceFill  self subclassResponsibility-======-isDisplayed  self flag: #TODO.  ^self hasWindow ifTrue: [ self root isDisplayed ] ifFalse: [ false ]-======-beIcons  self displayMode: SpToolBarDisplayMode modeIcon-======-whenHelpChangedDo: aBlock  self property: #help whenChangedDo: aBlock-======-menu  self deprecated: 'Use #contextMenu instead.' transformWith: '`@receiver menu' -> '`@receiver contextMenu'.  ^self contextMenu-======-mainIcon  ^mainIcon-======-fileOutMessage  self selectedSelector ifNotNil: [:selector |  Cursor write showWhile: [ self model fileOutSelector: selector from: self selectedClass ] ]-======-resetTo: anIndex  self presenters copy withIndexDo: [:presenter :index |  index <= anIndex ifFalse: [ layout remove: presenter ] ]-======-property: aName whenChangedDo: aBlockClosure  (self observablePropertyNamed: aName) whenChangedDo: aBlockClosure-======-browseMessages  self currentMethod ifNotNil: [:method |  model browseMessagesFrom: method selector ]-======-menuGroups  ^self model menuGroups reject: [:e |  e isEmpty ]-======-testObservableSlotWorksAsNormalSlot  point x: 17.  point y: 299.  self assert: point x equals: 17.  self assert: point y equals: 299-======-childrenBlock  ^tree childrenBlock-======-layout: aLayout  layout := aLayout-======-selector  ^self selection asSymbol-======-refreshWidgetSelection  | rowIndexes |  rowIndexes := self presenter selection selectedIndexes.  rowIndexes = self widget selectedIndexes ifTrue: [ ^self ].  rowIndexes isEmpty ifTrue: [ self widget basicSelectIndexes: #() ] ifFalse: [ self widget basicSelectIndexes: rowIndexes ].  ^self widget refresh-======-aboutTitle  (self presenter respondsTo: #aboutTitle) ifTrue: [ ^self presenter aboutTitle ].  ^self presenter toolName-======-namesOfDaysLabels  ^namesOfDaysLabels-======-activate  activationBlock value: (SpMillerActivation on: 1)-======-fixedAt: aNumber  self state: (SpProgressBarFixed value: aNumber)-======-adapter  ^self-======-emptyList  self dropList emptyList-======-whenExtentForPreviewChanged: aBlock  extentForPreview whenChangedDo: aBlock-======-save: aValue  saveBlock value: aValue-======-compareToCurrentVersion  self compareTo: rgMethod withLabel: 'Current version'-======-performHeaderActionSelector  ^self headerAction ifNil: [ nil ] ifNotNil: [ #performHeaderAction ]-======-initializeTestedInstance  super initializeTestedInstance.  presenter addColumn: (SpStringTableColumn evaluated: [:e |  e displayString ])-======-whenSelectedItemChanged: aBlock  messageList whenSelectedItemChanged: aBlock-======-selectedItem: anItem  self deprecated: 'Use #selectItem: instead' transformWith: '`@receiver selectedItem: `@arg' -> '`@receiver selectItem: `@arg'.  self selectItem: anItem-======-subMenu: aMenuPresenter  aMenuPresenter ifNotNil: [ aMenuPresenter owner: self ].  subMenu := aMenuPresenter-======-model  ^model-======-rowSpan  ^self span y-======-surnameLabel: anObject  surnameLabel := anObject-======-initializeWindow: aWindowPresenter  aWindowPresenter     title: 'Transmission example browser';     initialExtent: 800 @ 600-======-rootMenu  ^self owner isMenuPresenter ifTrue: [ self owner rootMenu ] ifFalse: [ self ]-======-object  ^self inspector object-======-cacheHierarchyForClasses: aCollection  cachedHierarchy := self buildHierarchyForMessages: aCollection-======-testWhenStateChangedDo  presenter whenStateChangedDo: [:new :old |  self deny: old.        self assert: new ].  self deny: presenter state.  self openInstance.  presenter state: true.  self assert: presenter state-======-testRightClickShowsMenu  | menu |  presenter contextMenu: (menu := SpMockMenuPresenter new).  self deny: menu shown.  self emulateRightClick.  self assert: menu shown-======-url: aString  self action: [ WebBrowser openOn: aString ].  self label ifNil: [ self label: aString ]-======-beColumnHomogeneous  self columnHomogeneous: true-======-clicked  | evt |  evt := MouseButtonEvent new setType: nil position: widget center which: MouseButtonEvent redButton buttons: MouseButtonEvent redButton hand: nil stamp: nil.  (widget handlesMouseDown: evt) ifTrue: [ widget mouseDown: evt.        widget mouseUp: evt ]-======-classToTest  ^SpRGBSliders-======-whenMaximumChangedDo: aBlock  self property: #maximum whenChangedDo: aBlock-======-whenSyntaxHighlightChangedDo: aBlock  self property: #syntaxHighlight whenChangedDo: aBlock-======-displayBlock: aBlock  displayBlock value: aBlock-======-newButton  ^PluggableButtonMorph on: self getState: #state action: #action label: #label menu: #menu:-======-layoutSpec  ^layoutSpec-======-eventKeyStrokesForPreviousFocus  ^{Character tab shift asKeyCombination}-======-isEmpty  ^self subclassResponsibility-======-whenValueChangedDo: aBlock  slider whenValueChangedDo: aBlock-======-newColumnFrom: aTableColumn  ^(SpMorphicTableColumn on: aTableColumn)     width: aTableColumn width;     yourself-======-encrypted: aBoolean  ^self input encrypted: aBoolean-======-testShowPresenterShowsWidget  self skip-======-initialize  super initialize.  paneMorphs := OrderedCollection new-======-classToTest  ^SpSliderPresenter-======-assertEvent: anEventName isRaisedInPresenter: aPresenter whenDoing: aBlock  self assertWith: [:times |  times > 0 ] timesRaisedEvent: anEventName inPresenter: aPresenter whenDoing: aBlock-======-initializePresenters  fieldNormal := self newTextInput.  fieldDisabled := self newTextInput enabled: false.  fieldPlaceholderText := self newTextInput placeholder: 'Placeholder text'.  fieldEncrypted := self newTextInput     text: 'Password';     bePassword-======-autoRefresh: aBoolean  autoRefresh := aBoolean-======-okAction  ^okAction-======-testChangingHelpAffectTheWidget  ^self skip-======-whenCurrentActivatedChangedDo: aBlock  currentActivated whenChangedDo: aBlock-======-testUnselectWidgetIndexRaisesSelectionIndexChangeEventOnce  | counter |  counter := 0.  self adapter selectPath: #(1).  presenter selection whenChangedDo: [:selection |  counter := counter + 1 ].  self adapter selectPath: #().  self assert: counter equals: 1-======-methodBrowser  ^methodBrowser-======-show  visible := true-======-initializePresenters  listModel := self instantiate: SpListPresenter.  textModel := self newCode.  toolbarModel := self instantiate: SpMethodToolbar.  self focusOrder     add: listModel;     add: toolbarModel;     add: textModel-======-maxHeight: aNumber  self maxExtent: self maxExtentOrDefault x @ aNumber-======-updateClassesList  | sel |  sel := self selectedClass.  self selectedChangeSet ifNil: [ classesListPresenter items: {} ] ifNotNil: [:change |  classesListPresenter items: (change changedClasses sort: [:a :b |  a name < b name ]) ].  sel ifNotNil: [ classesListPresenter selectItem: sel ]-======-addLazyPage: aBlock label: aStringOrMorph action: anActionMorphOrNil  | newPage label |  newPage := SpNotebookPageMorph new.  newPage lazyPageMorphCreation: aBlock.  label := self buildLabelFrom: aStringOrMorph withAction: anActionMorphOrNil.  newPage labelMorph: label.  self addPage: newPage label: label-======-label: aStringOrImageMorph  self button label: aStringOrImageMorph-======-testSelectWidgetIndexRaisesSelectionIndexChangeEventWithSelectedIndex  | selectedIndex |  presenter selection whenChangedDo: [:selection |  selectedIndex := selection selectedIndexes ].  self adapter selectIndex: 1.  self assert: (selectedIndex includes: 1)-======-selectedItems: anObject  selectedItems := anObject asArray-======-label  ^label-======-layout: aMorph in: layoutBounds  aMorph submorphsDo: [:m |  | constraints |        constraints := m valueOfProperty: #constraints.        (m visible and: [ constraints isOverlay not ]) ifTrue: [ m bounds: layoutBounds ].        (m visible and: [ constraints isOverlay ]) ifTrue: [ | morphBounds left top newBounds |              morphBounds := layoutBounds area > (0 @ 0 corner: m extent) area ifTrue: [ layoutBounds origin corner: layoutBounds origin + m extent ] ifFalse: [ layoutBounds ].              left := layoutBounds width / 2 - (morphBounds width / 2).              top := layoutBounds height / 2 - (morphBounds height / 2).              newBounds := layoutBounds origin + (left @ top) corner: layoutBounds corner + (left @ top).              m bounds: newBounds ].        m visible ifFalse: [ m bounds: (0 @ 0 corner: 0 @ 0) ] ]-======-openWithSpec  self layout ifNil: [ ^super openWithSpec ].  ^self application open: self withSpecLayout: self layout-======-classToTest  ^SpLabelPresenter-======-updateText  textRefreshingProcess ifNotNil: [ textRefreshingProcess terminate ].  textRefreshingProcess := [ | indexes items |  indexes := listModel selection selectedIndexes sort collect: [:i |  i printString ].  indexes := indexes joinUsing: '; '.  items := listModel selectedItems collect: [:i |  i printString ].  items := items sort joinUsing: '; '.  UIManager default defer: [ textModel1 text: indexes.        textModel2 text: items ] ] fork-======-enableSearch  searchEnabled := true-======-traversePresentersDo: aBlock  self traversePresentersDo: aBlock excluding: Set new-======-eventKeyStrokesForNextFocus  ^{Character arrowRight command ctrl asKeyCombination}-======-selector: anObject  selector := anObject-======-popUpInWorld: aWorld  self shown: true-======-wantsVisualFeedback  ^self model wantsVisualFeedback-======-getText  ^self model text-======-display: aBlock  tree display: aBlock-======-implementorsMethod  self method ifNotNil: [:aMethod |  self model browseMessagesFrom: aMethod selector ]-======-testSmokeOpenEmptyPresenter  window := presenter openWithSpec-======-scrollingChanged  widget container updateAllRows.  self presenter verticalAlignment     firstVisibleRowIndex: widget firstVisibleRowIndex;     lastVisibleRowIndex: widget lastVisibleRowIndex-======-computeNumberOfRowsAndColumns  numRows := 0.  numColumns := 0.  self allGridConstraints do: [:each |  numRows := numRows max: each row + each rowSpan - 1.        numColumns := numColumns max: each column + each columnSpan - 1 ]-======-list1  ^list1-======-newMenuBar  ^self instantiate: SpMenuBarPresenter-======-vRigid  self subclassResponsibility-======-preferedPaneColor  ^preferedPaneColor value-======-whenTextChanged: aBlock  self deprecated: 'Use #whenTextChangedDo: instead.' transformWith: '`@receiver whenTextChanged: `@statement' -> '`@receiver whenTextChangedDo: `@statement'.  self whenTextChangedDo: aBlock-======-setX: xValue setY: yValue  x := xValue.  y := yValue-======-contextMenu: aValuable  contextMenu := aValuable-======-initializePresenters  element11 := self newMorph morph: (Morph new color: Color red).  element21 := self newMorph morph: (Morph new color: Color green).  element12 := self newMorph morph: (Morph new color: Color blue).  element22 := self newMorph morph: (Morph new color: Color yellow).  borderWidth := self newSlider     beHorizontal;     min: 0;     max: 100.  columnSpacing := self newSlider     beHorizontal;     min: 0;     max: 100.  rowSpacing := self newSlider     beHorizontal;     min: 0;     max: 100.  columnHomogeneous := self newCheckBox label: 'Column is homogeneous'.  rowHomogeneous := self newCheckBox label: 'Row is homogeneous'.  self announcer when: SpWidgetBuilt send: #widgetBuilt: to: self-======-classToTest  ^SpNumberInputFieldPresenter-======-classToTest  ^SpCodePresenter-======-chooseDateButton  ^chooseDateButton-======-testDoesNotUnderstand  | block |  themeDecorator property: #foo returnsValueOf: 42.  self assert: themeDecorator foo equals: 42.  block := [ 42 ].  themeDecorator property: #fooBlock returnsValueOf: block.  self assert: themeDecorator fooBlock equals: 42.  block := [:x |  x + 42 ].  themeDecorator property: #fooBlock: returnsValueOf: block.  self assert: (themeDecorator fooBlock: 3) equals: 45-======-pageClass  ^SpDemoDynamicMemoryGamePresenter-======-selectItem: anItem  self selectionMode selectItem: anItem-======-heterogeneousDropList  ^heterogeneousDropList-======-action  ^self model action-======-testWhenTextChangesRaisesSingleEvent  self assertWith: [:times |  times = 1 ] timesRaisedEvent: #whenTextChangedDo: inPresenter: presenter whenDoing: [ presenter text: 'test' ]-======-setIndex: anIndex  ^self dropList setIndex: anIndex-======-listSize  ^self model listSize-======-bePassword: aBoolean  isPassword := aBoolean-======-initialize  self class initializeSlots: self.  super initialize.  ticks := 0.  highestValue := Float negativeInfinity.  lowestValue := Float infinity.  stepBy := 1-======-keyStroke: aKeyStroke  keyStroke value cull: aKeyStroke-======-performSearch: item matching: pattern  ^searchBlock value: item value: pattern-======-observablePropertyNamed: aName  | slot |  slot := self class slotNamed: aName.  slot isObservableSlot ifFalse: [ SpNonObservableSlotError signal: aName ].  ^slot rawRead: self-======-add: aPresenter constraints: constraints  self widgetDo: [:aPanel |  self basicAdd: aPresenter constraints: constraints to: aPanel ]-======-type: aString  aString do: [:each |  self keyPressed: each asciiValue shift: each isUppercase meta: false control: false option: false ]-======-notifyError: aSpecNotification  GrowlMorph openWithLabel: 'Error' contents: aSpecNotification message backgroundColor: GrowlMorph theme dangerBackgroundColor labelColor: GrowlMorph theme textColor-======-addSplitter  self commands add: (SpSplitterVertical commands: self commands)-======-testPresentersBlockReceivesAthensCanvas  | receivedCanvas |  self presenter drawBlock: [:canvas |  receivedCanvas := canvas ].  self adapter redraw.  self openInstance.  1 second wait.  self assert: receivedCanvas isNotNil.  self assert: (receivedCanvas isKindOf: AthensCanvas)-======-protocolListAction  protocolList transmitTo: methodList transform: [:selectedProtocol |  selectedProtocol ifNotNil: [ (selectedProtocol methodSelectors collect: [:methodSelector |  self methodNamed: methodSelector ]) asOrderedCollection ] ifNil: [ #() ] ] postTransmission: [:methodPresenter |  methodPresenter selectIndex: 1 ]-======-visiblePages  ^layout visiblePages-======-selectedClass  ^self selectedMethod origin-======-classToTest  ^SpTreeTablePresenter-======-initializePresenters  menu := self mainMenu.  list := self newList.  page := self instantiate: (selectedPage := self availablePages first).  menu applyTo: self.  list     items: self availablePages;     display: [:item |  item pageName ];     contextMenu: (self newMenu           addItem: [:item |  item                 name: 'Browse';                 icon: (self iconNamed: #smallHelp);                 action: [ list selectedItem browse ] ];           addItem: [:item |  item                 name: 'Browse presenter';                 icon: (self iconNamed: #smallHelp);                 action: [ list selectedItem new pageClass browse ] ];           yourself).  self focusOrder     add: list;     add: page-======-searchText: aString  | search |  aString isEmptyOrNil ifTrue: [ ^#() ].  search := aString trimBoth asLowercase.  ^Array streamContents: [:stream |  self elements withIndexDo: [:each :rowIndex |  (self model performSearch: each matching: search) ifTrue: [ stream nextPut: rowIndex ] ] ]-======-whenActionPerformedDo: aBlock  self property: #actionPerformed whenChangedDo: aBlock-======-testSelectAll  self initializationText.  self openInstance.  presenter selectAll.  self assert: presenter selectionInterval equals: (1 to: 15)-======-explore: anObject  ^self class explore: anObject-======-displayMode  ^displayMode-======-doItContext  self deprecated: 'This has been moved to specific presenters (check children)' on: '2019-04-15' in: #Pharo8-======-initializePresenters  listModel := self newTable.  listModel     sortingBlock: [:a :b |  self sortClassesInCachedHierarchy: a b: b ];     addColumn: (SpStringTableColumn title: 'Location' evaluated: [:item |  self locationOf: item ]);     addColumn: (SpStringTableColumn title: 'Selector' evaluated: [:item |  self selectorOf: item ]);     addColumn: (SpStringTableColumn title: 'Package' evaluated: [:item |  self packageOf: item ]);     beResizable.  self contextMenu: self messageListMenu-======-content: aWidgetClass  subwidget := self instantiate: aWidgetClass.  self focusOrder add: subwidget-======-initialize  | isChanging |  super initialize.  isHorizontal := true.  marks := OrderedCollection new.  max := 100.  min := 0.  quantum := 1.  value := 0.  absoluteValue := 0.  label := ''.  isChanging := false.  self whenMaxChangedDo: [:m |  self changed: {#max: .               m} ].  self whenMinChangedDo: [:m |  self changed: {#min: .               m} ].  self whenQuantumChangedDo: [:m |  self changed: {#quantum: .               m} ].  self whenValueChangedDo: [:v |  isChanging ifFalse: [ isChanging := true.              self absoluteValue: (self valueToAbsoluteValue: v).              self changed: {#scaledValue: .                     v}.              isChanging := false ].        self changed: #value ].  self whenAbsoluteValueChangedDo: [:v |  isChanging ifFalse: [ isChanging := true.              self value: (self absoluteValueToValue: v).              self changed: {#value: .                     v}.              isChanging := false ] ].  self whenLabelChangedDo: [:v |  self changed: #label ]-======-testPresenterTextIsSetInWidget  presenter text: 'something'.  self assert: self widget text equals: 'something'-======-fieldPlaceholderText: anObject  fieldPlaceholderText := anObject-======-hasFilter  ^self widget hasFilter-======-initialize  super initialize.  onlyStrong := false-======-indeterminated: anObject  indeterminated := anObject-======-title: aString  self widgetDo: [:w |  w setLabel: aString ]-======-icon  ^self presenter icon ifNil: [ self defaultIcon ]-======-setUp  super setUp.  presentersBuilder := SpDynamicPresentersListBuilder new     modelObjects: (1 to: 14);     presenter: SpButtonPresenter configuredAs: [:button :i |   ];     buildDynamicPresenter;     yourself.  layout := SpDynamicLeftToRightColumnsLayout columns: 7-======-action: anObject  action := anObject-======-applyTo: aModel  aModel applyMenuModel: self-======-browseValue  ^self value browse-======-testSettingNilResetsSelection  self presenter selectItem: 10.  self presenter selectItem: nil.  self assert: self presenter selectedItem equals: nil.  self assert: self adapter selectedIndexes isEmpty-======-isComposite  ^true-======-headerColumn: column  | headerMorph |  column id ifNil: [ ^nil ].  headerMorph := SpHeaderCellMorph new     addMorph: column id asMorph asReadOnlyMorph;     yourself.  column isSortable ifTrue: [ headerMorph eventHandler: (MorphicEventHandler new on: #click send: #sortByColumn:event:morph: to: self withValue: column) ].  ^headerMorph-======-ghostText: aText  self deprecated: 'This API is too tight to Morph. Use #placeholder: instead.' transformWith: '`@receiver ghostText: `@statement' -> '`@receiver placeholder: `@statement'.  self placeholder: aText-======-openInstance  backendForTest openInstanceOf: self-======-testUnselectSelectedItemRemovesItFromSelectionList  presenter     selectItem: 10;     unselectItem: 10.  self assert: presenter selection isEmpty-======-execute  self editor paste-======-externalIndex: anObject  externalIndex := anObject-======-update: aParameter  self changed: aParameter-======-= anObject  ^super = anObject and: [ instVarName = anObject instVarName ]-======-testSelectIndexesOutsideRangeHasNoSelectedItems  presenter selectIndexes: {4 .         5}.  self assert: presenter selection selectedItems isEmpty-======-whenMenuChangedDo: aBlock  self property: #contextMenu whenChangedDo: aBlock-======-maximize  self changed: #maximize with: #()-======-sortingBlock: aBlock  listModel sortingBlock: aBlock-======-textConverter: aTextConverter  textConverter := aTextConverter method: self textConverter method-======-menu: aMenu shifted: aBoolean  | menu |  (self allowMenuOnNoItem not and: [ self selectedItems isEmpty ]) ifTrue: [ ^nil ].  menuBlockHolder value ifNil: [ ^nil ].  menuBlockHolder value isBlock ifFalse: [ ^menuBlockHolder value ].  menu := SpMenuPresenter new.  menuBlockHolder value cull: menu cull: aBoolean.  ^menu-======-ensureKeyBindingsFor: widget  super ensureKeyBindingsFor: widget.  self shortcut ifNotNil: [:s |  self registerShortcut: s ]-======-cellColumn: column row: rowIndex  | displayValue cell item |  item := self model itemAt: rowIndex.  displayValue := column readObject: item.  cell := FTCellMorph new     cellInset: 5;     yourself.  self model hasIcons ifTrue: [ (self model iconFor: item) ifNotNil: [:icon |  cell addMorphBack: icon asMorph ] ].  cell addMorphBack: displayValue asMorph asReadOnlyMorph.  ^cell-======-giveFocusToNextFrom: aModel  ^self model giveFocusToNextFrom: aModel-======-properties  ^self styles select: [:each |  each isStyleProperty ]-======-emptyList  ^self dropList emptyList-======-open: anObject  object := anObject.  self open-======-testTickIncrementsOne  timeline tick.  self assert: timeline ticks equals: 1-======-childrenWidgets  ^widget submorphs first submorphs , widget submorphs second submorphs-======-copyClass: aClass from: source to: destination  destination absorbClass: aClass name from: source-======-methodModified: anAnnouncement  UIManager default defer: [ self handleMethodModified: anAnnouncement ]-======-action: aBlock  action := aBlock-======-listElementAt: anIndex  ^self model at: anIndex ifAbsent: [ nil ]-======-testUnselectAllUnselectsSingleSelection  presenter     selectPath: #(1 1);     unselectAll.  self assert: presenter selection isEmpty-======-items  ^items value-======-model  ^model-======-valueToAbsoluteValue: v  ^((v - self min) / (self max - self min)) asFloat-======-testSelectItemSetsSelectedPath  presenter selectItem: 20.  self assert: presenter selection selectedPath equals: #(1 1 3)-======-initialize  super initialize-======-label  ^self presenter label-======-testWhenDaySelectedBlock  | blockExecuted d |  blockExecuted := false.  d := Date year: 2018 month: 9 day: 15.  calendar     adaptToDate: d;     whenDaySelectedBlock: [ blockExecuted := true ].  self deny: blockExecuted.  calendar daysButtons basicPresenters value values first performAction.  self assert: blockExecuted-======-propertyAt: aKey put: aValue  ^self properties at: aKey put: aValue-======-testSelectItemAddsPathToSelectedPathList  presenter selectItem: 10.  self assert: (presenter selection includesPath: #(1 3))-======-adapterName: anObject  adapterName := anObject-======-testSetSelectIndexRaisesSelectionChangeEventWithSelectedIndex  | selectedIndexes |  presenter whenSelectionChangedDo: [:selection |  selectedIndexes := selection selectedIndexes ].  presenter selectIndex: 1.  self assert: (selectedIndexes includes: 1)-======-testRebuildPresenterBeforeOpeningWorks  self assert: presenter label label equals: ''.  self shouldnt: [ presenter selectFirstElement.        self openInstance ] raise: Error.  self assert: presenter label label equals: '1'-======-calculateExtentFor: aMorph constraint: constraint computation: computation  | cellExtent height width |  cellExtent := computation cellExtentAt: constraint position.  width := self calculateWidthFor: aMorph base: cellExtent x.  height := self calculateHeightFor: aMorph base: cellExtent y.  ^width @ height-======-buildWidget  ^SpTickingSpecWindow new     model: self;     isResizeable: self isResizeable;     yourself-======-placeholder  ^self model placeholder-======-testSelectInvalidPathHasNoSelectedPaths  presenter selectPath: #(4).  self assert: presenter selection selectedPaths isEmpty-======-testSelectMultipleIndexesAddsAllToSelectedIndexList  presenter selectIndex: 1.  presenter selectIndex: 3.  self assert: (presenter selection includesIndex: 1).  self assert: (presenter selection includesIndex: 3)-======-canResize  ^resize-======-extent: aPoint  | newExtent |  newExtent := aPoint rounded.  (bounds extent closeTo: newExtent) ifTrue: [ ^self ].  self invalidRect: bounds.  bounds := bounds topLeft extent: newExtent.  self layoutChanged.  self invalidRect: bounds-======-testSelectPresenterItemSetsSelectedIndexInWidget  self skip-======-dispatchTo: aNotificationCenter  ^aNotificationCenter notify: self-======-add: aName withConstraints: aBlock  | constraints |  constraints := self constraintsClass new.  aBlock value: constraints.  children at: aName put: constraints-======-differentCardsCountSlider  ^differentCardsCountSlider-======-initialize  needRecalculatePages := false.  super initialize-======-testRemovePage  | page |  presenter addPage: (page := SpNotebookPage title: 'Mock3' provider: [ SpLabelPresenter new ]).  self assert: self adapter numberOfTabs equals: 3.  presenter removePage: page.  self assert: self adapter numberOfTabs equals: 2-======-initialize  super initialize.  self     name: 'Inspect';     description: 'Inspect the context of this command.'-======-activateOnSingleClick  activateOnSingleClick := true-======-refreshPrintDescription  self printDescription: self selectedElement-======-clicked  widget toggleSelected-======-sliceButton  ^sliceButton-======-defaultWindowPresenterClass  ^SpTickingWindowPresenter-======-initialize  super initialize.  type := #SpContainerPresenter.  self commands: OrderedCollection new-======-displaySymbol  ^displaySymbol ifNil: [ #printString ]-======-initializeWindow: aWindowPresenter  aWindowPresenter     title: 'Grid layout example';     initialExtent: 300 @ 400-======-itemNamed: aString  ^self items detect: [:e |  e label = aString ]-======-fieldPlaceholderText  ^fieldPlaceholderText-======-icon: anIcon  icon := anIcon-======-addVariableFields: elements  self tempNames withIndexDo: [:name :index |  elements add: (ContextTempEyeElement host: self object tempName: name tempIndex: index) ]-======-shown: anObject  ^shown := anObject-======-presenterProvider: aBlock  presenterProvider := aBlock-======-classToTest  ^SpListPresenter-======-add: aBlock withSpec: aSpec left: aNumber  self add: aBlock withSpec: aSpec top: nil bottom: nil left: aNumber right: nil-======-preview  ^preview-======-initializeDialogWindow: aDialog  super initializeDialogWindow: aDialog.  aDialog     initialExtent: 600 @ 400;     title: 'Select a method';     closeOnBackdropClick: false-======-deselect  self widgetDo: [:w |  w changed: #deselect.        w model selectionChanged.        w dependents do: [:e |  e changed ] ]-======-newTable  ^self instantiate: SpTablePresenter-======-newColumnFrom: aTableColumn  ^(SpMorphicTableColumn on: aTableColumn)     width: aTableColumn width;     yourself-======-extent  ^transformationMorph extent-======-runCase  self resources do: [:each |  each availableFor: self ].  [ super setUp.  self performTest ] ensure: [ self tearDown.        self cleanUpInstanceVariables ]-======-listModel  ^listModel-======-badgeColor  ^self theme badgeColor-======-whenSelectionChangedDo: aBlock  selection whenChangedDo: aBlock-======-initialize  super initialize.  action := [  ].  displayBlock := [:e |  e asString ]-======-presenterAt: aName ifAbsent: aBlock  ^self basicPresenters at: aName ifAbsent: [ [ self readSlotNamed: aName ] on: SlotNotFound do: aBlock ]-======-classToTest  ^SpToolBarPresenter-======-password  ^password-======-styles  ^styles-======-isEnabled  ^enabled-======-setUp  super setUp.  timeline := SpTimeline new-======-initializeTestedInstance  presenter-======-testUnselectSelectedItemRaisesSingleEvent  | counter |  counter := 0.  presenter     selectItem: 10;     whenSelectionChangedDo: [ counter := counter + 1 ];     unselectItem: 10.  self assert: counter equals: 1-======-bindKeyCombination: aKMCombination toAction: aBlock  -======-connectPresenters  self packageListAction.  self classListAction.  self protocolListAction.  self radioButtonsAction.  packageList selectIndex: 1-======-testSetRootModelPushesPresenterToList  self presenter presenterBlock: [:model |  SpNullMillerPresenter on: (SpLabelPresenter new label: model asString) ].  self presenter setRootModel: 1.  self assert: self presenter size equals: 1-======-addModelItemsToWindowMenu: aMenu  self model addMenuItemsToWindowMenu: aMenu-======-initializeTestedInstance  presenter items: #(10 20 30)-======-value  ^self host tempNamed: self tempName-======-addVariableFields: elements  self variableFieldsToShow do: [:index |  elements add: (IndexedEyeElement host: self object index: index) ]-======-addItemTo: aGroup  aGroup addItem: [:item |  item           name: 'Dynamic';           icon: (self iconNamed: #delete);           action: [ aGroup menuItems remove: item.              self needRebuild: false.              self buildWithSpec ] ].  self needRebuild: false.  self buildWithSpec-======-setUp  super setUp.  presenter items: #(10 20 30)-======-basicAdd: aPresenter constraints: constraints to: aPanel  self subclassResponsibility-======-numberType  ^numberType-======-placeholder  ^placeholder-======-traverseInFocusOrderDo: aBlock excluding: excludes  self canTakeKeyboardFocus ifFalse: [ ^self ].  excludes add: self.  aBlock value: self-======-color  ^color-======-buildPushMessageToolBarItem  ^SpToolBarButton new     label: 'Push';     icon: (self iconNamed: #glamorousUp);     help: 'Push a new status bar message';     action: [ self pushMessage ];     yourself-======-testActivateSubPresenterPushesElementToList  | mock |  self presenter presenterBlock: [:model |  mock := SpMockMillerPresenter new ].  self presenter setRootModel: 1.  mock activate.  self assert: self presenter size equals: 2-======-rightClicked  | evt |  evt := MouseButtonEvent new setType: nil position: widget center which: MouseButtonEvent yellowButton buttons: MouseButtonEvent yellowButton hand: nil stamp: nil.  (widget handlesMouseDown: evt) ifTrue: [ widget mouseDown: evt.        widget mouseUp: evt ]-======-initializeTestedInstance  super initializeTestedInstance.  presenter addColumn: (SpStringTableColumn evaluated: [:e |  e ])-======-refresh  self needRebuild: false.  self buildWithSpec-======-testSubscriptionsAreTransfered  | count |  count := 0.  presenter beSingleSelection.  presenter whenSelectionChangedDo: [ count := count + 1 ].  presenter beMultipleSelection.  presenter selectIndex: 2.  self assert: count equals: 1-======-styles  ^styles-======-buildWidget  | newWidget |  newWidget := super buildWidget.  self presenter whenTextStylerChangedDo: [ self applyTextStyle ].  ^newWidget-======-initializePresenter  self property: #object whenChangedDo: [ self objectChanged ].  text whenBuiltDo: [:w |  self text behavior: self object class ].  self initializeShortcuts-======-connectPresenters  -======-foundIcon  ^self iconNamed: #glamorousAccept-======-whenReadSelectionIsChangedDo: aBlock  self property: #readSelection whenChangedDo: aBlock-======-isSplitter  ^true-======-selected  ^selected value-======-classToTest  ^SpButtonPresenter-======-triggerOkAction  -======-title  ^'Pointers to: ' , self object printString-======-color  ^color ifNil: [ Color transparent ]-======-canDeselectByClick: aBoolean  self deprecated: 'It is not clear what option to select if deselected'-======-window  ^window-======-behavior: aClass  self deprecated: 'This method is an horrible hack because the VersionBrowser was using Code or Diff presenter but was only using the API of the Code presenter... This method and other methods from the CodePresenter API will be removed.'.  self contextClass: aClass-======-onDesactivation: anObject  onDesactivation := anObject-======-menu  ^tree menu-======-itemAtPath: aPath expanding: shouldExpandItems  | item |  (aPath isNil or: [ aPath isEmpty ]) ifTrue: [ ^nil ].  item := self rootItem.  aPath do: [:index |  (shouldExpandItems and: [ item isRoot not ]) ifTrue: [ item expand ].        item children size < index ifTrue: [ ^nil ].        item := item children at: index ].  ^item-======-testUnselectNonSelectedItemRaisesNoEvent  | counter |  counter := 0.  presenter     selectItem: 10;     whenSelectionChangedDo: [ counter := counter + 1 ];     unselectItem: 20.  self assert: counter equals: 0-======-topLeftOffset: aPoint  topOffset := aPoint y.  leftOffset := aPoint x-======-initializeAnnouncements  SystemAnnouncer uniqueInstance weak when: ClassAdded , ClassCommented , ClassRecategorized , ClassModifiedClassDefinition , ClassRemoved , ClassRenamed , ClassReorganized , MethodAdded , MethodModified , MethodRecategorized , MethodRemoved , ProtocolAdded , ProtocolRemoved send: #updateClassesList to: self-======-inspectionMenu: aMenu  self hasSelectedObject ifFalse: [ ^aMenu ].  ^super inspectionMenu: aMenu-======-connectPresenters  button1 whenActivatedDo: [ self updateLabel ].  button1 whenDeactivatedDo: [ self updateLabel ].  button2 whenChangedDo: [ self updateLabel ].  button3 whenChangedDo: [ self updateLabel ]-======-testHideColumnHeadersInPresenterHidesThemInWidget  self presenter hideColumnHeaders.  self deny: self adapter isShowColumnHeaders-======-method4  -======-initializeSemaphore  uiWaitingSemaphore := Semaphore new-======-isResizeable  ^self model isResizeable-======-testReplaceItemList  | changed |  changed := false.  presenter whenModelChangedDo: [ changed := true ].  presenter items: #(a b c).  self assert: (presenter model collection collect: #label) equals: #(a b c).  self assert: changed-======-testColumnNotHomogeneousDiferentRowsAndColumns  | layout |  self place: label1 at: 1 @ 1.  self place: morph1 at: 2 @ 2.  self place: label2 at: 3 @ 3.  self place: morph2 at: 4 @ 4.  layout := self newLayout.  layout layout beColumnNotHomogeneous.  (self styleExtent: 30 @ 20) applyTo: label1.  (self styleExtent: 40 @ 20) applyTo: morph1.  (self styleExtent: 50 @ 20) applyTo: label2.  (self styleExtent: 60 @ 20) applyTo: morph2.  layout layout: panel in: (0 @ 0 corner: 100 @ 100).  self assert: label1 bounds equals: (0 @ 0 corner: 30 @ 20).  self assert: morph1 bounds equals: (30 @ 20 corner: 70 @ 40).  self assert: label2 bounds equals: (70 @ 40 corner: 120 @ 60).  self assert: morph2 bounds equals: (120 @ 60 corner: 180 @ 80)-======-testAddPresenterToComponentListShouldNotBeEmpty  presenter addPresenter: SpButtonPresenter new.  self deny: presenter isEmpty-======-removeAll  pagesHolder removeAll-======-testSetSelectItemRaisesSelectionChangeEventWithSelectedPath  | selectedPath |  presenter whenSelectionChangedDo: [:selection |  selectedPath := selection selectedPath ].  presenter selectItem: 20.  self assert: selectedPath equals: #(1 1 3)-======-initializePresenters  text := self newText.  sideRuler := self newMorph.  sideRuler morph: (Morph new           color: Color yellow;           extent: 50 @ 500;           useGradientFill;           hResizing: #spaceFill;           vResizing: #spaceFill;           yourself).  text whenScrollValueChangedDo: [:newPosition |  self syncMorphPosition ].  text text: self loremIpsum-======-buildWidget  | panelMorph |  panelMorph := SpToolBarMorph new.  self addModelTo: panelMorph.  ^panelMorph-======-testContextMenu  | menu changed |  self assert: presenter contextMenu isNil.  menu := SpMenuPresenter new.  changed := false.  presenter whenMenuChangedDo: [ changed := true ].  presenter contextMenu: menu.  self assert: presenter contextMenu equals: menu.  self assert: changed-======-width  ^width-======-transferSubscriptionsTo: anotherSelectionMode  self selectionHolder transferSubscriptionsTo: anotherSelectionMode selectionHolder-======-addPresenter: newSubPresenter  newSubPresenter whenActivatedDo: [:selection |  self changeSelection: selection selectedItem from: newSubPresenter ].  newSubPresenter owner: self.  layout add: newSubPresenter-======-asArray  ^specArray-======-testFocusRotationForward  mock := SpMockFocusOrderPresenter new     openWithSpec;     yourself.  self takeKeyboardFocus: mock.  self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter.  self pressTab.  self assert: (mock presenterAt: #secondPresenter) equals: self focusedPresenter.  self pressTab.  self assert: (mock presenterAt: #thirdPresenter) equals: self focusedPresenter.  self pressTab.  self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter-======-whenMarksChangedDo: aBlock  self property: #marks whenChangedDo: aBlock-======-whenSelectionChanged: aBlock  self dropList whenSelectionChanged: aBlock-======-font  ^self model font-======-id  ^self model title-======-initializePresenters  classListPresenter := self newList.  methodListPresenter := self newList.  textPresenter := self newCode.  textPresenter acceptBlock: [:t |  methodListPresenter selectedItem inspect ].  methodListPresenter display: #selector.  self focusOrder     add: classListPresenter;     add: methodListPresenter;     add: textPresenter-======-initialize  super initialize.  maxLength := 0.  acceptOnCR := true.  isPassword := false.  self whenAcceptOnCRChangedDo: [:bool |  self changed: #acceptOnCR: with: {bool} ]-======-text  ^text-======-itemFilterBlock: aBlock  self deprecated: 'Use #itemFilter: instead' transformWith: '`@receiver itemFilterBlock: `@statements1' -> '`@receiver itemFilter: `@statements1'.  ^self itemFilter: aBlock-======-testNotPasswordIsSetInWidget  presenter bePassword: false.  self deny: self adapter isPassword-======-toolbarItemFont  ^toolbarItemFont ifNil: [ toolbarItemFont := self newToolbarItemFont ]-======-testUnselectWidgetIndexRaisesSelectionIndexChangeEventWithSelectedIndex  | selectedIndex |  self adapter selectIndex: 1.  presenter selection whenChangedDo: [:selection |  selectedIndex := selection selectedIndex ].  self adapter selectIndex: 0.  self assert: selectedIndex equals: 0-======-setText: text to: aWidget  super setText: (self presenter textStyler applyStyleTo: text) to: aWidget-======-openChangeSetBrowser  | cs |  self selectedChangeSet ifNil: [ ^self inform: 'No change set selected' ].  cs := self selectedChangeSet ifNil: [ ^self ].  ^Smalltalk tools messageList browseClasses: (RBBrowserEnvironment new forClasses: cs changedClasses)-======-action  ^action-======-rightText  ^rightText-======-isMultipleSelection  ^selectionMode isMultipleSelection-======-widget: anObject  widget := anObject-======-displayBlock  ^self model displayBlock-======-contextKeyBindings: aKMCategory  contextKeyBindings := aKMCategory-======-label: aString  ^label := aString-======-showAllInstVars  ^self class showAllInstVars-======-testSelectWidgetIndexRaisesSelectionIndexChangeEventWithSelectedIndex  | selectedIndex |  presenter selection whenChangedDo: [:selection |  selectedIndex := selection selectedIndex ].  self adapter selectIndex: 1.  self assert: selectedIndex equals: 1-======-normalFillStyle  ^Color transparent-======-clearFilterButton: anObject  clearFilterButton := anObject-======-daysToDisplayCount  ^self maxNumberOfWeeksToDisplay * self daysInAWeek-======-open: aPresenter withSpecLayout: aSpecLayout  ^self open: aPresenter withSpecLayout: aSpecLayout using: aPresenter defaultWindowPresenterClass-======-styleName  ^'toolBar.label'-======-handlesDoubleClick: aBoolean  handlesDoubleClick := aBoolean-======-adaptToDate: aDate  self monthYearLabel label: aDate month asString.  self previousMonthButton action: [ self adaptToDate: aDate onPreviousMonth ].  self nextMonthButton action: [ self adaptToDate: aDate onNextMonth ].  self newDynamicPresentersListIn: #namesOfDaysLabels usingBuilder: self daysLabelsBuilder.  self newDynamicPresentersListIn: #daysButtons usingBuilder: (self daysButtonsBuilderFrom: aDate)-======-autoAccept: aBoolean  ^self sliderInput autoAccept: aBoolean-======-applyTo: aMorph  self color ifNotNil: [:aColor |  aMorph color: aColor ].  self backgroundColor ifNotNil: [:aColor |  aMorph backgroundColor: aColor ]-======-testUnselectAllInWidgetNotRaisesEmptySelectionChangeEvent  | gotSelection |  presenter selection whenChangedDo: [:selection |  gotSelection := selection ].  self adapter selectIndex: 0.  self assert: gotSelection isNil-======-application: anApplication  application := anApplication-======-initializePresenters  form := (self instantiate: SpDemoLabeledContainer)     label: 'form';     subwidget: (self instantiate: SpDemoStandaloneFormPresenter on: self announcingObject).  resultPane := (self instantiate: SpDemoLabeledContainer)     label: 'result';     subwidget: (table := self newTable).  table     addColumn: (SpStringTableColumn title: 'Name' evaluated: #key);     addColumn: (SpStringTableColumn title: 'Value' evaluated: #value);     items: self model elements;     beResizable.  self focusOrder     add: form;     add: table-======-doActivateAtIndex: index  self presenters at: index ifAbsent: [ ^self ].  activationBlock cull: ((SpSingleSelectionMode on: self)           basicSelectIndex: index;           yourself)-======-from: aPresenter port: aSymbol to: anotherPresenter transform: aValuable  self from: aPresenter port: aSymbol to: anotherPresenter transform: aValuable postTransmission: nil-======-sliders  ^sliders-======-newSplitter  ^SpPanedResizerMorph newVertical-======-presenterAt: aName ifAbsent: aBlock  ^self basicPresenters at: aName ifAbsent: [ [ self readSlotNamed: aName ] on: SlotNotFound do: aBlock ]-======-add: aBlock withSpec: aSpec top: top bottom: bottom  self add: aBlock withSpec: aSpec top: top bottom: bottom left: nil right: nil-======-whenResizingDo: aBlock  self announcer when: WindowResizing do: aBlock-======-searchValueOf: item  ^self displayValueOf: item-======-specInitializationStrategy: aStrategy  specInitializationStrategy := aStrategy-======-step  self objectChanged-======-updateText  self text: self text-======-whenAutoDeselectChangedDo: aBlock  self deprecated: 'Should not use. This feature is not supported anymore'.  self property: #autoDeselect whenChangedDo: aBlock-======-allSelectedItems  | result |  result := OrderedCollection new.  self selected ifTrue: [ result add: self ].  self children value do: [:e |  result addAll: e allSelectedItems ].  ^result-======-beForText  self deprecated: 'The forCode functionality has moved to TextCodePresenter, please use it instead TextPresenter.' on: '2019-04-05' in: #Pharo8-======-strongSelectionChanged: aFTStrongSelectionChanged  self presenter activatesOnDoubleClick ifFalse: [ ^self ].  self presenter doubleClickAtIndex: aFTStrongSelectionChanged selectedIndex-======-testSelectMultipleIndexesRaisesSelectionChangeEventMultipleTimes  | events |  events := 0.  presenter whenSelectionChangedDo: [:selection |  events := events + 1 ].  presenter selectIndex: 1.  presenter selectIndex: 3.  self assert: events equals: 2-======-whenBorderWidthChanged: aBlock  self deprecated: 'Use #whenBorderWidthChangedDo: instead.' transformWith: '`@receiver whenBorderWidthChanged: `@statements' -> '`@receiver whenBorderWidthChangedDo: `@statements'.  self whenBorderWidthChangedDo: aBlock-======-selectedIndexes  | selectedIndex |  selectedIndex := self widget getCurrentSelectionIndex.  ^selectedIndex = 0 ifTrue: [ #() ] ifFalse: [ {selectedIndex} ]-======-searchMatching: aBlock  searchBlock := aBlock.  self enableSearch-======-adapterName  ^#GridAdapter-======-preserveLayoutPosition  self owner layoutPolicy preservePositionProportionOn: self owner-======-selectedContacts  ^table selectedItems-======-beUnselected  self setSelection: false-======-classToTest  ^SpLabelledDropList-======-thumbnailMorph  ^self object taskThumbnailOfSize: self thumbnailSize-======-radioButtonInstanceSide  ^radioButtonInstanceSide-======-genderLabel: anObject  genderLabel := anObject-======-selectPage: aPage  self widgetDo: [:w |  w page: (w pageWithModel: aPage) ]-======-whenActivatedDo: aBlock  activationBlock := aBlock-======-defaultInitialExtent  ^400 @ 300-======-close  self widget ifNotNil: [:w |  w close ]-======-addLazyPage: aBlock label: aStringOrMorph  self addLazyPage: aBlock label: aStringOrMorph collapsable: false-======-rightClicked  | evt |  evt := MouseButtonEvent new setType: nil position: widget center which: MouseButtonEvent yellowButton buttons: MouseButtonEvent yellowButton hand: nil stamp: nil.  self widget click: evt-======-state  ^state-======-whenIconChangedDo: aBlock  self property: #icon whenChangedDo: aBlock-======-doubleClickFirstRowAndColumn: anAdapter  self waitUntilUIRedrawed.  anAdapter widget doubleClick: (MouseEvent new           setPosition: anAdapter widget submorphs first submorphs first bounds center;           yourself)-======-notifyPropertyChanged: aName  self flag: #todo.  (self observablePropertyNamed: aName) valueChanged-======-initializeWidgets  input := self instantiate: SpTextInputFieldPresenter.  dropList := self instantiate: SpDropListPresenter.  self focusOrder     add: input;     add: dropList-======-modelChanged  table items: self model elements-======-browseSubMenu: aMenu  aMenu addGroup: [:aGroup |  aGroup addItem: [:anItem |  anItem                 name: 'Browse Full';                 action: [ self browseSelectedObject ];                 shortcut: PharoShortcuts current browseShortcut ].        aGroup addItem: [:anItem |  anItem                 name: 'Browse Class';                 action: [ self browseSelectedObjectClass ] ].        aGroup addItem: [:anItem |  anItem                 name: 'Browse Hierarchy';                 action: [ self browseSelectedObjectClassHierarchy ];                 shortcut: $h meta ] ]-======-presentersInFocusOrder  ^self presenters-======-unselectPath: aPath  self selection unselectPath: aPath-======-windowIsOpening  isClosed := false-======-size  ^self presenters size-======-extent  ^self widget extent-======-onActivation  ^onActivation-======-pageClass  ^SpDemoRadioButtonsPresenter-======-testShowColumnHeadersRaisesOneEventOnly  | count |  count := 0.  presenter whenShowColumnHeadersChangedDo: [ count := count + 1 ].  presenter showColumnHeaders.  self assert: count equals: 1-======-initializePresenters  layout := SpMillerLayout newHorizontal-======-property: aName whenChangedDo: aBlockClosure  (self observablePropertyNamed: aName) whenChangedDo: aBlockClosure-======-connectPresenters  textField acceptBlock: [:text |  self class environment at: text asSymbol ifPresent: [:class |  methodBrowser messages: class methods ] ifAbsent: [ methodBrowser messages: #() ] ]-======-calculateHomogeneousRowHeights  | rowHeight |  rowHeight := 0.  morphs do: [:each |  rowHeight := rowHeight max: (self minHeightOf: each) ].  ^Array new: numRows withAll: (self baseRowHeight max: rowHeight)-======-accept: text notifying: notifyer  ^self selectedMessage ifNotNil: [:message |  message methodClass compile: text classified: message protocol notifying: notifyer ]-======-initializePresenters  < script: 'self new openWithSpec'>  (button := self newButton)     label: 'Choice';     action: [ text text: text text , button label , String cr ].  menu := self newMenuButton     help: 'An example menu.';     menu: [ self newExampleMenu ];     yourself.  text := self newText-======-traverseInFocusOrderDo: aBlock excluding: excludes  self presentersInFocusOrder do: [:each |  each traverseInFocusOrderDo: aBlock excluding: excludes ]-======-= anObject  ^super = anObject and: [ index = anObject index ]-======-beExpand  self expand: true-======-stateSelector  ^self state ifNil: [ nil ] ifNotNil: [ #state ]-======-to: aPresenter  self toPort: aPresenter inputPortDefault-======-testSelectItemOutsideRangeUnsetsSelectedItem  presenter selectItem: 40.  self assert: presenter selection selectedItem equals: nil-======-setFocusOrder  self focusOrder     add: changeSorterLeft;     add: changeSorterRight-======-inspect: anObject  self object: anObject.  self list selectIndex: 1.  self refresh-======-updateMenu  -======-model: anObject  model := anObject.  model isSortable ifTrue: [ self sortableUsing: model sortFunction ]-======-newSearchInput  ^self instantiate: SpSearchInputFieldPresenter-======-icon  ^icon-======-aboutText  ^self model model ifNotNil: [:m |  m aboutText ]-======-footnoteIcon  ^footnoteIcon-======-updateView  table items: contactBook contents-======-shouldRefreshItem: item fromAnnouncement: anAnnouncement  ^refreshingBlock cull: item cull: anAnnouncement cull: self-======-includesPaths: aListOfPaths  ^selection includesAll: aListOfPaths-======-window  ^self hasWindow ifTrue: [ self root ] ifFalse: [ nil ]-======-leftFraction  ^layoutFrame leftFraction-======-selectedBehavior  self flag: #TODO.  ^self behavior-======-isShowColumnHeaders  ^widget isShowColumnHeaders-======-useProportionalLayout  -======-build  ^self buildDynamicPresenter     layout: self buildLayout;     yourself-======-testUnselectUnselectedPathRaisesNoSelectionEvent  | counter |  counter := 0.  presenter     selectPath: #(1 2);     whenSelectionChangedDo: [ counter := counter + 1 ];     unselectPath: #(2 2).  self assert: counter equals: 0-======-incomingTransmission: anObject from: outPort  self subclassResponsibility-======-testWhenNumberTypeChangedDo  | count result |  count := 0.  presenter whenNumberTypeChangedDo: [:value |  count := count + 1.        result := value ].  presenter beFloat.  self assert: count equals: 1.  self assert: result equals: Float-======-encrypted  ^self model isPassword-======-minus  ^minus-======-bottomFraction: anObject  bottomFraction := anObject-======-