method: arg1  method := arg1-======-taskbarIcon  ^self windowIcon ifNil: [ self presenter ifNil: [ super taskbarIcon ] ifNotNil: #taskbarIcon ]-======-label  ^self presenter label-======-selectedItems  | tmp1 tmp2 |  tmp1 := listPresenter listItems.  tmp2 := tmp1 collect: [:arg1 |  | tmp3 |        tmp3 := associationsWrapperToItem at: arg1 ifAbsent: [ nil ].        (tmp3 isNil or: [ arg1 state not ]) ifTrue: [ nil ] ifFalse: [ tmp3 ] ] thenSelect: [:arg1 |  arg1 notNil ].  ^tmp2-======-whenSelectedItemsChanged: arg1  self deprecated: 'Use #whenSelectionChangedDo: instead' transformWith: '`@receiver whenSelectedItemsChanged: `@argument' -> '`@receiver whenSelectionChangedDo: [ :selection | `@argument cull: selection selectedItems ]'.  self selection whenChangedDo: [:arg2 |  arg1 cull: arg2 selectedItems ]-======-adoptMenuItemModel: arg1 accumulator: arg2  arg1 subMenu ifNil: [ | tmp1 |        tmp1 := self buildButtonFor: arg1.        arg2 add: tmp1 ] ifNotNil: [ self emptyAccumulator: arg2.        widget addMorphBack: (self theme newToolSpacerIn: widget).        widget add: arg1 name font: self theme menuBarFont icon: arg1 icon help: arg1 description subMenu: arg1 subMenu buildWithSpecAsPopup.        widget addMorphBack: (self theme newToolSpacerIn: widget) ]-======-addPage: arg1 to: arg2  arg2 addLazyPage: [ self buildContentForPage: arg1 ] label: (self buildLabelForPage: arg1).  arg2 pages last model: arg1-======-spec: arg1  spec := arg1-======-widget  ^self adapter widget-======-display: arg1  ^self list display: arg1-======-listModel  self deprecated: 'It is not wise to allow external user access the content of a sub presenter. If this is accessed directly, the behavior should probably be moved to the MessageBrowser.'.  ^messageList listModel-======-hasContentToShow  ^self nodeModel hasContentToShow-======-testSelectPresenterItemSetsSelectedIndexInWidget  presenter selectItem: 20.  self assert: (self adapter selectedIndexes includes: 2)-======-testSubscriptionsAreTransfered  | tmp1 |  tmp1 := 0.  presenter beMultipleSelection.  presenter whenSelectionChangedDo: [ tmp1 := tmp1 + 1 ].  presenter beSingleSelection.  presenter selectIndex: 2.  self assert: tmp1 equals: 1-======-rememberMe: arg1  rememberMe := arg1-======-isOverlay  ^overlay = true-======-testStartsWithoutSelection  self assert: self adapter selectedItem equals: nil-======-fileOutClass: arg1 from: arg2  | tmp1 |  tmp1 := ChangeSet newChangeSet: arg1 name.  tmp1 ifNil: [ ^self ].  tmp1 absorbClass: arg1 name from: arg2.  tmp1 fileOut.  ChangeSet removeChangeSet: tmp1-======-open  self presenter windowIsOpening-======-leftOffset  ^layoutFrame leftOffset-======-testSelectManyIndexesKeepsLastSelectionInWidget  presenter selectIndex: 1.  presenter selectIndex: 2.  self assert: self adapter selectedIndexes equals: #(2)-======-testInitialSelectedTab  self assert: presenter selectedTab equals: nil.  presenter addTab: redTab.  self assert: presenter selectedTab equals: redTab.  presenter addTab: self redMorphTab.  self assert: presenter selectedTab equals: redTab-======-whenSelectionIndexChanged: arg1  self list whenSelectionIndexChanged: arg1-======-testDayBeforeMonthOf  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 9 day: 1)) equals: 6.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 9 day: 14)) equals: 6.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 9 day: 30)) equals: 6.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 10 day: 1)) equals: 1.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 10 day: 17)) equals: 1.  self assert: (calendar dayBeforeMonthOf: (Date year: 2018 month: 10 day: 30)) equals: 1-======-testSelectPathSetsSelectedItem  presenter selectPath: #(1 3).  self assert: presenter selection selectedItem equals: 10-======-initializeWindow  self presenter initializeWindow: self-======-morph  ^self widget-======-applyTo: arg1  -======-selectedPaths  ^selection-======-newText  ^self instantiate: SpTextPresenter-======-wantsVisualFeedback  ^wantsVisualFeedback-======-setFocus  self focusOrder     add: changesListPresenter;     add: classesListPresenter;     add: methodsListPresenter;     add: textPresenter-======-testActivationOnDoubleClickShouldActivateOnDoubleClick  | tmp1 |  tmp1 := nil.  presenter     activateOnDoubleClick;     whenActivatedDo: [:arg1 |  tmp1 := arg1 selectedItem ].  presenter doubleClickAtIndex: 1.  self assert: tmp1 equals: 10-======-aboutToStyle: arg1  self deprecated: 'Use #withSyntaxHighlight, #withoutSyntaxHighlight or #syntaxHighlight: instead.' transformWith: '`@receiver aboutToStyle: `@argument' -> '`@receiver syntaxHighlight: `@argument'.  self syntaxHighlight: arg1-======-execute  self evaluateSelectionAndDo: [:arg1 |  self inspectObject: arg1 ]-======-contextMenu  ^contextMenu-======-updatePresenter  self modelChanged-======-testIconNameFrom  self assert: command iconProvider equals: Smalltalk ui icons.  command iconName: #banana from: self.  self assert: command iconProvider equals: self.  self assert: command icon equals: self banana-======-resizerWidth  ^self model resizerWidth-======-whenCurrentActivatedChanged: arg1  self deprecated: 'Use #whenCurrentActivatedChangedDo: instead.' transformWith: '`@receiver whenCurrentActivatedChanged: `@statements' -> '`@receiver whenCurrentActivatedChangedDo: `@statements'.  self whenCurrentActivatedChangedDo: arg1-======-menuColumn: arg1 row: arg2  | tmp1 |  tmp1 := self model contextMenu.  tmp1 ifNil: [ ^nil ].  ^SpBindings value: self model application adapterBindings during: [ tmp1 value buildWithSpec ]-======-resizingSetSelector  ^layout isHorizontal ifTrue: [ #hResizing: ] ifFalse: [ #vResizing: ]-======-leftLabel  ^leftLabel-======-whenNumberTypeChangedDo: arg1  self property: #numberType whenChangedDo: arg1-======-setSelectedItem: arg1  self deprecated: 'Use #selectedItem: instead' transformWith: '`@receiver setSelectedItem: `@argument' -> '`@receiver selectedItem:`@argument'.  ^self selectedItem: arg1-======-oldPage: arg1  oldPage := arg1-======-registerClassShortcuts: arg1  arg1 bindKeyCombination: PharoShortcuts current browseShortcut toAction: [ self selectedClass ifNotNil: [ self browseMethodFull ] ].  arg1 bindKeyCombination: $d meta toAction: [ self selectedClass ifNotNil: [ self forgetClass ] ].  arg1 bindKeyCombination: PharoShortcuts current removeShortcut toAction: [ self selectedClass ifNotNil: [ self removeClass ] ]-======-action: arg1  action := arg1-======-presenterAt: arg1  ^self basicPresenters at: arg1-======-initialize  super initialize.  self withSyntaxHighlight.  self registerEventsForStyling.  self contextMenu: self buildCodeMenu.  self contextKeyBindings: self buildCodeKeyBindings-======-y: arg1  y := arg1-======-iconName: arg1  self icon: (self iconNamed: arg1)-======-pages  ^layout presenters-======-isMultipleSelection  ^true-======-whenCurrentlyActivatedChanged: arg1  self deprecated: 'Use #whenCurrentlyActivatedChangedDo: instead.' transformWith: '`@receiver whenCurrentlyActivatedChanged: `@statements' -> '`@receiver whenCurrentlyActivatedChangedDo: `@statements'.  self whenCurrentlyActivatedChangedDo: arg1-======-passenger  ^[ self model passenger ]-======-objectClassPage  ^SpNotebookPage title: 'Object class' icon: (self iconNamed: #nautilusIcon) provider: [ MessageBrowser new messages: Object methods ]-======-pathOfItem: arg1 root: arg2  arg2 isExpanded ifFalse: [ ^#() ].  (arg2 children includes: arg1) ifTrue: [ ^{(arg2 children indexOf: arg1)} ].  arg2 children withIndexDo: [:arg3 :arg4 |  | tmp1 |        tmp1 := self pathOfItem: arg1 root: arg3.        tmp1 ifNotEmpty: [ ^{arg4} , tmp1 ] ].  ^#()-======-askOkToClose  ^askOkToClose-======-expandAll  self changed: #expandAll with: #()-======-configureButton: arg1 item: arg2  self subclassResponsibility-======-buildWidget  ^SpTransferMorph new     model: self;     passenger: self passenger;     source: self source;     yourself-======-value  ^self presenter value-======-buildWidget  ^SpStubTreeView new-======-drawOn: arg1  | tmp1 |  tmp1 := self innerBounds.  arg1 fillRectangle: tmp1 fillStyle: self fillStyle.  value > 0 ifTrue: [ cachedWidth := self completedWidth.        tmp1 := (tmp1 left + (cachedWidth - (tmp1 width / 2.5))) @ tmp1 top corner: tmp1 origin + (cachedWidth @ tmp1 height).        arg1 fillRectangle: tmp1 fillStyle: self barFillStyle ].  self borderStyle frameRectangle: self bounds on: arg1-======-askBeforeChanging  ^self model askBeforeChanging-======-isEmpty  ^self items isEmpty-======-content  ^'I am a modal demo with default actions buttons. I set closeOnBackdropClick to true (which is the default value) to close the modal if the user click on the backdrop of the modal. This will trigger the cancel action of the modal.'-======-headerTitle: arg1  headerTitle := arg1-======-maxWidth: arg1  self maxExtent: arg1 @ self maxExtentOrDefault y-======-includesIndex: arg1  ^self selectedIndexes includes: arg1-======-addItemLeft: arg1  leftPanel addMorphBack: (arg1           vResizing: #spaceFill;           yourself)-======-selectPaths: arg1  self subclassResponsibility-======-isStyleProperty  ^true-======-selectionMode  ^selectionMode-======-contextMenuFromCommandsGroup: arg1  self contextMenu: [ arg1 value beRoot asMenuPresenter ]-======-displayedIcon  self model hasIcons ifFalse: [ ^nil ].  ^self widget currentIcon-======-step  self model step-======-whenChangedDo: arg1  self announcer when: ValueChanged do: [:arg2 |  arg1 cull: arg2 newValue cull: arg2 oldValue cull: arg2 ]-======-apply  fromPort attachTransmission: self-======-onActivation: arg1  onActivation := arg1-======-manualFractionComputation  | tmp1 |  tmp1 := numberOfProportionals isZero ifTrue: [ 0 ] ifFalse: [ 1 / numberOfProportionals ].  self commands doWithIndex: [:arg1 :arg2 |  arg1 layoutFrame hasNoOffsets ifTrue: [ self setWidgetLayoutWithNoOffset: arg1 at: arg2 delta: tmp1 ] ifFalse: [ self setWidgetLayoutWithOffset: arg1 at: arg2 ] ]-======-methodsListPresenter  ^methodsListPresenter-======-removeRootsSuchAs: arg1  self widgetDo: [:arg2 |  arg2 model rootNodes removeAllSuchThat: [:arg3 |  arg1 value: arg3 nodeModel ] ]-======-initializePresenters  super initializePresenters.  textModel := self newCode.  textModel whenBuiltDo: [:arg1 |  arg1 widget font: self codeFont ].  refreshingBlock := [:arg2 |  true ].  self     initializeDropList;     setFocus-======-buildWidget  widget := FTTableMorph new     hResizing: #spaceFill;     vResizing: #spaceFill;     intercellSpacing: self class intercellSpacing;     yourself.  self addModelTo: widget.  ^widget-======-checkboxLabel: arg1  checkboxLabel := arg1-======-addModelItemsToWindowMenu: arg1  self presenter addModelItemsToWindowMenu: arg1-======-leftFraction: arg1  ^0-======-beep  widget flash-======-initialize  super initialize.  bottomFraction := 1.  bottomOffset := 0.  leftFraction := 0.  leftOffset := 0.  rightFraction := 1.  rightOffset := 0.  topFraction := 0.  topOffset := 0-======-borderWidth: arg1  borderWidth := arg1-======-object: arg1  object := arg1-======-whenSelectedItemChanged: arg1  self list whenSelectedItemChanged: arg1-======-propertyAt: arg1 ifPresent: arg2 ifAbsent: arg3  ^self properties at: arg1 ifPresent: arg2 ifAbsent: arg3-======-startWithoutSelection  startsWithSelection := false-======-model: arg1  model := arg1-======-testWhenMaximumChangedDo  | tmp1 tmp2 |  tmp1 := 0.  presenter whenMaximumChangedDo: [:arg1 |  tmp1 := tmp1 + 1.        tmp2 := arg1 ].  presenter maximum: 10.  self assert: tmp1 equals: 1.  self assert: tmp2 equals: 10-======-testSelectItemSetsSelectedIndex  presenter selectItem: 20.  self assert: presenter selection selectedIndex equals: 2-======-includesPath: arg1  ^selection includes: arg1-======-application  ^self hasOwner ifTrue: [ self owner application ] ifFalse: [ application ifNil: [ self flag: #TODO.              application := SpApplication defaultApplication ] ]-======-property: arg1 rawValue: arg2  (self observablePropertyNamed: arg1) rawValue: arg2-======-descriptionPresenter: arg1  descriptionPresenter := arg1-======-checkThatSidesDiffer: arg1  changeSorterLeft selectedChangeSet == changeSorterRight selectedChangeSet ifFalse: [ ^self ].  self inform: 'This command requires that thechange sets selected on the twosides of the change sorter *not*be the same.'.  ^arg1 value-======-send: arg1 withArguments: arg2  self commands add: (SpLayoutSend selector: arg1)-======-buildWidget  | tmp1 |  tmp1 := SpAthensMorph new.  self presenter whenDrawBlockChangedDo: [:arg1 |  tmp1 drawBlock: arg1 ].  self presenter whenExtentChangedDo: [:arg2 |  tmp1 extent: arg2 ].  tmp1 extent: self presenter surfaceExtent.  tmp1 drawBlock: self presenter drawBlock.  tmp1 setBalloonText: self model help.  self presenter whenHelpChangedDo: [ tmp1 setBalloonText: self model help ].  ^tmp1-======-shortcuts  | tmp1 |  tmp1 := OrderedCollection new.  KMRepository default categories do: [:arg1 |  arg1 keymaps do: [:arg2 |  tmp1 add: (KMShortcutDeclaration new                       shortcutName: arg2 name;                       categoryName: arg1 name;                       yourself) ] ].  ^tmp1 sorted: #categoryName ascending-======-buildAdapterWithSpecLayout: arg1  ^SpBindings value: self application adapterBindings during: [ self basicBuildAdapterWithSpecLayout: arg1 ]-======-children  ^childrenBlock-======-instantiateModels: arg1  self deprecated: 'Use #instantiatePresenters: instead' transformWith: '`@receiver instantiateModels: `@statement' -> '`@receiver instantiatePresenters: `@statement'.  ^self instantiatePresenters: arg1-======-pushMessage: arg1 to: arg2  pushedMessages add: arg1.  arg2     removeAllMorphs;     addMorph: arg1 asStringMorph-======-defaultDate  ^Date today-======-presenter: arg1  presenter := arg1-======-addConstraits: arg1 toChild: arg2  | tmp1 |  tmp1 := arg2.  tmp1 setProperty: #constraints toValue: arg1.  ^tmp1-======-addModelTo: arg1  self model columns do: [:arg2 |  arg1 addColumn: (self newColumnFrom: arg2) ].  self ensureAtLeastOneColumnIn: arg1.  self isResizable ifTrue: [ arg1 beResizable ] ifFalse: [ arg1 beNotResizable ].  arg1 setMultipleSelection: self model isMultipleSelection.  self refreshShowColumnHeaders.  self refreshWidgetSelection.  self presenter whenShowColumnHeadersChangedDo: [:arg3 |  self refreshShowColumnHeaders ].  self presenter whenModelChangedDo: [ widget refresh ].  self presenter whenColumnsChangedDo: [ self refreshColumnsInWidget ].  arg1 setBalloonText: self help.  self configureScrolling.  arg1     onAnnouncement: FTSelectionChanged send: #selectionChanged: to: self;     onAnnouncement: FTStrongSelectionChanged send: #strongSelectionChanged: to: self.  arg1 dataSource: self newDataSource.  self presenter whenItemFilterBlockChangedDo: [:arg4 |  self updateItemFilterBlockWith: arg4 ].  self presenter whenSearchChangedDo: [ self updateSearch ].  self updateItemFilterBlockWith: self itemFilter-======-addColumn: arg1  columns add: arg1-======-submitButton  ^submitButton-======-enabled: arg1  ^self subclassResponsibility-======-addItemsFromContext: arg1  self flag: #TODO-======-hasCustomSearch  ^searchBlock notNil-======-unregisterShortcut: arg1  | tmp1 |  tmp1 := self window.  (tmp1 isNil or: [ arg1 isNil ]) ifTrue: [ ^self ].  tmp1 model removeKeyCombination: arg1-======-inspectValue  ^self value inspect-======-columns  ^widget columns-======-testSmokeTestForDemoPages  self timeLimit: 1 minute.  SpDemoPage availablePages do: [:arg1 |  [ [ window := arg1 new openWithSpec ] on: Error do: [:arg2 |  self fail: 'Broken demo page: ' , arg1 asString , '' , arg2 signalerContext shortStack ] ] ensure: [ window ifNotNil: #close ] ]-======-buildWidget  ^SpStubGridView new-======-objectAsUnicodeCodePoint  ^String streamContents: [:arg1 |  arg1 << 'U+'.        self object codePoint printOn: arg1 base: 16 nDigits: 4 ]-======-classToTest  ^SpMethodToolbar-======-initialize  self flag: #pharoTodo.  super initialize.  oddPassage := true-======-initializeTestedInstance  presenter     min: 1;     max: 100;     quantum: 1;     value: 20-======-taskbarIcon  ^self model taskbarIcon-======-defineInputPorts  ^{SpTextPort new}-======-whenMenuChangedDo: arg1  self property: #menu whenChangedDo: arg1-======-hasButtonWithLabel: arg1  ^self widget leftPanel submorphs , self widget rightPanel submorphs detect: [:arg2 |  (arg2 isKindOf: SpToolBarButtonMorph) and: [ arg2 label = arg1 ] ] ifFound: [ true ] ifNone: [ false ]-======-visiblePages  ^visiblePages-======-vShrinkWrap  self subclassResponsibility-======-show  self widgetDo: #show-======-selectedElement  ^self list selection selectedItem ifNil: [ self list selectedIndex ifNotNil: [:arg1 |  arg1 = 0 ifTrue: [ ^nil ].              self list listItems ifNotEmpty: [:arg2 |  arg2 at: arg1 ] ] ]-======-initializePresenters  super initializePresenters.  self content: SpInputTextDropList-======-testSelectInvalidPathsIsEmpty  presenter selectPaths: {#(40) .         #(10 20)}.  self assert: presenter selection isEmpty-======-add: arg1 withSpec: arg2 left: arg3 right: arg4  self add: arg1 withSpec: arg2 top: nil bottom: nil left: arg3 right: arg4-======-exploreValue  ^self value inspect-======-enabled  ^self presenter isEnabled-======-basicSelectIndex: arg1  selectedIndex := arg1-======-acceptDroppingMorph: arg1 event: arg2 inMorph: arg3  | tmp1 |  tmp1 := self widget ifNotNil: [:arg4 |  arg4 scrollerSubMorphFromPoint: arg2 position ].  tmp1 ifNil: [ ^self ].  ^self acceptDropBlock valueWithEnoughArguments: {arg1 model model .         arg2 .         arg3 model model model .         tmp1 model nodeModel}-======-observablePropertyNamed: arg1  | tmp1 |  tmp1 := self class slotNamed: arg1.  tmp1 isObservableSlot ifFalse: [ SpNonObservableSlotError signal: arg1 ].  ^tmp1 rawRead: self-======-page: arg1  page := arg1-======-step  | tmp1 tmp2 |  tmp1 := transformationMorph rotationDegrees.  tmp2 := transformationMorph transform withAngle: (tmp1 + 15) degreesToRadians negated.  transformationMorph     transform: tmp2;     invalidRect: transformationMorph fullBounds-======-testShortcutKey  self should: [ command shortcutKey ] raise: CmNoShortcutIsDefined.  command shortcutKey: $a asKeyCombination.  self assert: command shortcutKey equals: $a asKeyCombination-======-addPaneSplitters  self removePaneSplitters.  self addPaneVSplitters.  self addPaneHSplitters.  self linkSplittersToSplitters-======-rebuildWithSpecLayout: arg1  | tmp1 |  tmp1 := self model window submorphs copy.  self model window removeAllMorphs.  tmp1 allButLast do: [:arg2 |  self model window addMorphBack: arg2 ].  self model addPresenterIn: self widget withSpecLayout: arg1.  self widget model: self-======-label  ^label-======-initialize  super initialize.  name := 'some name'.  surname := ''.  number1 := 1.  number2 := 12.009.  scale := 42.  password := 'password'.  rememberMe := true.  date := '2018-01-01' asDate.  gender := #male.  selectedItems := {(self items at: 3) .   (self items at: 4)}-======-shortcut  ^shortcut-======-labelClickable: arg1  labelClickableHolder value: arg1-======-menuColumn: arg1 row: arg2  | tmp1 |  tmp1 := self model contextMenu.  tmp1 ifNil: [ ^nil ].  ^SpBindings value: self model application adapterBindings during: [ | tmp2 |        tmp2 := tmp1 value.        tmp2 isMorph ifTrue: [ tmp2 ] ifFalse: [ tmp2 buildWithSpec ] ]-======-target  ^self owner ifNotNil: [:arg1 |  arg1 submorphs before: self ]-======-limit2  ^10-======-prepareAsStandaloneApplication  -======-open  ^self openWithSpec-======-whenQuantumChangedDo: arg1  self property: #quantum whenChangedDo: arg1-======-testTextWithStyle  | tmp1 |  presenter     behavior: nil;     doItReceiver: Object;     type: 'self asString.'.  tmp1 := self adapter textWithStyle.  self assertText: tmp1 atInterval: (1 to: 4) isStyle: #self.  self assertText: tmp1 atInterval: (6 to: 13) isStyle: #unary.  presenter type: '10 + 42.0'.  tmp1 := self adapter textWithStyle.  self assertText: tmp1 atInterval: (1 to: 2) isStyle: #integer.  self assertText: tmp1 atInterval: (4 to: 4) isStyle: #binary.  self assertText: tmp1 atInterval: (6 to: 9) isStyle: #number.  presenter behavior: Object.  presenter type: 'm1 ^ "test" 42'.  tmp1 := self adapter textWithStyle.  self assertText: tmp1 atInterval: (1 to: 2) isStyle: #patternKeyword.  self assertText: tmp1 atInterval: (4 to: 4) isStyle: #return.  self assertText: tmp1 atInterval: (6 to: 11) isStyle: #comment.  self assertText: tmp1 atInterval: (13 to: 14) isStyle: #number-======-testRightClickShowsMenu  | tmp1 |  presenter contextMenu: (tmp1 := SpMockMenuPresenter new).  self deny: tmp1 shown.  self emulateRightClick.  self assert: tmp1 shown-======-spacing  ^spacing-======-buildAdapterFor: arg1 bindings: arg2  adapter := (arg1 needRebuild or: [ arg1 adapter isNil ]) ifTrue: [ (arg2 adapterClass: self adapterName) adapt: arg1 ] ifFalse: [ arg1 adapter           removeSubWidgets;           yourself ].  arg1 needRebuild: true.  adapter layout: self.  children keysAndValuesDo: [:arg3 :arg4 |  adapter add: (self resolvePresenter: arg3 presenter: arg1 bindings: arg2) constraints: arg4 ].  ^adapter-======-oldPage  ^oldPage-======-asMenuPresenterWith: arg1  | tmp1 |  tmp1 := SpMenuPresenterBuilder new.  arg1 value: tmp1 menuPresenter.  ^tmp1     visit: self;     menuPresenter-======-newNumberInput  ^self instantiate: SpNumberInputFieldPresenter-======-redMorphTab  presenter     label: 'Red Morph';     icon: (presenter iconNamed: #smallBackIcon);     contents: (Morph new           color: Color red;           yourself)-======-topologicSort: arg1  topologySort := arg1-======-presenter  ^presenter-======-label  ^label-======-shown  ^shown-======-newListColumn  ^SpMorphicTableColumn new     model: (SpStringTableColumn title: self presenter headerTitle evaluated: self presenter display);     yourself-======-classToTest  ^SpTextInputFieldPresenter-======-surnameTextInput: arg1  surnameTextInput := arg1-======-buildLabel: arg1 withIcon: arg2  arg2 ifNil: [ ^arg1 ifNil: [ '' ] ifNotNil: [ arg1 ] ].  ^IconicListItem text: arg1 icon: arg2-======-fromSpec: arg1  | tmp1 tmp2 |  tmp1 := OrderedCollection new.  arg1 label ifNotNil: [:arg2 |  self title: arg2 ].  tmp2 := OrderedCollection new.  arg1 items do: [:arg3 |  tmp2 add: arg3.        arg3 separator ifTrue: [ tmp1 add: tmp2 copy.              tmp2 removeAll ] ].  tmp2 ifNotEmpty: [ tmp1 add: tmp2 copy ].  tmp1 do: [:arg3 |  self addGroup: [:arg4 |  arg3 do: [:arg5 |  arg4 addItem: [:arg6 |  arg6 fromSpec: arg5 ] ] ] ]-======-initialize: arg1  text label: arg1 asString-======-initialize  super initialize.  borderWidth := 0.  borderColor := Color transparent.  enabled := true.  dragEnabled := false.  dropEnabled := false.  dragTransformationBlock := [:arg1 :arg2 |  arg1 ].  wantDropBlock := [:arg3 :arg4 :arg2 |  self dropEnabled ].  acceptDropBlock := [:arg3 :arg4 :arg2 |   ].  transferBlock := [:arg5 :arg2 |  self defaultTransferFor: arg5 from: arg2 ].  color := self defaultColor.  self whenHelpChangedDo: [:arg6 |  self withAdapterDo: [:arg7 |  arg7 update: #setBalloonText: with: {arg6} ] ].  self whenBorderWidthChangedDo: [:arg8 |  self withWidgetDo: [:arg7 |  arg7 update: #borderWidth: with: {arg8} ] ].  self whenBorderColorChangedDo: [:arg9 |  self withWidgetDo: [:arg7 |  arg7 update: #borderColor: with: {arg9} ] ].  self property: #color whenChangedDo: [:arg9 |  self withAdapterDo: [:arg7 |  arg7 update: #color: with: {arg9} ] ].  self whenEnabledChangedDo: [:arg10 |  self withAdapterDo: [:arg7 |  arg7 update: #enabled: with: {arg10} ] ].  self property: #dragEnabled whenChangedDo: [:arg10 |  self withWidgetDo: [:arg7 |  arg7 update: #dragEnabled: with: {arg10} ] ].  self property: #dropEnabled whenChangedDo: [:arg10 |  self withWidgetDo: [:arg7 |  arg7 update: #dropEnabled: with: {arg10} ] ].  styles := #()-======-menu  ^menuBlockHolder value-======-assertText: arg1 at: arg2 isStyle: arg3  | tmp1 |  tmp1 := SpCodeStyleForTest new.  arg1 attributesAt: arg2 do: [:arg4 |  self fillTag: tmp1 withAttribute: arg4 ].  self assert: tmp1 equals: (self style: arg3)-======-newMultiColumnList  self deprecated: 'Use newTable instead' on: '2019-02-05' in: #Pharo8.  ^self instantiate: SpMultiColumnListPresenter-======-actionArguments  ^[ Array with: self ]-======-whenSelectionChanged: arg1  self deprecated: 'Use #whenSelectionChangedDo: instead' transformWith: '`@receiver whenSelectionChanged: `@argument' -> '`@receiver whenSelectionChangedDo: `@argument'.  ^self whenSelectionChangedDo: arg1-======-testModelSettingValueHolderToModel  | tmp1 tmp2 tmp3 tmp4 |  tmp2 := 1 @ 0.  tmp1 := SpTestingPointModel x: 1 y: 2.  tmp3 := NewValueHolder value: tmp2.  tmp4 := SpTestingPresenterWithModel on: tmp1.  self assert: tmp4 announcingObject isSpAnnouncingObject.  self deny: tmp4 announcingObject isValueHolder.  self assert: tmp3 isSpAnnouncingObject.  self assert: tmp3 isValueHolder.  tmp4 model: tmp3.  self assert: tmp4 announcingObject isSpAnnouncingObject.  self assert: tmp4 announcingObject isValueHolder.  self assert: tmp4 announcingObject == tmp3.  self assert: tmp4 announcingObject announcer numberOfSubscriptions > 0-======-resizeCursor  ^Cursor resizeForEdge: self edgeName-======-createNullPresenters: arg1  nullPresentersInstVarNames := self generateNullPresentersInstVarNames: arg1.  dynamicPresenter instantiatePresenters: self nullPresentersInstVarNamesAndPresenterNamesArray-======-block: arg1 layoutFrame: arg2  | tmp1 |  tmp1 := SpColumnLayout composed.  arg1 value: tmp1.  subwidget := tmp1.  self layoutFrame: arg2-======-addInstancesVariable: arg1  -======-number: arg1  self text: arg1 asString-======-currentlyActivated  ^currentlyActivated-======-whenCanDeselectByClickChangedDo: arg1  self deprecated: 'It is not clear what option to select if deselected'-======-newTextInput  ^self instantiate: SpTextInputFieldPresenter-======-testDaysAfterMonthOf  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 9 day: 1)) equals: 6.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 9 day: 14)) equals: 6.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 9 day: 30)) equals: 6.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 10 day: 1)) equals: 10.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 10 day: 17)) equals: 10.  self assert: (calendar daysAfterMonthOf: (Date year: 2018 month: 10 day: 30)) equals: 10-======-testIsDisplayed  windowPresenter := SpTextPresenter new openWithSpec.  self assert: windowPresenter isDisplayed.  windowPresenter window minimize.  self assert: windowPresenter isDisplayed.  windowPresenter window close.  self assert: windowPresenter isDisplayed not-======-calculateHomogeneousColumnWidths  | tmp1 |  tmp1 := 0.  morphs do: [:arg1 |  tmp1 := tmp1 max: (self minWidthOf: arg1) ].  ^Array new: numColumns withAll: (self baseColumnWidth max: tmp1)-======-theme  ^theme-======-forgetSelector: arg1 inClass: arg2 fromChangeSet: arg3  arg3 removeSelectorChanges: arg1 class: arg2-======-dateInput: arg1  dateInput := arg1-======-testRemoveHeaderTitleInPresenterRemovesColumnHeaderMorph  self flag: #pharo7.  SystemVersion current major < 8 ifTrue: [ self skip ].  self presenter headerTitle: 'test'.  self presenter hideHeaderTitle.  backendForTest denyHasHeader: self adapter-======-initialize  self class initializeSlots: self.  super initialize-======-commands: arg1  commands := arg1-======-initialize  super initialize.  self spec: #defaultSpec-======-initializeWindow: arg1  arg1     title: self title;     initialExtent: 500 @ 350-======-ensureHeightPosition: arg1 in: arg2  | tmp1 |  self position ifNil: [ ^self ].  tmp1 := arg1 submorphs first.  tmp1 vResizing = #rigid ifFalse: [ tmp1 vResizing: #rigid ].  tmp1 privateBounds: (tmp1 bounds withHeight: (self heightPositionIn: arg2 extent))-======-takeKeyboardFocus  ^self inspector takeKeyboardFocus-======-resetArrayComputation  super resetArrayComputation.  currentOffset := 0.  currentProportional := 0.  numberOfProportionals := 0.  lastFractionIndex := 0.  autoFractionComputation := true.  size := self commands size-======-fillItem: arg1 with: arg2  arg1     name: arg2 name;     description: arg2 description;     icon: arg2 icon;     action: [ arg2 execute ].  arg2 hasShortcutKey ifTrue: [ arg1 shortcut: arg2 shortcutKey ].  ^arg1-======-surnameLabel  ^surnameLabel-======-valueAtColumn: arg1 row: arg2  ^(columns at: arg1) readObject: (self model items at: arg2)-======-testActivateRaisesActivatedEvent  presenter state: false.  self assertEvent: #whenActivatedDo: isRaisedInPresenter: presenter whenDoing: [ presenter state: true ]-======-hSpaceFill  self subclassResponsibility-======-isDisplayed  self flag: #TODO.  ^self hasWindow ifTrue: [ self root isDisplayed ] ifFalse: [ false ]-======-beIcons  self displayMode: SpToolBarDisplayMode modeIcon-======-whenHelpChangedDo: arg1  self property: #help whenChangedDo: arg1-======-menu  self deprecated: 'Use #contextMenu instead.' transformWith: '`@receiver menu' -> '`@receiver contextMenu'.  ^self contextMenu-======-mainIcon  ^mainIcon-======-fileOutMessage  self selectedSelector ifNotNil: [:arg1 |  Cursor write showWhile: [ self model fileOutSelector: arg1 from: self selectedClass ] ]-======-resetTo: arg1  self presenters copy withIndexDo: [:arg2 :arg3 |  arg3 <= arg1 ifFalse: [ layout remove: arg2 ] ]-======-property: arg1 whenChangedDo: arg2  (self observablePropertyNamed: arg1) whenChangedDo: arg2-======-browseMessages  self currentMethod ifNotNil: [:arg1 |  model browseMessagesFrom: arg1 selector ]-======-menuGroups  ^self model menuGroups reject: [:arg1 |  arg1 isEmpty ]-======-testObservableSlotWorksAsNormalSlot  point x: 17.  point y: 299.  self assert: point x equals: 17.  self assert: point y equals: 299-======-childrenBlock  ^tree childrenBlock-======-layout: arg1  layout := arg1-======-selector  ^self selection asSymbol-======-refreshWidgetSelection  | tmp1 |  tmp1 := self presenter selection selectedIndexes.  tmp1 = self widget selectedIndexes ifTrue: [ ^self ].  tmp1 isEmpty ifTrue: [ self widget basicSelectIndexes: #() ] ifFalse: [ self widget basicSelectIndexes: tmp1 ].  ^self widget refresh-======-aboutTitle  (self presenter respondsTo: #aboutTitle) ifTrue: [ ^self presenter aboutTitle ].  ^self presenter toolName-======-namesOfDaysLabels  ^namesOfDaysLabels-======-activate  activationBlock value: (SpMillerActivation on: 1)-======-fixedAt: arg1  self state: (SpProgressBarFixed value: arg1)-======-adapter  ^self-======-emptyList  self dropList emptyList-======-whenExtentForPreviewChanged: arg1  extentForPreview whenChangedDo: arg1-======-save: arg1  saveBlock value: arg1-======-compareToCurrentVersion  self compareTo: rgMethod withLabel: 'Current version'-======-performHeaderActionSelector  ^self headerAction ifNil: [ nil ] ifNotNil: [ #performHeaderAction ]-======-initializeTestedInstance  super initializeTestedInstance.  presenter addColumn: (SpStringTableColumn evaluated: [:arg1 |  arg1 displayString ])-======-whenSelectedItemChanged: arg1  messageList whenSelectedItemChanged: arg1-======-selectedItem: arg1  self deprecated: 'Use #selectItem: instead' transformWith: '`@receiver selectedItem: `@arg' -> '`@receiver selectItem: `@arg'.  self selectItem: arg1-======-subMenu: arg1  arg1 ifNotNil: [ arg1 owner: self ].  subMenu := arg1-======-model  ^model-======-rowSpan  ^self span y-======-surnameLabel: arg1  surnameLabel := arg1-======-initializeWindow: arg1  arg1     title: 'Transmission example browser';     initialExtent: 800 @ 600-======-rootMenu  ^self owner isMenuPresenter ifTrue: [ self owner rootMenu ] ifFalse: [ self ]-======-object  ^self inspector object-======-cacheHierarchyForClasses: arg1  cachedHierarchy := self buildHierarchyForMessages: arg1-======-testWhenStateChangedDo  presenter whenStateChangedDo: [:arg1 :arg2 |  self deny: arg2.        self assert: arg1 ].  self deny: presenter state.  self openInstance.  presenter state: true.  self assert: presenter state-======-testRightClickShowsMenu  | tmp1 |  presenter contextMenu: (tmp1 := SpMockMenuPresenter new).  self deny: tmp1 shown.  self emulateRightClick.  self assert: tmp1 shown-======-url: arg1  self action: [ WebBrowser openOn: arg1 ].  self label ifNil: [ self label: arg1 ]-======-beColumnHomogeneous  self columnHomogeneous: true-======-clicked  | tmp1 |  tmp1 := MouseButtonEvent new setType: nil position: widget center which: MouseButtonEvent redButton buttons: MouseButtonEvent redButton hand: nil stamp: nil.  (widget handlesMouseDown: tmp1) ifTrue: [ widget mouseDown: tmp1.        widget mouseUp: tmp1 ]-======-classToTest  ^SpRGBSliders-======-whenMaximumChangedDo: arg1  self property: #maximum whenChangedDo: arg1-======-whenSyntaxHighlightChangedDo: arg1  self property: #syntaxHighlight whenChangedDo: arg1-======-displayBlock: arg1  displayBlock value: arg1-======-newButton  ^PluggableButtonMorph on: self getState: #state action: #action label: #label menu: #menu:-======-layoutSpec  ^layoutSpec-======-eventKeyStrokesForPreviousFocus  ^{Character tab shift asKeyCombination}-======-isEmpty  ^self subclassResponsibility-======-whenValueChangedDo: arg1  slider whenValueChangedDo: arg1-======-newColumnFrom: arg1  ^(SpMorphicTableColumn on: arg1)     width: arg1 width;     yourself-======-encrypted: arg1  ^self input encrypted: arg1-======-testShowPresenterShowsWidget  self skip-======-initialize  super initialize.  paneMorphs := OrderedCollection new-======-classToTest  ^SpSliderPresenter-======-assertEvent: arg1 isRaisedInPresenter: arg2 whenDoing: arg3  self assertWith: [:arg4 |  arg4 > 0 ] timesRaisedEvent: arg1 inPresenter: arg2 whenDoing: arg3-======-initializePresenters  fieldNormal := self newTextInput.  fieldDisabled := self newTextInput enabled: false.  fieldPlaceholderText := self newTextInput placeholder: 'Placeholder text'.  fieldEncrypted := self newTextInput     text: 'Password';     bePassword-======-autoRefresh: arg1  autoRefresh := arg1-======-okAction  ^okAction-======-testChangingHelpAffectTheWidget  ^self skip-======-whenCurrentActivatedChangedDo: arg1  currentActivated whenChangedDo: arg1-======-testUnselectWidgetIndexRaisesSelectionIndexChangeEventOnce  | tmp1 |  tmp1 := 0.  self adapter selectPath: #(1).  presenter selection whenChangedDo: [:arg1 |  tmp1 := tmp1 + 1 ].  self adapter selectPath: #().  self assert: tmp1 equals: 1-======-methodBrowser  ^methodBrowser-======-show  visible := true-======-initializePresenters  listModel := self instantiate: SpListPresenter.  textModel := self newCode.  toolbarModel := self instantiate: SpMethodToolbar.  self focusOrder     add: listModel;     add: toolbarModel;     add: textModel-======-maxHeight: arg1  self maxExtent: self maxExtentOrDefault x @ arg1-======-updateClassesList  | tmp1 |  tmp1 := self selectedClass.  self selectedChangeSet ifNil: [ classesListPresenter items: {} ] ifNotNil: [:arg1 |  classesListPresenter items: (arg1 changedClasses sort: [:arg2 :arg3 |  arg2 name < arg3 name ]) ].  tmp1 ifNotNil: [ classesListPresenter selectItem: tmp1 ]-======-addLazyPage: arg1 label: arg2 action: arg3  | tmp1 tmp2 |  tmp1 := SpNotebookPageMorph new.  tmp1 lazyPageMorphCreation: arg1.  tmp2 := self buildLabelFrom: arg2 withAction: arg3.  tmp1 labelMorph: tmp2.  self addPage: tmp1 label: tmp2-======-label: arg1  self button label: arg1-======-testSelectWidgetIndexRaisesSelectionIndexChangeEventWithSelectedIndex  | tmp1 |  presenter selection whenChangedDo: [:arg1 |  tmp1 := arg1 selectedIndexes ].  self adapter selectIndex: 1.  self assert: (tmp1 includes: 1)-======-selectedItems: arg1  selectedItems := arg1 asArray-======-label  ^label-======-layout: arg1 in: arg2  arg1 submorphsDo: [:arg3 |  | tmp1 |        tmp1 := arg3 valueOfProperty: #constraints.        (arg3 visible and: [ tmp1 isOverlay not ]) ifTrue: [ arg3 bounds: arg2 ].        (arg3 visible and: [ tmp1 isOverlay ]) ifTrue: [ | tmp2 tmp3 tmp4 tmp5 |              tmp2 := arg2 area > (0 @ 0 corner: arg3 extent) area ifTrue: [ arg2 origin corner: arg2 origin + arg3 extent ] ifFalse: [ arg2 ].              tmp3 := arg2 width / 2 - (tmp2 width / 2).              tmp4 := arg2 height / 2 - (tmp2 height / 2).              tmp5 := arg2 origin + (tmp3 @ tmp4) corner: arg2 corner + (tmp3 @ tmp4).              arg3 bounds: tmp5 ].        arg3 visible ifFalse: [ arg3 bounds: (0 @ 0 corner: 0 @ 0) ] ]-======-openWithSpec  self layout ifNil: [ ^super openWithSpec ].  ^self application open: self withSpecLayout: self layout-======-classToTest  ^SpLabelPresenter-======-updateText  textRefreshingProcess ifNotNil: [ textRefreshingProcess terminate ].  textRefreshingProcess := [ | tmp1 tmp2 |  tmp1 := listModel selection selectedIndexes sort collect: [:arg1 |  arg1 printString ].  tmp1 := tmp1 joinUsing: '; '.  tmp2 := listModel selectedItems collect: [:arg1 |  arg1 printString ].  tmp2 := tmp2 sort joinUsing: '; '.  UIManager default defer: [ textModel1 text: tmp1.        textModel2 text: tmp2 ] ] fork-======-enableSearch  searchEnabled := true-======-traversePresentersDo: arg1  self traversePresentersDo: arg1 excluding: Set new-======-eventKeyStrokesForNextFocus  ^{Character arrowRight command ctrl asKeyCombination}-======-selector: arg1  selector := arg1-======-popUpInWorld: arg1  self shown: true-======-wantsVisualFeedback  ^self model wantsVisualFeedback-======-getText  ^self model text-======-display: arg1  tree display: arg1-======-implementorsMethod  self method ifNotNil: [:arg1 |  self model browseMessagesFrom: arg1 selector ]-======-testSmokeOpenEmptyPresenter  window := presenter openWithSpec-======-scrollingChanged  widget container updateAllRows.  self presenter verticalAlignment     firstVisibleRowIndex: widget firstVisibleRowIndex;     lastVisibleRowIndex: widget lastVisibleRowIndex-======-computeNumberOfRowsAndColumns  numRows := 0.  numColumns := 0.  self allGridConstraints do: [:arg1 |  numRows := numRows max: arg1 row + arg1 rowSpan - 1.        numColumns := numColumns max: arg1 column + arg1 columnSpan - 1 ]-======-list1  ^list1-======-newMenuBar  ^self instantiate: SpMenuBarPresenter-======-vRigid  self subclassResponsibility-======-preferedPaneColor  ^preferedPaneColor value-======-whenTextChanged: arg1  self deprecated: 'Use #whenTextChangedDo: instead.' transformWith: '`@receiver whenTextChanged: `@statement' -> '`@receiver whenTextChangedDo: `@statement'.  self whenTextChangedDo: arg1-======-setX: arg1 setY: arg2  x := arg1.  y := arg2-======-contextMenu: arg1  contextMenu := arg1-======-initializePresenters  element11 := self newMorph morph: (Morph new color: Color red).  element21 := self newMorph morph: (Morph new color: Color green).  element12 := self newMorph morph: (Morph new color: Color blue).  element22 := self newMorph morph: (Morph new color: Color yellow).  borderWidth := self newSlider     beHorizontal;     min: 0;     max: 100.  columnSpacing := self newSlider     beHorizontal;     min: 0;     max: 100.  rowSpacing := self newSlider     beHorizontal;     min: 0;     max: 100.  columnHomogeneous := self newCheckBox label: 'Column is homogeneous'.  rowHomogeneous := self newCheckBox label: 'Row is homogeneous'.  self announcer when: SpWidgetBuilt send: #widgetBuilt: to: self-======-classToTest  ^SpNumberInputFieldPresenter-======-classToTest  ^SpCodePresenter-======-chooseDateButton  ^chooseDateButton-======-testDoesNotUnderstand  | tmp1 |  themeDecorator property: #foo returnsValueOf: 42.  self assert: themeDecorator foo equals: 42.  tmp1 := [ 42 ].  themeDecorator property: #fooBlock returnsValueOf: tmp1.  self assert: themeDecorator fooBlock equals: 42.  tmp1 := [:arg1 |  arg1 + 42 ].  themeDecorator property: #fooBlock: returnsValueOf: tmp1.  self assert: (themeDecorator fooBlock: 3) equals: 45-======-pageClass  ^SpDemoDynamicMemoryGamePresenter-======-selectItem: arg1  self selectionMode selectItem: arg1-======-heterogeneousDropList  ^heterogeneousDropList-======-action  ^self model action-======-testWhenTextChangesRaisesSingleEvent  self assertWith: [:arg1 |  arg1 = 1 ] timesRaisedEvent: #whenTextChangedDo: inPresenter: presenter whenDoing: [ presenter text: 'test' ]-======-setIndex: arg1  ^self dropList setIndex: arg1-======-listSize  ^self model listSize-======-bePassword: arg1  isPassword := arg1-======-initialize  self class initializeSlots: self.  super initialize.  ticks := 0.  highestValue := Float negativeInfinity.  lowestValue := Float infinity.  stepBy := 1-======-keyStroke: arg1  keyStroke value cull: arg1-======-performSearch: arg1 matching: arg2  ^searchBlock value: arg1 value: arg2-======-observablePropertyNamed: arg1  | tmp1 |  tmp1 := self class slotNamed: arg1.  tmp1 isObservableSlot ifFalse: [ SpNonObservableSlotError signal: arg1 ].  ^tmp1 rawRead: self-======-add: arg1 constraints: arg2  self widgetDo: [:arg3 |  self basicAdd: arg1 constraints: arg2 to: arg3 ]-======-type: arg1  arg1 do: [:arg2 |  self keyPressed: arg2 asciiValue shift: arg2 isUppercase meta: false control: false option: false ]-======-notifyError: arg1  GrowlMorph openWithLabel: 'Error' contents: arg1 message backgroundColor: GrowlMorph theme dangerBackgroundColor labelColor: GrowlMorph theme textColor-======-addSplitter  self commands add: (SpSplitterVertical commands: self commands)-======-testPresentersBlockReceivesAthensCanvas  | tmp1 |  self presenter drawBlock: [:arg1 |  tmp1 := arg1 ].  self adapter redraw.  self openInstance.  1 second wait.  self assert: tmp1 isNotNil.  self assert: (tmp1 isKindOf: AthensCanvas)-======-protocolListAction  protocolList transmitTo: methodList transform: [:arg1 |  arg1 ifNotNil: [ (arg1 methodSelectors collect: [:arg2 |  self methodNamed: arg2 ]) asOrderedCollection ] ifNil: [ #() ] ] postTransmission: [:arg3 |  arg3 selectIndex: 1 ]-======-visiblePages  ^layout visiblePages-======-selectedClass  ^self selectedMethod origin-======-classToTest  ^SpTreeTablePresenter-======-initializePresenters  menu := self mainMenu.  list := self newList.  page := self instantiate: (selectedPage := self availablePages first).  menu applyTo: self.  list     items: self availablePages;     display: [:arg1 |  arg1 pageName ];     contextMenu: (self newMenu           addItem: [:arg1 |  arg1                 name: 'Browse';                 icon: (self iconNamed: #smallHelp);                 action: [ list selectedItem browse ] ];           addItem: [:arg1 |  arg1                 name: 'Browse presenter';                 icon: (self iconNamed: #smallHelp);                 action: [ list selectedItem new pageClass browse ] ];           yourself).  self focusOrder     add: list;     add: page-======-searchText: arg1  | tmp1 |  arg1 isEmptyOrNil ifTrue: [ ^#() ].  tmp1 := arg1 trimBoth asLowercase.  ^Array streamContents: [:arg2 |  self elements withIndexDo: [:arg3 :arg4 |  (self model performSearch: arg3 matching: tmp1) ifTrue: [ arg2 nextPut: arg4 ] ] ]-======-whenActionPerformedDo: arg1  self property: #actionPerformed whenChangedDo: arg1-======-testSelectAll  self initializationText.  self openInstance.  presenter selectAll.  self assert: presenter selectionInterval equals: (1 to: 15)-======-explore: arg1  ^self class explore: arg1-======-displayMode  ^displayMode-======-doItContext  self deprecated: 'This has been moved to specific presenters (check children)' on: '2019-04-15' in: #Pharo8-======-initializePresenters  listModel := self newTable.  listModel     sortingBlock: [:arg1 :arg2 |  self sortClassesInCachedHierarchy: arg1 b: arg2 ];     addColumn: (SpStringTableColumn title: 'Location' evaluated: [:arg3 |  self locationOf: arg3 ]);     addColumn: (SpStringTableColumn title: 'Selector' evaluated: [:arg3 |  self selectorOf: arg3 ]);     addColumn: (SpStringTableColumn title: 'Package' evaluated: [:arg3 |  self packageOf: arg3 ]);     beResizable.  self contextMenu: self messageListMenu-======-content: arg1  subwidget := self instantiate: arg1.  self focusOrder add: subwidget-======-initialize  | tmp1 |  super initialize.  isHorizontal := true.  marks := OrderedCollection new.  max := 100.  min := 0.  quantum := 1.  value := 0.  absoluteValue := 0.  label := ''.  tmp1 := false.  self whenMaxChangedDo: [:arg1 |  self changed: {#max: .               arg1} ].  self whenMinChangedDo: [:arg1 |  self changed: {#min: .               arg1} ].  self whenQuantumChangedDo: [:arg1 |  self changed: {#quantum: .               arg1} ].  self whenValueChangedDo: [:arg2 |  tmp1 ifFalse: [ tmp1 := true.              self absoluteValue: (self valueToAbsoluteValue: arg2).              self changed: {#scaledValue: .                     arg2}.              tmp1 := false ].        self changed: #value ].  self whenAbsoluteValueChangedDo: [:arg2 |  tmp1 ifFalse: [ tmp1 := true.              self value: (self absoluteValueToValue: arg2).              self changed: {#value: .                     arg2}.              tmp1 := false ] ].  self whenLabelChangedDo: [:arg2 |  self changed: #label ]-======-testPresenterTextIsSetInWidget  presenter text: 'something'.  self assert: self widget text equals: 'something'-======-fieldPlaceholderText: arg1  fieldPlaceholderText := arg1-======-hasFilter  ^self widget hasFilter-======-initialize  super initialize.  onlyStrong := false-======-indeterminated: arg1  indeterminated := arg1-======-title: arg1  self widgetDo: [:arg2 |  arg2 setLabel: arg1 ]-======-icon  ^self presenter icon ifNil: [ self defaultIcon ]-======-setUp  super setUp.  presentersBuilder := SpDynamicPresentersListBuilder new     modelObjects: (1 to: 14);     presenter: SpButtonPresenter configuredAs: [:arg1 :arg2 |   ];     buildDynamicPresenter;     yourself.  layout := SpDynamicLeftToRightColumnsLayout columns: 7-======-action: arg1  action := arg1-======-applyTo: arg1  arg1 applyMenuModel: self-======-browseValue  ^self value browse-======-testSettingNilResetsSelection  self presenter selectItem: 10.  self presenter selectItem: nil.  self assert: self presenter selectedItem equals: nil.  self assert: self adapter selectedIndexes isEmpty-======-isComposite  ^true-======-headerColumn: arg1  | tmp1 |  arg1 id ifNil: [ ^nil ].  tmp1 := SpHeaderCellMorph new     addMorph: arg1 id asMorph asReadOnlyMorph;     yourself.  arg1 isSortable ifTrue: [ tmp1 eventHandler: (MorphicEventHandler new on: #click send: #sortByColumn:event:morph: to: self withValue: arg1) ].  ^tmp1-======-ghostText: arg1  self deprecated: 'This API is too tight to Morph. Use #placeholder: instead.' transformWith: '`@receiver ghostText: `@statement' -> '`@receiver placeholder: `@statement'.  self placeholder: arg1-======-openInstance  backendForTest openInstanceOf: self-======-testUnselectSelectedItemRemovesItFromSelectionList  presenter     selectItem: 10;     unselectItem: 10.  self assert: presenter selection isEmpty-======-execute  self editor paste-======-externalIndex: arg1  externalIndex := arg1-======-update: arg1  self changed: arg1-======-= arg1  ^super = arg1 and: [ instVarName = arg1 instVarName ]-======-testSelectIndexesOutsideRangeHasNoSelectedItems  presenter selectIndexes: {4 .         5}.  self assert: presenter selection selectedItems isEmpty-======-whenMenuChangedDo: arg1  self property: #contextMenu whenChangedDo: arg1-======-maximize  self changed: #maximize with: #()-======-sortingBlock: arg1  listModel sortingBlock: arg1-======-textConverter: arg1  textConverter := arg1 method: self textConverter method-======-menu: arg1 shifted: arg2  | tmp1 |  (self allowMenuOnNoItem not and: [ self selectedItems isEmpty ]) ifTrue: [ ^nil ].  menuBlockHolder value ifNil: [ ^nil ].  menuBlockHolder value isBlock ifFalse: [ ^menuBlockHolder value ].  tmp1 := SpMenuPresenter new.  menuBlockHolder value cull: tmp1 cull: arg2.  ^tmp1-======-ensureKeyBindingsFor: arg1  super ensureKeyBindingsFor: arg1.  self shortcut ifNotNil: [:arg2 |  self registerShortcut: arg2 ]-======-cellColumn: arg1 row: arg2  | tmp1 tmp2 tmp3 |  tmp3 := self model itemAt: arg2.  tmp1 := arg1 readObject: tmp3.  tmp2 := FTCellMorph new     cellInset: 5;     yourself.  self model hasIcons ifTrue: [ (self model iconFor: tmp3) ifNotNil: [:arg3 |  tmp2 addMorphBack: arg3 asMorph ] ].  tmp2 addMorphBack: tmp1 asMorph asReadOnlyMorph.  ^tmp2-======-giveFocusToNextFrom: arg1  ^self model giveFocusToNextFrom: arg1-======-properties  ^self styles select: [:arg1 |  arg1 isStyleProperty ]-======-emptyList  ^self dropList emptyList-======-open: arg1  object := arg1.  self open-======-testTickIncrementsOne  timeline tick.  self assert: timeline ticks equals: 1-======-childrenWidgets  ^widget submorphs first submorphs , widget submorphs second submorphs-======-copyClass: arg1 from: arg2 to: arg3  arg3 absorbClass: arg1 name from: arg2-======-methodModified: arg1  UIManager default defer: [ self handleMethodModified: arg1 ]-======-action: arg1  action := arg1-======-listElementAt: arg1  ^self model at: arg1 ifAbsent: [ nil ]-======-testUnselectAllUnselectsSingleSelection  presenter     selectPath: #(1 1);     unselectAll.  self assert: presenter selection isEmpty-======-items  ^items value-======-model  ^model-======-valueToAbsoluteValue: arg1  ^((arg1 - self min) / (self max - self min)) asFloat-======-testSelectItemSetsSelectedPath  presenter selectItem: 20.  self assert: presenter selection selectedPath equals: #(1 1 3)-======-initialize  super initialize-======-label  ^self presenter label-======-testWhenDaySelectedBlock  | tmp1 tmp2 |  tmp1 := false.  tmp2 := Date year: 2018 month: 9 day: 15.  calendar     adaptToDate: tmp2;     whenDaySelectedBlock: [ tmp1 := true ].  self deny: tmp1.  calendar daysButtons basicPresenters value values first performAction.  self assert: tmp1-======-propertyAt: arg1 put: arg2  ^self properties at: arg1 put: arg2-======-testSelectItemAddsPathToSelectedPathList  presenter selectItem: 10.  self assert: (presenter selection includesPath: #(1 3))-======-adapterName: arg1  adapterName := arg1-======-testSetSelectIndexRaisesSelectionChangeEventWithSelectedIndex  | tmp1 |  presenter whenSelectionChangedDo: [:arg1 |  tmp1 := arg1 selectedIndexes ].  presenter selectIndex: 1.  self assert: (tmp1 includes: 1)-======-testRebuildPresenterBeforeOpeningWorks  self assert: presenter label label equals: ''.  self shouldnt: [ presenter selectFirstElement.        self openInstance ] raise: Error.  self assert: presenter label label equals: '1'-======-calculateExtentFor: arg1 constraint: arg2 computation: arg3  | tmp1 tmp2 tmp3 |  tmp1 := arg3 cellExtentAt: arg2 position.  tmp3 := self calculateWidthFor: arg1 base: tmp1 x.  tmp2 := self calculateHeightFor: arg1 base: tmp1 y.  ^tmp3 @ tmp2-======-buildWidget  ^SpTickingSpecWindow new     model: self;     isResizeable: self isResizeable;     yourself-======-placeholder  ^self model placeholder-======-testSelectInvalidPathHasNoSelectedPaths  presenter selectPath: #(4).  self assert: presenter selection selectedPaths isEmpty-======-testSelectMultipleIndexesAddsAllToSelectedIndexList  presenter selectIndex: 1.  presenter selectIndex: 3.  self assert: (presenter selection includesIndex: 1).  self assert: (presenter selection includesIndex: 3)-======-canResize  ^resize-======-extent: arg1  | tmp1 |  tmp1 := arg1 rounded.  (bounds extent closeTo: tmp1) ifTrue: [ ^self ].  self invalidRect: bounds.  bounds := bounds topLeft extent: tmp1.  self layoutChanged.  self invalidRect: bounds-======-testSelectPresenterItemSetsSelectedIndexInWidget  self skip-======-dispatchTo: arg1  ^arg1 notify: self-======-add: arg1 withConstraints: arg2  | tmp1 |  tmp1 := self constraintsClass new.  arg2 value: tmp1.  children at: arg1 put: tmp1-======-differentCardsCountSlider  ^differentCardsCountSlider-======-initialize  needRecalculatePages := false.  super initialize-======-testRemovePage  | tmp1 |  presenter addPage: (tmp1 := SpNotebookPage title: 'Mock3' provider: [ SpLabelPresenter new ]).  self assert: self adapter numberOfTabs equals: 3.  presenter removePage: tmp1.  self assert: self adapter numberOfTabs equals: 2-======-initialize  super initialize.  self     name: 'Inspect';     description: 'Inspect the context of this command.'-======-activateOnSingleClick  activateOnSingleClick := true-======-refreshPrintDescription  self printDescription: self selectedElement-======-clicked  widget toggleSelected-======-sliceButton  ^sliceButton-======-defaultWindowPresenterClass  ^SpTickingWindowPresenter-======-initialize  super initialize.  type := #SpContainerPresenter.  self commands: OrderedCollection new-======-displaySymbol  ^displaySymbol ifNil: [ #printString ]-======-initializeWindow: arg1  arg1     title: 'Grid layout example';     initialExtent: 300 @ 400-======-itemNamed: arg1  ^self items detect: [:arg2 |  arg2 label = arg1 ]-======-fieldPlaceholderText  ^fieldPlaceholderText-======-icon: arg1  icon := arg1-======-addVariableFields: arg1  self tempNames withIndexDo: [:arg2 :arg3 |  arg1 add: (ContextTempEyeElement host: self object tempName: arg2 tempIndex: arg3) ]-======-shown: arg1  ^shown := arg1-======-presenterProvider: arg1  presenterProvider := arg1-======-classToTest  ^SpListPresenter-======-add: arg1 withSpec: arg2 left: arg3  self add: arg1 withSpec: arg2 top: nil bottom: nil left: arg3 right: nil-======-preview  ^preview-======-initializeDialogWindow: arg1  super initializeDialogWindow: arg1.  arg1     initialExtent: 600 @ 400;     title: 'Select a method';     closeOnBackdropClick: false-======-deselect  self widgetDo: [:arg1 |  arg1 changed: #deselect.        arg1 model selectionChanged.        arg1 dependents do: [:arg2 |  arg2 changed ] ]-======-newTable  ^self instantiate: SpTablePresenter-======-newColumnFrom: arg1  ^(SpMorphicTableColumn on: arg1)     width: arg1 width;     yourself-======-extent  ^transformationMorph extent-======-runCase  self resources do: [:arg1 |  arg1 availableFor: self ].  [ super setUp.  self performTest ] ensure: [ self tearDown.        self cleanUpInstanceVariables ]-======-listModel  ^listModel-======-badgeColor  ^self theme badgeColor-======-whenSelectionChangedDo: arg1  selection whenChangedDo: arg1-======-initialize  super initialize.  action := [  ].  displayBlock := [:arg1 |  arg1 asString ]-======-presenterAt: arg1 ifAbsent: arg2  ^self basicPresenters at: arg1 ifAbsent: [ [ self readSlotNamed: arg1 ] on: SlotNotFound do: arg2 ]-======-classToTest  ^SpToolBarPresenter-======-password  ^password-======-styles  ^styles-======-isEnabled  ^enabled-======-setUp  super setUp.  timeline := SpTimeline new-======-initializeTestedInstance  presenter-======-testUnselectSelectedItemRaisesSingleEvent  | tmp1 |  tmp1 := 0.  presenter     selectItem: 10;     whenSelectionChangedDo: [ tmp1 := tmp1 + 1 ];     unselectItem: 10.  self assert: tmp1 equals: 1-======-bindKeyCombination: arg1 toAction: arg2  -======-connectPresenters  self packageListAction.  self classListAction.  self protocolListAction.  self radioButtonsAction.  packageList selectIndex: 1-======-testSetRootModelPushesPresenterToList  self presenter presenterBlock: [:arg1 |  SpNullMillerPresenter on: (SpLabelPresenter new label: arg1 asString) ].  self presenter setRootModel: 1.  self assert: self presenter size equals: 1-======-addModelItemsToWindowMenu: arg1  self model addMenuItemsToWindowMenu: arg1-======-initializeTestedInstance  presenter items: #(10 20 30)-======-value  ^self host tempNamed: self tempName-======-addVariableFields: arg1  self variableFieldsToShow do: [:arg2 |  arg1 add: (IndexedEyeElement host: self object index: arg2) ]-======-addItemTo: arg1  arg1 addItem: [:arg2 |  arg2           name: 'Dynamic';           icon: (self iconNamed: #delete);           action: [ arg1 menuItems remove: arg2.              self needRebuild: false.              self buildWithSpec ] ].  self needRebuild: false.  self buildWithSpec-======-setUp  super setUp.  presenter items: #(10 20 30)-======-basicAdd: arg1 constraints: arg2 to: arg3  self subclassResponsibility-======-numberType  ^numberType-======-placeholder  ^placeholder-======-traverseInFocusOrderDo: arg1 excluding: arg2  self canTakeKeyboardFocus ifFalse: [ ^self ].  arg2 add: self.  arg1 value: self-======-color  ^color-======-buildPushMessageToolBarItem  ^SpToolBarButton new     label: 'Push';     icon: (self iconNamed: #glamorousUp);     help: 'Push a new status bar message';     action: [ self pushMessage ];     yourself-======-testActivateSubPresenterPushesElementToList  | tmp1 |  self presenter presenterBlock: [:arg1 |  tmp1 := SpMockMillerPresenter new ].  self presenter setRootModel: 1.  tmp1 activate.  self assert: self presenter size equals: 2-======-rightClicked  | tmp1 |  tmp1 := MouseButtonEvent new setType: nil position: widget center which: MouseButtonEvent yellowButton buttons: MouseButtonEvent yellowButton hand: nil stamp: nil.  (widget handlesMouseDown: tmp1) ifTrue: [ widget mouseDown: tmp1.        widget mouseUp: tmp1 ]-======-initializeTestedInstance  super initializeTestedInstance.  presenter addColumn: (SpStringTableColumn evaluated: [:arg1 |  arg1 ])-======-refresh  self needRebuild: false.  self buildWithSpec-======-testSubscriptionsAreTransfered  | tmp1 |  tmp1 := 0.  presenter beSingleSelection.  presenter whenSelectionChangedDo: [ tmp1 := tmp1 + 1 ].  presenter beMultipleSelection.  presenter selectIndex: 2.  self assert: tmp1 equals: 1-======-styles  ^styles-======-buildWidget  | tmp1 |  tmp1 := super buildWidget.  self presenter whenTextStylerChangedDo: [ self applyTextStyle ].  ^tmp1-======-initializePresenter  self property: #object whenChangedDo: [ self objectChanged ].  text whenBuiltDo: [:arg1 |  self text behavior: self object class ].  self initializeShortcuts-======-connectPresenters  -======-foundIcon  ^self iconNamed: #glamorousAccept-======-whenReadSelectionIsChangedDo: arg1  self property: #readSelection whenChangedDo: arg1-======-isSplitter  ^true-======-selected  ^selected value-======-classToTest  ^SpButtonPresenter-======-triggerOkAction  -======-title  ^'Pointers to: ' , self object printString-======-color  ^color ifNil: [ Color transparent ]-======-canDeselectByClick: arg1  self deprecated: 'It is not clear what option to select if deselected'-======-window  ^window-======-behavior: arg1  self deprecated: 'This method is an horrible hack because the VersionBrowser was using Code or Diff presenter but was only using the API of the Code presenter... This method and other methods from the CodePresenter API will be removed.'.  self contextClass: arg1-======-onDesactivation: arg1  onDesactivation := arg1-======-menu  ^tree menu-======-itemAtPath: arg1 expanding: arg2  | tmp1 |  (arg1 isNil or: [ arg1 isEmpty ]) ifTrue: [ ^nil ].  tmp1 := self rootItem.  arg1 do: [:arg3 |  (arg2 and: [ tmp1 isRoot not ]) ifTrue: [ tmp1 expand ].        tmp1 children size < arg3 ifTrue: [ ^nil ].        tmp1 := tmp1 children at: arg3 ].  ^tmp1-======-testUnselectNonSelectedItemRaisesNoEvent  | tmp1 |  tmp1 := 0.  presenter     selectItem: 10;     whenSelectionChangedDo: [ tmp1 := tmp1 + 1 ];     unselectItem: 20.  self assert: tmp1 equals: 0-======-topLeftOffset: arg1  topOffset := arg1 y.  leftOffset := arg1 x-======-initializeAnnouncements  SystemAnnouncer uniqueInstance weak when: ClassAdded , ClassCommented , ClassRecategorized , ClassModifiedClassDefinition , ClassRemoved , ClassRenamed , ClassReorganized , MethodAdded , MethodModified , MethodRecategorized , MethodRemoved , ProtocolAdded , ProtocolRemoved send: #updateClassesList to: self-======-inspectionMenu: arg1  self hasSelectedObject ifFalse: [ ^arg1 ].  ^super inspectionMenu: arg1-======-connectPresenters  button1 whenActivatedDo: [ self updateLabel ].  button1 whenDeactivatedDo: [ self updateLabel ].  button2 whenChangedDo: [ self updateLabel ].  button3 whenChangedDo: [ self updateLabel ]-======-testHideColumnHeadersInPresenterHidesThemInWidget  self presenter hideColumnHeaders.  self deny: self adapter isShowColumnHeaders-======-method4  -======-initializeSemaphore  uiWaitingSemaphore := Semaphore new-======-isResizeable  ^self model isResizeable-======-testReplaceItemList  | tmp1 |  tmp1 := false.  presenter whenModelChangedDo: [ tmp1 := true ].  presenter items: #(a b c).  self assert: (presenter model collection collect: #label) equals: #(a b c).  self assert: tmp1-======-testColumnNotHomogeneousDiferentRowsAndColumns  | tmp1 |  self place: label1 at: 1 @ 1.  self place: morph1 at: 2 @ 2.  self place: label2 at: 3 @ 3.  self place: morph2 at: 4 @ 4.  tmp1 := self newLayout.  tmp1 layout beColumnNotHomogeneous.  (self styleExtent: 30 @ 20) applyTo: label1.  (self styleExtent: 40 @ 20) applyTo: morph1.  (self styleExtent: 50 @ 20) applyTo: label2.  (self styleExtent: 60 @ 20) applyTo: morph2.  tmp1 layout: panel in: (0 @ 0 corner: 100 @ 100).  self assert: label1 bounds equals: (0 @ 0 corner: 30 @ 20).  self assert: morph1 bounds equals: (30 @ 20 corner: 70 @ 40).  self assert: label2 bounds equals: (70 @ 40 corner: 120 @ 60).  self assert: morph2 bounds equals: (120 @ 60 corner: 180 @ 80)-======-testAddPresenterToComponentListShouldNotBeEmpty  presenter addPresenter: SpButtonPresenter new.  self deny: presenter isEmpty-======-removeAll  pagesHolder removeAll-======-testSetSelectItemRaisesSelectionChangeEventWithSelectedPath  | tmp1 |  presenter whenSelectionChangedDo: [:arg1 |  tmp1 := arg1 selectedPath ].  presenter selectItem: 20.  self assert: tmp1 equals: #(1 1 3)-======-initializePresenters  text := self newText.  sideRuler := self newMorph.  sideRuler morph: (Morph new           color: Color yellow;           extent: 50 @ 500;           useGradientFill;           hResizing: #spaceFill;           vResizing: #spaceFill;           yourself).  text whenScrollValueChangedDo: [:arg1 |  self syncMorphPosition ].  text text: self loremIpsum-======-buildWidget  | tmp1 |  tmp1 := SpToolBarMorph new.  self addModelTo: tmp1.  ^tmp1-======-testContextMenu  | tmp1 tmp2 |  self assert: presenter contextMenu isNil.  tmp1 := SpMenuPresenter new.  tmp2 := false.  presenter whenMenuChangedDo: [ tmp2 := true ].  presenter contextMenu: tmp1.  self assert: presenter contextMenu equals: tmp1.  self assert: tmp2-======-width  ^width-======-transferSubscriptionsTo: arg1  self selectionHolder transferSubscriptionsTo: arg1 selectionHolder-======-addPresenter: arg1  arg1 whenActivatedDo: [:arg2 |  self changeSelection: arg2 selectedItem from: arg1 ].  arg1 owner: self.  layout add: arg1-======-asArray  ^specArray-======-testFocusRotationForward  mock := SpMockFocusOrderPresenter new     openWithSpec;     yourself.  self takeKeyboardFocus: mock.  self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter.  self pressTab.  self assert: (mock presenterAt: #secondPresenter) equals: self focusedPresenter.  self pressTab.  self assert: (mock presenterAt: #thirdPresenter) equals: self focusedPresenter.  self pressTab.  self assert: (mock presenterAt: #firstPresenter) equals: self focusedPresenter-======-whenMarksChangedDo: arg1  self property: #marks whenChangedDo: arg1-======-whenSelectionChanged: arg1  self dropList whenSelectionChanged: arg1-======-font  ^self model font-======-id  ^self model title-======-initializePresenters  classListPresenter := self newList.  methodListPresenter := self newList.  textPresenter := self newCode.  textPresenter acceptBlock: [:arg1 |  methodListPresenter selectedItem inspect ].  methodListPresenter display: #selector.  self focusOrder     add: classListPresenter;     add: methodListPresenter;     add: textPresenter-======-initialize  super initialize.  maxLength := 0.  acceptOnCR := true.  isPassword := false.  self whenAcceptOnCRChangedDo: [:arg1 |  self changed: #acceptOnCR: with: {arg1} ]-======-text  ^text-======-itemFilterBlock: arg1  self deprecated: 'Use #itemFilter: instead' transformWith: '`@receiver itemFilterBlock: `@statements1' -> '`@receiver itemFilter: `@statements1'.  ^self itemFilter: arg1-======-testNotPasswordIsSetInWidget  presenter bePassword: false.  self deny: self adapter isPassword-======-toolbarItemFont  ^toolbarItemFont ifNil: [ toolbarItemFont := self newToolbarItemFont ]-======-testUnselectWidgetIndexRaisesSelectionIndexChangeEventWithSelectedIndex  | tmp1 |  self adapter selectIndex: 1.  presenter selection whenChangedDo: [:arg1 |  tmp1 := arg1 selectedIndex ].  self adapter selectIndex: 0.  self assert: tmp1 equals: 0-======-setText: arg1 to: arg2  super setText: (self presenter textStyler applyStyleTo: arg1) to: arg2-======-openChangeSetBrowser  | tmp1 |  self selectedChangeSet ifNil: [ ^self inform: 'No change set selected' ].  tmp1 := self selectedChangeSet ifNil: [ ^self ].  ^Smalltalk tools messageList browseClasses: (RBBrowserEnvironment new forClasses: tmp1 changedClasses)-======-action  ^action-======-rightText  ^rightText-======-isMultipleSelection  ^selectionMode isMultipleSelection-======-widget: arg1  widget := arg1-======-displayBlock  ^self model displayBlock-======-contextKeyBindings: arg1  contextKeyBindings := arg1-======-label: arg1  ^label := arg1-======-showAllInstVars  ^self class showAllInstVars-======-testSelectWidgetIndexRaisesSelectionIndexChangeEventWithSelectedIndex  | tmp1 |  presenter selection whenChangedDo: [:arg1 |  tmp1 := arg1 selectedIndex ].  self adapter selectIndex: 1.  self assert: tmp1 equals: 1-======-normalFillStyle  ^Color transparent-======-clearFilterButton: arg1  clearFilterButton := arg1-======-daysToDisplayCount  ^self maxNumberOfWeeksToDisplay * self daysInAWeek-======-open: arg1 withSpecLayout: arg2  ^self open: arg1 withSpecLayout: arg2 using: arg1 defaultWindowPresenterClass-======-styleName  ^'toolBar.label'-======-handlesDoubleClick: arg1  handlesDoubleClick := arg1-======-adaptToDate: arg1  self monthYearLabel label: arg1 month asString.  self previousMonthButton action: [ self adaptToDate: arg1 onPreviousMonth ].  self nextMonthButton action: [ self adaptToDate: arg1 onNextMonth ].  self newDynamicPresentersListIn: #namesOfDaysLabels usingBuilder: self daysLabelsBuilder.  self newDynamicPresentersListIn: #daysButtons usingBuilder: (self daysButtonsBuilderFrom: arg1)-======-autoAccept: arg1  ^self sliderInput autoAccept: arg1-======-applyTo: arg1  self color ifNotNil: [:arg2 |  arg1 color: arg2 ].  self backgroundColor ifNotNil: [:arg2 |  arg1 backgroundColor: arg2 ]-======-testUnselectAllInWidgetNotRaisesEmptySelectionChangeEvent  | tmp1 |  presenter selection whenChangedDo: [:arg1 |  tmp1 := arg1 ].  self adapter selectIndex: 0.  self assert: tmp1 isNil-======-application: arg1  application := arg1-======-initializePresenters  form := (self instantiate: SpDemoLabeledContainer)     label: 'form';     subwidget: (self instantiate: SpDemoStandaloneFormPresenter on: self announcingObject).  resultPane := (self instantiate: SpDemoLabeledContainer)     label: 'result';     subwidget: (table := self newTable).  table     addColumn: (SpStringTableColumn title: 'Name' evaluated: #key);     addColumn: (SpStringTableColumn title: 'Value' evaluated: #value);     items: self model elements;     beResizable.  self focusOrder     add: form;     add: table-======-doActivateAtIndex: arg1  self presenters at: arg1 ifAbsent: [ ^self ].  activationBlock cull: ((SpSingleSelectionMode on: self)           basicSelectIndex: arg1;           yourself)-======-from: arg1 port: arg2 to: arg3 transform: arg4  self from: arg1 port: arg2 to: arg3 transform: arg4 postTransmission: nil-======-sliders  ^sliders-======-newSplitter  ^SpPanedResizerMorph newVertical-======-presenterAt: arg1 ifAbsent: arg2  ^self basicPresenters at: arg1 ifAbsent: [ [ self readSlotNamed: arg1 ] on: SlotNotFound do: arg2 ]-======-add: arg1 withSpec: arg2 top: arg3 bottom: arg4  self add: arg1 withSpec: arg2 top: arg3 bottom: arg4 left: nil right: nil-======-whenResizingDo: arg1  self announcer when: WindowResizing do: arg1-======-searchValueOf: arg1  ^self displayValueOf: arg1-======-specInitializationStrategy: arg1  specInitializationStrategy := arg1-======-step  self objectChanged-======-updateText  self text: self text-======-whenAutoDeselectChangedDo: arg1  self deprecated: 'Should not use. This feature is not supported anymore'.  self property: #autoDeselect whenChangedDo: arg1-======-allSelectedItems  | tmp1 |  tmp1 := OrderedCollection new.  self selected ifTrue: [ tmp1 add: self ].  self children value do: [:arg1 |  tmp1 addAll: arg1 allSelectedItems ].  ^tmp1-======-beForText  self deprecated: 'The forCode functionality has moved to TextCodePresenter, please use it instead TextPresenter.' on: '2019-04-05' in: #Pharo8-======-strongSelectionChanged: arg1  self presenter activatesOnDoubleClick ifFalse: [ ^self ].  self presenter doubleClickAtIndex: arg1 selectedIndex-======-testSelectMultipleIndexesRaisesSelectionChangeEventMultipleTimes  | tmp1 |  tmp1 := 0.  presenter whenSelectionChangedDo: [:arg1 |  tmp1 := tmp1 + 1 ].  presenter selectIndex: 1.  presenter selectIndex: 3.  self assert: tmp1 equals: 2-======-whenBorderWidthChanged: arg1  self deprecated: 'Use #whenBorderWidthChangedDo: instead.' transformWith: '`@receiver whenBorderWidthChanged: `@statements' -> '`@receiver whenBorderWidthChangedDo: `@statements'.  self whenBorderWidthChangedDo: arg1-======-selectedIndexes  | tmp1 |  tmp1 := self widget getCurrentSelectionIndex.  ^tmp1 = 0 ifTrue: [ #() ] ifFalse: [ {tmp1} ]-======-searchMatching: arg1  searchBlock := arg1.  self enableSearch-======-adapterName  ^#GridAdapter-======-preserveLayoutPosition  self owner layoutPolicy preservePositionProportionOn: self owner-======-selectedContacts  ^table selectedItems-======-beUnselected  self setSelection: false-======-classToTest  ^SpLabelledDropList-======-thumbnailMorph  ^self object taskThumbnailOfSize: self thumbnailSize-======-radioButtonInstanceSide  ^radioButtonInstanceSide-======-genderLabel: arg1  genderLabel := arg1-======-selectPage: arg1  self widgetDo: [:arg2 |  arg2 page: (arg2 pageWithModel: arg1) ]-======-whenActivatedDo: arg1  activationBlock := arg1-======-defaultInitialExtent  ^400 @ 300-======-close  self widget ifNotNil: [:arg1 |  arg1 close ]-======-addLazyPage: arg1 label: arg2  self addLazyPage: arg1 label: arg2 collapsable: false-======-rightClicked  | tmp1 |  tmp1 := MouseButtonEvent new setType: nil position: widget center which: MouseButtonEvent yellowButton buttons: MouseButtonEvent yellowButton hand: nil stamp: nil.  self widget click: tmp1-======-state  ^state-======-whenIconChangedDo: arg1  self property: #icon whenChangedDo: arg1-======-doubleClickFirstRowAndColumn: arg1  self waitUntilUIRedrawed.  arg1 widget doubleClick: (MouseEvent new           setPosition: arg1 widget submorphs first submorphs first bounds center;           yourself)-======-notifyPropertyChanged: arg1  self flag: #todo.  (self observablePropertyNamed: arg1) valueChanged-======-initializeWidgets  input := self instantiate: SpTextInputFieldPresenter.  dropList := self instantiate: SpDropListPresenter.  self focusOrder     add: input;     add: dropList-======-modelChanged  table items: self model elements-======-browseSubMenu: arg1  arg1 addGroup: [:arg2 |  arg2 addItem: [:arg3 |  arg3                 name: 'Browse Full';                 action: [ self browseSelectedObject ];                 shortcut: PharoShortcuts current browseShortcut ].        arg2 addItem: [:arg3 |  arg3                 name: 'Browse Class';                 action: [ self browseSelectedObjectClass ] ].        arg2 addItem: [:arg3 |  arg3                 name: 'Browse Hierarchy';                 action: [ self browseSelectedObjectClassHierarchy ];                 shortcut: $h meta ] ]-======-presentersInFocusOrder  ^self presenters-======-unselectPath: arg1  self selection unselectPath: arg1-======-windowIsOpening  isClosed := false-======-size  ^self presenters size-======-extent  ^self widget extent-======-onActivation  ^onActivation-======-pageClass  ^SpDemoRadioButtonsPresenter-======-testShowColumnHeadersRaisesOneEventOnly  | tmp1 |  tmp1 := 0.  presenter whenShowColumnHeadersChangedDo: [ tmp1 := tmp1 + 1 ].  presenter showColumnHeaders.  self assert: tmp1 equals: 1-======-initializePresenters  layout := SpMillerLayout newHorizontal-======-property: arg1 whenChangedDo: arg2  (self observablePropertyNamed: arg1) whenChangedDo: arg2-======-connectPresenters  textField acceptBlock: [:arg1 |  self class environment at: arg1 asSymbol ifPresent: [:arg2 |  methodBrowser messages: arg2 methods ] ifAbsent: [ methodBrowser messages: #() ] ]-======-calculateHomogeneousRowHeights  | tmp1 |  tmp1 := 0.  morphs do: [:arg1 |  tmp1 := tmp1 max: (self minHeightOf: arg1) ].  ^Array new: numRows withAll: (self baseRowHeight max: tmp1)-======-accept: arg1 notifying: arg2  ^self selectedMessage ifNotNil: [:arg3 |  arg3 methodClass compile: arg1 classified: arg3 protocol notifying: arg2 ]-======-initializePresenters  < script: 'self new openWithSpec'>  (button := self newButton)     label: 'Choice';     action: [ text text: text text , button label , String cr ].  menu := self newMenuButton     help: 'An example menu.';     menu: [ self newExampleMenu ];     yourself.  text := self newText-======-traverseInFocusOrderDo: arg1 excluding: arg2  self presentersInFocusOrder do: [:arg3 |  arg3 traverseInFocusOrderDo: arg1 excluding: arg2 ]-======-= arg1  ^super = arg1 and: [ index = arg1 index ]-======-beExpand  self expand: true-======-stateSelector  ^self state ifNil: [ nil ] ifNotNil: [ #state ]-======-to: arg1  self toPort: arg1 inputPortDefault-======-testSelectItemOutsideRangeUnsetsSelectedItem  presenter selectItem: 40.  self assert: presenter selection selectedItem equals: nil-======-setFocusOrder  self focusOrder     add: changeSorterLeft;     add: changeSorterRight-======-inspect: arg1  self object: arg1.  self list selectIndex: 1.  self refresh-======-updateMenu  -======-model: arg1  model := arg1.  model isSortable ifTrue: [ self sortableUsing: model sortFunction ]-======-newSearchInput  ^self instantiate: SpSearchInputFieldPresenter-======-icon  ^icon-======-aboutText  ^self model model ifNotNil: [:arg1 |  arg1 aboutText ]-======-footnoteIcon  ^footnoteIcon-======-updateView  table items: contactBook contents-======-shouldRefreshItem: arg1 fromAnnouncement: arg2  ^refreshingBlock cull: arg1 cull: arg2 cull: self-======-includesPaths: arg1  ^selection includesAll: arg1-======-window  ^self hasWindow ifTrue: [ self root ] ifFalse: [ nil ]-======-leftFraction  ^layoutFrame leftFraction-======-selectedBehavior  self flag: #TODO.  ^self behavior-======-isShowColumnHeaders  ^widget isShowColumnHeaders-======-useProportionalLayout  -======-build  ^self buildDynamicPresenter     layout: self buildLayout;     yourself-======-testUnselectUnselectedPathRaisesNoSelectionEvent  | tmp1 |  tmp1 := 0.  presenter     selectPath: #(1 2);     whenSelectionChangedDo: [ tmp1 := tmp1 + 1 ];     unselectPath: #(2 2).  self assert: tmp1 equals: 0-======-incomingTransmission: arg1 from: arg2  self subclassResponsibility-======-testWhenNumberTypeChangedDo  | tmp1 tmp2 |  tmp1 := 0.  presenter whenNumberTypeChangedDo: [:arg1 |  tmp1 := tmp1 + 1.        tmp2 := arg1 ].  presenter beFloat.  self assert: tmp1 equals: 1.  self assert: tmp2 equals: Float-======-encrypted  ^self model isPassword-======-minus  ^minus-======-bottomFraction: arg1  bottomFraction := arg1-======-