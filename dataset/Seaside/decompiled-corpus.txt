cite: arg1  self attributes at: 'cite' put: arg1httpOnly  ^httpOnlystring: arg1  self document string: arg1nextPutAll: arg1  stream nextPutAll: arg1accept: arg1  arg1 visitDecoration: selfcreateRenderContinuation  ^(self application preferenceAt: #renderPhaseContinuationClass) value newstatusString  ^self isRunning ifTrue: [ 'running' ] ifFalse: [ 'stopped' ]indent  firstLine ifTrue: [ firstLine := false ] ifFalse: [ html break ].  indentLevel timesRepeat: [ html space: 2 ].  html flushredirectTo: arg1  self responseGenerator     redirectTo: arg1;     respondname: arg1  self attributes at: 'name' put: arg1request: arg1 label: arg2 default: arg3 onAnswer: arg4  self call: (WAInputDialog new           addMessage: arg1;           default: arg3;           label: arg2;           yourself) onAnswer: arg4flush  committed ifFalse: [ self commit ].  self nextChunk: bufferedStream count put: bufferedStream contents.  bufferedStream resetvisitPainter: arg1  arg1 updateUrl: self urlmimeType  ^mimeTypechooseFrom: arg1 onAnswer: arg2  self chooseFrom: arg1 default: nil caption: nil onAnswer: arg2testAnswer  self assert: (WADynamicVariable use: 'value' during: [ true ])printOn: arg1  super printOn: arg1.  arg1     nextPut: $(;     nextPutAll: self greaseString;     nextPut: $)parameterName  ^'parameter'items  ^itemscontents  ^contentsinitialize  super initialize.  child := WAComponent newaddFilterLast: arg1  | tmp1 tmp2 |  tmp1 := nil.  tmp2 := self filter.  [ tmp2 = self ] whileFalse: [ tmp1 := tmp2.        tmp2 := tmp2 next ].  arg1 setNext: tmp2.  tmp1 isNil ifTrue: [ self setFilter: arg1 ] ifFalse: [ tmp1 setNext: arg1 ].  ^arg1testUrlOf  self assert: (WATestingMetadataFileLibrary / #jsbootstrapJs) greaseString = '/files/WATestingMetadataFileLibrary/js/bootstrap.js'testFullDocumentWithBlock  | tmp1 |  tmp1 := WAHtmlCanvas builder     fullDocument: true;     rootBlock: [:arg1 |  arg1 title: 'title'.        arg1 stylesheet add: 'body{font-size:12px;}'.        arg1 javascript add: 'alert("loaded")' ];     render: [:arg2 |  arg2 unorderedList: [ arg2 listItem: 'an item' ] ].  self assert: tmp1 = '<html><head><title>title</title><style type="text/css">body{font-size:12px;}</style><script type="text/javascript">alert("loaded")</script></head><body onload="onLoad()"><ul><li>an item</li></ul><script type="text/javascript">function onLoad(){};</script></body></html>'loadScripts  ^loadScriptsvalueForField: arg1  | tmp1 tmp2 tmp3 |  tmp1 := (super valueForField: arg1) readStream.  (tmp1 atEnd not and: [ tmp1 next = $? ]) ifFalse: [ ^nil ].  tmp2 := (tmp1 upTo: $,) greaseInteger.  (tmp2 isNil or: [ tmp1 atEnd ]) ifTrue: [ ^nil ].  tmp3 := tmp1 upToEnd greaseInteger.  tmp3 isNil ifTrue: [ ^nil ].  ^tmp2 @ tmp3renderCellForDate: arg1 row: arg2 index: arg3 on: arg4  arg4 tableData     style: 'background-color: ' , (self colorForDate: arg1 rowIndex: arg3);     align: 'center';     with: [ arg4 anchor           callback: [ self selectDate: arg1 rowIndex: arg3 ];           with: (cellBlock value: arg2 value: arg1) ]autofocus: arg1  autofocus := arg1isSupported  ^self formClass notNiltag  ^'keygen'swap  parent inform: 'Test passes!' onAnswer: [  ]assertNoCookies: arg1  self assert: arg1 response cookies isEmptylogoff  state := #OFF.  test ifTrue: [ self inform: 'Logged off' onAnswer: [  ] ]day: arg1  day := arg1 greaseInteger ifNil: [ 1 ]renderCogValuesOn: arg1  input  ^inputbadRequest  self status: WAResponse statusBadRequestexecute  (UIManager default chooseFrom: (self codecs collect: [:arg1 |  arg1 name ]) values: self codecs lines: #() title: 'Select encoding' translated) ifNotNil: [:arg2 |  self adaptor codec: arg2 ]nextPut: arg1  delegate nextPut: arg1resourceUrl: arg1  resourceUrl := arg1 seasideUrlresourceUrl: arg1  self url: (canvas absoluteUrlForResource: arg1)testRemoveKey  attributes at: 'id' put: 'foo'.  self assert: (attributes removeKey: 'id') = 'foo'.  self assert: (attributes removeKey: 'id') isNiltestRfc3  | tmp1 |  tmp1 := WAAccept fromString: 'text/*, text/html, text/html;level=1, */*'.  self assert: tmp1 size = 4.  self assert: tmp1 at: 1 main: 'text' sub: '*' quality: 1.0.  self assert: tmp1 at: 2 main: 'text' sub: 'html' quality: 1.0.  self assert: tmp1 at: 3 main: 'text' sub: 'html' quality: 1.0.  self assert: tmp1 at: 4 main: '*' sub: '*' quality: 1.0renderHandlerConfigurationOn: arg1  | tmp1 tmp2 |  tmp2 := self exceptionFilter.  tmp2 isNil ifTrue: [ arg1 paragraph: 'Exception handler configuration attribute not found!'.        ^self ].  tmp1 := tmp2 configuration attributeAt: #exceptionHandler.  arg1 form: [ arg1 div: [ arg1 select                 beOptional;                 optionalLabel: '(inherited default)';                 list: tmp1 options asArray;                 selected: (tmp2 configuration at: tmp1 key);                 callback: [:arg2 |  arg2 isNil ifTrue: [ tmp2 configuration removeExpressionAt: tmp1 key ifAbsent: [  ] ] ifFalse: [ tmp2 configuration takeValue: arg2 forAttribute: tmp1 ] ].              arg1 submitButton with: 'Set Handler' ] ]width: arg1  features at: #width put: arg1isExpired: arg1 now: arg2  (maximumAbsoluteAge > 0 and: [ arg2 - arg1 creationTime > maximumAbsoluteAge ]) ifTrue: [ ^true ].  (maximumRelativeAge > 0 and: [ arg2 - arg1 accessTime > maximumRelativeAge ]) ifTrue: [ ^true ].  ^falsebeArchives  self relationship: 'archives'newApplication  ^WARedirectingApplication new     cache: WAUnidirectionalCache new;     yourselfopenOn: arg1  headerAt: arg1 put: arg2  self committedCheck.  ^super headerAt: arg1 put: arg2requestVersionFor: arg1  self shouldNotImplementadditions: arg1  additions := arg1expunge: arg1  arg1 == byAccessStart ifTrue: [ byAccessStart := arg1 next ].  arg1 == byCreationStart ifTrue: [ byCreationStart := arg1 next ].  arg1 == byAccessEnd ifTrue: [ byAccessEnd := arg1 previous ].  arg1 == byCreationEnd ifTrue: [ byCreationEnd := arg1 previous ].  arg1 expungepostCopy  super postCopy.  continuations := continuations copyrenderConfigurationOn: arg1  arg1 form: [ arg1 table           cellspacing: 0;           cellpadding: 0;           with: [ self renderMaximumAbsoluteAgeOn: arg1.              self renderMaximumRelativeAgeOn: arg1 ].        self renderCacheReplaceOn: arg1 ]telephoneInput  ^self brush: WATelephoneInputTag newrenderContentOn: arg1  self renderSimpleOn: arg1.  self renderSimpleParenthesesOn: arg1tag  ^'embed'parents  ^Array with: WARequestHandlingConfiguration instanceinitialContinuationClass  ^(self preferenceAt: #initialContinuationClass) valueseasidePossibleCauses  ^#('You are trying to use a session or other request handler that has expired')tag  ^'br'children  ^Array with: componentaddAllToPath: arg1  arg1 do: [:arg2 |  self addToPath: arg2 ]testLabelTag  self assert: [:arg1 |  arg1 label: 'foo' ] gives: '<label>foo</label>'.  self assert: [:arg1 |  arg1 label           for: 'bar';           with: 'zork' ] gives: '<label for="bar">zork</label>'indicateClassMessages  showInstance := false.  showComment := false.  self clearMessageAndProtoclSelection.  self changed: #showattributes  ^attributestestValues  one at: 'foo' put: 1.  two at: 'bar' put: 2.  two at: 'foo' put: 3.  self assert: merged values asArray = #(1 2 3)childrenDo: arg1  startYear  ^startYearoptionForValue: arg1  ^arg1 valuerenderGetOn: arg1  arg1 heading     level2;     with: 'GET'.  arg1 heading     level3;     id: #getheading;     with: self get.  self renderCharacterByCharacter: self get on: arg1.  arg1 form     get;     id: #getform;     with: [ arg1 div: [ arg1 textInput on: #get of: self.              arg1 submitButton text: self get ] ].  self renderClassName: self get on: arg1secondKey: arg1  secondKey := arg1deleteOldOrConflictingCookieIn: arg1 context: arg2  | tmp1 tmp2 |  tmp1 := self cookieFromContext: arg2 ifAbsent: [ nil ].  tmp2 := self queryFieldKeyFromContext: arg2.  (tmp1 notNil and: [ tmp2 isNil or: [ tmp1 value = tmp2 ] ]) ifTrue: [ self deleteSessionCookieOf: arg1 from: arg2 ]selectBlock: arg1  selectBlock := arg1updateRoot: arg1  super updateRoot: arg1.  arg1 title: self titlemainCss  ^' /* this is from http://kalsey.com/tools/csstabs/ - would also be nice to do http://www.alistapart.com/articles/slidingdoors/ */.kalsey .navigation-options {	border-bottom : 1px solid #ccc;	margin : 0;	padding-bottom : 19px;	padding-left : 10px;}.kalsey .navigation-options ul, .kalsey .navigation-options li	{	display : inline;	list-style-type : none;	margin : 0;	padding : 0;}.kalsey .navigation-options a:link, .kalsey .navigation-options a:visited	{	background : #E8EBF0;	border : 1px solid #ccc;	color : #666;	float : left;	font-size : small;	font-weight : normal;	line-height : 14px;	margin-right : 8px;	padding : 2px 10px 2px 10px;	text-decoration : none;}.kalsey .navigation-options a:link.active, .kalsey .navigation-options a:visited.active	{	background : #fff;	border-bottom : 1px solid #fff;	color : #000;}.kalsey .navigation-options ul a:hover	{	color : #f00;}.kalsey .navigation-options .option-selected a {	background : #fff;	border-bottom : 1px solid #fff;	color : #000;}.kalsey .navigation-content {	background : #fff;	border : 1px solid #ccc;	border-top : none;	clear : both;	margin : 0px;	padding : 15px;	line-height: 1.1;  /* IE6 CSS workaround - http://www.dracos.co.uk/web/css/ie6floatbug/ */}/* customization */.kalsey .navigation-content tbody tr th, .kalsey .navigation-content tfoot tr th {	text-align: right;	vertical-align: top;}.kalsey .navigation-content h2 {	font-size: 1.2em;}.kalsey .navigation-content tbody.right tr td, .kalsey .navigation-content tfoot.right tr td {	text-align: right;}'count: arg1  count := arg1url  ^urlinitialize  super initialize.  self beSubmittestAddKeyToUrl  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := tmp1 request uri copy.  strategy addKey: 'The_Metaphor' toUrl: tmp2.  self assert: tmp2 greaseString = '/catspajamassc2?_s=The_Metaphor'tooltip  ^'Class Browser'systemCategoryListIndex  ^(self packages sorted: [:arg1 :arg2 |  arg1 packageName <= arg2 packageName ]) indexOf: selectedPackageparentChildPairsDo: arg1  self parent isNil ifFalse: [ self parent parentChildPairsDo: arg1.        arg1 value: self parent value: self ]testAddClass  self assert: [:arg1 |  arg1 addClass: 'foo' ] gives: ' class="foo"'.  self assert: [:arg1 |  arg1           addClass: 'foo';           addClass: 'bar' ] gives: ' class="foo bar"'raiseError  | tmp1 |  tmp1 := self error: 'Test Error'.  self inform: 'Signalling the error returned: ' , tmp1 greaseString onAnswer: [  ]requestBodyFor: arg1  self shouldNotImplementseasideMimeDocumentType: arg1  arg1 = self mimeType ifTrue: [ ^self ].  ^self copy     mimeType: arg1;     yourselfcitation  ^self tag: 'cite'stop  self serverClass stopbyCreationListEntry: arg1  byCreationListEntry := arg1handleError: arg1  self sendFailFor: arg1.  ^super handleError: arg1ie8  self ie: '8'selection: arg1  selection := arg1accessTime  ^accessTimeinitialize  super initialize.  startHour := 0.  endHour := 23.  self time: Time midnighttestExpireInPast  | tmp1 |  tmp1 := WACookie key: 'unit' value: 'testing'.  tmp1 expireInPast.  self assert: tmp1 expiry < DateAndTime now asUTC.  self assert: tmp1 expiry >= (DateAndTime year: 1970 day: 1 hour: 0 minute: 0 second: 0) asUTC.  self assert: tmp1 maxAge = 0renderConfigurationOn: arg1  self renderParentSelectorOn: arg1.  self renderAncestryListOn: arg1editor  ^configurationEditoraddCallback  self hasCallback ifFalse: [ canvas flush.        ^self ].  canvas hiddenInput     callback: [ callbackBlock value: self setValueWithNewDate ];     with: nilrenderValuesOn: arg1  | tmp1 |  tmp1 := Duration milliseconds: Time millisecondClockValue.  self renderLabel: 'Uptime' value: (self printDuration: tmp1) on: arg1.  self renderLabel: 'Version' value: Smalltalk version on: arg1.  self renderLabel: 'Image Path' value: (self image vm getSystemAttribute: 1) on: arg1.  self renderLabel: 'Number of Sessions' value: [ arg1 text: self numberOfSessions.        arg1 space.        arg1 anchor           callback: [ self clear.              self requestContext redirectTo: self application url ];           title: 'Expires all sessions and does a full garbage collect.';           with: 'Clear' ] on: arg1.  self renderLabel: 'Number of Classes' value: Smalltalk allClasses size on: arg1addHandheld  self addMedia: 'handheld'visitPasswordAttribute: arg1  self visitAttribute: arg1testCookiesDisabledMismatchingWithCookieHandler  | tmp1 tmp2 tmp3 |  registry := self createRegistry.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: tmp3.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1datetime: arg1  self attributes at: 'datetime' put: arg1expressions  ^expressionsyear  ^year contentslabel  ^'Remove'request: arg1  | tmp1 tmp2 |  tmp1 := WARequest new     setPostFields: arg1;     yourself.  tmp2 := WARequestContext request: tmp1 response: WAResponse new.  registry handle: tmp2states  ^#()initializeWithKeys: arg1  self initialize.  keys := arg1.  current := 1addLoadScript: arg1  ^self scriptGenerator addLoadScript: arg1basicSystemConfiguration  ^WAConfigurationMock new     description: [:arg1 |  (arg1 string: #a) default: #default ];     yourselftestGreaseString  | tmp1 |  tmp1 := WAEmailAddress address: 'philippe.marschall@gmail.com' username: 'Philippe Marschall'.  self assert: tmp1 greaseString = '"Philippe Marschall" <philippe.marschall@gmail.com>'with: arg1  ^self copy     addToPath: arg1;     yourselfnoAutocomplete  self autocomplete: 'off'label: arg1  self attributeAt: 'label' put: arg1close  closed := truevisitTask: arg1  super visitTask: arg1.  arg1 isExecuting ifFalse: [ [ arg1 execute ] on: WARenderNotification do: [:arg2 |   ] ]initialRequest: arg1  supportsSwitchToNewCompiler  Smalltalk at: #PragmaSetting ifAbsent: [ ^true ].  ^falsewriteStylesOn: arg1  styles ifNil: [ ^self ].  styles do: [:arg2 |  arg1 print: ((WALinkElement root: self)                 beStylesheet;                 beCss;                 document: arg2;                 yourself) ]value  self value: nilconfigurationComponent  ^WAUserConfigurationEditor on: selftestAddAllToPath  url addAllToPath: #('files' 'WAStandardFiles' 'seaside.jpg').  self assert: url path size = 3.  self assert: url path first = 'files'.  self assert: url path last = 'seaside.jpg'.  self assert: url greaseString = '/files/WAStandardFiles/seaside.jpg'section: arg1  self section with: arg1testIsCommitted  super testIsCommitted.  self deny: self response isCommitteddefaultDispatcher  ^WAAdmin defaultDispatcherat: arg1 ifAbsent: arg2  | tmp1 |  tmp1 := dictionary at: arg1 ifAbsent: [ ^arg2 value ].  tmp1 incrementCount.  ^tmp1 valuemimetypeOf: arg1  ^self mimetypeForFile: (self asFilename: arg1)testAbsoluteHttpUrl  self assert: [:arg1 |  arg1 anchor resourceUrl: 'http://www.google.com/track.js' ] gives: '<a href="http://www.google.com/track.js"></a>'extraParameters: arg1  self url addField: arg1isPlainText  ^truemenubar: arg1  features at: #menubar put: arg1clearSearchContexts  cachedSearchContexts := IdentityDictionary newassertNotExisiting: arg1  self assert: arg1 status = 404.  self assert: arg1 contentType main = 'text'.  self assert: arg1 contentType sub = 'plain'type  ^'url'testCookiesDisabledFieldNoCookieHandlerAbsent  | tmp1 tmp2 |  registry := self createRegistry.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1attributeAt: arg1 put: arg2  ^self attributes at: arg1 put: arg2writeScriptsOn: arg1  scripts ifNil: [ ^self ].  scripts do: [:arg2 |  arg1 print: ((WAScriptElement root: self)                 beJavascript;                 document: arg2;                 yourself) ]value  ^self attributes at: 'value'priority  ^100figure  ^self tag: 'figure'testCompileByteArrayAgain  | tmp1 tmp2 |  tmp1 := WATestingFiles default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoJpeg).  tmp3 := (1 to: 255) asByteArray.  tmp2 := WAFile new     contentType: WAMimeType imageJpeg;     contents: tmp3;     fileName: 'demo.jpeg';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoJpeg).  tmp4 := tmp1 perform: #demoJpeg.  self assert: tmp4 = tmp3.  tmp5 := tmp1 perform: #demoJpeg.  self assert: tmp4 = tmp5.  tmp3 := (1 to: 255) reverse asByteArray.  tmp2 := WAFile new     contentType: WAMimeType imageJpeg;     contents: tmp3;     fileName: 'demo.jpeg';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoJpeg).  tmp4 := tmp1 perform: #demoJpeg.  self assert: tmp4 = tmp3.  tmp5 := tmp1 perform: #demoJpeg.  self assert: tmp4 = tmp5 ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoJpeg) ]main  ^mainconsumer  ^consumercreateContinuationCache  ^WAHashCache initialSize: 7 maximumSize: 20 maximumAbsoluteAge: 0 maximumRelativeAge: 0 overflowAction: WAHashCache removeRelativeOldestlevel1  level := 1callback: arg1  self url addField: (self storeCallback: (WAMapCallback on: arg1)) value: ''initialize  super initialize.  self resettestAt  one at: 'foo' put: 1.  two at: 'bar' put: 2.  self assert: (merged at: 'foo') = 1.  self assert: (merged at: 'bar') = 2.  two at: 'foo' put: 3.  self assert: (merged at: 'foo') = 1.  self assert: (merged at: 'zork') isNil<= arg1  ^self sortOrder <= arg1 sortOrderactions  ^#(doIt inspectIt)relativeTo: arg1  | tmp1 tmp2 tmp3 |  tmp1 := self path copy.  tmp2 := arg1 path copy.  [ tmp1 notEmpty and: [ tmp2 notEmpty and: [ tmp1 first = tmp2 first ] ] ] whileTrue: [ tmp1 removeFirst.        tmp2 removeFirst ].  tmp3 := OrderedCollection new.  tmp1 size timesRepeat: [ tmp3 add: '..' ].  tmp3 addAll: tmp2.  ^tmp3quality: arg1  quality := arg1nonFileSelectors  ^#(cacheDuration fileSelectors deployFiles configurationComponent selectorsToInclude nonFileSelectors)isActive  ^filter notifications notEmptyregisterNewHandler  ^registry register: WATestNoopSessionHandler newloadFile  | tmp1 tmp2 |  file ifNil: [ self inform: 'no file selected' onAnswer: [  ].        ^self ].  tmp1 := MCVersionReader readerClassForFileNamed: file fileName.  tmp1 ifNil: [ self inform: file fileName , ' is not in a known format' onAnswer: [  ].        ^self ].  tmp2 := tmp1 versionFromStream: file contents asByteArray readStream.  tmp2 loaddo: arg1  delegates do: [:arg2 |  arg2 do: arg1 ]default: arg1  default := arg1 collect: [:arg2 |  GRPlatform current bindingOf: arg2 ]onChildren: arg1  childrenBlock := arg1testNextId  self assert: [:arg1 |  arg1 div id: arg1 nextId ] gives: '<div id="id1"></div>'.  self assert: [:arg1 |  arg1 div           id: 'foo';           id: arg1 nextId ] gives: '<div id="id1"></div>'comment  ^commentbeTableOfContents  self relationship: 'contents'count: arg1  count := arg1testAddToPathEmptyString  url addToPath: ''.  self assert: url path isEmpty.  self assert: url greaseString = '/'expectedMimeType  self subclassResponsibilityisPost  ^self method = 'POST'valuesAt: arg1 put: arg2  values at: arg1 put: arg2.  ^values sizeaddToCondition: arg1  condition := condition , arg1restart: arg1  self stop: arg1.  self start: arg1sessionIdFromContext: arg1  ^arg1 request sslSessionIdcopyTo: arg1  ^self copy setNext: (self next copyTo: arg1)= arg1  self == arg1 ifTrue: [ ^true ].  self class = arg1 class ifFalse: [ ^false ].  ^self contentType = arg1 contentTypeaddKey: arg1 toUrl: arg2  self cookieFromContext: self requestContext ifAbsent: [ self addPathParameterWithValue: arg1 to: arg2 ]testSet  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := Set with: 1 with: 2.  tmp2 := tmp1 snapshotCopy.  tmp1 add: 3.  tmp3 := tmp1 snapshotCopy.  tmp1 remove: 1.  tmp4 := tmp1 snapshotCopy.  tmp1 restoreFromSnapshot: tmp2.  self assert: tmp1 size equals: 2.  self assert: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self deny: (tmp1 includes: 3).  tmp1 restoreFromSnapshot: tmp3.  self assert: tmp1 size equals: 3.  self assert: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self assert: (tmp1 includes: 3).  tmp1 restoreFromSnapshot: tmp4.  self assert: tmp1 size equals: 2.  self deny: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self assert: (tmp1 includes: 3).  tmp1 add: 4.  tmp1 restoreFromSnapshot: tmp4.  self assert: tmp1 size equals: 2.  self deny: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self assert: (tmp1 includes: 3).  self deny: (tmp1 includes: 4)html: arg1  self flush.  self document nextPutAll: arg1 greaseStringtestExceptionHandlerNesting  | tmp1 tmp2 |  tmp1 := WARenderLoopContinuation new.  tmp2 := WASignalingErrorHandler new.  self shouldnt: [ tmp1 withNotificationHandlerDo: [ tmp2 handleExceptionsDuring: [ WAError signal: 'Testing 1, 2, 3' ] ] ] raise: WARenderNotificationoptions  ^optionsfilters  | tmp1 tmp2 |  tmp1 := self filter.  tmp2 := OrderedCollection new.  [ tmp1 = self ] whileFalse: [ tmp2 add: tmp1.        tmp1 := tmp1 next ].  ^tmp2initialize  super initialize.  output := 0onSeeked: arg1  self document scriptGenerator event: 'seeked' do: arg1 on: selftype: arg1  self attributes at: 'type' put: arg1writeBodyOn: arg1  self parts asArray sort do: [:arg2 |  self writeMiddleBoundaryOn: arg1.        arg2 writeOn: arg1 ].  self writeEndBoundaryOn: arg1renderValuesOn: arg1  self renderLabel: 'Seaside Version' value: GRPlatform current seasideVersion greaseString on: arg1.  self renderLabel: 'Grease Version' value: GRPlatform current versionString on: arg1.  self renderLabel: 'Packages' value: [ self renderPackagesOn: arg1 ] on: arg1cellpadding: arg1  self attributes at: 'cellpadding' put: arg1sourceLanguage: arg1  self attributeAt: 'srclang' put: arg1value: arg1  value := arg1openObject  stream nextPut: ${tableData: arg1  self tableData with: arg1quality  ^qualityrenderReversedOn: arg1  arg1 checkbox     id: arg1 nextId;     value: reversed;     callback: [:arg2 |  reversed := arg2 ].  arg1 space.  arg1 label     for: arg1 lastId;     with: 'reversed'testMismatchingWithBothHandlers  | tmp1 tmp2 tmp3 tmp4 |  registry := self createRegistryWithCookiesEnabled.  tmp3 := self registerNewHandler.  tmp4 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: tmp4.  tmp1 := self dispatch: tmp2 to: registry.  self assertCookieAddition: tmp1 key: tmp3.  self assertDispatched: tmp1renderSwapParentOn: arg1  arg1 paragraph: [ arg1 anchor           callback: [ self swap ];           with: 'swap parent' ]testAsMIMEDocumentFormUnknown  | tmp1 |  self formClassExists ifFalse: [ ^self ].  tmp1 := self sampleForm.  self should: [ tmp1 seasideMimeDocumentType: 'foo/bar' ] raise: Error.  self should: [ tmp1 seasideMimeDocumentType: 'foo/bar' seasideMimeType ] raise: Error.  self should: [ tmp1 seasideMimeDocumentType: 'image/zork' ] raise: Error.  self should: [ tmp1 seasideMimeDocumentType: 'image/zork' seasideMimeType ] raise: ErrorpopupAnchor: arg1  self popupAnchor with: arg1testTable  self assert: [:arg1 |  arg1 table ] gives: '<table></table>'.  self assert: [:arg1 |  arg1 table           cellpadding: 0;           cellspacing: 1 ] gives: '<table cellpadding="0" cellspacing="1"></table>'.  self assert: [:arg1 |  arg1 table           frame: 'box';           rules: 'groups' ] gives: '<table frame="box" rules="groups"></table>'.  self assert: [:arg1 |  arg1 table summary: 'a short summary' ] gives: '<table summary="a short summary"></table>'testFlushStream  self response stream.  self assert: self response isCommitted.  self should: [ self response committedCheck ] raise: WAIllegalStateException.  self assertLines: #('HTTP/1.1 200 OK' '')doNotCacheExpiryDate  ^DateAndTime year: 2000 month: 1 day: 1 hour: 0 minute: 0 second: 0attributes  ^attributes ifNil: [ attributes := WAHtmlAttributes new ]testCheckboxTag  self assert: [:arg1 |  arg1 checkbox ] gives: '<input type="checkbox"/>'.  self assert: [:arg1 |  arg1 checkbox value: true ] gives: '<input checked type="checkbox"/>'.  self assert: [:arg1 |  arg1 checkbox           value: false;           callback: [:arg2 |   ] ] gives: '<input name="1" type="checkbox"/><input name="2" type="hidden"/>'.  self assert: [:arg1 |  arg1 checkbox           value: true;           callback: [:arg2 |   ] ] gives: '<input checked name="1" type="checkbox"/><input name="2" type="hidden"/>'responseGenerator  ^(self preferenceAt: #responseGenerator) valuepriority  self subclassResponsibilitypreviousTiming  ^previousTiming ifNil: [ 0 ]multipleValuesCallback: arg1  self beMultiple.  self name: (self storeCallback: (self allValuesCallbackClass on: arg1)).  self value: self valuetestEncodedXmlUnicdeSmp  | tmp1 tmp2 |  tmp1 := Character codePoint: 16r1F64C.  tmp2 := String with: tmp1.  self assert: tmp2 xmlEncodedGives: tmp2formatBlock: arg1  formatBlock := arg1processRendering: arg1  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |  arg1 contentType: self application contentType.  tmp1 := self requestContext newDocument.  tmp3 := self createRenderContext.  tmp2 := self createActionContinuationWithContext: tmp3.  tmp4 := tmp2 registerForUrl: false.  tmp5 := tmp4 copy.  self updateUrl: tmp4.  tmp3     document: tmp1;     actionUrl: tmp4;     actionBaseUrl: tmp5;     resourceUrl: self application resourceBaseUrl.  tmp2 renderContext: tmp3.  tmp6 := self createHtmlRootWithContext: tmp3.  self updateRoot: tmp6.  self toPresenterSendRoot: tmp6.  tmp1 open: tmp6.  self documentOpened: arg1.  self presenter renderWithContext: tmp3.  tmp1 close.  tmp3 destroynewHandler  ^WARedirectingApplication new     preferenceAt: #trackingStrategy put: WACookieIfSupportedSessionTrackingStrategy new;     preferenceAt: #serverHostname put: 'www.seaside.st';     yourselftitleForException: arg1  ^arg1 descriptiontext: arg1  self value: arg1renderContentOn: arg1  self renderDateTimeOn: arg1.  self renderDeadDateTimeOn: arg1testAsSelector  self assert: (WAFileMetadataLibrary asSelector: 'js/bootstrap.js') = #jsbootstrapJs.  self assert: (WAFileMetadataLibrary asSelector: 'img/glyphicons-halflings.png') = #imgglyphiconshalflingsPng.  self assert: (WAFileMetadataLibrary asSelector: 'css/bootstrap-responsive.css') = #cssbootstrapresponsiveCsscontents  ^showComment ifTrue: [ self selectedClass isNil ifTrue: [ '' ] ifFalse: [ selectedClass organization comment ] ] ifFalse: [ selectedMethod isNil ifTrue: [ self selectedClass isNil ifTrue: [ '' ] ifFalse: [ selectedMessageCategory isNil ifTrue: [ self selectedClass definition ] ifFalse: [ self selectedClass sourceCodeTemplate ] ] ] ifFalse: [ selectedMethod sourceCode ] ]children  ^Array with: batchFunctionalTestfieldSet  ^self brush: WAFieldSetTag newvisitBooleanAttribute: arg1  self visitAttribute: arg1initialize  super initialize.  reversed := true.  start := 2.  type := $IrenderValuesOn: arg1  | tmp1 |  tmp1 := SmalltalkImage current vm getParameters.  self renderLabel: 'Allocation Count' value: (tmp1 at: 4) on: arg1.  self renderEditIntegerParameterAt: 5 named: 'Allocations Between GCs' on: arg1.  self renderEditIntegerParameterAt: 6 named: 'Survivor Count Tenuring Threshold' on: arg1.  self renderEditMemoryParameterAt: 23 named: 'Extra VM Memory' on: arg1.  self renderEditMemoryParameterAt: 24 named: 'Shrinking Threshold' on: arg1.  self renderEditMemoryParameterAt: 25 named: 'Memory Headroom' on: arg1.  self renderLabel: 'Grow Memory Requests' value: (tmp1 at: 31) on: arg1.  self renderLabel: 'Shrink Memory Requests' value: (tmp1 at: 32) on: arg1.  self renderLabel: 'Objects Pending Finalization' value: (tmp1 at: 39) on: arg1.  self renderLabel: 'Root Table Size' value: (tmp1 at: 21) on: arg1.  self renderLabel: 'Root Table Overflows Since Startup' value: (tmp1 at: 22) on: arg1stackDepth  ^GRPlatform current stackDepthtestCanvasNil  self assert: [:arg1 |  arg1 text: nil ] gives: ''.  self assert: [:arg1 |  arg1 render: nil ] gives: ''requestWithMethod: arg1  ^WARequest method: arg1 uri: '/app/oneo'testInjection  | tmp1 |  tmp1 := WAEmailAddress address: 'philippe.marschall@gmail.com' , (String with: Character cr with: Character lf) , 'Evil-Header: evil-value'.  self assert: tmp1 address = 'philippe.marschall@gmail.com'.  self assert: tmp1 username isNil.  self assert: tmp1 greaseString = 'philippe.marschall@gmail.com'children  ^Array with: calendarslash  ^slashbeFirst  self relationship: 'first'addLoadScriptFirst: arg1  WAError signal: '#addLoadScriptFirst: is not supported by WANullScriptGenerator use WADefaultScriptGenerator or JQScriptGenerator instead'handleException: arg1  ^arg1 passrenderLinksOn: arg1  arg1 table: [ arg1 tableRow: [ arg1 tableData: [ self renderSlashSuccess: true on: arg1 ].              arg1 tableData: [ arg1 anchor                       url: (self baseUrlWithSlash: true);                       with: 'With Slash' ] ].        arg1 tableRow: [ arg1 tableData: [ self renderSlashSuccess: false on: arg1 ].              arg1 tableData: [ arg1 anchor                       url: (self baseUrlWithSlash: false);                       with: 'Without Slash' ] ] ]addLoadScriptFirst: arg1  ^self scriptGenerator addLoadScriptFirst: arg1standby: arg1  self attributes at: 'standby' put: arg1initialize  super initialize.  table := WASelectionDateTable new     startDate: (Date year: 2012 month: 1 day: 1);     endDate: (Date year: 2012 month: 1 day: 6);     rowsAndDatesDisplay: [:arg1 :arg2 |  (GRPrinter isoDate print: arg2) , ' (' , arg1 greaseString , ')' ];     rows: (1 to: 10) yourselfsetStringBody: arg1 wrap: arg2  self addPart: (arg2 ifTrue: [ WAStringEmailBody string: arg1 lineLength: 80 ] ifFalse: [ WAStringEmailBody contentString: arg1 ])writeOn: arg1  arg1     nextPutAll: 'Content-Type: ';     nextPutAll: self contentType greaseString;     nextPut: Character cr;     nextPut: Character cr;     nextPutAll: self contentString;     nextPut: Character crtestAddKeyOfSessionToUrlCookieAlreadyPresent  | tmp1 tmp2 tmp3 |  tmp1 := self requestContext.  tmp3 := WARequestCookie key: strategy keyCookieName value: 'The_Metaphor'.  tmp1 request setCookies: (Array with: tmp3).  tmp2 := tmp1 request uri copy.  strategy addKey: 'The_Metaphor' toUrl: tmp2.  self assert: tmp2 greaseString = '/1/2'rootClass  ^(self application preferenceAt: #rootClass) valuewrite: arg1 quoted: arg2 on: arg3  arg2 ifTrue: [ self write: arg1 asQuotedStringOn: arg3 ] ifFalse: [ arg3 nextPutAll: arg1 ]submitButton  ^self brush: WASubmitButtonTag newrequestCookiesFor: arg1  self shouldNotImplementdefault  ^defaultdoNotCache  self headerAt: 'Pragma' put: 'no-cache'.  self headerAt: 'Expires' putDate: self doNotCacheExpiryDate.  self headerAt: 'Cache-Control' put: 'no-cache, max-age=0, must-revalidate, no-store'level  ^levelrenderExplanationOn: arg1  arg1 paragraph: 'Test rendering speed (Reference: Intel Core I5-2500K @ 3.3GHz Seaside 3.0; Cog VM,  Pharo 1.3, ~ 9400 SPI)'copyHandler  | tmp1 |  tmp1 := self handler parent register: self handler cloneHandler at: name.  ^self answer: tmp1isExceptionFilter  ^trueisShared  ^falsetestCanvasWithLineBreaksAndUrls  self assert: [:arg1 |  arg1 withLineBreaksAndUrls: '1. This is http://www.seaside.st online.2. This is http://www.squeak.org online.' ] gives: '1. This is <a href="http://www.seaside.st">http://www.seaside.st</a> online.<br/>2. This is <a href="http://www.squeak.org">http://www.squeak.org</a> online.'with: arg1  url isNil ifFalse: [ self attributes at: 'src' put: url ].  super with: arg1closingConditionClass  ^WAClosingRevealedConditionalCommentopenBrush  canvas writeIfNotFirst: ', 'renderContentOn: arg1  self renderDateSelectorsOn: arg1.  arg1 horizontalRule.  self renderTimeSelectorsOn: arg1.  arg1 horizontalRule.  self renderDateTimeSelectorsOn: arg1testOneOfManySlashInCookie  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')     path: '/';     yourself.  tmp3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')     path: '/1/2/';     yourself.  tmp4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')     path: '/1/2/3/';     yourself.  tmp6 := self requestContext.  tmp6 request setCookies: (Array with: tmp1 with: tmp2 with: tmp3 with: tmp4).  tmp5 := strategy keyFromContext: tmp6.  self assert: tmp5 = 'cookie3'windowTitle: arg1  windowTitle := arg1batchSize  ^batchSizetestAsFilename  | tmp1 |  tmp1 := WATestingMetadataFileLibrary default.  self assert: (tmp1 asFilename: #imgglyphiconshalflingsPng) = 'img/glyphicons-halflings.png'.  self assert: (tmp1 asFilename: #jsbootstrapJs) = 'js/bootstrap.js'handler  ^handlerbasicStop  self subclassResponsibilityorEqual  self addToCondition: 'e'storeExpression: arg1 forAttribute: arg2  self clearSearchContexts.  ^expressions at: arg2 key put: arg1headers  ^headerstitle  ^'Seaside Packages'onPlaying: arg1  self document scriptGenerator event: 'playing' do: arg1 on: selfheaderAt: arg1 put: arg2  self committedCheck.  ^super headerAt: arg1 put: arg2states  ^Array with: expandedhandleFiltered: arg1  (self verifyRequest: arg1 request) ifTrue: [ super handleFiltered: arg1 ] ifFalse: [ arg1 responseGenerator           authenticate: self realm;           respond ]onKeyUp: arg1  self document scriptGenerator event: 'keyup' do: arg1 on: selfuiProcess  ^UIManager default uiProcesscount  ^countprogress  ^self brush: WAProgressTag newisResumable  ^falsego  self subclassResponsibilityfields  ^WAMergedRequestFields on: (Array with: self queryFields with: self postFields)renderContentOn: arg1  renderBlock isNil ifTrue: [ super renderContentOn: arg1 ] ifFalse: [ renderBlock value: arg1 value: [ super renderContentOn: arg1 ] ]renderScriptOn: arg1  self renderInline: [:arg2 |  arg2 script: 'self.close()' ] key: #script on: arg1selected: arg1  self attributes at: 'selected' put: arg1acceptDecorated: arg1  self accept: arg1initializeFields  status := 200.  message := 'OK'.  headers := WAHeaderFields new.  cookies := OrderedCollection newdecoratedComponent  ^self next decoratedComponentpathUnencoded: arg1 encoded: arg2  path := self sanitizePath: arg1.  pathEncoded := self sanitizePath: arg2article  ^self tag: 'article'handlers  ^handlershandlerClasses  ^WARequestHandler concreteSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name < arg2 name ]configuration  ^configurationhandleExpired: arg1  arg1 request isXmlHttpRequest ifTrue: [ ^arg1 responseGenerator           forbidden;           respond ].  self handleDefault: arg1at: arg1 ifAbsent: arg2  | tmp1 tmp2 tmp3 |  self sweepIncrementally.  tmp1 := arg1 hash.  tmp2 := tmp1 \\ keyTable size + 1.  tmp3 := self findEntryOrNilWithKey: arg1 hash: tmp1 index: tmp2.  ^tmp3 isNil ifTrue: [ arg2 value ] ifFalse: [ tmp3 value ]testAddDecoration  self assert: (root addDecoration: decoration1) = decoration1.  self assert: root decorations size = 1.  self assert: root decorations first = decoration1.  self assert: (root addDecoration: decoration2) = decoration2.  self assert: root decorations size = 2.  self assert: root decorations first = decoration2.  self assert: root decorations last = decoration1selectedRows  ^rows copyFrom: self startRow to: self endRowtestResetThenWrite  | tmp1 |  tmp1 := self response     status: WAResponse statusNotFound;     attachmentWithFileName: 'upload.csv';     nextPutAll: 'the wrong content';     resetIfPossible.  self assert: tmp1.  self response     status: WAResponse statusImATeapot;     headerAt: 'X-The-Header' put: 'the value';     nextPutAll: 'the real content'.  self assertLines: #('HTTP/1.1 418 I''m a teapot' 'X-The-Header: the value' 'Content-Length: 16' '' 'the real content')width: arg1  self attributes at: 'width' put: arg1session  ^handlers detect: [:arg1 |  arg1 isSession ] ifNone: [ nil ]renderDateTimeSelectorsOn: arg1  arg1 heading     level3;     with: 'Dates and Times'.  arg1 form     id: #dateTimeForm;     with: [ arg1 table: [ arg1 tableRow                 class: 'from';                 with: [ arg1                       tableData: 'From';                       tableData: beginDAT ].              arg1 tableRow                 class: 'to';                 with: [ arg1                       tableData: 'To';                       tableData: endDAT ] ].        arg1 div: [ arg1 submitButton                 callback: [ self computeDuration ];                 text: 'Compute duration' ] ]authenticator: arg1  authenticator := arg1writePreambleOn: arg1  arg1     nextPutAll: '<?xml version="1.0" encoding="';     nextPutAll: self charSet;     nextPutAll: '"?>'removeFilter: arg1  self handler removeFilter: arg1attribute  ^attributeonKeyDown: arg1  self document scriptGenerator event: 'keydown' do: arg1 on: selfformClassExists  ^Smalltalk hasClassNamed: #FormtableCaption  ^self tag: 'caption'printOn: arg1  super printOn: arg1.  arg1     nextPutAll: ' method: ';     nextPutAll: self method.  arg1     nextPutAll: ' uri: ';     nextPutAll: self uri greaseString.  arg1 nextPutAll: ' version: '.  self version printOn: arg1notImplemented  self makePlainTextAndPerform: #notImplemented.  self response nextPutAll: 'Not Implemented'null  self document stream nextPutAll: 'null'signalRenderNotification  WARenderNotification signalexecute  self requestor dispatcher defaultName: nilwritePortsOn: arg1  ports isEmptyOrNil ifTrue: [ ^self ].  arg1 nextPutAll: '; Port="'.  self ports do: [:arg2 |  arg1 print: arg2 ] separatedBy: [ arg1 nextPut: $, ].  arg1 nextPut: $"store: arg1  | tmp1 |  [ tmp1 := WAKeyGenerator current keyOfLength: self keySize.  self includesKey: tmp1 ] whileTrue.  self at: tmp1 put: arg1.  ^tmp1addPrint  self addMedia: 'print'renderSideBarDivingInOn: arg1  arg1 heading     level: 3;     with: 'Diving In'.  arg1 unorderedList: [ arg1 listItem: [ arg1 anchor                 callback: [ self component show: WAWelcomeBrowse new ];                 with: 'Browse'.              arg1 text: ' the applications installed in your image.' ].        arg1 listItem: [ arg1 anchor                 callback: [ self component show: WAWelcomeConfigure new ];                 with: 'Configure'.              arg1 text: ' your Seaside development environment.' ].        arg1 listItem: [ arg1 text: 'Check out examples of Seaside''s '.              arg1 anchor                 url: '/javascript/jquery';                 with: 'JQuery'.              arg1 text: ' and '.              arg1 anchor                 url: '/javascript/jquery-ui';                 with: 'JQuery UI'.              arg1 text: ' integration.' ].        arg1 listItem: [ arg1 text: 'Upgrading from a previous version? Read through the '.              arg1 anchor                 url: 'https://github.com/SeasideSt/Seaside/releases/';                 with: 'Seaside Releases Log' ].        GRPlatform current seasideVersion revision isZero ifFalse: [ | tmp1 |              tmp1 := GRPlatform current seasideVersion copy                 revision: 0;                 yourself.              arg1 listItem: [ arg1 text: 'Seaside ' , tmp1 greaseString.                    arg1 anchor                       url: 'https://github.com/SeasideSt/Seaside/releases/tag/v' , tmp1 greaseString;                       with: ' changes' ] ].        arg1 listItem: [ arg1 text: 'Seaside '.              arg1 anchor                 url: 'https://github.com/SeasideSt/Seaside/wiki/Add-On-Libraries';                 with: 'add-on libraries' ] ]contents  ^block valueauthorName  ^authorName ifNil: [ authorName := 'FirstnameLastname' ]testKeys  one at: 'foo' put: 1.  two at: 'bar' put: 2.  two at: 'foo' put: 3.  self assert: merged keys asArray = #('foo' 'bar' 'foo')comment: arg1  comment := arg1header  ^self tag: 'header'from  self subclassResponsibilityshow: arg1 onAnswer: arg2  self show: arg1 onAnswer: arg2 delegation: (WADelegation new           delegate: arg1;           yourself)addLoadScript: arg1  WAError signal: '#addLoadScript: is not supported by WANullScriptGenerator use WADefaultScriptGenerator or JQScriptGenerator instead'additions  ^(self currentList select: [:arg1 |  arg1 key = #add ]) collect: [:arg2 |  arg2 value ]scheme: arg1  self attributeAt: 'scheme' put: arg1beGlossary  self relationship: 'glossary'html  ^canvascreateAndVerifyDocumentNamed: arg1 content: arg2 mimeType: arg3 hasAttachment: arg4  | tmp1 tmp2 |  tmp1 := WADocumentHandler document: arg2 mimeType: arg3 fileName: arg1.  self assert: tmp1 document contents = arg2.  tmp2 := self responseAfter: [ tmp1 handle: self requestContext ].  self assert: (self headerAt: 'Expires' forResponse: tmp2) notNil.  self assert: (self headerAt: 'Content-Disposition' forResponse: tmp2) = arg4.  self assertHttpResponseFrom: tmp2 matches: tmp1label  ^self printStringprintMilliSeconds: arg1 dividedBy: arg2  ^arg2 isZero ifTrue: [ self printMilliSeconds: 0 ] ifFalse: [ self printMilliSeconds: arg1 / arg2 ]onLoadStart: arg1  self document scriptGenerator event: 'loadstart' do: arg1 on: selftestInteger  self assert: [:arg1 |  arg1 render: 123 ] gives: '123'.  self assert: [:arg1 |  arg1 render: -123 ] gives: '-123'testObject  | tmp1 tmp2 |  tmp1 := Object new.  tmp2 := tmp1 snapshotCopy.  tmp1 restoreFromSnapshot: tmp2on: arg1 of: arg2  self callback: (GRDelayedSend receiver: arg2 selector: arg1 asMutator)onBlur: arg1  self document scriptGenerator event: 'blur' do: arg1 on: selfonAuxiliaryClick: arg1  self document scriptGenerator event: 'auxclick' do: arg1 on: selfopen: arg1 on: arg2  renderContentOn: arg1  arg1 table: [ self renderHeaderOn: arg1.        self renderFooterOn: arg1.        arg1 tableBody           class: self tableBodyCssClass;           with: [ self renderValuesOn: arg1 ] ]attachmentWithFileName: arg1  arg1 notNil ifTrue: [ self headerAt: 'Content-Disposition' put: 'attachment; filename="' , arg1 greaseString , '"' ]hasBeenAccessedSinceLastReap  ^count value > lastCountlabel  ^'Terminate'defaultHandler  self defaultName isNil ifTrue: [ ^nil ].  ^self handlerAt: self defaultName ifAbsent: [ nil ]hasBrowserSessionID  ^self browserSessionID notNilrender: arg1 visitor: arg2  arg2 visit: self rootparent  ^parenttestTry  self deny: (consumer try: 'foo').  self assert: (consumer try: 'tweets').  self deny: (consumer try: 'tweets').  self assert: (consumer try: 'kentbeck').  self assert: consumer atEnd.  self deny: (consumer try: 'kentbeck')renderHiddenInputOn: arg1  | tmp1 |  tmp1 := hiddenInput ifNil: [ 'Seaside' ].  self renderLabel: 'Hidden Input' input: [ arg1 render: tmp1.        arg1 hiddenInput           value: tmp1;           callback: [:arg2 |  hiddenInput := arg2 ] ] output: hiddenInput printString on: arg1findAttributeAndSelectAncestorsOf: arg1  | tmp1 |  (attributeHolders includes: arg1) ifTrue: [ ^true ].  arg1 localAttributeAt: self key ifPresent: [:arg2 |  attribute := arg2.        attributeHolders add: arg1.        ^true ].  tmp1 := false.  arg1 parents do: [:arg3 |  tmp1 := tmp1 | (self findAttributeAndSelectAncestorsOf: arg3) ].  tmp1 ifTrue: [ attributeInheritors add: arg1 ].  ^tmp1initialize  super initialize.  selections := #().  selectionsCurrent := #()defaultAction  self decoratedComponent perform: self decoratedComponent defaultButtoncommentUrl: arg1  commentUrl := arg1preload: arg1  self attributeAt: 'preload' put: arg1children  ^Array with: batcherheader: arg1  self header with: arg1urlFor: arg1  ^self urlFor: arg1 ifAbsent: [ WAUnregisteredHandlerError signal ]renderExplanationOn: arg1  arg1 paragraph: 'This test should display a dialog for creating a secret key. After submitting the form the public key should be displayed.'.  arg1 paragraph: 'This test does not work on IE'labelForDay: arg1  ^arg1labelForOption: arg1  ^arg1 greaseStringassertHandles: arg1 returnsSatisfying: arg2  | tmp1 tmp2 |  tmp1 := self handlerClass handles: arg1.  tmp2 := self createHandler handles: arg1.  self assert: tmp1 = tmp2.  self assert: (arg2 value: tmp1)isBinary  self main = 'text' ifTrue: [ ^false ].  self main = 'application' ifTrue: [ self sub = 'json' ifTrue: [ ^false ] ].  GRPlatform subStringsIn: self sub splitBy: $+ do: [:arg1 |  (#('x-javascript' 'javascript' 'xml') includes: arg1) ifTrue: [ ^false ] ].  ^truerenderNextOn: arg1  arg1 space.  self isOnLastPage ifFalse: [ arg1 anchor           callback: [ self nextPage ];           with: '>>' ] ifTrue: [ arg1 text: '>>' ]tableHead: arg1  self tableHead with: arg1title  ^'Session Memory Use'title  ^'Virtual Machine'updateRoot: arg1  super updateRoot: arg1.  arg1 title: self class name greaseStringserverProtocols  ^#(nil 'http' 'https')testScheme  url     scheme: 'https';     host: 'seaside.st'.  self assert: url scheme = 'https'.  self assert: url greaseString = 'https://seaside.st/'.  url host: 'seaside.st'.  url     port: 80;     scheme: 'http'.  self assert: url greaseString = 'http://seaside.st/'.  url     port: 443;     scheme: 'https'.  self assert: url greaseString = 'https://seaside.st/'.  url     port: 80;     scheme: #http.  self assert: url greaseString = 'http://seaside.st/'.  url     port: 443;     scheme: #https.  self assert: url greaseString = 'https://seaside.st/'initialize  super initialize.  self withoutSecondscomment: arg1  comment := arg1continuationClasses  ^(WASessionContinuation allSubclasses reject: [:arg1 |  arg1 isAbstract ]) asSortedCollection: [:arg2 :arg3 |  arg2 name <= arg3 name ]keySize  ^16initializeWithFileHandler: arg1 context: arg2  self initialize.  handler := arg1.  context := arg2document: arg1 mimeType: arg2  self document: arg1 mimeType: arg2 fileName: nilrenderCurrencyTableBodyOn: arg1  arg1 tableBody     title: 'Table body';     with: [ self exchangeRates do: [:arg2 |  arg1 tableRow: [ arg1 tableHeading: arg2 first.                    arg1 tableData                       align: 'char';                       character: $.;                       with: (arg2 second printShowingDecimalPlaces: 2) ] ] ]label  ^'Open'testCopy  | tmp1 |  url addToPath: 'foo/bar'.  url addField: 'foo' value: 'bar'.  tmp1 := url copy.  url addToPath: 'zork'.  url addField: 'zork'.  self assert: url printString = '/foo/bar/zork?foo=bar&zork'.  self assert: tmp1 printString = '/foo/bar?foo=bar'absoluteUrlForResource: arg1  ^self context absoluteUrlForResource: arg1testHeadingTag  self assert: [:arg1 |  arg1 heading ] gives: '<h1></h1>'.  self assert: [:arg1 |  arg1 heading           level: 2;           with: 'foo' ] gives: '<h2>foo</h2>'.  self assert: [:arg1 |  arg1 heading           level: 0;           with: 'foo' ] gives: '<h1>foo</h1>'.  self assert: [:arg1 |  arg1 heading           level: 7;           with: 'foo' ] gives: '<h6>foo</h6>'renderHandlerOn: arg1  self renderConfigurationOn: arg1callback: arg1  self subclassResponsibilityvisitPresenter: arg1  self block value: arg1testNoFieldCookieHandlerAbsent  | tmp1 tmp2 |  registry := self createRegistryWithCookiesEnabled.  tmp2 := self createRequestContextWithFieldKey: nil cookieKey: '123'.  tmp1 := self dispatch: tmp2 to: registry.  self assertCookieDeletion: tmp1.  self assertExpired: tmp1testEditTag  self assert: [:arg1 |  arg1 inserted: 'foo' ] gives: '<ins>foo</ins>'.  self assert: [:arg1 |  arg1 deleted: 'bar' ] gives: '<del>bar</del>'testAsMIMEDocumentFormColon  | tmp1 tmp2 |  self formClassExists ifFalse: [ ^self ].  tmp1 := self sampleForm.  tmp2 := tmp1 seasideMimeDocumentType: WAMimeType imageJpeg.  self assert: tmp2 contentType = WAMimeType imageJpeg.  self assert: (tmp2 content isKindOf: ByteArray)titles: arg1  titleBlock := arg1definitionList: arg1  self definitionList with: arg1onCueChange: arg1  self document scriptGenerator event: 'cuechange' do: arg1 on: selfrenderMenuOn: arg1  arg1 heading     level2;     with: '<menu>'.  arg1 menu: [ arg1 command           beRadio;           label: 'Do 1st Command'.        arg1 command           beRadio;           label: 'Do 2nd Command'.        arg1 command           beRadio;           label: 'Do 3rd Command' ]renderContentOn: arg1  arg1 div     class: 'container';     with: [ arg1 div           class: 'sidebar';           with: [ self renderSideBarOn: arg1 ].        arg1 div           class: 'content';           with: [ self renderMainContentOn: arg1 ].        arg1 div class: 'clear' ]send  GRPlatform current seasideDeliverEmailMessage: selfscript  ^self add: (WAScriptElement root: self)isConcatenatedHtmlAttributeValue  ^truenewStrategy  ^WACookieIfSupportedSessionTrackingStrategy newnewDocument  ^self handler isNil ifTrue: [ (WAHtmlDocument on: self response stream codec: self codec)           scriptGenerator: WADefaultScriptGenerator new;           yourself ] ifFalse: [ (self handler documentClass on: self response stream codec: self codec)           scriptGenerator: self handler scriptGeneratorClass new;           yourself ]packages  ^(Smalltalk at: #RPackage) organizer packageshandlers  ^handlerstestOrder  self assert: [:arg1 |  arg1           at: 'a' put: 1;           at: 'b' put: 2;           at: 'c' put: 3 ] gives: ' a="1" b="2" c="3"'.  self assert: [:arg1 |  arg1           at: 'a' put: 1;           at: 'b' put: 2;           at: 'c' put: 3;           at: 'b' put: 4 ] gives: ' a="1" b="4" c="3"'selectBlock: arg1  selectBlock := arg1runTest  | tmp1 |  tmp1 := self requestContext request url path last = self testPath.  tmp1 ifTrue: [ self inform: 'Success!' onAnswer: [  ] ] ifFalse: [ self inform: 'Failed!' onAnswer: [  ] ]label  ^'VM'deployFiles  self subclassResponsibilitysortRows: arg1  | tmp1 |  tmp1 := arg1 collect: [:arg2 |  arg2 -> (self valueForRow: arg2) ].  tmp1 := tmp1 asSortedCollection: [:arg3 :arg4 |  sortBlock value: arg3 value value: arg4 value ].  ^tmp1 collect: [:arg2 |  arg2 key ]expectedLibrariesContents  ^'forbidden'xmlEncoderClass  ^WAPharoXmlEncoderrenderSimpleParenthesesOn: arg1  arg1 heading     level2;     with: 'Simple ruby markup with parentheses'.  arg1 ruby: [ arg1 text: 'WWW'.        arg1 rubyParentheses: '('.        arg1 rubyText: 'World Wide Web'.        arg1 rubyParentheses: ')' ]forwarded  ^self headerAt: 'forwarded'actionsSelector: arg1  actionsSelector := arg1optionGroup  ^self brush: WAOptionGroupTag newaside: arg1  self aside with: arg1root  ^rootcreateActionContinuationWithContext: arg1  ^self actionPhaseContinuationClass snapshot: self states renderContext: arg1isDecoration  ^truehandleFiltered: arg1  self hasBrowserSessionID ifFalse: [ self setBrowserSessionIDFor: arg1 ] ifTrue: [ (self verifyBrowserSessionIDFor: arg1) ifFalse: [ (self requestContext request queryFields includesKey: 'cookiecheck') ifTrue: [ self respondCookiesRequired: arg1 ] ifFalse: [ arg1 responseGenerator                       forbidden;                       respond ] ] ].  super handleFiltered: arg1url: arg1  self attributeAt: 'href' put: arg1testBasicAuthentication  self response basicAuthenticationRealm: 'seaside'.  self assertLines: #('HTTP/1.1 401 Unauthorized' 'WWW-Authenticate: Basic realm="seaside"' 'Content-Length: 0' '')ie: arg1  self addToCondition: ' IE ' , arg1moveUp  self isModify ifTrue: [ self expression additions: (self moveUp: self selectedAdditions using: self expression additions) ] ifFalse: [ self isOverride ifTrue: [ self expression value: (self moveUp: self selectionsCurrent using: self expression value) ] ]callbackClass  ^WAValuesCallbackpass  ^passon: arg1 of: arg2  self value: (arg2 perform: arg1).  self callback: (GRDelayedSend receiver: arg2 selector: arg1 asMutator)writeEndBoundaryOn: arg1  arg1     nextPut: Character cr;     nextPutAll: '--';     nextPutAll: self boundary;     nextPutAll: '--';     nextPut: Character crrootBlock: arg1  rootBlock := arg1onClick: arg1  self document scriptGenerator event: 'click' do: arg1 on: selfsystemCategoryListIndex: arg1  selectedPackage := (self packages sorted: [:arg2 :arg3 |  arg2 packageName <= arg3 packageName ]) at: arg1.  selectedClass := nil.  self clearMessageAndProtoclSelection.  self changed: #systemCategoryListIndexrenderContentOn: arg1  arg1 form: [ arg1 div: [ arg1 paragraph: 'Adding WAEmptyTestTask is expected to cause an infinite recursion and should raise an exception.'.              arg1 select                 list: (self taskClasses asSortedCollection: [:arg2 :arg3 |  arg2 name <= arg3 name ]);                 on: #contents of: selection.              arg1 submitButton                 callback: [ self addTask ];                 with: 'Add'.              arg1 submitButton                 callback: [ self showTask ];                 with: 'Show' ] ].  self renderTasksOn: arg1onSubmit: arg1  self document scriptGenerator event: 'submit' do: arg1 on: selfclear  byKey removeAll.  byValue removeAllcreateHandlers  ^Array with: handlerinitializeTests  classes := (WAPresenter allSubclasses select: [:arg1 |  arg1 isFunctionalTest ]) asSortedCollection: [:arg2 :arg3 |  arg2 name < arg3 name ].  current := WAValueHolder with: classes first newnumber: arg1  arg1 printOn: self document streamrenameFile: arg1 to: arg2  | tmp1 tmp2 |  (self asSelector: arg1) = (self asSelector: arg2) ifTrue: [ ^nil ].  tmp1 := self perform: (self asSelector: arg1).  tmp2 := WAFile new contents: tmp1.  tmp2 fileName: arg2.  self addFile: tmp2.  self removeFile: arg1unregister  parent notNil ifTrue: [ parent unregister: self ]classList  ^(self classesInTheSelectedPackage collect: [:arg1 |  arg1 name ]) sortedtestBinaryStreamSeasideMimeDocumentType  | tmp1 tmp2 |  tmp2 := WAMimeType main: 'audio' sub: 'mpeg'.  tmp1 := #(1 2 3 4) asByteArray readStream seasideMimeDocumentType: tmp2.  self assert: tmp1 mimeType = tmp2.  self assert: tmp1 contents = #(1 2 3 4) asByteArrayparameter  ^self brush: WAParameterTag newtestIsNonStandard  | tmp1 |  tmp1 := WAMimeType fromString: 'image/png'.  self deny: tmp1 isNonStandard.  tmp1 := WAMimeType fromString: 'image/x-icon'.  self assert: tmp1 isNonStandard.  tmp1 := WAMimeType fromString: 'image/X-icon'.  self assert: tmp1 isNonStandard.  tmp1 := WAMimeType fromString: 'x-icon/image'.  self assert: tmp1 isNonStandard.  tmp1 := WAMimeType fromString: 'X-icon/image'.  self assert: tmp1 isNonStandarderrorKeyNotFound  self error: 'Key not found'testNastyEdgeCasesSerialization  url host: 'example.com'.  url addToPath: 'blue+light blue'.  url queryFields at: 'blue+light blue' put: nil.  self assert: url greaseString = 'http://example.com/blue%2Blight%20blue?blue%2Blight%20blue'targetTop  self target: '_top'signalSemaphore: arg1  (self isWaitingOnSemaphore: arg1) ifFalse: [ ^self ].  [ arg1 suspendingList signal ] forkdescribeOn: arg1  (arg1 classBindingCollection: #libraries) options: [ self libraryClasses ].  (arg1 classBinding: #initialContinuationClass)     beAdvanced;     options: [ self continuationClasses ];     default: WANullSessionContinuation.  (arg1 string: #mimeType)     beAdvanced;     label: 'MIME Type';     comment: 'The media type of HTML documents reported to the browser.';     default: 'text/html'.  (arg1 url: #resourceBaseUrl)     group: #server;     comment: 'Sets the base URL for URLS generated with #resourceUrl:'.  (arg1 boolean: #sessionAllowTermination)     comment: 'Whether sessions allows a special HTTP request to terminate the process currently running in the session. This is used during development and should be disabled for deployment.';     default: false.  (arg1 classBinding: #sessionClass)     comment: 'Sessions in this application will be instances of this class.';     options: [ self sessionClasses ];     default: WASession.  (arg1 listOfClasses: #trackingStrategy)     comment: 'How sessions and document handlers should be tracked.';     options: [ self trackingStrategyClasses ];     default: WAQueryFieldHandlerTrackingStrategy newdevelopmentCss  ^'/* toolbar */body { margin-bottom: 25px !important; /*matches toolbar min-height + padding and margin*/}.wa-toolbar {	left: 0;	right: 0;	bottom: 0;	z-index: 20;	padding: 2px;	position: fixed;	text-align: left;	background-color: #eee;	border-top: 1px solid #aaa;	min-height: 20px;}.wa-toolbar { vertical-align: middle; }.wa-toolbar, .wa-toolbar * {	color: #444;	font-size: 14px;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}.wa-toolbar a {	padding-left: 3px;	padding-right: 3px;	text-decoration: none;}.wa-toolbar a:hover {	text-decoration: underline;}.wa-toolbar .wa-deprecationtoolplugin {	color: #ff7000;}/* halos */.wa-halo {	margin: 4px;	text-align: left;	border: 1px solid #aaa;}.wa-halo .wa-halo-header {	padding: 2px 4px ;	overflow: hidden;	background-color: #eee;	border-bottom: 1px solid #aaa;}.wa-halo .wa-halo-header,.wa-halo .wa-halo-header * {	color: #444;	font-size: 14px;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}.wa-halo .wa-halo-header a {	text-decoration: none;}.wa-halo .wa-halo-header .wa-classnamehaloplugin,.wa-halo .wa-halo-header .wa-browserhaloplugin,.wa-halo .wa-halo-header .wa-inspectorhaloplugin,.wa-halo .wa-halo-header .wa-styleshaloplugin {	float: left;	display: block;	padding-right: 4px;}.wa-halo .wa-halo-header .wa-classnamehaloplugin {	font-weight: bold;	padding-right: 8px;}.wa-halo .wa-halo-header .wa-browserhaloplugin, .window .window-titlebar .wa-browserhaloplugin {	background: url(codebrowser.svg) no-repeat;	background-size: 16px 16px;}.wa-halo .wa-halo-header .wa-inspectorhaloplugin, .window .window-titlebar .wa-inspectorhaloplugin {	background: url(inspector.svg) no-repeat;	background-size: 16px 16px;}.wa-halo .wa-halo-header .wa-styleshaloplugin, .window .window-titlebar .wa-styleshaloplugin {	background: url(styleeditor.svg) no-repeat;	background-size: 16px 16px;}.wa-halo .wa-halo-header .wa-browserhaloplugin a,.wa-halo .wa-halo-header .wa-inspectorhaloplugin a,.wa-halo .wa-halo-header .wa-styleshaloplugin a {	width: 16px;	outline: none;	display: block;	text-indent: -32000px;	background-position: 0 50%;}.wa-halo .wa-halo-header .wa-modehaloplugin {	float: right;	display: block;	padding-right: 4px;}.wa-halo .wa-halo-header .wa-modehaloplugin a {	text-decoration: none;}.wa-halo .wa-halo-header .wa-modehaloplugin a:hover {	text-decoration: underline;}.wa-halo .wa-halo-header .wa-modehaloplugin a.active {	font-weight: bold;}.wa-halo .wa-halo-body {	clear: both;}.wa-halo .wa-halo-body .wa-halo-source {	padding: 2px 4px;	background-color: #fff;}.wa-halo .wa-halo-body .wa-halo-source,.wa-halo .wa-halo-body .wa-halo-source * {	color: #444;	line-height: 1;	font-size: 12px;	font-family: Monaco, "Courier New", Courier, serif;}.wa-halo .wa-halo-body .wa-halo-source .wa-tag {	color: navy;	font-weight: bold;}.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-key {	color: navy;}.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-value,.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-value a {	color: purple;	text-decoration: none;}.wa-halo .wa-halo-body .wa-halo-source .wa-attribute-value a:hover {	text-decoration: underline;}'createResponse  ^WABufferedResponse newtag  ^'th'renderRadioButtonsOn: arg1  self renderLabel: 'Radiogroup' input: [ arg1 radioGroup           callback: [:arg2 |  radio := arg2 ];           selected: radio;           with: [:arg3 |  self elements do: [:arg4 |  arg1 label: [ arg3 radioButton value: arg4.                          arg1 text: arg4 ].                    arg1 break ] ] ] output: radio printString on: arg1dispatcher  ^dispatchertoolDecoration  ^toolDecorationdirection: arg1  self attributes at: 'dir' put: arg1relationship: arg1  self attributes at: 'rel' append: arg1testRemoveKey  self assert: (collection removeKey: '1') isNil.  collection add: '1' -> 'foo'.  collection add: '1' -> 'bar'.  collection add: '2' -> 'baz'.  self assert: (collection removeKey: '1') = (self allowsDuplicateKeys ifTrue: [ #('foo' 'bar') ] ifFalse: [ 'bar' ]).  self assertAssociations: (Array with: '2' -> 'baz').  self assert: (collection removeKey: '2') = (self allowsDuplicateKeys ifTrue: [ #('baz') ] ifFalse: [ 'baz' ]).  self assertAssociations: #()initialize  super initialize.  self model: self class browserClass newstates  ^Array with: selfisApplication  ^truerenderExplanationOn: arg1  arg1 unorderedList: [ arg1 listItem: [ arg1 text: 'Go to the '.              arg1 anchor                 url: 'http://www.columbia.edu/kermit/utf8.html';                 with: 'UTF-8 Sampler'.              arg1 text: ' and select some "foreign" text.' ].        arg1 listItem: 'Copy and paste it into the urlencoded text field below and click the submit button.'.        arg1 listItem: 'The heading, textfield, character field and submitt button should all display the text without any error.'.        arg1 listItem: 'Submit again without changing anything, again everything should display normally.'.        arg1 listItem: 'Repeat this process for the multipart field. Make sure to pick at least every of these languages: German, Czech, Korean.' ]testNoParameter  | tmp1 |  tmp1 := '/Buchhaltung?_s=F4N82ZReQEV2M1cP&_k=spf8TDq4kzHfrPCi&48&searchText=kas'.  url := WAUrl absolute: tmp1.  self assert: (url queryFields includesKey: '48').  self assert: (url queryFields at: '48') isNil.  self assert: url greaseString equals: tmp1handleAnswer: arg1 continueWith: arg2  block valueWithPossibleArguments: (Array with: arg1)renderEditorOn: arg1  arg1 heading     class: 'selection-title';     with: self selection class description , ': ' , self selection hierarchyPathString.  arg1 render: editortestAddKeyOfSessionToContext  | tmp1 |  tmp1 := self requestContext.  strategy addKey: 'The_Metaphor' toContext: tmp1.  self assertNoCookies: tmp1javascriptOn: arg1  arg1 javascript: self printStringplaceholder: arg1  self attributeAt: 'placeholder' put: arg1setParent: arg1  parent notNil ifTrue: [ parent unregister: self ].  parent := arg1jsbootstrapJsContent  ^'	function foo (a, b) {}'parents: arg1  parentsBlock := arg1renderStackFrame: arg1 on: arg2  arg2 definitionList: [ self renderObject: arg1 labelled: 'thisContext' on: arg2.        self renderObject: arg1 receiver labelled: 'self' on: arg2 ].  self tempNamesAndValuesIn: arg1 do: [:arg3 :arg4 |  self renderObject: arg4 labelled: arg3 on: arg2 ]mimetypeOf: arg1  ^(self fileResourceOf: arg1) mimeTypebeAuthor  self relationship: 'author'document: arg1  self document: arg1 mimeType: self typeOrNiltestBlockVars  | tmp1 |  tmp := 0.  tmp := (self callcc: [:arg1 |  tmp1 := arg1.        0 ]) + tmp.  tmp2 isNil ifFalse: [ tmp2 value ] ifTrue: [ #(1 2 3) do: [:arg2 |  self callcc: [:arg1 |  tmp2 := arg1.                    tmp1 value: arg2 ] ] ].  self assert: tmp = 6type  ^'file'testHash  | tmp1 tmp2 |  tmp1 := WAHttpVersion http10.  tmp2 := WAHttpVersion http11.  self deny: tmp2 hash = tmp1 hashcanHaveHalo  ^self haloClass notNilrenderContentOn: arg1  stack isEmpty ifTrue: [ ^self ].  arg1 div     class: 'path';     with: [ stack allButLast do: [:arg2 |  arg1 anchor                 callback: [ self choose: arg2 ];                 with: arg2 key.              arg1 text: ' >> ' ].        arg1 strong: stack last key ]key: arg1  key := arg1canSort  ^self canRender not and: [ sortBlock notNil ]at: arg1 ifAbsent: arg2  | tmp1 tmp2 |  tmp2 := self getSearchContextFor: arg1 ifAbsent: arg2.  tmp1 := self valueForContext: tmp2.  ^tmp1 isNil ifTrue: [ tmp2 attribute default ] ifFalse: [ tmp1 ]renderErrorWithCallOn: arg1  arg1 heading: 'Error in a called component'.  arg1 paragraph: 'A message should be displayed. Once you click the button, behaviour should be identical to the Error case above without a call. If not, we may have a problem with continuations holding onto the request context.'.  arg1 anchor     callback: [ self inform: 'Once you close this, an error will be raised.'.        self raiseError ];     with: 'Raise error'replyTo  ^replyTotext  ^Text fromString: self contentssubjectFor: arg1  ^arg1 signalerContext printStringweekDays  ^#(Sun Mon Tue Wed Thu Fri Sat)renderButtonsOn: arg1  arg1 div     class: 'buttons';     with: [ arg1 anchor           url: '/config';           script: (arg1 jQuery this button primaryIcon: 'ui-icon-gear');           with: 'Advanced Configuration'.        arg1 anchor           callback: [ self answer ];           script: (arg1 jQuery this button primaryIcon: 'ui-icon-arrowreturnthick-1-w');           title: 'Go back';           with: 'Back' ]unorderedList: arg1  self unorderedList with: arg1url  ^url ifNil: [ url := canvas actionUrl copy ]renderContentOn: arg1  arg1 text: 'a deprecation warning should pop up in the toolbar'.  self deprecatedMethodonInput: arg1  self document scriptGenerator event: 'input' do: arg1 on: selfwithLineBreaks: arg1  | tmp1 |  tmp1 := arg1 readStream.  [ tmp1 atEnd ] whileFalse: [ self text: tmp1 nextLine.        tmp1 atEnd ifFalse: [ self break ] ]insert: arg1  | tmp1 |  tmp1 := currentBrush.  currentBrush := nil.  arg1 value.  self flush.  currentBrush := tmp1urlOf: arg1  ^self urlOf: arg1 using: WAFileHandler defaultresetDeprecationWarnings  filter reset.  self answerlabel  ^'Add'time: arg1  second := arg1 second.  hour := arg1 hour.  minute := arg1 minutereset  notifications := OrderedCollection newrenderContentOn: arg1  arg1 div     class: 'tool';     with: tableremovals: arg1  removals := arg1addStyle: arg1  styles ifNil: [ styles := Set new ].  styles add: arg1renderSuspendOn: arg1  arg1 form: [ arg1 text: 'UI Process is running. '.        arg1 submitButton           callback: [ self suspend ];           text: 'Suspend' ]renderPropertiesOn: arg1  arg1 tableRow: [ arg1 tableHeading: 'Properties:'.        arg1 tableData: [ | tmp1 |              tmp1 := self requestContext properties.              tmp1 isEmpty ifFalse: [ arg1 definitionList: [ tmp1 keysAndValuesDo: [:arg2 :arg3 |  arg1 definitionTerm: arg2.                                arg1 definitionData: arg3 ] ] ] ] ]execute  self open: WAMemory newform: arg1  self attributeAt: 'form' put: arg1renderContentOn: arg1  arg1 div     class: 'groupContent';     with: [ self renderHeadingsOn: arg1.        self renderAddFileOn: arg1.        arg1 break.        self renderFilesOn: arg1.        arg1 paragraph: [ self renderWriteToDiskOn: arg1.              arg1 space.              self renderDoneOn: arg1 ].        self renderAPInfoOn: arg1 ]headerAt: arg1 ifAbsent: arg2  ^headers at: arg1 ifAbsent: arg2style  ^'iframe {	border: 1px solid gray;	width: 100%;}'keysAndValuesDo: arg1  ^mutex critical: [ cache keysAndValuesDo: arg1 ]shouldVisitNextPresenterOf: arg1  ^arg1 isDelegation notdecorations  | tmp1 tmp2 |  tmp1 := self decoration.  tmp2 := OrderedCollection new.  [ tmp1 = self ] whileFalse: [ tmp2 add: tmp1.        tmp1 := tmp1 next ].  ^tmp2withField: arg1  ^self copy     addField: arg1;     yourselftoolCss  ^'.tool table {	margin-left: 5px;	border-collapse: collapse;}.tool table td {	padding-left: 5px;	padding-right: 5px;}.tool table td,.tool table th,.tool table .left {	text-align: left;}.tool table .right {	text-align: right;}.window-titlebar .wa-configuretoolplugin, .window-titlebar .wa-configuredispatcherplugin {	background: url(config.svg) no-repeat;	background-size: 16px 16px;}.window-titlebar .wa-deprecationtoolplugin {	background: url(deprecated.svg) no-repeat;	background-size: 16px 16px;}.window-titlebar .wa-memorytoolplugin {	background: url(memory.svg) no-repeat;	background-size: 16px 16px;}.window-titlebar .wa-profilertoolplugin {	background: url(profiler.svg) no-repeat;	background-size: 16px 16px;}'addPathParameterWithValue: arg1 to: arg2  | tmp1 |  tmp1 := arg2 path.  tmp1 isEmpty ifTrue: [ arg2 addToPath: '' ].  arg2 addPathParameterAt: tmp1 size key: self keyField value: arg1updateRoot: arg1  super updateRoot: arg1.  updateRootBlock isNil ifFalse: [ updateRootBlock value: arg1 ]testReentrant  | tmp1 |  tmp1 := self callcc: [:arg1 |  arg1 -> 0 ].  tmp1 value: tmp1 value + 1.  self assert: tmp1 value ~= 5.  tmp1 value = 4 ifFalse: [ tmp1 key value: tmp1 ]url: arg1  self attributes at: 'src' put: arg1renderProcess: arg1 on: arg2  arg2 tableRow: [ self renderLabel: arg1 name on: arg2.        self renderValue: arg1 priority on: arg2.        self renderValue: arg1 printString on: arg2.        self renderValue: [ self renderTerminate: arg1 on: arg2 ] on: arg2.        self renderValue: [ self renderSignalSemaphore: arg1 on: arg2 ] on: arg2.        self renderValue: [ self renderInspect: arg1 on: arg2 ] on: arg2 ]at: arg1 ifAbsent: arg2  ^byKey at: arg1 ifAbsent: arg2dateIsValid  [ self date ] on: Error do: [:arg1 |  ^false ].  ^truevideo: arg1  self video with: arg1title: arg1  title := arg1isRenderContinuation  ^self class isRenderContinuationdocument: arg1 mimeType: arg2 fileName: arg3  self document: (arg1 seasideMimeDocument           mimeType: arg2;           fileName: arg3;           yourself)handleFiltered: arg1  updateUrl: arg1  super updateUrl: arg1.  self selected notNil ifTrue: [ arg1 addToPath: self selected class name ]testFileLibrary  | tmp1 |  handler := WAFileHandler new.  handler preferenceAt: #fileHandlerListingClass put: self handlerClass.  self requestContextWithUrl: '/i/dont/care/WATestingFiles'.  self requestContext consumer     next;     next;     next.  tmp1 := self responseAfter: [ handler handle: self requestContext ].  self assert: tmp1 status = self expectedStatus.  self assert: tmp1 contentType = self expectedMimeType.  self assertLibraryResponse: tmp1setClass: arg1 selector: arg2  | tmp1 tmp2 |  tmp1 := arg1 methodDict at: arg2 ifAbsent: [ nil ].  tmp2 := tmp1 ifNil: [ nil ] ifNotNil: [ tmp1 protocol ].  selectedPackage := self parentOfClass: arg1.  selectedClass := arg1.  showInstance := arg1 isMeta not.  selectedMessageCategory := tmp2.  selectedMethod := tmp1nameOfHandler: arg1  ^handlers keyAtValue: arg1 ifAbsent: [ WAUnregisteredHandlerError signal ]removeFilter: arg1  | tmp1 tmp2 |  tmp1 := nil.  tmp2 := self filter.  [ tmp2 = self ] whileFalse: [ tmp2 = arg1 ifTrue: [ tmp1 isNil ifTrue: [ self setFilter: tmp2 next ] ifFalse: [ tmp1 setNext: tmp2 next ].              ^arg1 setNext: nil ].        tmp1 := tmp2.        tmp2 := tmp2 next ].  ^nilequalExamples  ^#(#('http://example.com/' 'http://example.com') #('http://example.com/' 'HTTP://example.com/') #('http://example.com/' 'http://example.com:/') #('http://example.com/' 'http://example.com:80/') #('http://example.com/' 'http://Example.com/') #('http://example.com/~smith/' 'http://example.com/%7Esmith/') #('http://example.com/~smith/' 'http://example.com/%7esmith/') #('http://example.com/%7Esmith/' 'http://example.com/%7esmith/') #('http://example.com/foo/bar/' 'http://example.com/foo//bar/') #('http://example.com/foo/bar/' 'http://example.com/foo////bar/'))value: arg1  self attributeAt: 'value' put: arg1url: arg1  self attributeAt: 'src' put: arg1expectedStatus  ^403verifyPassword: arg1 forUser: arg2  ^arg2 = 'admin' and: [ arg1 = 'seaside' ]renderNotExecutedOn: arg1  arg1 form     action: (self actionUrlFor: arg1);     with: [ arg1 div: [ arg1 hiddenInput                 name: self parameterName;                 value: self secondParameterValue.              arg1 submitButton                 callback: [ self runTest ];                 text: 'run test' ] ]createRequestContext  ^WARequestContext request: WARequest new response: WABufferedResponse newrecipients  ^self to , self cc , self bcc collect: [:arg1 |  arg1 greaseString ]createHandlers  | tmp1 tmp2 |  tmp1 := WAApplication new     cache: WAPredictableCache new;     yourself.  tmp2 := WASession new     documentHandlers: WAPredictableCache new;     yourself.  tmp1 register: tmp2.  ^Array with: tmp1 with: tmp2size  ^byKey sizestartDateSelection  ^dateSelectionStart isNil ifFalse: [ dateSelectionStart min: dateSelectionEnd ]handler  ^handlerprotectorByBrowserSessionCookie  | tmp1 |  tmp1 := WASessionCookieProtectionFilter new.  self session addFilter: tmp1.  child inform: 'Open this page in a different browser by copying the complete URL. Seaside should reply with a forbidden message. Closing this dialog should remove the filter.' onAnswer: [ self session removeFilter: tmp1 ]testAt  attributes at: 'foo' put: 'bar'.  self assert: (attributes at: 'foo') = 'bar'.  self assert: (attributes at: 'bar') isNiltestCodes  | tmp1 tmp2 |  tmp1 := #(authenticationFailed forbidden found gone internalError notFound notImplemented).  tmp2 := #(401 403 302 410 500 404 501).  tmp1 with: tmp2 do: [:arg1 :arg2 |  self response perform: arg1.        self assert: self response status = arg2.        self assert: self response message = (self response class messageForStatus: arg2) ]inserted: arg1  self inserted with: arg1renderConfirmCheeseCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternUnary;           with: 'confirmCheese'.        arg1 break.        arg1 text: '    ^ '.        arg1 span           class: #self;           with: 'self'.        arg1 text: ' confirm: '.        arg1 span           class: #string;           with: '''Is '''.        arg1 text: ', '.        arg1 span           class: #instanceVar;           with: 'cheese'.        arg1 text: ','.        arg1 span           class: #string;           with: ''' your favorite cheese?'''.        arg1 break ]scriptGeneratorClass: arg1  self preferenceAt: #scriptGeneratorClass put: (GRPlatform current bindingOf: arg1)initializeOn: arg1  self initialize.  delegates := arg1endDate: arg1  endDate := arg1.  self updateDatesCachechildren  ^Array with: self delegatedeprecatedSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   width="48px"   height="48px"   id="svg1377"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/status"   sodipodi:docname="dialog-warning.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs1379">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective48" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6719"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       inkscape:collect="always"       id="linearGradient5060">      <stop         style="stop-color:black;stop-opacity:1;"         offset="0"         id="stop5062" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5064" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6717"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       id="linearGradient5048">      <stop         style="stop-color:black;stop-opacity:0;"         offset="0"         id="stop5050" />      <stop         id="stop5056"         offset="0.5"         style="stop-color:black;stop-opacity:1;" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5052" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient6715"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <linearGradient       y2="56.0523"       x2="47.3197"       y1="11.1133"       x1="4.1914"       gradientUnits="userSpaceOnUse"       id="aigrd1">      <stop         id="stop6490"         style="stop-color:#D4D4D4"         offset="0" />      <stop         id="stop6492"         style="stop-color:#E2E2E2"         offset="0.3982" />      <stop         id="stop6494"         style="stop-color:#FFFFFF"         offset="1" />    </linearGradient>    <linearGradient       y2="56.0523"       x2="47.3197"       y1="11.1133"       x1="4.1914"       gradientUnits="userSpaceOnUse"       id="linearGradient7451"       xlink:href="#aigrd1"       inkscape:collect="always" />    <linearGradient       id="linearGradient4126"       inkscape:collect="always">      <stop         id="stop4128"         offset="0"         style="stop-color:#000000;stop-opacity:1;" />      <stop         id="stop4130"         offset="1"         style="stop-color:#000000;stop-opacity:0;" />    </linearGradient>    <radialGradient       r="17.142857"       fy="40.000000"       fx="23.857143"       cy="40.000000"       cx="23.857143"       gradientTransform="matrix(1,0,0,0.5,2.139286e-14,20)"       gradientUnits="userSpaceOnUse"       id="radialGradient7449"       xlink:href="#linearGradient4126"       inkscape:collect="always" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient6525"       id="linearGradient5250"       x1="8.5469341"       y1="30.281681"       x2="30.85088"       y2="48.301884"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.899009,0,0,0.934235,1.875108,1.193645)" />    <linearGradient       inkscape:collect="always"       xlink:href="#aigrd1"       id="linearGradient3922"       gradientUnits="userSpaceOnUse"       x1="4.1914"       y1="11.1133"       x2="47.3197"       y2="56.0523" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient6525"       id="linearGradient3924"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.899009,0,0,0.934235,1.875108,1.193645)"       x1="8.5469341"       y1="30.281681"       x2="30.85088"       y2="48.301884" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient6525"       id="linearGradient3933"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.899009,0,0,0.934235,1.875108,1.193645)"       x1="8.5469341"       y1="30.281681"       x2="30.85088"       y2="48.301884" />    <linearGradient       inkscape:collect="always"       xlink:href="#aigrd1"       id="linearGradient3935"       gradientUnits="userSpaceOnUse"       x1="4.1914"       y1="11.1133"       x2="47.3197"       y2="56.0523" />    <linearGradient       inkscape:collect="always"       xlink:href="#aigrd1"       id="linearGradient3946"       gradientUnits="userSpaceOnUse"       x1="4.1914"       y1="11.1133"       x2="47.3197"       y2="56.0523" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient6525"       id="linearGradient3948"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.899009,0,0,0.934235,1.875108,1.193645)"       x1="8.5469341"       y1="30.281681"       x2="30.85088"       y2="48.301884" />  </defs>  <sodipodi:namedview     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="1.0"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="14.757891"     inkscape:cx="13.022822"     inkscape:cy="24"     inkscape:current-layer="g7435"     showgrid="true"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:window-width="1105"     inkscape:window-height="818"     inkscape:window-x="0"     inkscape:window-y="30">    <inkscape:grid       id="GridFromPre046Settings"       type="xygrid"       originx="0px"       originy="0px"       spacingx="1px"       spacingy="1px"       color="#0000ff"       empcolor="#0000ff"       opacity="0.2"       empopacity="0.4"       empspacing="4" />  </sodipodi:namedview>  <metadata     id="metadata1382">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:title>Dialog Warning</dc:title>        <dc:date>2005-10-14</dc:date>        <dc:creator>          <cc:Agent>            <dc:title>Andreas Nilsson</dc:title>          </cc:Agent>        </dc:creator>        <dc:contributor>          <cc:Agent>            <dc:title>Jakub Steiner, Garrett LeSage</dc:title>          </cc:Agent>        </dc:contributor>        <dc:subject>          <rdf:Bag>            <rdf:li>dialog</rdf:li>            <rdf:li>warning</rdf:li>          </rdf:Bag>        </dc:subject>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     id="layer1"     inkscape:label="Layer 1"     inkscape:groupmode="layer">    <g       transform="matrix(1.566667,0.000000,0.000000,1.566667,-8.925566,-23.94764)"       id="g7435">      <g         style="display:inline"         transform="matrix(1.444074e-2,0,0,1.331973e-2,33.38871,40.40337)"         id="g6707">        <rect           style="opacity:0.40206185;color:black;fill:url(#linearGradient6715);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"           id="rect6709"           width="1339.6335"           height="478.35718"           x="-1559.2523"           y="-150.69685" />        <path           style="opacity:0.40206185;color:black;fill:url(#radialGradient6717);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"           d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "           id="path6711"           sodipodi:nodetypes="cccc" />        <path           sodipodi:nodetypes="cccc"           id="path6713"           d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "           style="opacity:0.40206185;color:black;fill:url(#radialGradient6719);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      </g>      <g         id="g3937"         transform="matrix(1,0,4.537846e-3,1,-0.138907,-1.394718e-15)"         inkscape:r_cx="true"         inkscape:r_cy="true">        <path           inkscape:r_cy="true"           inkscape:r_cx="true"           transform="matrix(1,0,-8.726683e-3,1,0.328074,1.276596)"           id="path6485"           d="M 33.282781,38.644744 L 22.407791,18.394765 C 22.095292,17.832266 21.532792,17.519767 20.907793,17.519767 C 20.282793,17.519767 19.720294,17.894765 19.407795,18.457265 L 8.7828048,38.707245 C 8.5328048,39.207244 8.5328048,39.894744 8.8453048,40.394743 C 9.1578038,40.894743 9.6578038,41.144742 10.282804,41.144742 L 31.782782,41.144742 C 32.407781,41.144742 32.97028,40.832243 33.220281,40.332243 C 33.53278,39.832243 33.53278,39.207244 33.282781,38.644744 z "           style="fill:#cc0000;fill-rule:nonzero;stroke:#9f0000;stroke-width:0.6382978;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />        <g           inkscape:r_cy="true"           inkscape:r_cx="true"           id="g6487"           transform="matrix(0.625,0,-5.534934e-3,0.634254,6.164053,15.76055)"           style="fill-rule:nonzero;stroke:#000000;stroke-miterlimit:4">          <linearGradient             y2="56.052299"             x2="47.319698"             y1="11.1133"             x1="4.1914001"             gradientUnits="userSpaceOnUse"             id="linearGradient6525">            <stop               id="stop6529"               style="stop-color:#ffffff;stop-opacity:1;"               offset="0" />            <stop               id="stop6531"               style="stop-color:#ffffff;stop-opacity:0.34020618;"               offset="1" />          </linearGradient>          <path             inkscape:r_cy="true"             inkscape:r_cx="true"             id="path6496"             d="M 9.5,37.6 C 9.2,38.1 9.5,38.5 10,38.5 L 38.2,38.5 C 38.7,38.5 39,38.1 38.7,37.6 L 24.4,11 C 24.1,10.5 23.7,10.5 23.5,11 L 9.5,37.6 z "             style="fill:url(#linearGradient3946);stroke:none" />        </g>        <path           inkscape:r_cy="true"           inkscape:r_cx="true"           transform="matrix(1,0,-8.726683e-3,1,0.318277,1.276596)"           sodipodi:nodetypes="ccsccscccc"           id="path1325"           d="M 32.323106,38.183905 L 22.150271,19.265666 C 21.71698,18.45069 21.561698,18.189213 20.908406,18.189213 C 20.346525,18.189213 20.054127,18.57002 19.651305,19.339291 L 9.7489285,38.242296 C 9.1737649,39.303588 9.1128238,39.580228 9.3937644,40.047345 C 9.6747034,40.514462 10.032797,40.48902 11.356441,40.519491 L 30.974593,40.519491 C 32.206825,40.534726 32.483988,40.440837 32.70874,39.97372 C 32.989681,39.506602 32.867799,39.136 32.323106,38.183905 z "           style="opacity:0.5;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient3948);stroke-width:0.63829792;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />      </g>      <g         style="fill-rule:nonzero;stroke:#000000;stroke-miterlimit:4"         transform="matrix(0.555088,0,0,0.555052,7.749711,17.80196)"         id="g6498"         inkscape:r_cx="true"         inkscape:r_cy="true">        <path           style="stroke:none"           d="M 23.9,36.5 C 22.6,36.5 21.6,35.5 21.6,34.2 C 21.6,32.8 22.5,31.9 23.9,31.9 C 25.3,31.9 26.1,32.8 26.2,34.2 C 26.2,35.5 25.3,36.5 23.9,36.5 L 23.9,36.5 z M 22.5,30.6 L 21.9,19.1 L 25.9,19.1 L 25.3,30.6 L 22.4,30.6 L 22.5,30.6 z "           id="path6500"           inkscape:r_cx="true"           inkscape:r_cy="true" />      </g>    </g>  </g></svg>'renderOperaOn: arg1  arg1 listItem: 'Opera is supposed to work perfectly.'renderFeedbackOn: arg1  arg1 tableRow: [ arg1 tableData: [ arg1 label                 for: #withFeedback;                 with: 'With Feedback:' ].        arg1 tableData: [ arg1 checkbox                 id: #withFeedback;                 on: #test of: self ] ]initializeWithConfiguration: arg1 canvas: arg2  self initialize.  configuration := arg1.  canvas := arg2selectDate: arg1 rowIndex: arg2  self hasSelection ifFalse: [ dateSelectionStart := dateSelectionEnd := arg1.        rowSelectionStart := rowSelectionEnd := arg2 ] ifTrue: [ dateSelectionEnd := arg1.        rowSelectionEnd := arg2 ]seasideRequestFields  ^selftestAddress  | tmp1 |  tmp1 := WAEmailAddress address: 'philippe.marschall@gmail.com'.  self assert: tmp1 address = 'philippe.marschall@gmail.com'.  self assert: tmp1 username isNil.  self assert: tmp1 greaseString = 'philippe.marschall@gmail.com'testScriptTag  self assert: [:arg1 |  arg1 script: 'alert("<foo>")' ] gives: '<script type="text/javascript">alert("<foo>")</script>'.  self assert: [:arg1 |  arg1 script: 'true & false' ] gives: '<script type="text/javascript">true & false</script>'.  self assert: [:arg1 |  arg1 script           defer;           with: 'alert("<foo>")' ] gives: '<script defer type="text/javascript">alert("<foo>")</script>'initialize  super initialize.  beginDate := WADateSelector new.  endDate := WADateSelector new.  endDate date: (Date today addDays: 1).  beginTime := WATimeSelector new.  beginTime time: Time now.  endTime := WATimeSelector new.  endTime time: (beginTime time addSeconds: 3600).  beginDAT := WADateTimeSelector new.  endDAT := WADateTimeSelector new.  endDAT dateAndTime: beginDAT dateAndTime + 1 days + 1 hoursgo  ok  SmalltalkImage current vm parameterAt: parameterIndex put: memoryInput bytes.  self answerrenderTerminate: arg1 on: arg2  arg2 anchor     callback: [ arg1 terminate ];     with: 'terminate'codebrowserSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   inkscape:export-ydpi="90.000000"   inkscape:export-xdpi="90.000000"   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"   width="48px"   height="48px"   id="svg11300"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/apps"   sodipodi:docname="accessories-text-editor.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective85" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6719"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       inkscape:collect="always"       id="linearGradient5060">      <stop         style="stop-color:black;stop-opacity:1;"         offset="0"         id="stop5062" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5064" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6717"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       id="linearGradient5048">      <stop         style="stop-color:black;stop-opacity:0;"         offset="0"         id="stop5050" />      <stop         id="stop5056"         offset="0.5"         style="stop-color:black;stop-opacity:1;" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5052" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient6715"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <linearGradient       id="linearGradient2994">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop2996" />      <stop         style="stop-color:#c9c9c9;stop-opacity:1;"         offset="1"         id="stop2998" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient2984">      <stop         style="stop-color:#e7e2b8;stop-opacity:1;"         offset="0"         id="stop2986" />      <stop         style="stop-color:#e7e2b8;stop-opacity:0;"         offset="1"         id="stop2988" />    </linearGradient>    <linearGradient       id="linearGradient2974">      <stop         style="stop-color:#c1c1c1;stop-opacity:1;"         offset="0"         id="stop2976" />      <stop         style="stop-color:#acacac;stop-opacity:1;"         offset="1"         id="stop2978" />    </linearGradient>    <linearGradient       id="linearGradient2966">      <stop         style="stop-color:#ffd1d1;stop-opacity:1;"         offset="0"         id="stop2968" />      <stop         id="stop3006"         offset="0.5"         style="stop-color:#ff1d1d;stop-opacity:1;" />      <stop         style="stop-color:#6f0000;stop-opacity:1;"         offset="1"         id="stop2970" />    </linearGradient>    <linearGradient       id="linearGradient2919">      <stop         style="stop-color:#a3a4a0;stop-opacity:1;"         offset="0"         id="stop2921" />      <stop         style="stop-color:#888a85;stop-opacity:1;"         offset="1"         id="stop2923" />    </linearGradient>    <linearGradient       id="linearGradient2873">      <stop         style="stop-color:#939393;stop-opacity:1;"         offset="0"         id="stop2875" />      <stop         style="stop-color:#424242;stop-opacity:1;"         offset="1"         id="stop2877" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient2865">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop2867" />      <stop         style="stop-color:#000000;stop-opacity:0;"         offset="1"         id="stop2869" />    </linearGradient>    <linearGradient       id="linearGradient2855">      <stop         style="stop-color:#dfdfdf;stop-opacity:1;"         offset="0"         id="stop2857" />      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="1"         id="stop2859" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2855"       id="linearGradient2861"       x1="21.043484"       y1="42.83337"       x2="14.283642"       y2="6.8333683"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.137871,0.000000,0.000000,1.000000,-2.660884,0.000000)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient2865"       id="radialGradient2871"       cx="23.5625"       cy="40.4375"       fx="23.5625"       fy="40.4375"       r="19.5625"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.348243,0.000000,26.35543)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2873"       id="linearGradient2879"       x1="26.612417"       y1="28.083368"       x2="26.228401"       y2="42.83337"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2919"       id="linearGradient2925"       x1="6"       y1="7.5624999"       x2="40.984375"       y2="7.5624999"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2966"       id="linearGradient2972"       x1="48.90625"       y1="17.376184"       x2="50.988335"       y2="22.250591"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-5.669292,0.000000)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2974"       id="linearGradient2980"       x1="46"       y1="19.8125"       x2="47.6875"       y2="22.625"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-5.669292,0.000000)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient2984"       id="radialGradient2990"       cx="29.053354"       cy="27.640751"       fx="29.053354"       fy="27.640751"       r="3.2408544"       gradientTransform="matrix(2.923565,-3.911409e-24,2.471769e-23,2.029717,-61.55532,-27.88417)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2994"       id="linearGradient3000"       x1="25.71875"       y1="31.046875"       x2="25.514589"       y2="30.703125"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-5.825542,0.125000)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient2865"       id="radialGradient3010"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.348243,1.439818e-16,26.35543)"       cx="23.5625"       cy="40.4375"       fx="23.5625"       fy="40.4375"       r="19.5625" />  </defs>  <sodipodi:namedview     stroke="#c4a000"     fill="#edd400"     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="0.25490196"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="1"     inkscape:cx="14.928934"     inkscape:cy="7.6822472"     inkscape:current-layer="layer1"     showgrid="false"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:showpageshadow="false"     inkscape:window-width="872"     inkscape:window-height="688"     inkscape:window-x="195"     inkscape:window-y="160" />  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:creator>          <cc:Agent>            <dc:title>Jakub Steiner</dc:title>          </cc:Agent>        </dc:creator>        <dc:source>http://jimmac.musichall.cz</dc:source>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />        <dc:title>Text Editor</dc:title>      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     id="layer1"     inkscape:label="Layer 1"     inkscape:groupmode="layer">    <g       transform="matrix(2.417561e-2,0,0,2.086758e-2,45.12765,40.1536)"       id="g6707">      <rect         style="opacity:0.40206185;color:black;fill:url(#linearGradient6715);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect6709"         width="1339.6335"         height="478.35718"         x="-1559.2523"         y="-150.69685" />      <path         style="opacity:0.40206185;color:black;fill:url(#radialGradient6717);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "         id="path6711"         sodipodi:nodetypes="cccc" />      <path         sodipodi:nodetypes="cccc"         id="path6713"         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "         style="opacity:0.40206185;color:black;fill:url(#radialGradient6719);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    </g>    <path       style="color:#000000;fill:url(#linearGradient2861);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient2879);stroke-width:0.99999982;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 7.1638699,4.5063726 L 39.813122,4.5063726 C 40.575699,4.5063726 41.189615,5.0388241 41.189615,5.7002099 C 41.189615,5.7002099 43.590945,39.868907 43.590945,39.868907 C 43.590945,39.868907 43.603403,42.216529 43.603403,42.216529 C 43.603403,42.877915 42.989488,43.410366 42.226911,43.410366 L 4.750081,43.410366 C 3.9875042,43.410366 3.3735887,42.877915 3.3735887,42.216529 L 3.3624173,40.049613 L 5.7873775,5.7002099 C 5.7873775,5.0388241 6.4012931,4.5063726 7.1638699,4.5063726 z "       id="rect1975"       sodipodi:nodetypes="ccccccccccc" />    <path       transform="matrix(0.616613,0.000000,0.000000,0.440367,10.61425,13.94266)"       d="M 43.125 40.4375 A 19.5625 6.8125 0 1 1  4,40.4375 A 19.5625 6.8125 0 1 1  43.125 40.4375 z"       sodipodi:ry="6.8125"       sodipodi:rx="19.5625"       sodipodi:cy="40.4375"       sodipodi:cx="23.5625"       id="path3008"       style="opacity:0.31578944;color:#000000;fill:url(#radialGradient3010);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc" />    <rect       style="opacity:1;color:#000000;fill:#a4a4a4;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="rect2851"       width="39.048077"       height="3.0714951"       x="3.9770372"       y="39.868271"       rx="0.67937863"       ry="0.67937863" />    <path       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 3.9267507,40.442796 C 3.9267507,40.442796 4.0776125,39.912466 4.6307727,39.868272 L 42.195375,39.868272 C 42.949684,39.868272 42.999971,40.619573 42.999971,40.619573 C 42.999971,40.619573 43.02357,39 41.7161,39 L 5.3042159,39 C 4.2984702,39.088388 3.9267507,39.779883 3.9267507,40.442796 z "       id="path2853"       sodipodi:nodetypes="ccccccc" />    <path       style="opacity:1;color:#000000;fill:url(#linearGradient2925);fill-opacity:1.0;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 6.25,5.7343749 L 6,10.125 C 6,10.125 6.3125,8.9999999 7,8.9999999 L 40.125,8.9999999 C 40.828125,8.9843749 40.859375,9.3124999 40.984375,9.8281249 C 40.984375,9.8281249 40.734375,5.9531249 40.734375,5.9531249 C 40.703125,5.4062499 40.515625,4.9999999 39.953125,4.9999999 L 7.0625,4.9999999 C 6.609375,4.9999999 6.296875,5.3437499 6.25,5.7343749 z "       id="path2915"       sodipodi:nodetypes="ccccccccc" />    <path       sodipodi:nodetypes="ccccccccccc"       id="path2917"       d="M 7.8126474,5.5404503 L 38.944983,5.5404503 C 39.66702,5.5404503 40.2483,5.3883462 40.2483,6.014572 C 40.2483,6.014572 42.521973,39.023077 42.521973,39.023077 C 42.521973,39.023077 42.622156,41.732033 42.622156,41.732033 C 42.622156,42.358259 42.48282,42.376269 41.760782,42.376269 L 4.8620444,42.376269 C 4.4493662,42.376269 4.4426114,42.269871 4.4426114,41.864615 L 4.4320338,39.194177 L 6.7280807,6.045822 C 6.7280807,5.4195962 7.09061,5.5404503 7.8126474,5.5404503 z "       style="color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:0.99999946;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible;opacity:0.43859649" />    <g       id="g2950">      <rect         ry="1"         rx="1"         y="2.5"         x="8.5"         height="5"         width="2"         id="rect2899"         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2901"         width="2"         height="5"         x="12.5"         y="2.5"         rx="1"         ry="1" />      <rect         ry="1"         rx="1"         y="2.5"         x="16.5"         height="5"         width="2"         id="rect2903"         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2905"         width="2"         height="5"         x="20.5"         y="2.5"         rx="1"         ry="1" />      <rect         ry="1"         rx="1"         y="2.5"         x="24.5"         height="5"         width="2"         id="rect2907"         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2909"         width="2"         height="5"         x="28.5"         y="2.5"         rx="1"         ry="1" />      <rect         ry="1"         rx="1"         y="2.5"         x="32.5"         height="5"         width="2"         id="rect2911"         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:1;color:#000000;fill:#fce94f;fill-opacity:1;fill-rule:evenodd;stroke:#886f00;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2913"         width="2"         height="5"         x="36.5"         y="2.5"         rx="1"         ry="1" />    </g>    <g       id="g2941">      <rect         y="12"         x="9"         height="1"         width="29"         id="rect2927"         style="opacity:0.28070175;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:0.28070176;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2929"         width="29"         height="1"         x="9"         y="14.981792" />      <rect         y="18.003939"         x="9"         height="1"         width="13"         id="rect2931"         style="opacity:0.28070176;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:0.28070176;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2933"         width="29"         height="1"         x="9"         y="22.985731" />      <rect         y="26.007877"         x="9"         height="1"         width="29"         id="rect2935"         style="opacity:0.28070176;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <rect         style="opacity:0.28070176;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect2937"         width="29"         height="1"         x="9"         y="29.030024" />      <rect         y="32.05217"         x="9"         height="1"         width="8"         id="rect2939"         style="opacity:0.28070176;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    </g>    <path       style="opacity:1;color:#000000;fill:#cb9022;fill-opacity:1;fill-rule:evenodd;stroke:#5c410c;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 17.34116,32.5 L 22.96616,26.875 L 43.059909,17.125 C 46.309909,15.875 48.247409,20.5 45.372409,22.125 L 25.34116,31.5 L 17.34116,32.5 z "       id="path2960"       sodipodi:nodetypes="cccccc" />    <path       sodipodi:nodetypes="czcczcc"       id="path2964"       d="M 38.330708,20 C 38.330708,20 39.768208,20.09375 40.330708,21.34375 C 40.910201,22.631511 40.330708,24 40.330708,24 L 45.361958,21.53125 C 45.361958,21.53125 46.81399,20.649883 46.018208,18.6875 C 45.233296,16.751923 43.330708,17.53125 43.330708,17.53125 L 38.330708,20 z "       style="opacity:1;color:#000000;fill:url(#linearGradient2972);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#linearGradient2980);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 38.330708,20 C 38.330708,20 39.768208,20.09375 40.330708,21.34375 C 40.910201,22.631511 40.330708,24 40.330708,24 L 42.330708,23 C 42.330708,23 43.15774,21.681133 42.549458,20.3125 C 41.924458,18.90625 40.330708,19 40.330708,19 L 38.330708,20 z "       id="path2962"       sodipodi:nodetypes="czcczcc" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient2990);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 18.768208,31.78125 L 23.268208,27.28125 C 24.768208,28.09375 25.549458,29.4375 25.143208,31 L 18.768208,31.78125 z "       id="path2982"       sodipodi:nodetypes="cccc" />    <path       style="opacity:1;color:#000000;fill:url(#linearGradient3000);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 20.111958,30.375 L 18.486958,31.96875 L 20.830708,31.65625 C 21.049458,30.9375 20.643208,30.59375 20.111958,30.375 z "       id="path2992"       sodipodi:nodetypes="cccc" />    <path       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:0.36363639;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 23.268208,27.25 L 24.830708,28.5 L 40.218048,21.18133 C 39.773616,20.325286 38.976281,20.096733 38.314669,20.019068 L 23.268208,27.25 z "       id="path3002"       sodipodi:nodetypes="ccccc" />    <path       style="opacity:1;color:#000000;fill:#000000;fill-opacity:0.36363639;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 25.143208,31.0625 L 25.330708,30.3125 L 40.561798,23.1829 C 40.561798,23.1829 40.451638,23.796527 40.345919,23.93225 L 25.143208,31.0625 z "       id="path3004"       sodipodi:nodetypes="ccccc" />  </g></svg>'cache: arg1  cache := arg1renderHeaderOn: arg1  arg1 tableHead: [ arg1 tableRow: [ arg1 tableData.              arg1 tableHeading: 'Count'.              arg1 tableHeading: 'Total Time'.              arg1 tableHeading: 'Avg. Time' ] ]type: arg1  self attributes at: 'type' put: arg1rangeInput  ^self brush: WARangeInputTag newrubyText: arg1  self rubyText with: arg1addTask  selection contents notNil ifTrue: [ tasks add: selection contents new ]testCanvasWithLineBreaks  self assert: [:arg1 |  arg1 withLineBreaks: 'abc' ] gives: 'a<br/>b<br/>c'testIsEmpty  self assert: merged isEmpty.  two at: 'bar' put: 2.  self deny: merged isEmpty.  two removeKey: 'bar'.  one at: 'foo' put: 1.  self deny: merged isEmpty.  two at: 'foo' put: 2.  self deny: merged isEmptyonUpdateRoot: arg1  updateRootBlock := arg1try: arg1  (self atEnd or: [ self peek ~= arg1 ]) ifTrue: [ ^false ].  self next.  ^truearchive: arg1  self attributes at: 'archive' put: arg1max: arg1  self attributeAt: 'max' put: arg1testSignalError  cache := WAHashCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 0 maximumRelativeAge: 0 overflowAction: WAHashCache signalError.  1 to: 10 do: [:arg1 |  cache at: arg1 put: arg1 greaseString ].  self should: [ cache at: 11 put: '11' ] raise: WAMaximumNumberOfSessionsExceededErrorshouldConsider: arg1  | tmp1 |  tmp1 := 0.  arg1 allInstancesDo: [:arg2 |  tmp1 := tmp1 + 1.        tmp1 >= 100 ifTrue: [ ^true ] ].  ^falseoptions  ^optionsBlock isNil ifTrue: [ #() ] ifFalse: [ optionsBlock value ]monthIndex: arg1  monthIndex contents: arg1contents: arg1  self url: (canvas urlForAction: [ self performRendering: arg1 ])definitionTerm  ^self tag: 'dt'noHandlerFoundForKey: arg1 in: arg2 context: arg3  self deleteOldOrConflictingCookieIn: arg2 context: arg3.  super noHandlerFoundForKey: arg1 in: arg2 context: arg3renderInputSecondOn: arg1  arg1 tableRow: [ self renderInputForCookie: #second on: arg1.        arg1 tableData: [ arg1 submitButton                 id: #addSecondCookie;                 on: #addBoth of: self ] ]privatePathParameterMapAt: arg1 ifPresentDo: arg2 ifAbsent: arg3  | tmp1 |  pathParameters isNil ifTrue: [ ^arg3 value ].  tmp1 := pathParameters at: arg1 ifAbsent: [ ^arg3 value ].  tmp1 isNil ifTrue: [ ^arg3 value ].  ^arg2 value: tmp1testCookiesDisabledMatchingHandlerPresent  | tmp1 tmp2 tmp3 |  registry := self createRegistry.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: tmp3.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDispatched: tmp1renderContentOn: arg1  arg1 div     class: self cssClass;     with: [ super renderContentOn: arg1 ]pathUnencoded  ^self pathtype: arg1  self attributes at: 'type' put: arg1testAnchorAttributesDocument  self assert: [:arg1 |  arg1 anchor document: 'income: 1$' mimeType: 'text/plain' fileName: 'taxes.txt' ] gives: '<a type="text/plain" href="/?_s=1&amp;_d=1"></a>'.  self assert: [:arg1 |  arg1 anchor document: 'income: 2$' mimeType: 'text/plain' ] gives: '<a type="text/plain" href="/?_s=1&amp;_d=2"></a>'.  self assert: [:arg1 |  arg1 anchor document: 'income: 3$' ] gives: '<a href="/?_s=1&amp;_d=3"></a>'id: arg1  self attributes at: 'id' put: arg1testResetThenWrite  | tmp1 |  tmp1 := self response     status: WAResponse statusNotFound;     attachmentWithFileName: 'upload.csv';     nextPutAll: 'the wrong content';     resetIfPossible.  self assert: tmp1.  self response     status: WAResponse statusImATeapot;     headerAt: 'X-The-Header' put: 'the value';     nextPutAll: 'the real content'.  self assertLines: #('HTTP/1.1 418 I''m a teapot' 'X-The-Header: the value' 'Content-Length: 16' '' 'the real content')subject  ^subjectitems: arg1  items := arg1isSelected: arg1  ^selected = arg1noHandlerFoundForKey: arg1 in: arg2 context: arg3  | tmp1 |  tmp1 := self queryFieldKeyFromContext: arg3.  tmp1 isNil ifTrue: [ | tmp2 |        tmp2 := self cookieFromContext: arg3 ifAbsent: [ nil ].        tmp2 notNil ifTrue: [ self deleteSessionCookieOf: arg2 from: arg3 ] ] ifFalse: [ | tmp2 |        tmp2 := self cookieFromContext: arg3 ifAbsent: [ nil ].        (tmp2 notNil and: [ tmp2 value = tmp1 ]) ifTrue: [ self deleteSessionCookieOf: arg2 from: arg3 ] ].  super noHandlerFoundForKey: arg1 in: arg2 context: arg3testEnsureId  self assert: [:arg1 |  self assert: arg1 div ensureId = 'id1' ] gives: '<div id="id1"></div>'.  self assert: [:arg1 |  self assert: (arg1 div                 id: 'foo';                 ensureId) = 'foo' ] gives: '<div id="foo"></div>'confirm: arg1 onAnswer: arg2  self call: (WAYesOrNoDialog new           addMessage: arg1;           yourself) onAnswer: arg2updateStates: arg1  super updateStates: arg1.  arg1 register: nextisActive  ^self handler notNil and: [ self handler parent notNil ]beDialog  dialog := trueresourceBaseUrl  ^'https://www.seaside.st/resources/'beSection  self relationship: 'section'renderToggleUIProcessOn: arg1  arg1 anchor     callback: [ self toggleUIProcess ];     with: self toggleUITexttestEmptyPathConsumption  | tmp1 |  tmp1 := WADispatcher new.  dispatcher := tmp1 register: WADispatcher new at: 'tweets'.  handler := dispatcher register: WANextUnconsumedPathElementRequestHandler new at: 'kentbeck'.  [ tmp1 handle: self requestContext ] on: WAResponseNotification do: [:arg1 |   ].  self assert: handler nextUnconsumedPathElement isNilvalue: arg1  self attributes at: 'value' put: arg1visitPainter: arg1  | tmp1 |  tmp1 := arg1 rendererClass context: self renderContext.  arg1 renderContentOn: tmp1.  tmp1 flushtestContentType  self response contentType: WAMimeType textHtml.  self assert: self response contentType = WAMimeType textHtml.  self response contentType: WAMimeType imagePng.  self assert: self response contentType = WAMimeType imagePngclose  root isNil ifFalse: [ root closeOn: self ]url: arg1  self attributeAt: 'src' put: arg1responseFrom: arg1  self subclassResponsibilityprivateAt: arg1 put: arg2  arg2 ifNil: [ ^nil ].  ^super privateAt: arg1 put: arg2code  ^self tag: 'code'redirectTo: arg1  self location: arg1.  self foundkeyAtValue: arg1 ifAbsent: arg2  self shouldNotImplementexpression  ^self configuration expressionAt: attribute key ifAbsent: [ nil ]testStreamVersionNumberParsing  | tmp1 tmp2 |  tmp1 := '12.3' readStream.  tmp2 := WAHttpVersion readFrom: tmp1.  self assert: tmp2 major = 12.  self assert: tmp2 minor = 3testFileLibraries  | tmp1 |  handler := WAFileHandler new.  handler preferenceAt: #fileHandlerListingClass put: self handlerClass.  self requestContextWithUrl: '/i/dont/care/'.  self requestContext consumer     next;     next;     next.  tmp1 := self responseAfter: [ handler handle: self requestContext ].  self assert: tmp1 status = self expectedStatus.  self assert: tmp1 contentType = self expectedMimeType.  self assertLibrariesResponse: tmp1actionUrl  ^self context actionUrldocument: arg1  document := arg1beShortcutIcon  self relationship: 'shortcut icon'valueWithArguments: arg1  ^arg1 size = 1 ifTrue: [ self value: arg1 first ] ifFalse: [ GRInvalidArgumentCount signal: 'Continuations can only be resumed with one argument.' ]name: arg1  self attributeAt: 'name' put: arg1cookieFromContext: arg1 ifAbsent: arg2  | tmp1 tmp2 |  tmp1 := arg1 request cookiesAt: self keyCookieName.  tmp1 isEmptyOrNil ifTrue: [ ^arg2 value ].  tmp1 size = 1 ifTrue: [ ^tmp1 first ].  tmp2 := arg1 request url.  tmp1 := tmp1 collect: [:arg3 |  arg3 -> (arg3 path seasideUrl relativeTo: tmp2) ].  tmp1 := tmp1 reject: [:arg3 |  | tmp3 |        tmp3 := arg3 value.        tmp3 notEmpty and: [ tmp3 first = '..' ] ].  tmp1 isEmpty ifTrue: [ ^arg2 value ].  tmp1 size > 1 ifTrue: [ tmp1 sort: [:arg4 :arg5 |  arg4 value size <= arg5 value size ] ].  ^tmp1 first keyredirect  | tmp1 |  tmp1 := self application url.  tmp1 addAllToPath: self requestContext consumer upToEnd.  ^self requestContext responseGenerator     redirectTo: tmp1;     respondrenderInputForCookie: arg1 on: arg2  arg2 tableData: [ arg2 textInput on: (arg1 , #Key) asSymbol of: self ].  arg2 tableData: [ arg2 textInput on: (arg1 , #Value) asSymbol of: self ].  arg2 tableData: [ arg2 textInput on: (arg1 , #Path) asSymbol of: self ].  arg2 tableData.  arg2 tableDataunderlyingCache  ^cachetestMatches  | tmp1 tmp2 |  tmp1 := WAMimeType fromString: 'image/png'.  tmp2 := WAMimeType fromString: 'image/png'.  self assert: (tmp2 matches: tmp1).  tmp2 := WAMimeType fromString: 'image/gif'.  self deny: (tmp2 matches: tmp1).  tmp1 := WAMimeType fromString: 'image/*'.  tmp2 := WAMimeType fromString: 'image/png'.  self assert: (tmp2 matches: tmp1).  tmp2 := WAMimeType fromString: 'text/html'.  self deny: (tmp2 matches: tmp1).  tmp1 := WAMimeType fromString: '*/*'.  tmp2 := WAMimeType fromString: 'image/png'.  self assert: (tmp2 matches: tmp1)name: arg1  self attributes at: 'name' put: arg1initialize  super initialize.  isOptional := falsetestSelectTag  self assert: [:arg1 |  arg1 select ] gives: '<select></select>'.  self assert: [:arg1 |  arg1 select list: #(1 2) ] gives: '<select><option>1</option><option>2</option></select>'.  self assert: [:arg1 |  arg1 select           list: #(1 2);           labels: [:arg2 |  2 * arg2 ] ] gives: '<select><option>2</option><option>4</option></select>'.  self assert: [:arg1 |  arg1 select           list: #(1 2);           enabled: [:arg2 |  arg2 even ] ] gives: '<select><option disabled>1</option><option>2</option></select>'.  self assert: [:arg1 |  arg1 select           list: #(1 2);           callback: [:arg2 |   ] ] gives: '<select name="1"><option value="1">1</option><option value="2">2</option></select>'expectChar: arg1  ^(self matchChar: arg1) ifFalse: [ self error: arg1 greaseString , ' expected' ]visitor  ^visitor ifNil: [ visitor := self defaultVisitor ]main  ^self tag: 'main'close  closed ifFalse: [ self with: nil ]owner: arg1  owner := arg1initialize  super initialize.  self     name: 'Clear sessions';     description: 'Clear all the sessions.'nonFileSelectors  ^super nonFileSelectors copyWith: #defaultFileHandlerrenderEntityTableBodyOn: arg1  arg1 tableBody: [ self entities do: [:arg2 |  arg1 tableRow: [ arg1 tableData                       scope: 'row';                       with: arg2 first.                    arg2 second do: [:arg3 |  arg1 tableData: arg3 ].                    arg2 second do: [:arg3 |  arg1 tableData                             align: 'center';                             with: [ arg1 html: arg3 ] ] ] ] ]expressionAt: arg1 ifPresent: arg2  | tmp1 |  tmp1 := self expressionAt: arg1 ifAbsent: [ ^nil ].  ^arg2 value: tmp1initializeOn: arg1  | tmp1 |  super initializeOn: arg1.  tmp1 := self handler cache.  cacheEditor := tmp1 editorClass new     configuration: tmp1;     handler: handler;     group: #cache;     parent: self;     yourselfrenderContentOn: arg1  self renderStatsOn: arg1.  self renderActionsOn: arg1bePush  type := 'button'time: arg1  time := arg1visitClassListAttribute: arg1  | tmp1 tmp2 tmp3 |  tmp1 := arg1 options asArray.  tmp2 := self configuration at: arg1 key.  (tmp2 notNil and: [ (tmp1 includes: tmp2 class) not ]) ifTrue: [ tmp1 := (Array with: tmp2 class) , tmp1 ].  tmp3 := tmp2 isNil ifTrue: [ nil ] ifFalse: [ tmp2 class ].  self html select     list: tmp1;     selected: tmp3;     labels: [:arg2 |  arg1 stringForValue: arg2 ];     callback: [:arg2 |  self configuration takeValue: arg2 new forAttribute: arg1 ]visitListAttribute: arg1  self visitAttribute: arg1testValueWithoutDefault  | tmp1 tmp2 tmp3 |  tmp1 := WAConfigurationMock new     description: [:arg1 |  arg1 string: #a ];     yourself.  tmp2 := WAConfigurationMock new     description: [:arg1 |  arg1 string: #b ];     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp1;     addParent: tmp2;     yourself.  tmp3 at: #a put: 1.  tmp3 at: #b put: 2.  self assert: (tmp1 at: #a) isNil.  self assert: (tmp2 at: #b) isNil.  self assert: (tmp3 at: #a) = 1.  self assert: (tmp3 at: #b) = 2errorWalkbacksEnabled  ^(WAAdmin applicationExceptionHandlingDefaults at: #exceptionHandler) = WAWalkbackErrorHandlertestCharCodingWithHandler  self assert: [:arg1 |  arg1 basicForm ] gives: '<form accept-charset="iso-8859-1" method="post" action="/"></form>'testDecodePercent  | tmp1 |  url := WAUrl absolute: 'http://www.seaside.st/%21%2a%7A'.  tmp1 := url path first.  self assert: tmp1 equals: (String with: (Character codePoint: 16r21) with: (Character codePoint: 16r2a) with: (Character codePoint: 16r7A))jsonOn: arg1  arg1 string: self printStringspan: arg1  self span with: arg1newHandler  ^WARequestHandler newbeClossary  self relationship: 'lossary'label  ^'New Session'response  ^super response ifNil: [ response := WAComboResponse external: (GRPlatform current writeCharacterStreamOn: (String new: 4096)) ]initializeFilters  self addFilter: GRPlatform current createMutualExclusionFilterstring: arg1  string := arg1createHtmlRootWithContext: arg1  ^WAHtmlRoot context: arg1rubyText  ^self tag: 'rt'key  ^keytestComparison  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := WAHttpVersion major: 1 minor: 0.  tmp2 := WAHttpVersion major: 1 minor: 1.  tmp3 := WAHttpVersion major: 2 minor: 4.  tmp4 := WAHttpVersion major: 2 minor: 13.  tmp5 := WAHttpVersion major: 12 minor: 3.  self assert: tmp1 < tmp2.  self assert: tmp1 <= tmp2.  self deny: tmp1 > tmp2.  self deny: tmp1 >= tmp2.  self assert: tmp2 > tmp1.  self assert: tmp2 >= tmp1.  self deny: tmp2 < tmp1.  self deny: tmp2 <= tmp1.  self assert: tmp3 < tmp4.  self assert: tmp3 <= tmp4.  self deny: tmp3 > tmp4.  self deny: tmp3 >= tmp4.  self assert: tmp4 > tmp3.  self assert: tmp4 >= tmp3.  self deny: tmp4 < tmp3.  self deny: tmp4 <= tmp3.  self assert: tmp4 < tmp5.  self assert: tmp4 <= tmp5.  self deny: tmp4 > tmp5.  self deny: tmp4 >= tmp5.  self assert: tmp5 > tmp4.  self assert: tmp5 >= tmp4.  self deny: tmp5 < tmp4.  self deny: tmp5 <= tmp4.  self assert: tmp3 < tmp5.  self assert: tmp3 <= tmp5.  self deny: tmp3 > tmp5.  self deny: tmp3 >= tmp5.  self assert: tmp5 > tmp3.  self assert: tmp5 >= tmp3.  self deny: tmp5 < tmp3.  self deny: tmp5 <= tmp3testParseWithSlash  | tmp1 |  tmp1 := #('http://seaside.st/foo/' 'http://seaside.st/foo/?key=value' 'http://seaside.st/foo/#x' 'http://seaside.st/foo/?key=value#x').  tmp1 do: [:arg1 |  url := WAUrl absolute: arg1.        self assert: url slash.        self assert: url greaseString = arg1 ]tag  ^'optgroup'initializeOn: arg1  self initialize.  request := arg1option: arg1  ^self option with: arg1testMarkerOnValue  | tmp1 tmp2 tmp3 |  tmp2 := false.  tmp3 := false.  self shouldnt: [ self markDiscardingResultOf: [ | tmp4 |              tmp4 := self callcc: [:arg1 |  tmp1 := arg1.                    tmp2 := true ].              tmp3 := true.              tmp4 ] ] raise: Error.  self assert: tmp2.  self assert: tmp3.  tmp2 := false.  tmp3 := false.  self assert: (self mark: [ tmp1 value: 123.              456 ]) = 123.  self deny: tmp2.  self assert: tmp3fileUpload  ^self brush: WAFileUploadTag newok  self answerinitializeWithContext: arg1  super initializeWithContext: arg1.  first := truechooseFrom: arg1 caption: arg2 onAnswer: arg3  self chooseFrom: arg1 default: nil caption: arg2 onAnswer: arg3cookies  ^cookiestestIsSsl  | tmp1 |  tmp1 := WARequest method: 'GET' uri: ('/' seasideUrl           scheme: 'https';           yourself) version: WAHttpVersion http11.  self assert: tmp1 isGet.  self assert: tmp1 isHttp11.  self assert: tmp1 isSsllevel3  level := 3tag  ^'param'closeArray  stream nextPut: $]writeKeyValueQuoted: arg1 on: arg2  arg2 nextPutAll: self key.  arg2 nextPut: $=.  self write: (self value ifNil: [ '' ]) quoted: arg1 on: arg2htmlAttributes  ^htmlAttrs ifNil: [ htmlAttrs := WAHtmlAttributes new ]renderContentOn: arg1  arg1 form: [ arg1 paragraph: [ arg1 render: memoryInput.              arg1 submitButton                 text: 'OK';                 callback: [ self ok ] ] ]unregister: arg1  ^self cache remove: arg1addAural  self addMedia: 'aural'media: arg1  self attributeAt: 'media' put: arg1children  ^Array with: filterEditor with: configurationEditorlabel  ^self isProfiling ifFalse: [ 'Profile' ] ifTrue: [ 'Stop Profile' ]testAt  self assert: (collection removeKey: '1') isNil.  collection add: '1' -> 'foo'.  collection add: '1' -> 'bar'.  self assert: (collection at: '1') = (self allowsDuplicateKeys ifTrue: [ 'foo' ] ifFalse: [ 'bar' ])at: arg1 put: arg2  ^mutex critical: [ cache at: arg1 put: arg2 ]describeOn: arg1  (arg1 list: #exceptionHandler)     options: [ self exceptionHandlerClasses ];     default: WAErrorHandlerresourceUrl: arg1  self url: (canvas absoluteUrlForResource: arg1)setUp  cache := self createCachetextDirection: arg1  self attributeAt: 'dir' put: arg1onUpdateUrl: arg1  updateUrlBlock := arg1renderSelectionOn: arg1  arg1 render: self selectedComponentwelcomeCss  ^'* {	line-height: 1.5;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}html, body {	color: #2a2a2a;	font-size: 14px;	margin-top: 0px;	background: #fff url("background.jpg") repeat-y center top;}input.text {	color: #2a2a2a;	font-size: 100%;	border: 1px solid #ccc;}div.clear {	clear: both;}a {	color: #008AFF;	text-decoration: none;}a.goback {	font-size: 80%;	color: #888888;}.container  {	/* auto  margin positioning:*/	/*margin-left: auto;	margin-right:auto; */	/* end auto margin positioning */		/* negative margin positioning */	position: absolute;	left: 50%;	margin-left: -450px;	/* end negative margin positioning */		margin-top: 0px;	padding-bottom: 25px; /*with absolute positioning, the body margin for the toolbar does not seem to work*/	width: 900px;	/*border-right: 1px solid #cccccc;	border-left: 1px solid #cccccc;*/}.sidebar  {	width:200px;	/*background-color: #E5F2FC;*/	float: right;	padding:25px;	padding-top: 5px;	/*border-left: 1px solid #CCCCCC;	border-bottom: 1px solid #CCCCCC;*/}.sidebar li {	list-style-type: none;}		.sidebar  h3 {	border-bottom: 1px solid #cccccc;	font-size: 150%;	margin-top: 25px;	padding-bottom: 10px;}.sidebar ul {	margin-left: 0;	padding-left: 0;}.sidebar li {	margin-bottom: 5px;}.content  {	margin-right: 260px;	padding: 20px;}.header {	background: #fff url("seasidestar.png") no-repeat left center;}.welcome {	font-size: 225%;	margin: 0;}.welcome, .congrats, .getting-started {	padding-left: 75px;	padding-right: 30px;}.congrats {	color: #888888;	font-size: 125%;	font-weight: normal;	margin: 0;}.getting-started, .back-form {	border-top: 1px solid #cccccc;	margin-top: 25px;	padding-top: 15px;}.getting-started h1 {	font-size: 150%;	margin: 0;}.getting-started h2 {	color: #333333;	font-size: 125%;	font-weight: normal;	margin: 0 0 25px;}.getting-started ol {	margin-left: 0;	padding-left: 0;	color: #888888;	font-size: 125%;}.getting-started li {	margin-bottom: 25px;}.getting-started li h3 {	margin: 0;	color: #333333;	font-size: inherit;	font-weight: normal;}.getting-started li p, .getting-started li form, .getting-started li ul li {	font-size: 80%;	color: #555555;}.getting-started li ul {	padding-left:5pt}.getting-started li ul li {	margin-bottom:0}.example {	width: 630px;	padding: 10px;	background: #F9F9F9;	border: 1px solid #93BDD5;	border-radius: 10px;	-moz-border-radius: 10px;	-webkit-border-radius: 10px;}.seasideExample {	background-color: #FBFFFA;	border: 1px solid #93BDD5;	margin: 1em;	padding: 1em;}pre.codeSample {	margin: 2em;}form.config input.checkbox { margin-right: 1em; }form.config label { vertical-align: top; }.container .buttons { text-align: center; margin-top: 2em; }.container .buttons a { margin: 0 1em; }/* jQuery override */.ui-widget-overlay {background:black;opacity:0.6;}'encodeOn: arg1  arg1 nextPutAll: '<![endif]-->'loop: arg1  self attributeAt: 'loop' put: arg1documentClass  ^(self preferenceAt: #documentClass) valueurl: arg1  url := arg1absoluteUrlForResource: arg1  | tmp1 |  arg1 isNil ifTrue: [ ^nil ].  tmp1 := self resourceUrl.  (tmp1 isNil or: [ (arg1 indexOfSubCollection: '://' startingAt: 1) ~= 0 ]) ifTrue: [ ^WAUrl absolute: arg1 ].  ^tmp1 copy     addToPath: arg1;     yourselfrenderActionsOn: arg1  arg1 span     class: 'action';     with: [ self hasAdvancedAttributes ifTrue: [ arg1 anchor                 class: 'minus' if: self displayAdvancedAttributes;                 class: 'plus' if: self displayAdvancedAttributes not;                 title: (self displayAdvancedAttributes ifTrue: [ 'Hide advanced attributes' ] ifFalse: [ 'Show advanced attributes' ]);                 callback: [ self toggleAdvanced ].              arg1 space ].        arg1 anchor           class: 'down' if: self collapsed;           class: 'up' if: self collapsed not;           title: (self collapsed ifTrue: [ 'Expand' ] ifFalse: [ 'Collapse' ]);           callback: [ self toggleVisbility ].        (self class helpTextFor: group) isNil ifFalse: [ arg1 space.              arg1 anchor                 class: 'help';                 title: (self showHelp ifTrue: [ 'Hide Help' ] ifFalse: [ 'Show Help' ]);                 callback: [ self toggleHelp ] ] ]testAtAppend  self assert: [:arg1 |  arg1 at: 'onclick' append: 'this' separator: ';' ] gives: ' onclick="this"'.  self assert: [:arg1 |  arg1           at: 'onclick' append: 'this' separator: ';';           at: 'onclick' append: 'that' separator: ';' ] gives: ' onclick="this;that"'.  self assert: [:arg1 |  arg1           at: 'onclick' append: 'this' separator: ';';           at: 'onclick' append: nil separator: ';' ] gives: ' onclick="this"'.  self assert: [:arg1 |  arg1           at: 'onclick' append: 1 separator: ';';           at: 'onclick' append: 2 separator: ';' ] gives: ' onclick="1;2"'testGenericCodecUtf16le  | tmp1 tmp2 |  tmp1 := GRCodec forEncoding: 'utf-16'.  self assert: (tmp1 isKindOf: GRPharoGenericCodec).  tmp2 := self asString: #(255 254).  self assert: tmp1 name = 'utf-16'.  self assert: tmp1 url name = 'utf-8'.  self assert: (tmp1 url isKindOf: GRPharoUtf8Codec).  self assert: (tmp1 encode: self latin1String) = self utf16beString.  self assert: (tmp1 url encode: self latin1String) = self utf8String.  self assert: (tmp1 decode: tmp2 , self utf16leString) = self latin1String.  self assert: (tmp1 url decode: self utf8String) = self latin1StringpathStringUnencodedSize  | tmp1 |  tmp1 := 0.  path isNil ifFalse: [ path do: [:arg1 |  tmp1 := tmp1 + arg1 size + 1 ] ].  (path isNil or: [ path isEmpty or: [ slash ] ]) ifTrue: [ tmp1 := tmp1 + 1 ].  ^tmp1attributes  ^attributesrenderContentOn: arg1  arg1 paragraph: 'With #contents:'.  arg1 iframe contents: batchFunctionalTest.  arg1 paragraph: 'With #url:'.  arg1 iframe url: WATestingFiles / #samplePng.  arg1 paragraph: 'With #document:'.  arg1 iframe document: WATestingFiles default samplePng mimeType: 'image/png'.  arg1 paragraph: 'With #document:'.  arg1 iframe document: WATestingFiles default samplePng mimeType: 'image/png'.  arg1 paragraph: 'With #callback:'.  arg1 iframe callback: [ self batchFunctionalTestLoop ]updateAdaptorsTable  adaptors     items: self currentAdaptors;     selectIndex: 1updateStates: arg1  arg1 register: modebatchFunctionalTestLoop  self session presenter show: WABatchFunctionalTest newattributeAt: arg1  ^self attributes at: arg1testPath  | tmp1 tmp2 |  tmp1 := self requestContext request url.  tmp2 := tmp1 path first: self application url path size + 1.  ^String streamContents: [:arg1 |  tmp2 do: [:arg2 |  arg1 nextPutAll: arg2 ] separatedBy: [ arg1 nextPut: $/ ] ]evaluateWithArgument: arg1  callbacks at: arg1 ifPresent: [:arg2 |  arg2 evaluateWithFieldValues: #(nil) ]codec  ^codec ifNil: [ codec := [ self requestContext codec ] on: WARequestContextNotFound do: [:arg1 |  GRNullCodec new ] ]newHandler  ^WAApplication newrenderInspect: arg1 on: arg2  Smalltalk at: #WAInspector ifPresent: [:arg3 |  arg3 current notNil ifTrue: [ arg2 anchor                 callback: [ self show: (arg3 current on: arg1) ];                 with: 'inspect' ] ]numArgs  ^1, arg1  ^self class , arg1testCallSelf  | tmp1 tmp2 |  tmp1 := WAComponent new.  tmp2 := WAActionCallback new     block: [ tmp1 call: tmp1 ];     yourself.  self should: [ [ tmp2 evaluateWithArgument: nil ] on: WARenderNotification do: [:arg1 |  nil ] ] raise: WAErrorattributes  ^attributes ifNil: [ attributes := WAHtmlAttributes new ]testImageCallback  | tmp1 |  tmp1 := registry store: (WAImageCallback on: [ log add: 1 ]).  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self should: [ self request: (WARequestFields new                 at: tmp1 , '.x' put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #(1)addExpression: arg1  ^self add: arg1 to: expressionsfooter  ^self tag: 'footer'rowColors: arg1  rowColors := arg1nextPutAll: arg1  1 to: arg1 size do: [:arg2 |  self nextPut: (arg1 at: arg2) ]testSamplePng  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := WAFileHandler new.  tmp2 := WATestingFiles default.  self requestContextWithUrl: '/i/dont/care/WATestingFiles/sample.png'.  requestContext consumer     next;     next;     next.  tmp3 := self responseAfter: [ tmp1 handle: self requestContext ].  self assert: tmp3 status = 200.  self assert: tmp3 contentType = WAMimeType imagePng.  tmp4 := WriteStream on: ByteArray new.  tmp3 writeContentOn: tmp4.  tmp5 := tmp4 contents.  self assert: tmp5 asByteArray = (tmp2 perform: #samplePng)items  ^#('If Request-URI is an absoluteURI, the host is part of the Request-URI. Any Host header field value in the request MUST be ignored.' 'If the Request-URI is not an absoluteURI, and the request includes a Host header field, the host is determined by the Host header field value.' 'If the host as determined by rule 1 or 2 is not a valid host on the server, the response MUST be a 400 (Bad Request) error message.')moveUp: arg1 using: arg2  | tmp1 |  arg1 do: [:arg3 |  tmp1 := arg2 indexOf: arg3 ifAbsent: [ 0 ].        tmp1 > 1 ifTrue: [ arg2 swap: tmp1 with: tmp1 - 1 ] ].  ^arg2createBrowserSessionIDCookieFor: arg1  ^arg1 newCookie     sameSite: 'Strict';     key: self browserSessionIDCookieKey;     value: self browserSessionIDunregister  parent unregisterAt: keytestEquals  | tmp1 tmp2 |  tmp1 := WARequestCookie key: 'JSESSIONID' value: '8543783483494373483764'.  tmp2 := WARequestCookie key: 'JSESSIONID' value: '8543783483494373483767'.  self assert: tmp1 = tmp2.  self assert: tmp2 = tmp1.  self assert: tmp1 hash = tmp2 hash.  tmp2 domain: 'www.example.com'.  self deny: tmp1 = tmp2.  self deny: tmp2 = tmp1.  self deny: tmp1 hash = tmp2 hash.  tmp1 domain: 'www.example.com'.  self assert: tmp1 = tmp2.  self assert: tmp2 = tmp1.  self assert: tmp1 hash = tmp2 hash.  tmp1 path: '/cgi-bin/index.cbl'.  self deny: tmp1 = tmp2.  self deny: tmp2 = tmp1.  self deny: tmp1 hash = tmp2 hash.  tmp2 path: '/cgi-bin/index.cbl'.  self assert: tmp1 = tmp2.  self assert: tmp2 = tmp1.  self assert: tmp1 hash = tmp2 hash.  tmp1 ports: #(8080).  self assert: tmp1 = tmp2.  self assert: tmp2 = tmp1.  self assert: tmp1 hash = tmp2 hash.  tmp2 ports: #(9090).  self assert: tmp1 = tmp2.  self assert: tmp2 = tmp1.  self assert: tmp1 hash = tmp2 hashendYear  ^endYearframeOptions: arg1  self headerAt: 'X-Frame-Options' put: arg1testWithoutQuery  | tmp1 |  url addField: 'foo' value: 'bar'.  tmp1 := url withoutQuery.  url addToPath: 'zork'.  url addField: 'zork'.  self assert: url printString = '/zork?foo=bar&zork'.  self assert: tmp1 printString = '/'configuration  ^configurationhasSelection  ^selected notNilrequired: arg1  required := arg1update: arg1  contents := model contentstestEncodedLatin1Xml  | tmp1 |  tmp1 := String with: Character space with: (Character codePoint: 233) with: (Character codePoint: 228).  self assert: tmp1 xmlEncodedGives: tmp1colorForRowNumber: arg1  ^rowColors at: (arg1 - 1) // rowPeriod \\ rowColors size + 1 ifAbsent: [ '#fff' ]handleException: arg1  (Error handles: arg1) ifTrue: [ ^self handleError: arg1 ].  (Warning handles: arg1) ifTrue: [ ^self handleWarning: arg1 ].  ^super handleException: arg1renderPartsOn: arg1  self renderErrorOn: arg1.  self renderErrorWithCallOn: arg1onCanPlay: arg1  self document scriptGenerator event: 'canplay' do: arg1 on: selfrenderContentOn: arg1  super renderContentOn: arg1.  arg1 heading     level2;     with: 'Actions'.  arg1 unorderedList: [ arg1 listItem: [ arg1 anchor                 callback: [ Smalltalk garbageCollectMost ];                 title: 'Reclaims recently created garbage (which is usually most of it) fairly quickly.';                 with: 'Young Space GC' ].        arg1 listItem: [ arg1 anchor                 callback: [ Smalltalk garbageCollect ];                 title: 'Reclaims all garbage.';                 with: 'Full GC' ].        arg1 listItem: [ arg1 anchor                 callback: [ Smalltalk forceTenure ];                 title: 'Tell the GC logic to force a tenure on the next increment GC.';                 with: 'Force Tenure' ].        arg1 listItem: [ arg1 anchor                 callback: [ Smalltalk setGCBiasToGrow: 1 ];                 title: 'Indicate that the GC logic should be bias to grow.';                 with: 'Set GC Bias to Grow' ].        arg1 listItem: [ arg1 anchor                 callback: [ self setBiasToGrowLimit ];                 title: 'Indicate that the bias to grow logic should do a GC after aNumber Bytes.';                 with: 'Set GC Bias to Grow GC Limit' ] ]assertDefault: arg1  self assert: registry cache size = (registrySize + 1).  self assert: arg1 status = 200.  self assert: (arg1 contents beginsWithSubCollection: 'start:')disableErrorWalkbacks  WAAdmin applicationExceptionHandlingDefaults at: #exceptionHandler put: WAHtmlErrorHandlerdocument: arg1  self document: arg1 mimeType: nilcallback: arg1  self name: (self storeCallback: (WAValueCallback on: arg1))allAttributes  | tmp1 |  tmp1 := IdentityDictionary new.  self ancestorsDo: [:arg1 |  arg1 localAttributesDo: [:arg2 |  tmp1 at: arg2 key put: arg2 ] ].  ^tmp1sessionAllowTermination  ^self preferenceAt: #sessionAllowTerminationgroupedAttributes  | tmp1 tmp2 |  tmp1 := Dictionary new.  tmp2 := SortedCollection sortBlock: [:arg1 :arg2 |  arg1 key <= arg2 key ].  self configuration allAttributes do: [:arg3 |  (tmp1 at: arg3 group ifAbsentPut: [ SortedCollection sortBlock: [:arg1 :arg2 |  arg1 key <= arg2 key ] ]) add: arg3 ].  tmp1 associationsDo: [:arg4 |  tmp2 add: arg4 ].  ^tmp2createRequest  ^WARequest method: 'GET' uri: '/catspajamassc2'testRemoveAbsoluteOldest  cache := WAHashCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 0 maximumRelativeAge: 0 overflowAction: WAHashCache removeAbsoluteOldest.  1 to: 20 do: [:arg1 |  cache at: arg1 put: arg1 greaseString ].  1 to: 10 do: [:arg1 |  | tmp1 |        tmp1 := false.        cache at: arg1 ifAbsent: [ tmp1 := true ].        self assert: tmp1 ].  11 to: 20 do: [:arg1 |  | tmp2 |        tmp2 := cache at: arg1 ifAbsent: [ self assert: false ].        self assert: tmp2 = arg1 greaseString ]setBiasToGrowLimit  self request: 'GC Bias To Grow GC Limit (bytes)' onAnswer: [:arg1 |  Smalltalk setGCBiasToGrowGCLimit: arg1 greaseInteger ]states  ^Array with: modelwidth: arg1  self attributes at: 'width' put: arg1handleWarning: arg1  ^self handleDefault: arg1isBinary  ^falsechildren  ^Array with: current contentsstartRowSelection  ^rowSelectionStart isNil ifFalse: [ rows at: (rowSelectionStart min: rowSelectionEnd) ]sanitize: arg1  | tmp1 |  tmp1 := (arg1 indexOf: Character cr) min: (arg1 indexOf: Character lf).  ^tmp1 = 0 ifTrue: [ arg1 ] ifFalse: [ arg1 copyFrom: 1 to: tmp1 - 1 ]testTextInput  self assert: [:arg1 |  arg1 textInput ] gives: '<input type="text"/>'.  self assert: [:arg1 |  arg1 textInput callback: [:arg2 |   ] ] gives: '<input name="1" type="text"/>'.  self assert: [:arg1 |  arg1 textInput: 'foo' ] gives: '<input value="foo" type="text"/>'.  self assert: [:arg1 |  arg1 textInput value: 'bar' ] gives: '<input value="bar" type="text"/>'.  self assert: [:arg1 |  arg1 textInput text: 'zork' ] gives: '<input value="zork" type="text"/>'.  self assert: [:arg1 |  arg1 textInput           callback: [:arg2 |   ];           value: 'foo bar&zork' ] gives: '<input name="1" value="foo bar&amp;zork" type="text"/>'imageBootTime  ^imageBootTimerenderListItem: arg1 labelled: arg2  canvas listItem     class: 'option-selected' if: (self isSelected: arg1);     with: [ self hasCallback ifFalse: [ canvas render: arg2 ] ifTrue: [ canvas anchor                 callback: [ self performCallback: arg1 ];                 with: arg2 ] ]internalError  self status: WAResponse statusInternalServerErrorinsertKeyEntry: arg1  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := arg1 keyHash.  tmp2 := arg1 key.  tmp3 := tmp1 \\ keyTable size + 1.  tmp4 := keyTable at: tmp3.  tmp5 := nil.  [ tmp4 isNil ] whileFalse: [ (tmp4 keyHash = arg1 and: [ tmp4 key = tmp2 ]) ifTrue: [ tmp5 isNil ifTrue: [ keyTable at: tmp3 put: arg1 ] ifFalse: [ tmp5 next: arg1 ].              ^self ] ifFalse: [ tmp5 := tmp4.              tmp4 := tmp4 next ] ].  tmp5 isNil ifTrue: [ keyTable at: tmp3 put: arg1 ] ifFalse: [ tmp5 next: arg1 ]renderValuesOn: arg1  | tmp1 tmp2 |  tmp1 := self spaceTallyItems.  tmp2 := 0.  tmp1 do: [:arg2 |  tmp2 := tmp2 + arg2 spaceForInstances ].  arg1 table: [ arg1 tableHead: [ arg1 tableRow: [ arg1 tableHeading: 'Class'.                    arg1 tableHeading: 'code space'.                    arg1 tableHeading: '# instances'.                    arg1 tableHeading: 'inst space'.                    arg1 tableHeading: 'percent' ] ].        arg1 tableBody: [ tmp1 do: [:arg2 |  arg1 tableRow: [ arg1 tableHeading                             align: 'right';                             with: arg2 analyzedClassName.                          self renderValue: arg2 codeSize on: arg1.                          self renderValue: arg2 instanceCount on: arg1.                          self renderValue: arg2 spaceForInstances on: arg1.                          self renderValue: (self percent: arg2 spaceForInstances / tmp2) on: arg1 ] ] ] ]testNewSessionCookieDomain  | tmp1 tmp2 tmp3 tmp4 |  tmp2 := self requestWithMethod: 'GET'.  tmp3 := WABufferedResponse new.  tmp1 := WARequestContext request: tmp2 response: tmp3.  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp3 cookies size = 1.  tmp4 := tmp3 cookies first.  self assert: tmp4 domain = 'www.seaside.st'withoutCountry  ^WALocale language: self language country: niladdKey: arg1 toUrl: arg2  integer: arg1  ^self addAttribute: (WAIntegerAttribute key: arg1)initializeWithMethod: arg1 uri: arg2 version: arg3  self initialize.  method := arg1 asUppercase.  uri := arg2 seasideUrl.  version := arg3.  headers := WAHeaderFields new.  postFields := WARequestFields new.  cookies := OrderedCollection new.  remoteAddress := nilrenderContentOn: arg1  arg1 form: [ arg1 div: [ self renderInputOn: arg1.              self renderSubmitOn: arg1.              self renderResetOn: arg1.              self renderPushOn: arg1 ] ]defaultVisitor  ^WARenderVisitor context: selfredirectAfter: arg1 to: arg2  self responseHeaderName: 'refresh'.  self content: arg1 greaseString , ';URL=' , arg2canAddParent: arg1  ^(arg1 = self or: [ arg1 inheritsFrom: self ]) notcreateCache  ^WABulkReapingCache initialSize: 13 maximumSize: 0 maximumAbsoluteAge: 0 maximumRelativeAge: 0 overflowAction: WAHashCache signalErrortestCoreAttributesClass  self assert: [:arg1 |  arg1 div class: 'foo' ] gives: '<div class="foo"></div>'.  self assert: [:arg1 |  arg1 div           class: 'foo';           class: 'bar' ] gives: '<div class="foo bar"></div>'renderExampleOn: arg1  arg1 paragraph: [ arg1 text: 'Multicounter is a simple extension to the '.        arg1 anchor           callback: [ self show: WAWelcomeExampleCounter new ];           with: 'Counter'.        arg1 text: ' application. It displays several instances of the same '.        arg1 anchor           callback: [ self show: WAWelcomeExampleCounter new ];           with: 'Counter'.        arg1 text: ' component:' ].  arg1 div     class: #seasideExample;     with: multicounter.  arg1 paragraph: [ arg1           text: 'This component is implemented in a few lines of code. The code is contained in the class ';           code: 'WAMultiCounter';           text: ', a subclass of ';           code: 'WAComponent. ' ].  arg1 paragraph: 'The first method is used to initialize the component, in this case we instantiate 5 counters:'.  self renderInitializeCodeOn: arg1.  arg1 paragraph: 'We then tell Seaside which child components we intend to display. In our case this is just the collection of counter instances:'.  self renderChildrenCodeOn: arg1.  arg1 paragraph: 'Finally we display each of the components separated by a horizontal rule:'.  self renderRenderContentsOnCodeOn: arg1renderCombiningOn: arg1  arg1 listItem: 'Setting both cookies should work in Kom and is broken in Swazoo.'valuesCollect: arg1  | tmp1 |  tmp1 := self species new.  self keysAndValuesDo: [:arg2 :arg3 |  tmp1 at: arg2 put: (arg1 value: arg3) ].  ^tmp1closeOn: arg1  renderLabel: arg1 input: arg2 output: arg3 on: arg4  arg4 tableRow: [ arg4 tableHeading: arg1.        arg4 tableData: arg2.        arg4 tableData: arg3 ]moveDown  self isModify ifTrue: [ self expression additions: (self moveDown: self selectedAdditions using: self expression additions) ] ifFalse: [ self isOverride ifTrue: [ self expression value: (self moveDown: self selectionsCurrent using: self expression value) ] ]style  ^'form, div.columns {	padding: 2px;	margin: 0;}form.column {	padding: 0;	width: 25%;	float: left;}form.column select {	width: 100%;	border: 1px solid #aaa;}form.mode {	clear: both;}form.definition textarea {	width: 100%;	height: 200px;	border: 1px solid #aaa;}'xmlEncoder  ^xmlEncoderinitializeOn: arg1  self initialize.  class := arg1.  count := size := 0describeOn: arg1  (arg1 integer: #maximumSize)     comment: 'Number of sessions supported. When this limit is reached the overflow action is run. 0 for no maximum size. Has to be positive.';     group: #cache;     default: 10000.  (arg1 integer: #maximumRelativeAge)     comment: 'After so many seconds of inactivity a session is considered expired. 0 for no limit. Has to be positive.';     group: #cache;     default: 1800.  (arg1 integer: #maximumAbsoluteAge)     comment: 'After so many seconds after its creation a session is considered expired no matter when it was last accessed. 0 for no limit. Has to be positive.';     group: #cache;     default: 28800.  (arg1 list: #overflowAction)     options: WAHashCache overflowActions;     comment: 'What to do when the maximum number of sessions is reached. Only matters when the maximum size is bigger than 0.';     group: #cache;     default: WAHashCache removeRelativeOldesttestAbsoluteUrlForResource  | tmp1 |  tmp1 := WARenderContext new.  tmp1 resourceUrl: (WAUrl absolute: 'http://seaside.st/foo').  self assert: (tmp1 absoluteUrlForResource: nil) isNil.  self assert: ((tmp1 absoluteUrlForResource: 'bar') isKindOf: WAUrl).  self assert: (tmp1 absoluteUrlForResource: 'bar') greaseString = 'http://seaside.st/foo/bar'.  self assert: ((tmp1 absoluteUrlForResource: '/bar') isKindOf: WAUrl).  self assert: (tmp1 absoluteUrlForResource: '/bar') greaseString = 'http://seaside.st/foo/bar'.  self assert: ((tmp1 absoluteUrlForResource: '') isKindOf: WAUrl).  self assert: (tmp1 absoluteUrlForResource: '') greaseString = 'http://seaside.st/foo'.  self assert: ((tmp1 absoluteUrlForResource: 'http://localhost/foo') isKindOf: WAUrl).  self assert: (tmp1 absoluteUrlForResource: 'http://localhost/foo') greaseString = 'http://localhost/foo'isActive  ^self requestor dispatcher notNil and: [ self requestor dispatcher defaultName notNil ]renderContentOn: arg1  self renderHeadingOn: arg1.  self renderTextInputOn: arg1.  self renderTextAreaOn: arg1.  self renderHiddenInputOn: arg1.  self renderCheckboxOn: arg1.  self renderRadioButtonsOn: arg1.  self renderRadioButtonsCustomOn: arg1.  self renderSingleSelectionOn: arg1.  self renderSingleSelectionCustomOn: arg1.  self renderSingleSelectionOptionalOn: arg1.  self renderMultiSelectionOn: arg1.  self renderNestedSelectionOn: arg1.  self renderNestedMultiSelectionOn: arg1.  self renderUploadOn: arg1acronym: arg1  self acronym with: arg1javascript  ^self script     beJavascript;     yourselftestTakeServerParametersFromRequest  | tmp1 |  tmp1 := WARequest new     setHeaders: (Dictionary new           at: 'host' put: 'www.seaside.st:8080';           yourself);     yourself.  url takeServerParametersFromRequest: tmp1.  self assert: url printString = 'http://www.seaside.st:8080/'newHandler  | tmp1 |  tmp1 := WADispatcher new.  tmp1     register: WARequestHandler new at: 'foo';     register: (WADispatcher new           register: WARequestHandler new at: 'baz';           yourself) at: 'bar'.  ^tmp1body: arg1  body := arg1testConversion  | tmp1 |  tmp1 := 'image/jpeg' seasideMimeType.  self assert: (tmp1 isKindOf: WAMimeType).  self assert: tmp1 main = 'image'.  self assert: tmp1 sub = 'jpeg'.  self assert: tmp1 parameters isEmpty.  self assert: tmp1 greaseString = 'image/jpeg'.  tmp1 := tmp1 seasideMimeType.  self assert: (tmp1 isKindOf: WAMimeType)getSearchContextFor: arg1 ifAbsent: arg2  | tmp1 |  tmp1 := self retrieveSearchContext: arg1 ifAbsentPut: [ WAAttributeSearchContext key: arg1 target: self ].  tmp1 attribute isNil ifTrue: [ arg2 value ].  ^tmp1testParamters  ^#('text/html;charset=utf-8' 'text/html; charset=utf-8') do: [:arg1 |  | tmp1 |        tmp1 := WAMimeType fromString: arg1.        self assert: tmp1 main = 'text'.        self assert: tmp1 sub = 'html'.        self assert: tmp1 parameters size = 1.        self assert: (tmp1 parameters at: 'charset') = 'utf-8'.        self assert: tmp1 greaseString = 'text/html;charset=utf-8' ]encodeSchemeAndAuthorityOn: arg1  host ifNil: [ ^self ].  arg1     nextPutAll: self scheme;     nextPutAll: '://'.  user notNil ifTrue: [ arg1 urlEncoder nextPutAll: user.        password notNil ifTrue: [ arg1 nextPut: $:.              arg1 urlEncoder nextPutAll: password ].        arg1 nextPut: $@ ].  arg1 urlEncoder nextPutAll: host.  port notNil ifTrue: [ ((self scheme = 'http' and: [ port = 80 ]) or: [ self scheme = 'https' and: [ port = 443 ] ]) ifFalse: [ arg1                 nextPut: $:;                 print: port ] ]accept: arg1  arg1 visitCollectionAttribute: selfvariable: arg1  self variable with: arg1renderFirstComponentStepOn: arg1  arg1 heading     level3;     with: 'Create your first component'.  arg1 render: self componentCreatordeleteCookie: arg1  | tmp1 |  tmp1 := [ self requestContext handler url ] on: WARequestContextNotFound do: [:arg2 |  nil ].  self deleteCookie: arg1 path: (tmp1 isNil ifFalse: [ tmp1 pathStringUnencoded ]) domain: (tmp1 isNil ifFalse: [ tmp1 host ])option  ^self brush: WAOptionTag newbodyAttributes  ^bodyAttrs ifNil: [ bodyAttrs := WAHtmlAttributes new ]componentName: arg1  componentName := arg1testAllAtIfAbsent  one at: 'one' put: 1.  one at: 'both' put: 1.  two at: 'two' put: 2.  two at: 'both' put: 2.  self assert: (merged allAt: 'one' ifAbsent: [ 'absent' ]) = #(1).  self assert: (merged allAt: 'two' ifAbsent: [ 'absent' ]) = #(2).  self assert: (merged allAt: 'both' ifAbsent: [ 'absent' ]) = #(1 2).  self assert: (merged allAt: 'neither' ifAbsent: [ 'absent' ]) = 'absent'renderRowDescription: arg1 on: arg2  arg2 render: arg1 class descriptionselect  isNonStandard  ^(self main beginsWithSubCollection: 'x-') or: [ (self main beginsWithSubCollection: 'X-') or: [ (self sub beginsWithSubCollection: 'x-') or: [ self sub beginsWithSubCollection: 'X-' ] ] ]testKeyPresent  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp1 request uri addField: strategy keyField value: '4e232e46-003d2-04324-d3ac8fa8'.  tmp2 := strategy keyFromContext: tmp1.  self assert: tmp2 = '4e232e46-003d2-04324-d3ac8fa8'assert: arg1 next: arg2 startingAt: arg3 encoder: arg4 gives: arg5  | tmp1 |  tmp1 := String streamContents: [:arg6 |  (arg4 on: arg6 codec: self requestContext codec) greaseNext: arg2 putAll: arg1 startingAt: arg3 ].  self assert: tmp1 = arg5testStreamVersionStringParsing  | tmp1 tmp2 |  tmp1 := 'HTTP/1.0' readStream.  tmp2 := WAHttpVersion readFrom: tmp1.  self assert: tmp2 major = 1.  self assert: tmp2 minor = 0get  self method: 'get'renderExplanationOn: arg1  arg1 paragraph: 'If "fail: wrong contents of WAFile" shows up then that means the contents of the WAFile are a String but should be a ByteArray.'nextPut: arg1  singleEncoder nextPut: arg1renderExplanationOn: arg1  arg1 paragraph: 'This form uses an URL-encoded POST request. The upload is not supposed to work.'valueFor: arg1  ^valueBlock isNil ifTrue: [ arg1 ] ifFalse: [ valueBlock value: arg1 ]propertyAt: arg1 put: arg2  properties at: arg1 put: arg2.  group isNil ifFalse: [ self class updatePropertiesCacheFor: self ]initializeWithContext: arg1  self initialize.  requestContext := arg1textInput  ^self brush: WATextInputTag newie9  self ie: '9'testMismatchingWithCookieHandler  | tmp1 tmp2 tmp3 |  registry := self createRegistryWithCookiesEnabled.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: tmp3.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1queryFields  ^self uri queryFieldscontentType  ^self subclassResponsibilityisCollectionAttribute: arg1  ^arg1 isCollectionAttributecode: arg1  self code with: arg1initializeWithDescription: arg1 in: arg2  self initialize.  self done: false.  self description: arg1.  todos := arg2clear  WAAdmin clearSessions.  Smalltalk garbageCollectkey  ^keyaccept: arg1  arg1 visitBooleanAttribute: selfkeysAndHandlersDo: arg1  self cache keysAndValuesDo: arg1renderToolsOn: arg1  arg1 paragraph: [ arg1 checkbox           id: arg1 nextId;           value: WAAdmin developmentToolsEnabled;           onTrue: [ WAAdmin enableDevelopmentTools ] onFalse: [ WAAdmin disableDevelopmentTools ];           onChange: arg1 jQuery ajax serializeForm.        arg1 label           for: arg1 lastId;           with: 'Show development toolbar' ]testAbsoluteFtpUrl  self assert: [:arg1 |  arg1 anchor resourceUrl: 'ftp://www.google.com/track.js' ] gives: '<a href="ftp://www.google.com/track.js"></a>'visitPainter: arg1  self client visit: arg1paddedHours  ^GRPluggablePrinter on: [:arg1 |  | tmp1 tmp2 |        tmp1 := arg1 hours.        tmp2 := arg1 days.        (tmp1 isZero and: [ tmp2 isZero ]) ifTrue: [ '' ] ifFalse: [ ((GRNumberPrinter new                 padding: $0;                 digits: 2) print: tmp1) , (tmp1 = 1 ifTrue: [ ' hr ' ] ifFalse: [ ' hrs ' ]) ] ]createRequestContext  ^WARequestContext request: self createRequest response: self createResponse codec: self createCodecrenderExplanationOn: arg1  arg1 paragraph: 'This form uses a multipart POST request. The upload is supposed to accept a file.'handle: arg1  self subclassResponsibilityinitializeWithSnapshot: arg1  self initialize.  snapshot := arg1renderLabelForSelector: arg1 on: arg2  arg2 text: (self labelForSelector: arg1)renderContentOn: arg1  arg1 form     defaultAction: [ self answer: value ];     with: [ arg1 div: [ arg1 textInput on: #value of: self.              arg1 space.              arg1 submitButton                 callback: [ self answer: value ];                 text: self label ] ]register: arg1 at: arg2  ^self cache at: arg2 put: (arg1           setParent: self;           yourself)secondParameterValue  ^'secondValue'scriptGeneratorClasses  ^WAScriptGenerator allSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]keysAndValuesDo: arg1  self subclassResponsibilitystatus: arg1  features at: #status put: arg1hidden: arg1  self attributeAt: 'hidden' put: arg1defaultAction  ^WAUnhandledNotificationError signalWithNotification: selfinitialize  super initialize.  inputElements := WAInputElementContainer new.  ran := falseon: arg1 of: arg2  self selected: (arg2 perform: arg1).  self callback: (GRDelayedSend receiver: arg2 selector: arg1 asMutator)pass: arg1  pass := arg1initializeWithInitialSize: arg1 maximumSize: arg2 maximumAbsoluteAge: arg3 maximumRelativeAge: arg4 overflowAction: arg5  self initialize.  maximumSize := arg2.  maximumAbsoluteAge := arg3.  maximumRelativeAge := arg4.  overflowAction := arg5requestMethodFor: arg1  self shouldNotImplementtestPasswordInput  self assert: [:arg1 |  arg1 passwordInput ] gives: '<input type="password"/>'.  self assert: [:arg1 |  arg1 passwordInput callback: [:arg2 |   ] ] gives: '<input name="1" type="password"/>'.  self assert: [:arg1 |  arg1 passwordInput: 'foo' ] gives: '<input value="foo" type="password"/>'.  self assert: [:arg1 |  arg1 passwordInput value: 'bar' ] gives: '<input value="bar" type="password"/>'.  self assert: [:arg1 |  arg1 passwordInput text: 'zork' ] gives: '<input value="zork" type="password"/>'.  self assert: [:arg1 |  arg1 passwordInput           callback: [:arg2 |   ];           value: 'foo bar&zork' ] gives: '<input name="1" value="foo bar&amp;zork" type="password"/>'testQueryFieldOverridesCookie  | tmp1 tmp2 tmp3 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp3 := self requestContext.  tmp3 request setCookies: (Array with: tmp1).  tmp3 request uri addPathParameterAt: tmp3 request uri path size key: strategy keyField value: 'value1'.  tmp2 := strategy keyFromContext: tmp3.  self assert: tmp2 = 'value1'url: arg1  self attributeAt: 'src' put: arg1renderRowDescription: arg1 named: arg2 on: arg3  arg3 render: arg1 class descriptiontableRow: arg1  self tableRow with: arg1testStringVersionStringParsing  | tmp1 tmp2 |  tmp2 := 'HTTP/1.0'.  tmp1 := WAHttpVersion fromString: tmp2.  self assert: tmp1 major = 1.  self assert: tmp1 minor = 0testRmoveKey  cache at: 1 put: '1'.  cache at: 2 put: '2'.  self assert: cache size = 2.  self assert: (cache removeKey: 2) = '2'.  self assert: cache size = 1.  self assert: (cache at: 1 ifAbsent: [ nil ]) = '1'.  self assert: (cache at: 2 ifAbsent: [ #missing ]) = #missingtag  ^'option'status: arg1  self status: arg1 message: (self class messageForStatus: arg1)canBeRun  ^self hasAdaptorrenderContentOn: arg1  self subclassResponsibilitydeclare: arg1  self attributes at: 'declare' put: arg1visitClassBindingAttribute: arg1  self visitListAttribute: arg1initializeWithKey: arg1  key := arg1initializeRoot: arg1 requestor: arg2  self initializeRequestor: arg2.  root := arg1month: arg1  month := arg1 greaseInteger ifNil: [ 1 ]renderHeadingGroupOn: arg1  arg1 heading     level2;     with: '<hgroup>'.  arg1 headingGroup: [ arg1 heading           level3;           with: 'Dr. Strangelove'.        arg1 heading           level4;           with: 'Or: How I Learned to Stop Worrying and Love the Bomb' ]visitTask: arg1  self visitComponent: arg1accept: arg1  arg1 visitDelegation: selfshow: arg1 onAnswer: arg2 delegation: arg3  | tmp1 |  tmp1 := nil.  tmp1 := arg1 onAnswer: [:arg4 |  arg3 remove.        tmp1 remove.        arg2 valueWithPossibleArguments: (Array with: arg4) ].  self addDecoration: arg3totalSize  ^instances inject: 0 into: [:arg1 :arg2 |  arg1 + arg2 size ]testNoHandlerFoundForKey  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := false.  [ strategy noHandlerFoundForKey: 'The_Birthday_Massacre' in: self newApplication context: tmp1 ] on: WAResponseNotification do: [:arg1 |  tmp2 := true ].  self assert: tmp2.  self assertNotFound: tmp1dateTimeLocalInput  ^self brush: WADateTimeLocalInputTag newsetUp  super setUp.  registry := WACallbackRegistry new.  log := OrderedCollection newbase  ^self add: (WABaseElement root: self)testWriteAttributes  | tmp1 |  tmp1 := (WACookie key: 'ikuser' value: '1234')     httpOnly: true;     secure: true;     sameSite: 'Strict';     yourself.  self assert: tmp1 rfc6265String = 'ikuser=1234; path=/; Secure; HttpOnly; SameSite=Strict'totalInstances  ^instances inject: 0 into: [:arg1 :arg2 |  arg1 + arg2 count ]localAttributeAt: arg1 ifAbsent: arg2  self subclassResponsibilitypostCopyForRenderContext: arg1  super postCopyForRenderContext: arg1.  client := client copyForRenderContext: arg1withDescendantsDo: arg1  arg1 value: self.  self childrenDo: [:arg2 |  arg2 withDescendantsDo: arg1 ]pushSegment: arg1 name: arg2  stack := stack , (Array with: arg2 -> arg1)timeIsValid  [ self time ] on: Error do: [:arg1 |  ^false ].  ^truespaceEntity  ^'&nbsp;'renderDialogOn: arg1  self rows do: [:arg2 |  arg2 = #- ifTrue: [ self renderSpacerRowOn: arg1 ] ifFalse: [ self renderRowForSelector: arg2 on: arg1 ] ]testCaseSensititve  self assert: [:arg1 |  arg1 at: 'lastBuildDate' put: 'Sat, 07 Sep 2002 09:42:31 GMT' ] gives: ' lastBuildDate="Sat, 07 Sep 2002 09:42:31 GMT"'renderContentOn: arg1  arg1 section     id: #todoapp;     with: [ self renderAddNewTodoOn: arg1.        self renderTodosOn: arg1.        self renderFooterOn: arg1 ]label: arg1  self attributeAt: 'label' put: arg1testExpireRelative  | tmp1 tmp2 |  cache := WAHashCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 0 maximumRelativeAge: 3 overflowAction: WAHashCache signalError.  tmp1 := Delay forSeconds: 2.  cache at: 1 put: '1'.  cache at: 2 put: '2'.  tmp1 wait.  cache at: 1 ifAbsent: [ self assert: false ].  tmp1 wait.  self assert: (cache at: 1 ifAbsent: [ self assert: false ]) = '1'.  tmp2 := false.  cache at: 2 ifAbsent: [ tmp2 := true ].  self assert: tmp2writeOn: arg1  arg1 nextPutAll: self rfc6265StringnextChunk: arg1 put: arg2  arg2 isEmpty ifTrue: [ ^self ].  closed ifTrue: [ self error: 'Response is closed' ].  externalStream     nextPutAll: (arg1 printStringBase: 16);     crlf.  externalStream     nextPutAll: arg2;     crlf;     flushframe: arg1  self attributes at: 'frame' put: arg1strictTransportSecurity: arg1 includeSubDomains: arg2  self headerAt: 'Strict-Transport-Security' put: 'max-age=' , arg1 greaseString , (arg2 ifTrue: [ '; includeSubDomains' ] ifFalse: [ '' ])removeHeaderAt: arg1  self committedCheck.  ^super removeHeaderAt: arg1renderContext  ^renderContexttestAddCookieOneAlreadyPresentWithWrongValue  | tmp1 tmp2 |  tmp2 := WARequestCookie key: strategy keyCookieName value: 'The_Abstraction'.  tmp1 := self requestContext.  tmp1 request setCookies: (Array with: tmp2).  strategy addKey: 'The_Metaphor' toContext: tmp1.  self assertCookieInContext: tmp1 withValue: 'The_Metaphor'testPreferenceAt  handler configuration addParent: (WAConfigurationMock new           description: [:arg1 |  (arg1 string: #foo) default: #bar ];           yourself).  self assert: (handler preferenceAt: #foo) = #bar.  handler preferenceAt: #foo put: #baz.  self assert: (handler preferenceAt: #foo) = #baz.  handler preferenceAt: #foo put: nil.  self deny: (handler configuration hasExpressionAt: #foo).  self should: [ handler preferenceAt: #missing ] raise: WAAttributeNotFoundbasicPerformAction  | tmp1 |  tmp1 := self createRoot.  self session properties at: #presenter put: tmp1.  self prepareRoot: tmp1renderContentOn: arg1  arg1 div     class: 'wacanvastabletest';     with: [ self renderEntityTableOn: arg1.        self renderCurrencyTableOn: arg1 ]headerAt: arg1 put: arg2  ^self headers at: arg1 put: arg2contentString: arg1  contentString := arg1testPathStringUnencoded  self assert: url pathStringUnencoded = '/'.  url addAllToPath: #('files' 'WAStandardFiles' 'seaside.jpg').  self assert: url pathStringUnencoded = '/files/WAStandardFiles/seaside.jpg'.  url slash: true.  self assert: url pathStringUnencoded = '/files/WAStandardFiles/seaside.jpg/'testPathEncoding  url path: #('foo/bar').  self assert: url printString = '/foo%2Fbar'.  url path: #('foo bar').  self assert: url printString = '/foo%20bar'.  url path: #('foo+bar').  self assert: url printString = '/foo%2Bbar'.  url path: #('foo%bar').  self assert: url printString = '/foo%25bar'children  ^Array with: memoryInputtestCookiesDisabledFieldNoCookieHandlerPresent  | tmp1 tmp2 tmp3 |  registry := self createRegistry.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDispatched: tmp1valueWithPossibleArguments: arg1  ^self value: arg1 firstassertHttpResponseFrom: arg1 matches: arg2  | tmp1 tmp2 |  self assert: arg1 status = 200.  self assert: arg1 contentType = arg2 document mimeType.  tmp1 := arg2 document contents.  tmp2 := arg1 contents.  self assert: tmp2 size = tmp1 size.  self assert: tmp2 species = tmp1 species.  self assert: arg1 cookies isEmptyitems: arg1  items := arg1renderDateSelectorsOn: arg1  arg1 heading     level3;     with: 'Dates'.  arg1 form     id: #dateForm;     with: [ arg1 table: [ arg1 tableRow                 class: 'from';                 with: [ arg1                       tableData: 'From';                       tableData: beginDate ].              arg1 tableRow                 class: 'to';                 with: [ arg1                       tableData: 'To';                       tableData: endDate ] ].        arg1 div: [ arg1 submitButton                 callback: [ self inform: (endDate date - beginDate date) days greaseString , ' day(s)' onAnswer: [  ] ];                 text: 'Compute duration' ] ]deployFiles  GRPlatform current ensureExistenceOfFolder: self name.  self fileSelectors do: [:arg1 |  GRPlatform current write: (self perform: arg1) toFile: (self asFilename: arg1) inFolder: self name ]deleteCookie: arg1 path: arg2 domain: arg3  | tmp1 |  tmp1 := (WACookie key: arg1 key value: '')     pathUnencoded: arg1 pathUnencoded encoded: arg1 pathEncoded;     version: arg1 version;     domain: arg1 domain;     yourself.  arg1 version isNil ifTrue: [ arg2 isNil ifFalse: [ tmp1 path: arg2 ].        arg3 isNil ifFalse: [ tmp1 domain: arg3 ] ].  tmp1 expireInPast.  self addCookie: tmp1multiplier: arg1  multiplier := arg1testAbsoluteHttpsUrl  self assert: [:arg1 |  arg1 anchor resourceUrl: 'https://www.google.com/track.js' ] gives: '<a href="https://www.google.com/track.js"></a>'closeTag  super closeTag.  self hasCallback ifFalse: [ ^self ].  canvas hiddenInput callback: [ self triggerCallback ].  canvas flushanswer: arg1  self decoration handleAnswer: arg1urlFor: arg1 ifAbsent: arg2  | tmp1 tmp2 |  tmp1 := self keyFor: arg1 ifAbsent: [ ^arg2 value ].  tmp2 := self url.  self trackingStrategy addKey: tmp1 toUrl: tmp2.  ^tmp2testBorderline  file fileName: 'C'.  self assert: file fileName = 'C'.  file fileName: 'C:'.  self assert: file fileName = 'C:'.  file fileName: 'C:\'.  self assert: file fileName = ''createCodec  ^GRCodec forEncoding: 'iso-8859-1'browserSessionID  ^browserSessionIDinitialize  super initialize.  dateSelector := WADateSelector new.  timeSelector := WATimeSelector newinitializeWithEntry: arg1  self initialize.  cacheEntry := arg1.  self initializeTimetag  ^'progress'keyAtValue: arg1 ifAbsent: arg2  self shouldNotImplementurl  ^self uricomponents  ^componentstype: arg1  self attributeAt: 'type' put: arg1enabled: arg1  enabledBlock := arg1addTodo: arg1  | tmp1 |  tmp1 := WATodoItem newWithDescription: arg1 in: todos.  todos add: tmp1.  ^tmp1currentPage: arg1  currentPage := arg1isEnabledFor: arg1  ^truetestFieldNoCookieHandlerPresent  | tmp1 tmp2 tmp3 |  registry := self createRegistryWithCookiesEnabled.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertCookieAddition: tmp1 key: tmp3.  self assertDispatched: tmp1days  ^1 to: 31label  ^self titleok  dialog ifTrue: [ self answer ]size  ^sizetestTableData  self assert: [:arg1 |  arg1 tableData ] gives: '<td></td>'.  self assert: [:arg1 |  arg1 tableData           character: '.';           characterOffset: 2 ] gives: '<td char="." charoff="2"></td>'.  self assert: [:arg1 |  arg1 tableData           align: 'right';           verticalAlign: 'top' ] gives: '<td align="right" valign="top"></td>'.  self assert: [:arg1 |  arg1 tableData           abbreviation: 'short';           with: 'longer' ] gives: '<td abbr="short">longer</td>'.  self assert: [:arg1 |  arg1 tableData axis: 'time' ] gives: '<td axis="time"></td>'.  self assert: [:arg1 |  arg1 tableData           colSpan: 2;           rowSpan: 3 ] gives: '<td colspan="2" rowspan="3"></td>'.  self assert: [:arg1 |  arg1 tableData headers: 'zork' ] gives: '<td headers="zork"></td>'.  self assert: [:arg1 |  arg1 tableData scope: 'colgroup' ] gives: '<td scope="colgroup"></td>'render: arg1  self flush.  arg1 jsonOn: selfcontentStream  ^self contents readStreamrenderingGuide  | tmp1 tmp2 |  tmp1 := self renderContext.  tmp2 := WARenderingGuide client: (WARenderVisitor context: tmp1).  tmp1 visitor: tmp2.  ^tmp2pageRangeStart  ^1 max: self currentPage - 9testCircular  | tmp1 tmp2 tmp3 |  tmp1 := WAUserConfiguration new.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp2;     yourself.  self should: [ tmp1 addParent: tmp3 ] raise: Error.  self should: [ tmp1 addParent: tmp1 ] raise: ErrorrenderContentOn: arg1  | tmp1 |  arg1 paragraph: 'This tests whether the server delivers the remote address correctly and headers can be parsed correctly.'.  tmp1 := self requestContext request.  arg1 definitionList: [ self renderRemoteAddressFor: tmp1 on: arg1.        self renderSslSessionIdFor: tmp1 on: arg1.        self renderAcceptFor: tmp1 on: arg1.        self renderAcceptCharsetFor: tmp1 on: arg1.        self renderAcceptEncodingFor: tmp1 on: arg1.        self renderAcceptLanguageFor: tmp1 on: arg1.        self renderOtherHeadersFor: tmp1 on: arg1 ]callback: arg1  self attributes at: 'value' put: (self storeCallback: (WAValueCallback on: arg1))secure  ^secureinitialize  super initialize.  self addFormByDefault ifTrue: [ self addForm ]canStop  ^manager notNil and: [ self manager canStop: self ]lastUpperCaseIndexIn: arg1  ^arg1 findLast: [:arg2 |  arg2 isUppercase ]plugins  ^pluginstestWithNestedValue  WADynamicVariable use: 'outer' during: [ WADynamicVariable use: 'inner' during: [ self assert: WADynamicVariable value = 'inner' ].        self assert: WADynamicVariable value = 'outer' ]errorKeyNotFound  ^nilperformOverflowAction  overflowAction == self class signalError ifTrue: [ WAMaximumNumberOfSessionsExceededError signal ].  overflowAction == self class removeAbsoluteOldest ifTrue: [ self removeCacheEntry: byCreationStart cacheEntry ].  overflowAction == self class removeRelativeOldest ifTrue: [ self removeCacheEntry: byAccessStart cacheEntry ]renderContext: arg1  renderContext := arg1knownRefs  ^#('action' 'cite' 'classid' 'codebase' 'data' 'href' 'longdesc' 'profile' 'src' 'usemap')url  | tmp1 |  tmp1 := self basicUrl.  self serverPath isNil ifFalse: [ tmp1 parsePath: self serverPath ].  self serverProtocol isNil ifFalse: [ tmp1 scheme: self serverProtocol ].  self serverHostname isNil ifFalse: [ tmp1 host: self serverHostname ].  self serverPort isNil ifFalse: [ tmp1 port: self serverPort ].  ^tmp1previous  ^previoustestLastAddedOverrides2  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := self basicSystemConfiguration.  tmp4 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp4 at: #a put: 1.  tmp5 := WAUserConfiguration new     addParent: tmp4;     yourself.  tmp5 at: #a put: 2.  tmp2 := WAUserConfiguration new     addParent: tmp4;     addParent: tmp5;     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp5;     addParent: tmp4;     yourself.  self assert: (tmp1 at: #a) = #default.  self assert: (tmp4 at: #a) = 1.  self assert: (tmp5 at: #a) = 2.  self assert: (tmp2 at: #a) = 2.  self assert: (tmp3 at: #a) = 1handleDefault: arg1  ^self internalError: arg1testKeysDo  | tmp1 |  one at: 'foo' put: 1.  two at: 'bar' put: 2.  two at: 'foo' put: 3.  tmp1 := OrderedCollection new.  merged keysDo: [:arg1 |  tmp1 add: arg1 ].  self assert: tmp1 asArray = #('foo' 'bar' 'foo')handler: arg1  handler := arg1performCallback: arg1  self hasCallback ifTrue: [ callbackBlock value: arg1 ]urlOf: arg1  ^self urlOf: arg1 using: self defaultFileHandlererrorAlreadyMapped  self error: 'Already mapped'decoration  ^decoration contentsnumber  ^numberopenUsingCall: arg1  | tmp1 |  tmp1 := true.  [ self session isNil ifFalse: [ tmp1 := self session presenter call: (WAWalkback current exception: arg1).        requestContext := WACurrentRequestContext value ] ] on: Error do: [:arg2 |  tmp1 := true ].  tmp1 ifTrue: [ super open: arg1 ]postCopy  super postCopy.  cache := self createCacheinitializeOn: arg1  self initialize.  requestContext := arg1createAndVerifyTextDocumentNamed: arg1 hasAttachment: arg2  self createAndVerifyDocumentNamed: arg1 content: 'body { background-color: #ffffff }' mimeType: WAMimeType textCss hasAttachment: arg2editor  ^editorexecute  self requestor toggleHalosvaluesAt: arg1 put: arg2  values at: arg1 put: arg2.  ^values sizepageRange  ^self pageRangeStart to: self pageRangeEndtestCanvasText  self assert: [:arg1 |  arg1 text: '<' ] gives: '&lt;'.  self assert: [:arg1 |  arg1 text: '>' ] gives: '&gt;'.  self assert: [:arg1 |  arg1 text: '"' ] gives: '&quot;'.  self assert: [:arg1 |  arg1 text: '&' ] gives: '&amp;'.  self assert: [:arg1 |  arg1 text: '<div title="&amp;">' ] gives: '&lt;div title=&quot;&amp;amp;&quot;&gt;'isDelegation  ^trueopen: arg1  self attributeAt: 'open' put: arg1renderCodeOn: arg1  arg1 heading     level2;     with: '<code>'.  arg1 paragraph: [ arg1 text: 'Expressions like '.        arg1 code: 'a[i++] + b[i++]'.        arg1 text: ' should not be used, since they cause undefined behavior' ]meter  ^self brush: WAMeterTag newtext: arg1  self document print: arg1confirmCheese  ^self confirm: 'Is ' , cheese , ' your favorite cheese?'secure: arg1  secure := arg1testWithField  | tmp1 |  tmp1 := url withField: 'foo'.  url addToPath: 'zork'.  url addField: 'zork'.  self assert: url printString = '/zork?zork'.  self assert: tmp1 printString = '/?foo'component  ^componenttestTargetTop  self assert: [:arg1 |  arg1 anchor           callback: [  ];           targetTop;           with: 'foo' ] gives: '<a target="_top" href="/?1">foo</a>'configuration  ^configurationrenderMultiSelectionOn: arg1  self renderLabel: 'Multi Selection' input: [ arg1 multiSelect           list: self elements;           titles: [:arg2 |  'Title: ' , arg2 greaseString ];           selected: multiSelection;           callback: [:arg3 |  multiSelection := arg3 ] ] output: [ multiSelection isEmptyOrNil ifFalse: [ arg1 unorderedList list: multiSelection ] ] on: arg1initialize  super initialize.  slash := falseonEmptied: arg1  self document scriptGenerator event: 'emptied' do: arg1 on: selfexecute  WAAdmin clearSessionsisGlobal  ^truenextPage  self isOnLastPage ifFalse: [ self currentPage: self currentPage + 1 ]remove: arg1  ^mutex critical: [ cache remove: arg1 ]renderProgressOn: arg1  arg1 heading     level2;     with: '<progress>'.  arg1 progress: 'Loading'.  arg1 break.  arg1 progress     value: 2;     max: 3;     with: '66 %'value: arg1  self subclassResponsibilityisHttp11  ^major = 1 and: [ minor = 1 ]testContent  self assert: document content = 'aString'openArray  stream nextPut: $[registerNewHandler  ^registry register: WATestNoopRequestHandler newpostCopy  super postCopy.  next := next copycssClass  ^'wa-' , (self class name allButFirst: 2) asLowercaserenderContentOn: arg1  arg1 render: calendar.  arg1 div: [ arg1 strong: 'selected:'.        arg1 space.        arg1 render: calendar date ]at: arg1  ^byKey at: arg1writeContentOn: arg1  committed ifFalse: [ arg1 nextPutAll: self contents ]createRequest  ^super createRequest     setSslSessionId: self sslSessionId;     yourselfto  ^tocurrentAdaptors  ^WAServerManager default adaptorspostCopy  super postCopy.  path := path copy.  queryFields := queryFields copy.  pathParameters := pathParameters copydays  ^GRPluggablePrinter on: [:arg1 |  | tmp1 |        tmp1 := arg1 days.        tmp1 > 0 ifTrue: [ (tmp1 pluralize: 'day') , ' ' ] ifFalse: [ '' ] ]testLastId  self assert: [:arg1 |  self assert: arg1 lastId isNil ] gives: ''.  self assert: [:arg1 |  arg1 nextId.        arg1           text: arg1 lastId;           text: arg1 lastId ] gives: 'id1id1'.  self assert: [:arg1 |  arg1 anchor           ensureId;           callback: [  ].        self assert: arg1 lastId = 'id1' ] gives: '<a id="id1" href="/?2"></a>'required  self attributeAt: 'required' put: truetestWithValue  WADynamicVariable use: 'value' during: [ self assert: WADynamicVariable value = 'value' ]durationPrinter  ^self days , self paddedHours , self paddedMinutes , self paddedSecondstestWrongPrefix  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')     path: '/one';     yourself.  tmp4 := self requestContext.  tmp4 request setCookies: (Array with: tmp1 with: tmp2).  tmp3 := strategy keyFromContext: tmp4.  self assert: tmp3 = 'cookie1'testKeysAndValuesDo  | tmp1 tmp2 |  tmp1 := Dictionary new.  1 to: 100 do: [:arg1 |  cache at: arg1 put: arg1 greaseString.        tmp1 at: arg1 put: arg1 greaseString ].  tmp2 := Dictionary new.  cache keysAndValuesDo: [:arg2 :arg3 |  tmp2 at: arg2 put: arg3 ].  self assert: tmp2 = tmp1acronym  ^self tag: 'acronym'initializeWithContext: arg1  self initialize.  renderContext := arg1space  self flush.  self document nextPutAll: self spaceEntityaddFilterFirst: arg1  arg1 setNext: self filter.  self setFilter: arg1.  ^arg1seasidestarPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 60 0 0 0 64 8 2 0 0 0 201 126 131 159 0 0 23 92 105 67 67 80 73 67 67 32 80 114 111 102 105 108 101 0 0 120 1 213 89 103 88 20 75 179 238 217 188 11 75 88 114 94 114 206 105 1 201 57 231 40 2 75 206 57 163 162 8 40 65 64 68 64 64 68 80 64 84 16 16 204 32 193 128 32 73 4 21 68 162 130 160 34 2 138 137 59 232 57 231 251 238 243 221 251 239 254 185 243 60 211 243 78 85 117 117 205 84 247 84 87 13 0 28 171 212 200 200 80 4 3 0 97 225 177 209 118 198 122 100 23 87 55 50 246 37 64 1 12 64 3 110 64 160 250 196 68 234 218 216 88 128 255 245 216 26 7 208 46 243 169 244 174 174 255 85 236 127 102 48 250 250 197 248 0 0 217 192 108 111 223 24 159 48 24 95 3 0 161 231 19 25 29 11 0 242 43 76 31 78 136 141 132 49 234 17 140 153 163 97 3 97 60 181 139 3 254 224 181 93 236 253 27 163 81 191 101 28 236 244 1 64 179 3 128 163 165 82 163 3 0 32 10 193 116 114 188 79 0 172 135 104 0 0 134 20 238 27 20 14 0 147 11 140 181 124 2 169 190 0 112 148 194 50 82 97 97 17 187 184 23 198 98 222 255 166 39 224 223 48 149 234 253 143 78 42 53 224 31 252 231 89 224 158 240 192 6 65 49 145 161 212 164 223 55 255 151 77 88 104 28 252 190 126 31 36 184 165 13 15 181 218 245 13 43 124 46 249 82 13 204 225 43 55 124 254 138 12 253 237 51 88 6 226 244 11 119 180 135 105 187 88 42 220 219 202 250 47 172 229 31 109 100 7 99 184 47 100 19 25 171 183 139 225 119 6 249 71 198 218 56 252 69 63 152 28 168 111 5 99 90 152 94 228 23 99 248 183 158 170 96 170 217 174 207 232 96 122 75 116 156 157 35 140 133 96 124 47 38 222 222 16 198 240 140 130 22 146 3 29 156 255 146 217 240 245 51 248 139 142 64 248 7 25 153 254 145 65 144 130 98 77 119 199 98 134 125 46 16 18 97 190 107 3 60 22 66 5 152 131 80 224 7 226 64 52 220 134 3 105 96 1 244 129 193 95 173 52 240 7 84 152 19 15 243 98 64 8 120 3 227 48 184 71 4 220 39 2 198 228 191 228 244 255 131 98 244 187 95 0 220 239 191 107 36 3 31 88 54 238 159 49 255 140 70 134 199 252 91 103 16 240 133 241 223 116 42 60 198 46 111 215 186 24 207 160 180 127 141 249 183 196 174 190 223 214 200 93 146 91 150 251 241 183 77 40 17 148 2 74 25 165 135 210 68 105 161 212 0 25 197 138 226 4 210 40 37 20 5 165 139 210 70 105 192 60 53 96 4 22 96 205 1 127 219 184 171 63 172 197 63 190 52 34 73 221 41 16 230 238 62 187 247 223 92 224 244 91 58 232 159 251 255 176 0 4 13 174 94 95 253 219 2 0 98 253 18 225 117 0 128 126 68 100 82 116 80 64 96 44 89 23 94 185 126 82 100 211 112 31 25 41 178 130 156 188 220 46 251 255 205 177 251 205 250 99 236 103 187 223 223 34 136 117 232 95 180 232 45 0 52 158 194 243 113 244 95 52 143 10 0 90 74 0 160 255 250 47 154 176 1 0 140 197 0 116 121 251 196 69 199 255 209 135 218 189 160 1 1 208 195 51 148 3 240 2 65 32 6 191 103 5 160 2 52 128 14 48 4 102 192 26 56 0 87 224 1 207 159 64 120 14 70 131 4 176 31 28 6 153 32 7 20 128 83 160 12 156 5 53 160 30 92 1 45 224 58 184 3 186 192 3 208 15 134 193 51 48 9 102 192 34 88 1 107 96 11 124 135 32 8 11 17 33 38 136 3 226 131 132 33 73 72 1 162 64 90 144 33 100 1 217 65 174 144 23 20 0 133 67 113 208 126 232 8 148 3 21 66 101 208 57 232 34 212 12 221 132 186 160 62 104 4 122 1 205 66 203 208 58 244 13 129 68 208 34 152 17 60 8 17 132 44 130 130 208 69 152 35 28 16 251 16 1 136 40 68 50 34 29 145 135 40 69 84 35 46 35 218 17 93 136 126 196 51 196 12 98 5 177 137 4 72 26 36 43 146 31 41 141 164 32 245 145 214 72 55 164 63 50 26 121 16 153 141 44 70 86 35 27 145 183 144 15 145 79 145 51 200 85 228 54 10 131 98 66 145 81 210 240 60 53 65 57 162 124 80 81 168 131 168 92 84 25 170 30 213 142 234 69 61 69 205 162 214 80 191 208 68 52 55 90 18 173 142 54 69 187 160 3 208 9 232 76 116 49 186 22 221 134 190 143 126 134 94 68 111 97 48 24 86 140 40 70 21 99 130 113 197 4 99 82 48 185 152 51 152 38 204 61 204 8 102 30 179 137 197 98 57 176 146 88 77 172 53 150 138 141 197 102 98 79 99 47 99 59 177 163 216 69 236 87 28 13 142 15 167 128 51 194 185 225 194 113 105 184 98 92 3 174 3 55 138 123 139 251 142 103 192 11 227 213 241 214 120 95 124 18 62 31 127 30 127 11 63 132 95 196 127 39 48 18 68 9 154 4 7 66 48 225 48 161 148 208 72 184 79 152 34 124 166 161 161 17 160 81 163 177 165 9 162 57 68 83 74 115 149 230 17 205 44 205 54 45 137 86 130 86 159 214 157 54 142 54 143 182 142 246 30 237 11 218 207 68 34 81 132 168 67 116 35 198 18 243 136 23 137 61 196 105 226 87 58 38 58 25 58 83 58 95 186 84 186 114 186 118 186 81 186 15 244 120 122 97 122 93 122 15 250 100 250 98 250 86 250 33 250 85 6 60 131 8 131 62 3 149 225 32 67 57 195 77 134 9 134 77 70 38 70 121 70 107 198 48 198 92 198 6 198 62 198 37 18 150 36 66 50 36 249 146 210 73 53 164 30 210 60 19 146 73 144 73 159 201 135 233 8 211 121 166 251 76 139 204 24 102 81 102 83 230 96 230 28 230 43 204 131 204 107 44 36 22 37 22 39 150 68 150 114 150 187 44 51 172 72 86 17 86 83 214 80 214 124 214 22 214 113 214 111 108 60 108 186 108 126 108 89 108 141 108 163 108 95 216 185 216 117 216 253 216 179 217 155 216 159 177 127 227 32 115 24 114 132 112 156 224 184 206 241 138 19 197 41 193 105 203 153 192 89 201 121 159 115 149 139 153 75 131 203 135 43 155 171 133 235 37 55 130 91 130 219 142 59 133 187 134 123 128 123 147 135 151 199 152 39 146 231 52 79 15 207 42 47 43 175 14 111 48 111 17 111 7 239 50 31 19 159 22 95 16 95 17 95 39 223 59 50 11 89 151 28 74 46 37 247 146 215 248 185 249 77 248 227 248 207 241 15 242 127 23 16 21 112 20 72 19 104 18 120 37 72 16 164 8 250 11 22 9 118 11 174 9 241 9 89 10 237 23 186 36 244 82 24 47 76 17 14 20 46 17 126 40 252 69 68 84 196 89 228 168 200 117 145 37 81 118 81 83 209 100 209 75 162 83 98 68 49 109 177 40 177 106 177 49 113 140 56 69 60 68 252 140 248 176 4 66 66 89 34 80 162 92 98 72 18 33 169 34 25 36 121 70 114 68 10 45 165 38 21 46 85 45 53 33 77 43 173 43 29 47 125 73 122 86 134 85 198 66 38 77 230 186 204 7 89 33 89 55 217 19 178 15 101 127 201 41 203 133 202 157 151 155 148 39 201 155 201 167 201 223 146 95 87 144 80 240 81 40 87 24 83 36 42 26 41 166 42 222 80 252 164 36 169 228 167 84 169 244 92 153 73 217 82 249 168 114 183 242 79 21 85 149 104 149 70 149 101 85 33 85 47 213 10 213 9 10 51 197 134 146 75 121 164 134 86 211 83 75 85 187 163 182 173 174 162 30 171 222 162 254 81 67 90 35 68 163 65 99 105 143 232 30 191 61 231 247 204 107 10 104 82 53 207 105 206 104 145 181 188 180 170 180 102 180 249 181 169 218 213 218 115 58 130 58 190 58 181 58 111 117 197 117 131 117 47 235 126 208 147 211 139 214 107 211 251 162 175 174 127 64 255 158 1 210 192 216 32 219 96 208 144 100 232 104 88 102 56 109 36 96 20 96 116 201 104 205 88 217 56 197 248 158 9 218 196 220 228 132 201 132 41 143 169 143 233 69 211 53 51 85 179 3 102 189 230 180 230 246 230 101 230 115 22 18 22 209 22 183 44 17 150 102 150 39 45 167 172 132 173 194 173 174 91 3 107 83 235 147 214 175 108 68 109 162 108 110 219 98 108 109 108 203 109 223 216 201 219 237 183 123 104 207 100 239 105 223 96 191 229 160 231 144 239 48 233 40 230 24 231 216 237 68 239 228 238 116 209 233 139 179 129 115 161 243 140 139 172 203 1 151 126 87 78 215 32 215 27 110 88 55 39 183 90 183 205 189 134 123 79 237 93 116 87 118 207 116 31 223 39 186 47 113 95 159 7 167 71 168 199 93 79 122 79 170 103 171 23 218 203 217 171 193 235 7 213 154 90 77 221 244 54 245 174 240 94 243 209 247 41 241 89 241 213 241 45 242 93 246 211 244 43 244 123 235 175 233 95 232 191 20 160 25 112 50 96 57 80 59 176 56 112 53 72 63 168 44 232 83 176 73 240 217 224 47 33 214 33 117 33 59 161 206 161 77 97 184 48 175 176 155 225 164 240 144 240 222 8 222 136 196 136 145 72 201 200 204 200 153 40 245 168 83 81 107 209 230 209 181 49 80 204 190 152 27 177 204 240 230 112 32 78 44 46 35 110 54 94 43 190 60 254 107 130 83 66 107 34 99 98 120 226 64 146 68 82 86 210 219 100 163 228 11 41 168 20 159 148 238 253 252 251 15 239 159 61 160 123 224 220 65 232 160 247 193 238 84 193 212 244 212 197 67 198 135 234 15 19 14 135 28 126 146 38 151 86 152 182 113 196 249 200 173 116 158 244 67 233 243 25 198 25 151 50 233 50 163 51 39 142 106 28 61 123 12 117 44 232 216 96 150 98 214 233 172 95 217 190 217 143 115 228 114 138 115 126 228 250 228 62 62 46 127 188 244 248 78 158 127 222 96 190 74 126 101 1 166 32 188 96 252 132 246 137 250 66 198 194 228 194 249 147 150 39 219 139 200 69 217 69 27 167 60 79 245 21 43 21 159 45 33 148 196 149 204 148 90 148 222 56 45 116 186 224 244 143 178 192 178 103 229 122 229 77 21 220 21 89 21 95 206 248 158 25 173 212 169 108 60 203 115 54 231 236 183 170 160 170 231 231 140 207 181 87 139 84 23 215 96 106 226 107 222 156 119 58 255 240 2 229 194 197 90 206 218 156 218 159 117 225 117 51 245 118 245 189 23 85 47 94 108 224 110 200 191 132 184 20 119 105 249 178 251 229 225 43 6 87 110 52 74 55 158 107 98 109 202 185 10 174 198 93 125 215 236 213 60 222 98 222 210 221 74 105 109 188 38 124 173 162 141 169 45 187 29 106 79 106 95 187 30 120 125 230 134 235 141 145 155 102 55 187 111 105 220 106 187 45 115 187 238 14 255 157 242 187 44 119 243 59 8 29 233 29 59 157 201 157 155 247 34 239 173 118 5 116 205 119 123 118 79 246 184 244 140 245 218 246 14 222 55 191 255 232 129 209 131 158 135 186 15 59 31 105 62 186 211 167 222 119 243 49 229 241 245 126 149 254 246 1 229 129 182 39 202 79 218 6 85 6 219 135 84 135 110 12 171 13 223 26 217 51 210 49 170 61 218 245 212 224 233 131 49 211 177 254 103 86 207 70 198 29 199 159 79 184 79 204 60 247 125 190 244 34 244 197 167 151 241 47 191 79 30 154 66 79 101 191 98 120 85 60 205 61 93 253 90 252 117 211 140 202 204 221 89 131 217 129 57 251 185 201 121 159 249 149 133 152 133 31 139 233 111 136 111 138 223 242 189 189 184 164 176 116 103 217 104 121 248 221 222 119 139 43 145 43 223 87 51 223 51 190 175 248 32 246 225 218 71 157 143 3 107 46 107 139 159 162 63 237 172 231 126 230 248 92 183 161 180 209 189 105 179 57 189 21 182 245 253 75 246 87 142 175 245 219 148 237 135 223 156 191 189 253 158 240 3 251 163 244 167 248 207 91 191 204 127 77 237 132 237 236 68 82 163 169 191 247 2 72 184 69 248 251 3 176 94 7 231 16 174 112 238 48 12 0 225 222 159 156 226 183 4 156 174 64 176 12 140 37 65 47 36 14 197 67 211 112 4 190 136 36 35 203 81 130 168 203 104 29 244 20 38 23 107 10 199 176 69 124 39 225 10 205 101 218 54 98 15 221 43 6 12 163 34 41 130 169 141 249 7 171 17 219 25 246 45 78 27 174 75 60 24 94 15 190 86 126 162 128 159 224 53 97 180 136 139 104 181 216 59 9 138 228 126 169 78 25 32 171 47 151 33 223 163 136 84 210 87 78 87 185 163 186 161 38 169 238 166 81 176 167 87 115 75 91 84 199 89 55 83 175 69 127 202 16 101 36 110 108 106 226 111 154 106 118 202 252 146 197 93 203 65 171 41 235 15 182 180 118 10 246 142 14 137 142 101 78 183 157 95 186 124 115 227 217 187 199 221 117 95 172 71 129 103 131 87 15 117 202 251 179 47 141 159 144 191 90 128 89 160 99 144 87 112 112 72 100 104 114 216 161 240 35 17 71 35 143 69 101 68 167 199 236 143 141 137 11 142 247 74 176 75 212 79 82 76 102 79 254 148 210 187 191 228 64 248 65 163 84 254 67 224 208 252 225 190 180 150 35 85 233 39 50 50 50 147 142 198 28 11 207 10 201 142 200 57 153 251 46 79 61 255 88 193 104 33 251 73 215 162 211 167 70 75 176 165 106 167 253 203 242 202 111 85 76 87 34 207 138 86 89 157 139 175 174 168 233 58 63 95 139 171 147 172 183 186 24 217 80 120 169 229 242 224 149 213 38 252 85 145 102 157 150 189 173 113 215 242 219 46 182 63 184 62 119 99 231 22 231 109 229 59 150 119 169 29 177 157 25 247 138 187 46 116 55 246 220 234 125 112 127 236 193 171 135 139 143 222 247 45 62 126 222 127 127 160 229 73 217 224 193 33 143 97 141 17 150 145 143 163 61 79 79 143 133 63 211 25 39 141 47 76 52 62 143 121 161 244 98 227 101 211 164 255 20 215 212 208 171 195 211 10 211 11 175 139 103 204 103 145 179 183 231 226 231 85 23 192 194 147 197 146 55 94 111 197 222 126 92 106 89 142 122 39 243 238 221 74 245 170 235 123 226 251 142 15 145 31 5 63 78 173 157 253 20 180 174 254 153 244 121 99 99 110 115 114 107 238 203 230 54 243 55 237 239 49 63 174 254 92 223 17 222 217 129 253 207 3 142 64 140 144 51 116 29 193 139 136 71 204 32 45 144 93 240 142 127 8 237 131 65 96 26 177 254 56 81 220 26 126 144 208 70 83 79 91 69 172 161 107 165 127 194 176 65 226 96 50 97 78 98 105 102 93 102 23 227 240 230 172 230 122 201 195 198 235 192 119 148 124 151 255 147 160 176 144 181 112 138 200 121 209 126 177 247 18 12 146 242 82 246 210 145 50 199 101 175 200 61 146 159 81 248 170 68 175 44 160 162 174 106 73 241 81 139 85 63 162 113 114 79 181 102 163 214 13 237 78 157 30 221 251 122 61 112 92 185 99 216 102 116 217 184 218 164 194 180 198 172 217 188 211 226 177 229 184 213 172 245 138 205 134 29 176 167 113 32 57 114 58 9 56 139 186 200 184 42 186 81 246 106 185 27 238 51 241 48 246 212 241 162 80 229 188 69 125 248 124 89 253 136 254 40 255 237 128 143 129 11 65 207 131 7 66 186 66 175 135 53 132 87 70 228 71 38 70 25 69 19 163 199 98 42 99 67 227 40 241 216 248 151 9 77 137 153 73 251 146 85 82 24 83 86 247 63 62 208 112 48 43 53 240 144 227 97 231 52 234 145 176 244 248 140 212 204 163 71 79 30 171 204 170 203 190 154 115 39 247 225 241 145 188 87 249 75 5 159 11 193 73 134 34 254 83 10 197 186 37 246 165 254 167 227 203 50 202 139 43 106 207 92 171 236 60 59 80 53 126 110 182 122 185 230 227 249 237 90 66 157 120 189 197 197 168 134 178 75 93 151 223 53 50 52 105 94 13 110 46 105 121 208 250 165 77 172 221 253 122 254 141 174 155 27 183 201 119 244 239 250 118 164 119 86 220 107 234 234 234 238 239 25 236 29 134 191 78 29 15 155 31 85 247 229 63 78 233 15 24 112 124 162 55 40 53 196 60 180 61 252 98 164 109 180 224 105 200 152 193 51 158 103 95 199 159 78 180 60 47 124 17 251 210 109 82 127 74 246 21 215 52 97 250 219 235 213 153 153 217 103 115 253 243 247 23 186 22 59 222 116 188 189 179 116 119 185 227 93 231 74 207 234 147 247 139 31 49 107 74 159 162 215 239 108 176 110 30 217 250 249 53 227 27 251 247 182 159 206 191 126 253 246 191 19 196 12 249 193 171 95 9 145 129 120 139 52 66 94 70 241 160 242 208 52 232 44 12 9 115 30 171 133 157 198 101 226 41 248 45 66 59 205 33 90 123 162 52 29 145 110 157 126 142 97 136 177 135 212 197 244 132 249 21 203 71 54 20 59 59 135 24 167 14 151 29 183 31 79 2 239 81 190 83 228 243 252 173 2 157 130 125 66 79 133 95 139 44 139 174 137 125 149 0 146 56 41 156 212 142 244 39 153 215 178 195 114 247 228 155 20 206 40 102 41 197 41 123 168 24 169 74 82 232 41 31 213 70 212 27 53 178 246 248 106 106 107 113 104 173 105 247 233 212 232 166 234 121 234 107 27 240 26 34 12 23 140 30 26 55 152 28 55 141 54 115 52 215 176 224 177 4 150 115 86 221 214 53 54 233 182 254 118 86 246 26 14 66 142 180 142 31 157 6 157 27 92 210 93 93 220 36 220 126 236 29 112 47 223 23 228 161 238 73 227 249 202 171 153 154 237 237 231 35 225 179 232 123 198 207 213 159 211 255 117 64 67 96 82 144 101 176 112 8 20 242 42 244 118 216 233 240 216 8 171 72 209 200 159 81 253 209 5 49 246 177 108 177 47 227 42 226 247 37 144 19 230 18 107 146 124 146 133 147 223 164 212 238 15 56 32 122 96 233 96 67 106 204 33 171 195 114 105 140 105 155 71 94 166 119 100 84 195 243 36 244 152 77 150 66 54 115 246 86 206 120 238 181 227 39 242 34 242 109 11 148 79 240 22 210 20 126 59 249 190 104 238 212 68 241 88 201 88 233 179 211 47 202 102 202 151 43 54 207 236 156 197 87 113 159 211 174 14 175 57 115 126 176 22 170 83 170 15 184 88 222 208 119 105 253 10 107 163 74 147 205 85 223 230 216 150 195 173 121 215 106 218 58 218 199 175 175 222 4 183 72 183 5 238 40 221 53 237 240 238 60 124 175 182 107 172 135 208 107 124 255 248 131 241 71 52 125 202 143 61 251 115 7 238 60 89 27 18 31 166 142 84 141 78 143 241 62 115 31 175 152 120 249 130 253 165 203 228 185 169 173 105 215 215 195 179 238 243 184 133 231 111 198 150 241 43 177 31 72 107 111 63 207 127 225 249 22 241 243 245 174 255 255 212 150 118 99 2 70 5 128 11 140 0 56 193 57 168 213 37 0 170 34 0 16 134 235 53 12 112 189 196 134 8 128 131 26 64 196 117 3 4 237 0 128 114 7 254 137 31 8 64 132 115 77 5 96 10 103 249 201 160 8 206 30 31 129 57 240 3 98 131 20 33 107 40 4 58 6 93 128 186 161 25 104 7 193 135 208 66 120 34 14 193 89 221 125 196 50 146 14 169 132 116 71 166 35 175 32 39 80 72 148 60 202 19 149 135 234 68 173 163 69 208 110 232 19 232 62 12 18 163 133 73 198 92 199 108 97 85 177 137 216 219 216 95 56 67 220 113 220 4 94 0 31 5 71 36 122 130 23 225 26 13 158 198 139 230 6 45 19 109 4 237 32 81 150 88 72 220 166 243 166 27 164 215 164 111 100 16 96 40 101 36 49 230 145 112 164 84 210 38 83 4 211 59 230 0 230 55 44 129 44 43 172 145 172 155 108 7 217 9 236 165 28 162 28 55 57 173 56 23 184 14 112 179 115 95 227 177 227 217 224 45 231 51 230 219 36 215 242 239 21 96 16 232 19 60 42 100 36 76 16 126 42 114 70 52 66 204 64 156 91 252 139 196 115 201 187 82 181 210 231 100 154 100 187 229 70 229 23 20 62 43 65 202 180 42 108 170 188 20 97 56 178 41 106 168 238 217 163 169 167 165 175 45 166 189 170 115 67 55 67 207 81 95 76 255 151 193 75 195 27 70 165 198 7 77 130 76 157 204 76 205 117 45 180 44 41 86 154 214 186 54 38 182 182 118 46 246 222 14 17 142 169 78 39 157 235 92 238 186 78 184 173 187 51 236 147 243 112 240 60 224 85 71 29 243 65 248 42 249 133 248 159 11 152 12 98 15 118 12 41 12 29 13 103 138 112 142 172 140 90 138 81 139 45 136 91 78 48 73 172 75 166 75 57 176 255 221 65 183 212 190 195 122 105 29 233 106 25 163 71 19 178 196 179 95 231 86 231 69 21 88 22 42 23 9 20 147 75 185 202 4 43 228 43 13 170 194 171 155 47 32 235 2 46 46 94 14 111 66 52 87 93 211 108 31 186 233 115 251 125 135 195 189 150 30 222 251 249 143 104 31 159 126 162 57 244 97 244 234 179 140 231 97 147 238 211 10 51 115 243 113 139 159 150 236 222 149 172 118 125 120 186 54 184 126 107 163 100 43 240 171 236 246 218 247 43 63 3 126 127 63 144 112 189 65 16 174 48 56 192 53 164 108 80 11 122 192 107 216 251 28 112 77 192 9 174 2 20 65 173 208 24 180 137 96 67 168 195 185 125 26 162 14 49 8 103 241 188 72 83 100 44 178 10 57 132 220 65 201 193 153 121 9 106 16 141 129 247 28 41 232 155 232 109 140 58 230 0 166 11 139 195 218 98 203 176 139 56 37 92 58 110 28 47 129 63 140 127 78 80 32 28 39 172 208 88 208 52 194 217 111 18 237 60 209 154 216 73 167 64 87 79 47 64 95 201 192 195 80 197 40 194 216 68 82 32 181 48 41 49 221 100 214 97 238 99 113 100 153 103 141 97 67 178 149 176 203 178 63 226 240 225 68 192 177 202 144 235 29 247 9 30 53 158 55 188 165 124 182 100 90 242 99 254 28 1 75 65 38 193 73 161 90 225 56 17 67 81 14 209 79 98 143 197 107 36 142 72 250 72 153 74 83 100 44 100 35 228 10 229 155 21 198 21 191 42 179 171 168 169 186 83 82 213 206 171 247 105 124 208 100 211 210 211 222 167 67 213 245 209 243 215 15 51 72 52 204 48 42 48 174 52 105 54 125 104 54 105 190 110 73 180 18 179 54 180 241 179 61 102 87 103 223 231 176 226 196 224 172 238 226 229 154 229 118 99 239 242 62 46 15 27 207 99 94 15 189 49 62 230 190 5 126 147 1 82 129 41 65 253 33 152 80 221 176 248 240 230 136 55 81 252 209 110 49 229 177 19 241 140 9 54 137 121 73 79 82 104 247 91 30 56 126 240 201 33 210 97 151 180 202 35 43 25 6 153 181 199 240 89 145 217 139 185 222 199 231 242 195 79 224 10 107 139 156 139 233 75 134 78 151 148 7 157 209 59 203 81 245 169 122 228 252 173 218 203 245 87 27 58 47 63 107 92 107 102 105 85 106 115 185 158 112 243 212 237 43 119 187 59 135 186 94 247 188 191 255 253 17 250 49 195 0 215 160 240 176 196 168 204 152 226 184 210 115 173 151 122 83 166 211 118 51 110 115 14 11 170 111 72 111 167 151 79 173 232 173 206 126 136 253 184 249 41 102 125 97 195 102 179 253 11 203 215 200 237 190 239 228 31 241 63 251 127 251 31 2 56 192 9 175 127 43 184 162 116 28 52 129 81 176 9 113 66 218 112 76 201 133 174 65 83 8 44 66 1 246 252 81 68 43 188 183 160 67 106 33 35 225 58 205 4 138 136 50 68 165 162 110 163 182 209 20 116 18 250 46 188 218 205 48 39 49 211 88 41 108 10 118 0 174 155 36 224 198 240 202 248 50 252 14 33 144 240 148 70 143 166 149 86 12 222 127 112 19 203 233 200 116 23 232 21 233 187 25 28 25 86 24 51 73 2 164 123 76 30 76 191 152 207 177 232 195 107 251 36 155 54 219 42 251 25 14 107 78 12 103 39 188 174 181 120 16 60 143 120 115 248 44 200 204 228 25 56 38 229 11 70 8 185 9 155 138 104 138 82 196 40 226 42 18 106 146 154 82 90 210 154 50 30 178 167 229 134 21 144 138 50 74 14 202 9 42 167 84 91 40 163 106 235 26 92 123 76 52 147 181 218 117 232 116 195 244 134 13 212 13 27 140 57 76 10 205 24 204 243 45 89 173 206 218 200 216 118 217 27 59 52 58 209 57 199 186 60 115 219 179 183 126 31 147 71 154 231 22 53 202 251 189 111 164 223 118 64 118 16 103 112 93 168 66 216 181 8 213 200 246 104 197 152 107 113 82 241 85 137 172 73 217 201 63 246 71 28 152 78 181 62 244 40 109 207 145 243 233 27 153 6 71 139 143 45 103 171 229 228 230 206 229 81 242 243 11 62 22 58 158 236 61 165 92 220 86 74 57 253 184 220 187 98 167 178 178 74 238 92 71 141 195 249 15 181 57 245 178 23 95 92 74 191 34 213 56 118 53 161 133 177 181 190 77 185 253 246 13 173 155 55 111 75 221 57 215 33 209 217 223 21 218 67 215 219 244 192 242 225 82 95 106 63 199 64 203 160 193 208 228 72 212 83 252 88 253 184 238 196 220 139 35 147 162 83 61 211 78 175 103 103 125 231 38 22 180 22 207 188 89 90 18 93 118 123 151 178 82 176 122 230 125 233 135 156 143 49 107 142 159 100 215 209 235 35 159 43 54 220 55 185 55 159 111 21 125 49 251 242 229 235 133 109 219 237 31 223 234 190 91 126 255 12 103 29 26 63 167 127 245 237 250 63 198 95 81 97 55 122 0 136 86 15 46 63 78 239 236 124 22 1 0 91 8 192 207 19 59 59 223 171 119 118 126 214 192 201 6 252 15 228 94 232 159 255 21 187 194 24 184 230 94 177 251 15 3 244 198 196 30 218 189 254 251 241 95 52 194 139 146 193 91 214 157 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 12 45 73 68 65 84 104 5 237 89 91 108 92 197 25 254 207 117 111 222 93 123 125 141 189 33 78 136 29 7 66 8 165 109 46 110 26 72 107 74 0 1 109 218 148 2 173 80 81 21 81 9 94 17 111 168 111 85 95 42 209 130 84 158 90 169 47 5 5 85 77 67 104 11 52 88 6 2 14 33 9 36 196 144 56 182 215 241 125 189 215 179 123 174 211 111 206 49 150 157 203 122 125 156 84 138 148 209 104 60 59 103 206 204 55 223 124 255 63 255 28 11 140 49 186 209 146 120 163 1 230 120 111 130 254 127 237 218 77 166 111 50 93 129 129 27 82 30 114 133 5 85 243 200 206 76 90 253 127 183 83 167 141 182 59 197 187 246 212 36 26 69 241 186 19 33 172 228 112 97 233 81 235 224 111 149 255 188 68 140 44 37 154 219 244 136 253 147 223 36 90 111 145 36 169 154 5 251 238 179 2 86 24 115 198 191 20 143 29 224 115 59 36 151 243 145 211 135 204 195 127 204 229 114 43 33 162 154 149 248 7 205 108 203 73 167 132 194 52 159 70 224 57 80 74 71 63 125 35 251 241 155 182 109 87 51 183 239 62 254 65 19 49 102 148 136 44 126 170 66 14 40 21 10 23 71 98 71 254 52 123 113 200 113 28 223 152 150 124 209 63 104 144 75 204 18 32 103 15 52 126 75 36 5 205 200 228 73 243 216 225 98 33 127 253 68 226 31 52 48 65 33 130 0 57 19 5 230 20 66 17 10 200 179 234 39 7 138 103 251 109 203 90 146 51 127 29 252 131 134 58 68 199 228 52 171 46 104 84 160 8 212 155 40 54 113 148 29 61 48 59 54 124 157 68 178 2 208 196 28 219 224 38 8 160 17 23 183 39 227 58 82 107 139 53 95 190 101 29 123 75 43 22 150 228 146 239 24 246 68 215 237 98 209 209 52 199 48 150 124 101 5 135 11 99 130 99 204 49 13 208 128 7 179 68 86 136 90 169 230 252 57 253 248 129 66 178 43 176 101 167 162 160 233 178 228 56 12 78 198 178 74 227 227 230 201 147 229 190 62 235 204 25 38 203 78 79 79 252 209 71 163 45 45 21 14 169 21 128 134 9 98 86 108 21 4 29 118 201 206 18 233 68 96 170 150 132 54 138 15 31 157 249 232 141 108 203 218 68 219 26 15 1 56 21 128 213 177 204 82 201 26 29 178 79 246 155 239 189 87 124 235 61 118 97 68 181 109 215 146 201 60 120 48 149 205 182 239 223 31 73 36 46 91 232 92 195 10 64 227 158 6 166 225 236 0 58 68 84 227 114 12 208 26 81 61 81 3 41 90 161 230 139 127 228 227 109 90 207 207 195 117 245 34 214 152 159 117 134 207 8 167 250 156 99 71 196 207 78 82 106 134 21 28 37 71 134 68 58 6 115 213 21 178 44 235 237 183 11 123 247 134 235 234 4 129 187 168 203 211 10 64 195 97 56 174 147 198 230 67 214 192 13 244 57 162 34 92 33 81 144 104 21 213 104 67 234 219 191 43 159 237 45 182 111 193 145 169 158 250 175 50 58 32 56 186 34 146 165 146 177 138 139 74 64 231 89 142 152 3 132 7 101 84 14 135 109 174 116 118 61 64 35 224 112 153 6 104 76 232 145 13 208 121 126 224 240 5 128 251 118 82 197 180 154 58 68 231 14 113 207 8 21 221 234 174 16 206 61 79 242 56 153 179 100 228 137 233 36 72 110 54 41 23 10 25 187 118 169 241 248 117 209 52 66 45 178 117 174 105 128 134 72 80 194 28 129 30 182 8 89 3 49 26 227 68 29 68 109 110 11 30 161 5 26 192 146 114 228 140 146 62 74 198 4 57 176 139 40 73 10 89 26 9 162 52 254 200 35 201 158 158 154 218 218 203 85 49 223 226 95 30 172 156 23 70 63 227 252 65 27 30 32 16 137 58 100 13 133 120 147 98 235 177 24 44 0 64 17 143 152 110 206 144 51 72 214 121 114 210 252 105 164 141 4 133 244 41 146 77 113 104 199 142 216 254 253 77 107 215 6 2 216 169 171 166 229 131 134 214 44 147 74 89 227 253 63 171 163 31 193 224 184 18 64 33 240 65 33 192 13 67 4 217 192 231 53 130 90 100 60 69 137 71 99 68 195 196 166 200 193 38 37 40 92 71 48 182 226 121 168 69 24 93 119 43 61 247 220 154 59 238 136 68 34 87 83 179 183 142 170 64 115 155 96 14 217 166 99 150 173 233 11 66 234 152 115 226 159 129 129 67 20 51 225 146 57 104 96 130 78 64 51 72 157 114 153 6 223 176 69 15 46 158 130 233 89 162 175 136 38 221 37 5 72 110 38 181 145 112 97 40 156 38 123 146 210 241 134 194 179 207 110 236 238 142 85 84 115 21 160 25 252 191 37 216 166 153 155 116 82 199 233 124 159 52 252 161 60 125 70 180 103 185 124 219 93 215 6 100 72 192 4 208 96 0 160 81 194 22 113 214 64 24 0 13 85 64 45 19 68 35 110 137 5 0 107 27 137 240 229 144 250 48 233 131 84 176 130 19 207 252 114 253 3 15 212 214 215 203 242 210 60 94 161 7 179 12 166 23 44 45 67 19 103 157 145 126 49 245 161 52 126 74 201 167 132 16 227 88 65 45 52 224 57 56 76 11 16 128 229 85 128 27 107 0 241 64 12 55 130 62 0 13 130 83 68 227 174 54 176 164 36 207 2 186 25 100 79 145 62 64 165 116 224 226 190 199 146 143 63 222 208 218 170 170 216 172 165 211 165 160 89 41 239 12 190 111 125 250 55 144 42 101 6 5 86 226 132 1 7 60 0 166 4 92 188 1 177 2 37 50 146 87 153 47 241 20 253 193 52 68 50 207 113 198 237 137 3 174 147 168 217 85 81 153 131 54 206 131 102 41 213 189 171 246 233 167 87 173 91 23 12 122 187 230 118 174 88 44 2 205 109 172 255 175 242 225 23 2 122 134 83 136 228 129 192 104 0 10 16 152 12 116 34 123 40 81 65 66 187 199 55 68 2 41 163 17 21 232 97 250 235 83 29 107 110 34 90 77 212 226 142 3 27 181 201 24 35 235 43 113 188 169 67 126 230 215 201 219 110 11 135 195 149 141 207 157 105 174 88 4 218 209 53 225 157 223 11 197 12 199 225 193 66 5 78 23 65 197 60 80 180 47 172 47 28 12 88 177 42 8 3 9 117 188 136 4 87 157 228 167 35 69 221 49 93 211 116 178 228 156 165 105 163 62 247 212 47 214 111 221 26 175 194 248 220 177 230 138 197 160 45 67 196 13 10 64 49 52 192 45 76 224 210 157 143 147 138 138 151 61 130 81 122 217 235 128 215 241 211 75 144 40 216 5 98 232 202 123 138 210 36 107 156 236 81 154 217 188 173 101 215 189 241 186 186 229 222 222 23 129 150 195 113 173 235 193 224 137 191 72 154 198 131 0 48 10 129 66 24 40 189 10 160 0 144 135 24 92 34 3 226 124 137 10 216 69 7 8 192 235 134 167 224 30 141 80 8 70 67 66 139 73 172 64 101 204 208 210 22 170 75 84 105 124 238 203 115 197 34 208 2 220 230 253 47 100 45 10 156 57 24 52 51 130 81 22 75 38 247 190 152 15 84 193 16 225 16 22 190 1 100 243 224 128 6 224 160 141 20 17 142 58 79 66 64 63 230 246 89 77 20 115 119 207 5 45 168 132 79 35 106 38 139 216 127 33 154 42 235 210 139 47 190 184 176 171 26 137 211 134 123 51 109 219 242 106 131 99 194 94 74 34 19 73 179 5 141 113 254 160 25 16 15 220 200 94 5 59 128 85 129 72 24 43 74 36 248 10 56 230 58 87 24 232 6 247 135 22 96 67 55 116 198 194 48 142 197 15 20 125 176 96 116 221 94 211 209 33 95 241 150 176 16 214 226 250 165 160 241 20 23 141 104 203 154 80 215 206 92 199 15 114 173 223 46 171 117 204 48 229 82 25 222 143 50 142 80 68 156 228 162 7 32 79 247 243 234 7 235 112 118 23 221 246 164 107 127 112 115 232 134 70 112 143 18 184 209 25 23 75 27 199 43 73 3 153 124 186 164 108 223 17 168 173 173 16 211 45 6 204 127 93 1 180 215 9 198 17 141 197 107 111 217 32 119 237 202 117 222 151 107 186 93 151 34 130 166 139 69 139 101 152 48 107 11 80 48 52 3 242 128 195 203 160 112 210 5 13 154 219 92 119 1 238 225 52 176 9 37 98 51 100 165 137 33 166 131 114 16 135 75 100 23 137 157 28 158 170 111 142 108 220 168 46 199 229 85 251 45 15 46 188 88 40 100 71 207 217 3 239 135 191 120 167 230 203 222 64 121 74 88 199 168 253 107 85 128 102 200 224 51 87 196 235 137 214 184 237 222 98 176 188 9 178 207 144 254 5 217 34 201 109 20 72 112 208 229 73 42 124 66 51 193 118 249 165 63 36 119 239 14 132 96 49 85 165 171 50 125 201 219 240 252 106 32 16 107 104 137 118 220 109 223 246 189 98 124 117 224 220 199 82 62 207 67 80 240 13 112 112 41 56 77 134 92 179 3 98 16 236 217 34 74 236 6 250 132 200 154 166 114 138 103 86 38 81 37 57 64 182 69 210 87 153 108 58 35 221 125 119 48 145 168 82 36 24 114 121 9 227 198 18 13 13 59 247 150 182 61 201 77 10 66 7 199 200 112 109 51 110 128 129 248 4 25 203 64 163 151 176 30 44 161 150 212 59 73 109 39 171 76 179 159 83 230 20 233 211 36 99 49 49 138 254 251 95 83 175 189 166 205 204 96 63 231 94 169 248 103 217 160 231 70 83 130 202 134 237 204 134 48 191 118 213 240 18 96 26 9 71 32 12 14 179 3 43 158 194 93 192 117 96 109 6 201 49 10 223 65 145 77 36 133 72 27 162 236 105 50 50 36 199 41 32 90 202 171 175 142 247 246 150 139 240 59 75 39 216 182 207 36 122 92 2 22 192 129 114 68 115 56 237 161 4 128 70 66 59 164 156 37 134 123 138 65 76 225 122 16 32 232 0 69 187 8 225 103 246 115 210 211 100 151 72 141 147 19 164 248 248 216 244 203 47 103 214 175 87 54 109 90 50 58 245 9 154 127 119 44 151 4 203 230 136 1 14 4 141 187 164 34 48 130 54 128 24 212 142 240 107 149 153 22 205 178 100 194 229 203 142 20 231 188 202 17 82 234 41 182 129 180 65 42 79 81 105 138 36 153 116 153 226 71 142 164 95 121 69 121 254 249 68 123 123 101 113 251 4 141 67 94 176 220 195 12 160 33 0 248 13 48 13 173 225 216 195 144 88 195 8 217 23 68 173 28 207 53 39 117 181 78 204 150 228 145 73 231 212 164 32 148 3 113 38 69 73 84 184 90 20 131 95 200 161 114 36 230 56 161 215 95 159 238 238 14 55 52 132 99 24 232 170 201 63 104 166 107 156 81 207 22 113 118 64 211 56 231 65 51 90 70 201 25 18 50 172 101 162 251 1 251 187 15 135 87 175 21 139 154 113 226 132 243 230 97 233 236 89 54 49 193 38 178 162 104 42 65 126 65 148 84 14 154 223 230 224 96 210 233 220 225 195 197 157 59 67 209 104 133 72 213 55 104 135 33 168 2 205 32 9 28 195 111 192 242 224 10 144 102 136 13 82 94 139 79 108 191 95 249 209 175 218 55 110 194 213 26 219 109 223 245 141 236 253 123 242 39 78 152 125 125 206 209 163 202 133 11 108 102 198 209 242 2 57 176 14 207 213 160 98 95 188 168 227 75 164 227 84 8 253 124 131 102 100 104 92 205 184 96 35 123 1 55 6 195 183 162 49 210 102 131 19 155 191 35 244 252 184 185 163 11 247 17 79 160 48 175 250 100 50 209 214 166 221 115 79 97 120 184 212 223 175 247 246 178 227 199 131 169 148 147 201 48 155 75 196 140 68 244 206 78 57 130 253 170 148 252 131 22 74 110 228 13 249 122 78 45 72 12 122 25 67 36 36 78 222 114 103 121 247 222 85 155 191 137 143 1 151 152 20 54 29 141 56 183 237 206 206 194 67 15 229 7 6 140 119 223 53 63 248 64 0 116 203 74 111 216 80 179 111 95 164 190 254 146 183 46 89 129 111 208 142 160 151 184 60 0 26 113 133 69 248 190 110 227 115 81 90 40 72 137 252 174 31 54 116 239 174 173 24 6 97 247 17 254 199 183 110 213 183 108 201 61 249 100 97 100 196 52 205 68 107 107 67 115 243 146 87 47 223 160 153 128 48 30 225 188 73 14 24 119 75 43 71 101 22 26 255 214 246 154 221 123 234 27 155 160 135 10 198 52 79 30 20 223 152 76 34 67 199 56 17 193 241 146 111 249 5 141 25 138 26 244 96 226 238 164 115 154 113 130 24 166 154 222 184 217 218 251 84 203 218 91 113 31 89 114 238 121 220 94 165 178 36 22 118 246 11 154 127 108 214 237 60 149 203 28 49 51 200 178 165 92 114 237 236 67 63 109 223 214 61 111 124 11 103 186 134 117 159 160 153 32 58 225 6 51 11 118 93 133 24 130 214 216 50 243 253 135 155 246 60 92 183 252 139 234 114 215 227 55 96 82 131 214 166 109 154 84 139 175 203 122 81 204 71 155 166 191 219 19 219 247 179 150 85 171 174 252 31 150 229 226 170 216 223 39 211 66 48 24 216 121 223 244 131 143 153 189 125 37 73 41 237 232 174 121 226 137 213 157 157 62 164 92 17 222 149 31 86 123 115 185 252 109 88 122 118 114 114 118 96 0 199 118 104 205 154 134 198 70 32 174 112 140 93 62 130 239 22 255 160 231 167 172 222 85 205 191 178 194 202 53 0 189 66 4 62 94 247 107 136 62 166 186 118 175 220 4 125 237 184 172 60 210 77 166 43 243 115 237 158 222 144 76 255 15 11 35 46 166 247 55 116 18 0 0 0 0 73 69 78 68 174 66 96 130) asByteArrayhandleFiltered: arg1  startTime := Time millisecondClockValue.  [ super handleFiltered: arg1 ] ensure: [ previousTiming := self currentTiming ]revealedIf  ^WARevealedConditionalComment root: selfrenderExampleOn: arg1  arg1 paragraph: 'Complex, multi-page workflows can be expressed in Seaside with a single method. Unlike many web frameworks  which require a separate handler for each page or request, Seaside models an entire user session as a continuous piece of code, with natural, linear control flow.'.  arg1 div     class: #seasideExample;     with: self taskExample.  arg1 paragraph: [ arg1           text: 'This example subclasses ';           code: 'WATask';           text: ' and implements the hook method ';           code: '#go'.        arg1           text: '. We store the user''s choice in an instance variable named ';           code: 'cheese.' ].  self renderGoCodeOn: arg1.  arg1 paragraph: [ arg1           text: 'To allow the user to choose from a list of famous Swiss cheeses, we use the convenience method ';           code: '#chooseFrom:caption:';           text: ' which returns the chosen element from a collection or ';           code: 'nil';           text: ' if the user cancels the dialog. If ';           code: 'nil';           text: ' is returned, we simply ask again.' ].  self renderChooseCheeseCodeOn: arg1.  arg1 paragraph: [ arg1           text: 'Then we ask the user to confirm their choice. The ';           code: '#confirm:';           text: ' method answers a ';           code: 'boolean:' ].  self renderConfirmCheeseCodeOn: arg1.  arg1 paragraph: [ arg1           text: 'Finally we display the user''s choice using ';           code: '#inform:.' ].  self renderInformCheeseCodeOn: arg1.  arg1 paragraph: 'As simple as that. And yes, the browser''s Back button still works.'headerAt: arg1  ^self headerAt: arg1 ifAbsent: [ nil ]testValueCallback  | tmp1 tmp2 |  tmp1 := registry store: (WAValueCallback on: [:arg1 |  log                 add: 1;                 add: arg1 ]).  tmp2 := registry store: (WAValueCallback on: [:arg1 |  log                 add: 2;                 add: arg1 ]).  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 '').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: '';                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 '').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: 'foo';                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 'foo').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 add: 'foo';                 at: tmp1 add: 'bar';                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 'foo').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: 'b';                 at: tmp2 put: 'c';                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 'b' 2 'c').  self shouldnt: [ self request: (WARequestFields new                 at: tmp2 put: 'c';                 at: tmp1 put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 'b' 2 'c')renderContentOn: arg1  arg1 heading     level3;     with: message.  self renderNextOn: arg1isHttp11  ^version isHttp11createCache  self subclassResponsibilityresponse  ^super response ifNil: [ response := WABufferedResponse new ]options  ^components collect: [:arg1 |  arg1 key ]fileName: arg1  fileName := arg1withSeconds  withSeconds := truetestNoHandlerFoundForKey  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := false.  [ strategy noHandlerFoundForKey: 'The_Birthday_Massacre' in: self newApplication context: tmp1 ] on: WAResponseNotification do: [:arg1 |  tmp2 := true ].  self assert: tmp2.  self assertNotFound: tmp1ie5  self addToCondition: '5'domain  ^domaintestNewCookie  | tmp1 |  tmp1 := self requestContext newCookie.  self assert: tmp1 path = self application url pathStringUnencoded.  self assert: tmp1 ports isNil.  self assert: tmp1 httpOnly.  self deny: tmp1 secure.  self assert: tmp1 domain isNil.  self application preferenceAt: #serverPath put: '/en/private_kunden/wealth_management'.  tmp1 := self requestContext newCookie.  self assert: tmp1 path = '/en/private_kunden/wealth_management'.  self assert: tmp1 ports isNil.  self assert: tmp1 httpOnly.  self deny: tmp1 secure.  self assert: tmp1 domain isNil.  self application preferenceAt: #serverPort put: 8080.  self application preferenceAt: #serverProtocol put: 'https'.  self application preferenceAt: #serverHostname put: 'www.lgt.com'.  tmp1 := self requestContext newCookie.  self assert: tmp1 path = '/en/private_kunden/wealth_management'.  self deny: tmp1 ports isNil.  self assert: tmp1 ports size = 1.  self assert: tmp1 ports first = 8080.  self assert: tmp1 httpOnly.  self assert: tmp1 secure.  self assert: tmp1 domain = 'www.lgt.com'fieldsFor: arg1  self subclassResponsibilityexecute  renderPasswordOn: arg1  arg1 tableRow: [ arg1 tableData: [ arg1 label                 for: #pass;                 with: 'Password:' ].        arg1 tableData: [ arg1 passwordInput                 id: #pass;                 on: #pass of: self ] ]startHour: arg1  startHour := arg1testDefaultActionGet  self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.  self assert: [:arg1 |  arg1 form           get;           defaultAction: [  ] ] gives: '<form accept-charset="utf-8" method="get" action="/"><div><input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/></div><div></div></form>'.  self userAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'.  self assert: [:arg1 |  arg1 form           get;           defaultAction: [  ] ] gives: '<form accept-charset="utf-8" method="get" action="/"><div><input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/><input tabindex="-1" name="2" style="position: absolute; top: -100em" type="text"/></div><div></div></form>'commit  self committedCheck.  self headerAt: 'Transfer-Encoding' put: 'chunked'.  committed := true.  self writeStatusOn: externalStream.  self writeHeadersOn: externalStream.  self writeCookiesOn: externalStream.  externalStream     crlf;     flushserverHostname  ^self preferenceAt: #serverHostnamekey  ^keytag  ^'rt'renderCurrencyTableOn: arg1  arg1 table     summary: 'This table shows exchange rates against the Swiss Franc';     with: [ arg1 tableCaption: 'Currencies against Swiss Franc (CHF)'.        arg1 tableColumnGroup.        arg1 tableColumnGroup           width: '100px';           align: 'char';           character: $..        self renderCurrencyTableHeadOn: arg1.        self renderCurrencyTableBodyOn: arg1 ]debugAndResume: arg1  self open: arg1.  ^self resume: arg1tag  ^'colgroup'response  ^super response ifNil: [ response := WAStreamedResponse on: (WriteStream on: String new) ]tableBodyCssClass  ^'right'at: arg1 addAll: arg2  self at: arg1 addAll: arg2 removeAll: #()batch  ^items select: [:arg1 |  arg1 greaseString asUppercase first = self currentPage ]testBlock  self assert: [:arg1 |  arg1 strong: [ arg1                 text: 'nes';                 text: 'sie' ] ] gives: '<strong>nessie</strong>'.  self assert: [:arg1 |  arg1 strong: [:arg2 |  arg2                 text: 'nes';                 text: 'sie' ] ] gives: '<strong>nessie</strong>'initialRequest: arg1  super initialRequest: arg1.  self requestContext consumer nextIfPresentDo: [:arg2 |  navigation components do: [:arg3 |  arg3 value class name greaseString = arg2 ifTrue: [ navigation select: arg3 key ] ] ]renderEditAreaOn: arg1  arg1 textArea     value: input;     callback: [:arg2 |  input := arg2 ].  arg1 break.  self actions do: [:arg3 |  arg1 submitButton           callback: [ self perform: arg3 ];           text: arg3 ]label  ^'OS'passwordInput  ^self brush: WAPasswordInputTag newurlForDocument: arg1 mimeType: arg2  ^self urlForDocument: arg1 mimeType: arg2 fileName: nil>= arg1  ^self = arg1 or: [ self > arg1 ]createArray  ^Array newonWaiting: arg1  self document scriptGenerator event: 'waiting' do: arg1 on: selfclient  ^clientselectorPrefix  ^'exampleComponent'testFormWithMimeTypeJpeg  | tmp1 |  self formClassExists ifFalse: [ ^self ].  tmp1 := WADocumentHandler document: self sampleForm mimeType: WAMimeType imageJpeg fileName: nil.  self assert: (tmp1 document contents beginsWithSubCollection: #(16rFF 16rD8 16rFF 16rE0) asByteArray)component: arg1  component := arg1.  hasAnswer := false.  answer := nil.  component onAnswer: [:arg2 |  hasAnswer := true.        answer := arg2 ]addFilter: arg1  ^self addFilterLast: arg1states  ^Array with: date with: monthIndex with: yeartestUpdateUrl  | tmp1 tmp2 |  tmp1 := WAUrl new.  root onUpdateUrl: [:arg1 |  self assert: arg1 = tmp1.        self log: 'root' ].  child1 onUpdateUrl: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child1' ].  child2 onUpdateUrl: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child2' ].  child3 onUpdateUrl: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child3' ].  decoration1 onUpdateUrl: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration1' ].  decoration2 onUpdateUrl: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration2' ].  tmp2 := WAVisiblePresenterGuide client: (WAUpdateUrlVisitor url: tmp1).  tmp2 start: root.  self assertLog: #('root').  root onChildren: [ Array with: child1 with: child2 ].  tmp2 start: root.  self assertLog: #('root' 'child1' 'child2').  root     addDecoration: decoration1;     addDecoration: decoration2.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').  child2 show: child3.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3')isAttributeFoundOn: arg1  ^(self isAttributeLocalOn: arg1) or: [ self isAttributeInheritedOn: arg1 ]found  self status: WAResponse statusFoundvalueForField: arg1  ^arg1 isEmptyOrNil ifTrue: [ nil ] ifFalse: [ WAUrl absolute: arg1 ]responseForLibrary: arg1  self subclassResponsibilitychildrenDo: arg1  handlers do: arg1binary  externalStream binaryparseAuthority: arg1 from: arg2 to: arg3  | tmp1 tmp2 |  tmp1 := arg1 indexOf: $@ startingAt: arg2.  (tmp1 > 0 and: [ tmp1 < arg3 ]) ifTrue: [ self parseUserPassword: arg1 from: arg2 to: tmp1.        tmp2 := tmp1 + 1 ] ifFalse: [ tmp2 := arg2 ].  self parseHostPort: arg1 from: tmp2 to: arg3address  ^addressbeChapter  self relationship: 'chapter'optionGroup: arg1  ^self optionGroup with: arg1priority  ^10tag: arg1  ^self brush: (WAGenericTag tag: arg1)previousMonth  self monthIndex = 1 ifTrue: [ self           monthIndex: 12;           year: self year - 1 ] ifFalse: [ self monthIndex: self monthIndex - 1 ]renderRequestBodyOn: arg1  arg1 hiddenInput callback: [ self readRequestBody ].  arg1 strong: 'Request Body:'.  ran ifTrue: [ arg1 text: (hasBody ifTrue: [ 'Success' ] ifFalse: [ 'Fail' ]) ] ifFalse: [ arg1 text: 'Not Run' ].  arg1 breakvalue  ^valueisClosed  ^falseinform: arg1  ^self wait: [:arg2 |  self inform: arg1 onAnswer: arg2 ]initializeWith: arg1  self initialize.  path := arg1renderQualifiedValues: arg1 on: arg2  arg2 definitionData: [ arg1 isNil ifTrue: [ arg2 text: 'N/A' ] ifFalse: [ arg2 orderedList: [ arg1 do: [:arg3 |  self renderQualifiedValue: arg3 on: arg2 ] ] ] ]keysAndValuesDo: arg1  byKey keysAndValuesDo: arg1keyboard  ^self tag: 'kbd'defaultPort  ^8080pathEncoded  ^pathEncodedwithNotificationHandlerDo: arg1  | tmp1 |  tmp1 := WACurrentExceptionHandler value.  ^tmp1 isNil ifTrue: [ arg1 on: WARenderNotification do: [:arg2 |   ] ] ifFalse: [ [ tmp1 handleExceptionsDuring: arg1 ] on: WARenderNotification do: [:arg2 |   ] ]firstPath  ^firstPathbatchSize: arg1  batchSize := arg1onScroll: arg1  self document scriptGenerator event: 'scroll' do: arg1 on: selfifResetPossible: arg1  self response resetIfPossible ifTrue: [ arg1 value ]tag  ^'wbr'responseForLibraries  context responseGenerator     forbidden;     respondresetIfPossible  self initializeFields.  ^truetestDocumentMimeType  self response document: 'alert("Seaside")' mimeType: 'text/javascript'.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Type: text/javascript' 'Content-Length: 16' '' 'alert("Seaside")')type  ^'email'mimetypeOf: arg1  self subclassResponsibilityrenderContentOn: arg1  self renderExplanationOn: arg1.  arg1 form     multipart;     with: [ arg1 table: inputElements.        arg1 div: [ self renderRequestBodyOn: arg1.              arg1 submitButton ] ]valueWithPossibleArguments: arg1  ^self value: arg1 firsturlFor: arg1  ^self urlmatchChar: arg1  self whitespace.  (stream atEnd or: [ stream peek ~= arg1 ]) ifTrue: [ ^false ].  stream next.  ^trueonSecurityPolicyViolation: arg1  self document scriptGenerator event: 'securitypolicyviolation' do: arg1 on: selfstartTasks  (WAVisiblePresenterGuide client: WATaskVisitor new) start: self presentercookieAt: arg1  ^self cookies detect: [:arg2 |  arg2 key = arg1 ] ifNone: [ nil ]url: arg1  self subclassResponsibilityif  ^WAConditionalComment root: selfcopyTo: arg1  ^arg1testAddFilterLast  | tmp1 tmp2 tmp3 |  tmp1 := WARequestFilter new.  tmp2 := WARequestFilter new.  tmp3 := WARequestFilter new.  self assert: (handler addFilterLast: tmp1) = tmp1.  self assert: (handler addFilterLast: tmp2) = tmp2.  self assert: (handler addFilterLast: tmp3) = tmp3.  self assert: handler filters size = 3.  self assert: handler filters first = tmp1.  self assert: handler filters last = tmp3inform: arg1 onAnswer: arg2  self call: (WAFormDialog new           addMessage: arg1;           yourself) onAnswer: arg2name: arg1  self attributes at: 'name' put: arg1initializeWithValue: arg1  | tmp1 |  self initialize.  value := arg1.  tmp1 := Time totalSeconds.  creationTime := tmp1.  accessTime := tmp1.  count := GRPlatform current newReducedConflictCounter.  lastCount := 0assertCookieAddition: arg1 key: arg2  self assertCookieAddition: arg1.  self assert: arg1 cookies first value = arg2respond: arg1  arg1 value: self response.  self respondclose  closed ifTrue: [ self error: 'Response is closed' ].  externalStream     nextPutAll: '0';     crlf;     crlf;     flush.  closed := trueinitialize  super initialize.  callbacks := WACallbackRegistry newbig  ^self tag: 'big'generator: arg1  generator := arg1filterWith: arg1 during: arg2  | tmp1 |  self session addFilter: arg1.  tmp1 := arg2 value.  self session removeFilter: arg1.  ^tmp1elements  ^#(Quito Dakar Sydney Bamako)callback: arg1  self value: (self storeCallback: (WAValueCallback on: arg1))renderContentOn: arg1  arg1 textInput     value: self value greaseString;     callback: [:arg2 |  self value: arg2 ].  arg1 select     list: self unitDictionary keys sorted;     labels: [:arg3 |  self unitDictionary at: arg3 ];     selected: self multiplier;     callback: [:arg4 |  self multiplier: arg4 ]tag  ^'object'renderContentOn: arg1  self renderVideoOn: arg1.  self renderAudioOn: arg1testAddStyle  self assert: [:arg1 |  arg1 addStyle: 'display: hidden' ] gives: ' style="display: hidden"'.  self assert: [:arg1 |  arg1           addStyle: 'display: hidden';           addStyle: 'position: absolute' ] gives: ' style="display: hidden;position: absolute"'createRoot  | tmp1 |  tmp1 := self requestContext rootComponentIfAbsent: [ self rootClass new ].  ^self rootDecorationClasses inject: tmp1 into: [:arg1 :arg2 |  arg1           addDecoration: arg2 new;           yourself ]asSpecCommand  ^super asSpecCommand     iconName: #add;     yourselfrenderDefinitionOn: arg1  arg1 heading     level2;     with: '<dfn>'.  arg1 paragraph: [ arg1 definition: 'Ichthyology'.        arg1 text: ' is the branch of natural science which studies fish.' ]sanitizePath: arg1  | tmp1 |  tmp1 := arg1.  (#(nil '' '/') includes: tmp1) ifTrue: [ tmp1 := '/' ].  tmp1 first = $/ ifFalse: [ tmp1 := '/' , tmp1 ].  [ tmp1 size > 1 and: [ tmp1 last = $/ ] ] whileTrue: [ tmp1 := tmp1 allButLast ].  ^tmp1actionBaseUrl  ^self context actionBaseUrlvalue: arg1  | tmp1 |  tmp1 := WAMarkerRequest signal.  tmp1 isNil ifTrue: [ tmp1 := thisContext sender ] ifFalse: [ self unwindFrom: thisContext to: tmp1 ].  self restoreValues swapSender: tmp1.  thisContext swapSender: values first.  ^arg1start: arg1  self visit: arg1filters  ^handler filtersdocumentHandlerFieldName  ^'_d'url: arg1  self attributeAt: 'src' put: arg1testAddKeyToContext  | tmp1 |  tmp1 := self requestContext.  strategy addKey: 'The_Metaphor' toContext: tmp1.  self assertNoCookies: tmp1class: arg1  class := arg1.  self selector: self allSelectors firstat: arg1 addAll: arg2 removeAll: arg3  self addExpression: ((WAAddRemoveExpression key: arg1)           additions: arg2;           removals: arg3;           yourself)initializeOn: arg1  super initializeOn: arg1.  fileEditor := WAFileAttributeEditor new     configuration: self handler libraries;     handler: handler;     group: #libraries;     parent: self;     yourselftestStringVersionNumberParsing  | tmp1 tmp2 |  tmp2 := '12.3'.  tmp1 := WAHttpVersion fromString: tmp2.  self assert: tmp1 major = 12.  self assert: tmp1 minor = 3renderContentOn: arg1  self renderTreeOn: arg1marked: arg1  self marked with: arg1open: arg1 on: arg2  handle: arg1 registering: arg2  | tmp1 |  tmp1 := self register: arg2.  self dispatch: arg1 to: arg2 key: tmp1testMultipleEntry  | tmp1 |  tmp1 := mutex critical: [ mutex critical: [ 1 ] ].  self assert: tmp1 = 1.  self assert: mutex owner isNilrenderContentOn: arg1  arg1 table: [ self renderHeaderOn: arg1.        self renderFooterOn: arg1.        arg1 tableBody           class: self tableBodyCssClass;           with: [ self renderValuesOn: arg1.              self isRunningCog ifTrue: [ self renderCogValuesOn: arg1 ] ] ]tableBody: arg1  self tableBody with: arg1renderContentOn: arg1  arg1 unorderedList: [ batcher batch do: [:arg2 |  arg1 anchor                 callback: [ self choose: arg2 ];                 with: (arg2 perform: linkSelector).              arg1 break.              arg1 text: (arg2 perform: textSelector).              arg1 paragraph ] ].  arg1 div     style: 'text-align: center';     with: batcherstream  ^streamadditionalStatusOn: arg1  expandAll: arg1  expanded addAll: arg1register: arg1  ^self cache store: (arg1           setParent: self;           yourself)flush  self isCommitted ifFalse: [ self writeOn: externalStream ].  externalStream flushrenderWithContext: arg1 visitor: arg2  | tmp1 |  tmp1 := WAHtmlCanvas context: arg1.  tmp1 div     class: 'wa-halo';     with: [ tmp1 div           class: 'wa-halo-header';           with: [ (self plugins select: [:arg3 |  arg3 isActive ]) do: [:arg3 |  tmp1 render: arg3 ] separatedBy: [ tmp1 text: ' ' ] ].        tmp1 div           class: 'wa-halo-body';           with: [ self perform: self modeSelector with: tmp1 with: arg2 ] ].  tmp1 flushrenderConfigurationOn: arg1  | tmp1 |  tmp1 := self filters.  arg1 form: [ self renderPossibleFiltersOn: arg1.        arg1 table           cellspacing: 0;           cellpadding: 0;           with: [ tmp1 do: [:arg2 |  arg1 tableRow: [ arg1 tableData: arg2 class name.                          arg1 tableData: [ (arg2 isKindOf: WAConfiguredRequestFilter) ifTrue: [ arg1 anchor                                         callback: [ self show: arg2 configurationComponent ];                                         with: 'Configure' ].                                arg1 space.                                arg1 anchor                                   callback: [ self removeFilter: arg2 ];                                   with: 'Remove' ] ] ] ] ]windowTitle  ^windowTitlekeyFromContext: arg1  ^(self strategyFor: arg1) keyFromContext: arg1legend: arg1  self legend with: arg1testFieldNoCookieHandlerAbsent  | tmp1 tmp2 |  registry := self createRegistryWithCookiesEnabled.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1responseForLibraries  self subclassResponsibilitylookupHandler  | tmp1 tmp2 |  tmp1 := self requestContext consumer.  tmp2 := self dispatcher.  [ tmp1 atEnd ] whileFalse: [ tmp2 := tmp2 isDispatcher ifFalse: [ ^tmp2 ] ifTrue: [ tmp2 handlers at: tmp1 next ifAbsent: [ ^nil ] ] ].  ^tmp2testKeyNotFound  self assert: (merged at: 'foo') isNiltestWithoutFragment  | tmp1 |  url fragment: 'foo'.  tmp1 := url withoutFragment.  url addToPath: 'zork'.  url addField: 'zork'.  self assert: url printString = '/zork?zork#foo'.  self assert: tmp1 printString = '/'tooltip  ^'CSS Style Editor'isClosed  ^truedocument: arg1  | tmp1 tmp2 |  tmp1 := arg1 seasideMimeDocument.  self attachmentWithFileName: tmp1 fileName.  tmp2 := tmp1 mimeType.  self contentType: tmp2.  tmp2 isBinary ifTrue: [ self binary ].  self nextPutAll: tmp1 contentsetFilter: arg1  filter contents: arg1printOn: arg1  super printOn: arg1.  self request isNil ifTrue: [ arg1 nextPutAll: ' url: <nil>' ] ifFalse: [ arg1           nextPutAll: ' url: ';           print: self request url greaseString ]actionPhaseContinuationClass  ^(self application preferenceAt: #actionPhaseContinuationClass) valuetestHandlesWarning  self assert: (self handlerClass handles: Warning new).  self assert: (self createHandler handles: Warning new)setNext: arg1  next contents: arg1testBasicForm  self assert: [:arg1 |  arg1 basicForm ] gives: '<form accept-charset="utf-8" method="post" action="/"></form>'script: arg1  arg1 isNil ifTrue: [ ^self ].  (arg1 respondsTo: #id:) ifTrue: [ arg1 id: self ensureId ].  canvas document addLoadScript: arg1faviconIco  ^#(0 0 1 0 1 0 16 16 0 0 1 0 32 0 104 4 0 0 22 0 0 0 40 0 0 0 16 0 0 0 32 0 0 0 1 0 32 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 252 252 252 253 247 247 247 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 103 117 237 253 42 51 220 253 229 230 239 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 72 116 250 253 0 51 246 253 73 95 225 253 247 247 247 253 255 255 255 253 255 255 255 253 255 255 255 253 253 253 253 253 249 249 249 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 83 137 252 253 0 87 254 253 0 88 252 253 126 146 226 253 251 251 251 253 242 242 247 253 164 164 233 253 70 70 222 253 30 30 216 253 226 226 237 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 95 152 252 253 0 126 255 253 0 111 255 253 3 103 251 253 63 97 231 253 17 55 231 253 0 45 236 253 0 11 226 253 32 33 220 253 242 242 245 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 252 252 252 253 79 145 249 253 0 158 255 253 0 98 255 253 0 149 255 253 0 149 254 253 0 106 250 253 0 33 233 253 2 31 232 253 185 185 233 253 254 254 254 253 255 255 255 253 255 255 255 253 254 254 254 253 232 237 245 253 148 184 243 253 58 136 245 253 0 136 254 253 0 163 255 253 0 113 255 253 0 134 255 253 0 118 255 253 0 84 250 253 0 92 250 253 107 113 225 253 253 253 253 253 255 255 255 253 255 255 255 253 254 254 254 253 107 164 246 253 7 108 252 253 0 118 255 253 0 135 255 253 0 134 255 253 0 128 255 253 0 104 255 253 0 82 255 253 0 110 255 253 0 146 255 253 4 77 240 253 231 231 237 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 80 153 251 253 1 113 254 253 0 129 255 253 0 143 255 253 0 147 255 253 0 144 255 253 0 116 255 253 0 89 255 253 0 96 255 253 0 144 255 253 0 114 250 253 143 149 220 253 253 253 253 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 227 238 251 253 158 199 250 253 88 171 251 253 9 149 254 253 0 167 255 253 0 121 255 253 0 143 255 253 0 136 255 253 0 89 255 253 0 104 253 253 7 60 235 253 187 187 226 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 138 184 251 253 0 155 255 253 0 109 255 253 0 162 255 253 0 143 255 253 0 133 255 253 0 88 251 253 0 30 233 253 25 31 219 253 223 223 236 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 161 197 252 253 0 137 255 253 0 115 255 253 4 140 253 253 154 182 242 253 163 188 251 253 89 130 247 253 19 37 230 253 0 0 222 253 151 151 227 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 169 201 252 253 0 109 255 253 0 117 255 253 113 161 240 253 253 253 253 253 255 255 255 253 254 254 254 253 250 250 252 253 212 212 245 253 249 249 251 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 177 205 252 253 0 94 255 253 38 115 246 253 241 243 247 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 227 236 253 253 61 127 250 253 197 213 243 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 254 254 254 253 254 254 254 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 255 255 255 253 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) asByteArraycreateRequestContextWithFieldKey: arg1 cookieKey: arg2  | tmp1 tmp2 tmp3 |  tmp1 := WARequestFields new.  arg1 isNil ifFalse: [ tmp1 at: self fieldName put: arg1 ].  tmp2 := OrderedCollection new.  arg2 isNil ifFalse: [ | tmp4 |        tmp4 := (WARequestCookie key: self cookieKey value: arg2)           pathUnencoded: self path encoded: self path;           yourself.        tmp2 add: tmp4 ].  tmp3 := (WARequest method: 'GET' uri: self path)     setPostFields: tmp1;     setCookies: tmp2;     yourself.  ^WARequestContext request: tmp3 response: WABufferedResponse newdefault: arg1  default := arg1 isNil ifTrue: [ nil ] ifFalse: [ GRPlatform current bindingOf: arg1 ]port: arg1  self ports: (Array with: arg1)startYear: arg1  startYear := arg1onInvalid: arg1  self document scriptGenerator event: 'invalid' do: arg1 on: selfpost  self method: 'post'testTextArea  self assert: [:arg1 |  arg1 textArea ] gives: '<textarea rows="auto" cols="auto"></textarea>'.  self assert: [:arg1 |  arg1 textArea columns: 4 ] gives: '<textarea rows="auto" cols="4"></textarea>'.  self assert: [:arg1 |  arg1 textArea rows: 40 ] gives: '<textarea rows="40" cols="auto"></textarea>'.  self assert: [:arg1 |  arg1 textArea callback: [:arg2 |   ] ] gives: '<textarea rows="auto" cols="auto" name="1"></textarea>'.  self assert: [:arg1 |  arg1 textArea: 'foo bar&zork' ] gives: '<textarea rows="auto" cols="auto">foo bar&amp;zork</textarea>'.  self assert: [:arg1 |  arg1 textArea text: 'foo bar&zork' ] gives: '<textarea rows="auto" cols="auto">foo bar&amp;zork</textarea>'.  self assert: [:arg1 |  arg1 textArea value: 'foo bar&zork' ] gives: '<textarea rows="auto" cols="auto">foo bar&amp;zork</textarea>'.  self assert: [:arg1 |  arg1 textArea with: 'foo bar&zork' ] gives: '<textarea rows="auto" cols="auto">foo bar&amp;zork</textarea>'.  self assert: [:arg1 |  arg1 textArea           callback: [:arg2 |   ];           with: 'foo bar&zork' ] gives: '<textarea rows="auto" cols="auto" name="1">foo bar&amp;zork</textarea>'domain: arg1  domain := arg1asSpecCommand  ^super asSpecCommand     iconName: #smallDoIt;     yourselfassertUserAgent: arg1 isInternetExplorer: arg2  self userAgent: arg1.  WAHtmlCanvas builder render: [:arg3 |  self assert: arg3 form isInternetExplorer = arg2 ]document  ^canvas documenthandleFiltered: arg1  self addRedirectedToHeader: arg1.  self respond: [:arg2 |  self processRendering: arg2 ].  WAMissingResponseError signaldate  ^datecreateRegistryWithCookiesEnabled  | tmp1 |  tmp1 := self createRegistry.  tmp1 configuration at: #trackingStrategy put: WACookieIfSupportedSessionTrackingStrategy new.  ^tmp1newHandler  ^WAApplication new     preferenceAt: #charSet put: 'utf-16';     yourselfhandleFiltered: arg1  clearDescription  description := nil.  self clearSearchContextspreviousPage  self isOnFirstPage ifFalse: [ currentPage := self validPages before: currentPage ]closeBrush  self subclassResponsibilityrenderContentOn: arg1  self renderExplanationOn: arg1.  arg1 form: [ arg1 table: [ self renderHeadingsOn: arg1.              self renderCookiesOn: arg1.              self renderInputOn: arg1 ] ]encodeChildrenOn: arg1  self childrenDo: [:arg2 |  arg2 encodeOn: arg1 ]testHeadersAtAppend  self assert: (self response headerAt: 'foo' append: 'bar') = 'bar'.  self assert: (self response headerAt: 'foo') = 'bar'.  self assert: (self response headerAt: 'foo' append: 'zork') = 'zork'.  self assert: (self response headerAt: 'foo') = 'bar'.  self assert: self response headers size = 2close: arg1 on: arg2  handleError: arg1  ^self handleDefault: arg1visitPresenter: arg1  self visitPainter: arg1major  ^majortextSelector: arg1  textSelector := arg1children  ^Array with: taskhandle: arg1  | tmp1 tmp2 |  tmp1 := Set new.  tmp2 := arg1 request fields.  tmp2 keysDo: [:arg2 |  callbacks at: arg2 ifPresent: [:arg3 |  (arg3 isEnabledFor: arg1) ifTrue: [ tmp1 add: arg3 ] ] ].  tmp1 sorted do: [:arg3 |  arg3 evaluateWithFieldValues: (tmp2 allAt: arg3 key) ]testFileNameWithHttp  self assert: [:arg1 |  arg1 image resourceUrl: 'http.gif' ] gives: '<img alt="" src="' , self resourceBaseUrl , 'http.gif"/>'min: arg1  self attributeAt: 'min' put: arg1value: arg1  self attributes at: 'checked' put: arg1add: arg1 to: arg2  ^arg2 at: arg1 key put: arg1testIsCommitted  self deny: self response isCommitted.  self response contentType: 'text/html'.  self deny: self response isCommitted.  self response nextPutAll: 'Visit <a href="http://www.seaside.st">seaside.st</a>.'.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Type: text/html' 'Content-Length: 53' '' 'Visit <a href="http://www.seaside.st">seaside.st</a>.')listOfClasses: arg1  ^self addAttribute: (WAClassListAttribute key: arg1)debug  self answer: truehandlerClasses  ^WARequestHandler concreteSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name < arg2 name ]setParent: arg1 canvas: arg2  super setParent: arg1 canvas: arg2.  (arg1 isKindOf: WAImageMapTag) ifTrue: [ self attributes at: 'ismap' put: true ]host  ^self headerAt: 'host'target  ^owner activeComponentvalue  ^valueisSession  ^truetestCancelButton  self assert: [:arg1 |  arg1 cancelButton ] gives: '<input type="submit"/>'.  self assert: [:arg1 |  arg1 cancelButton callback: [  ] ] gives: '<input name="1" type="submit"/>'.  self assert: [:arg1 |  arg1 cancelButton on: #value of: self ] gives: '<input value="Value" name="1" type="submit"/>'.  self assert: [:arg1 |  arg1 cancelButton: 'foo' ] gives: '<input value="foo" type="submit"/>'.  self assert: [:arg1 |  arg1 cancelButton text: 'bar' ] gives: '<input value="bar" type="submit"/>'.  self assert: [:arg1 |  arg1 cancelButton with: 'zork' ] gives: '<input value="zork" type="submit"/>'userAgent: arg1  self requestContext request headers at: 'user-agent' put: arg1handler  ^handlerurl: arg1  self attributes at: 'data' put: arg1renderChildrenCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternUnary;           with: 'children'.        arg1 break.        arg1 text: '    ^ '.        arg1 span           class: #instanceVar;           with: 'counters' ]contentType  ^self headerAt: 'Content-Type' ifAbsent: [ WAMimeType textPlain ]testTargetSelf  self assert: [:arg1 |  arg1 anchor           callback: [  ];           targetSelf;           with: 'foo' ] gives: '<a target="_self" href="/?1">foo</a>'array: arg1  ^(self brush: WAJsonArrayBrush new) with: arg1captureFrom: arg1 to: arg2  | tmp1 tmp2 |  tmp2 := arg1.  tmp1 := WriteStream on: (Array new: 100).  [ tmp2 isNil or: [ tmp2 == arg2 ] ] whileFalse: [ tmp1 nextPut: tmp2.        1 to: tmp2 class instSize do: [:arg3 |  tmp1 nextPut: (tmp2 instVarAt: arg3) ].        1 to: tmp2 size do: [:arg3 |  tmp1 nextPut: (tmp2 at: arg3) ].        tmp2 := tmp2 sender ].  tmp2 isNil ifTrue: [ WAMarkerNotFound signal: arg2 printString , ' not found while capturing continuation.' ].  ^tmp1 contentsselect: arg1  ^self select with: arg1renderContentOn: arg1  arg1 select     list: (0 to: 23);     on: #hour of: self.  arg1 select     list: (0 to: 59);     on: #minute of: self.  arg1 select     list: (0 to: 59);     on: #second of: self.  self timeIsValid ifFalse: [ self renderValidationErrorOn: arg1 ]irrelevant  self attributeAt: 'irrelevant' put: truetoggleZoomText  ^zoom ifTrue: [ 'Zoom out' ] ifFalse: [ 'Zoom in' ]workAroundPharo3Bug  (Delay forMilliseconds: 1) waittag  self subclassResponsibilityoverrideAttribute: arg1  self configuration takeValue: (self configuration at: arg1 key) forAttribute: arg1maxAge: arg1  maxAge := arg1referer  ^self headerAt: 'referer'setKey: arg1 callbacks: arg2  key := arg1initialize  super initialize.  nextKey := 1testLanguage  | tmp1 |  tmp1 := WALocale language: 'de'.  self assert: tmp1 language = 'de'.  self assert: tmp1 country isNilonDrag: arg1  self document scriptGenerator event: 'drag' do: arg1 on: selfsetValueWithNewDate  ^value := Date newDay: ((day min: (Date daysInMonth: (Date nameOfMonth: month) forYear: year)) max: 1) month: (Date nameOfMonth: month) year: yearie50  self addToCondition: '5.0'configSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   width="48.000000px"   height="48.000000px"   id="svg53383"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/categories"   sodipodi:docname="applications-system.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective31" />    <linearGradient       id="linearGradient3264">      <stop         style="stop-color:#c9c9c9;stop-opacity:1;"         offset="0"         id="stop3266" />      <stop         id="stop3276"         offset="0.25"         style="stop-color:#f8f8f8;stop-opacity:1;" />      <stop         id="stop3272"         offset="0.5"         style="stop-color:#e2e2e2;stop-opacity:1;" />      <stop         style="stop-color:#b0b0b0;stop-opacity:1;"         offset="0.75"         id="stop3274" />      <stop         style="stop-color:#c9c9c9;stop-opacity:1;"         offset="1"         id="stop3268" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3264"       id="linearGradient3281"       gradientUnits="userSpaceOnUse"       x1="14.462892"       y1="12.284524"       x2="34.534348"       y2="39.684914"       gradientTransform="matrix(1.241935,0,0,1.241935,-5.027508,-7.208988)" />    <linearGradient       id="linearGradient2300">      <stop         id="stop2302"         offset="0.0000000"         style="stop-color:#000000;stop-opacity:0.32673267;" />      <stop         id="stop2304"         offset="1"         style="stop-color:#000000;stop-opacity:0;" />    </linearGradient>    <linearGradient       id="aigrd1"       gradientUnits="userSpaceOnUse"       x1="99.7773"       y1="15.4238"       x2="153.0005"       y2="248.6311">      <stop         offset="0"         style="stop-color:#184375"         id="stop53300" />      <stop         offset="1"         style="stop-color:#C8BDDC"         id="stop53302" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#aigrd1"       id="linearGradient53551"       gradientUnits="userSpaceOnUse"       x1="99.7773"       y1="15.4238"       x2="153.0005"       y2="248.6311"       gradientTransform="matrix(0.200685,0.000000,0.000000,0.200685,-0.585758,-1.050787)" />    <radialGradient       gradientUnits="userSpaceOnUse"       r="11.689870"       fy="72.568001"       fx="14.287618"       cy="68.872971"       cx="14.287618"       gradientTransform="matrix(1.399258,-2.234445e-7,8.196178e-8,0.513264,4.365074,4.839285)"       id="radialGradient2308"       xlink:href="#linearGradient2300"       inkscape:collect="always" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3264"       id="linearGradient3760"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.241935,0,0,1.241935,-5.027508,-7.208988)"       x1="14.462892"       y1="12.284524"       x2="34.534348"       y2="39.684914" />    <linearGradient       inkscape:collect="always"       xlink:href="#aigrd1"       id="linearGradient3773"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.200685,0,0,0.200685,-54.33576,-1.050787)"       x1="99.7773"       y1="15.4238"       x2="153.0005"       y2="248.6311" />  </defs>  <sodipodi:namedview     inkscape:showpageshadow="false"     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="0.11764706"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="5.6568542"     inkscape:cx="43.652227"     inkscape:cy="21.164787"     inkscape:current-layer="layer1"     showgrid="false"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:window-width="872"     inkscape:window-height="697"     inkscape:window-x="562"     inkscape:window-y="151" />  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:title>System Applications</dc:title>        <dc:creator>          <cc:Agent>            <dc:title>Jakub Steiner</dc:title>          </cc:Agent>        </dc:creator>        <dc:source>http://jimmac.musichall.cz/</dc:source>        <dc:subject>          <rdf:Bag>            <rdf:li>system</rdf:li>            <rdf:li>applications</rdf:li>            <rdf:li>group</rdf:li>            <rdf:li>category</rdf:li>            <rdf:li>admin</rdf:li>            <rdf:li>root</rdf:li>          </rdf:Bag>        </dc:subject>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     inkscape:label="shadow"     id="layer2"     inkscape:groupmode="layer">    <path       transform="matrix(1.186380,0.000000,0.000000,1.186380,-4.539687,-7.794678)"       d="M 44.285715 38.714287 A 19.928572 9.8372450 0 1 1  4.4285717,38.714287 A 19.928572 9.8372450 0 1 1  44.285715 38.714287 z"       sodipodi:ry="9.8372450"       sodipodi:rx="19.928572"       sodipodi:cy="38.714287"       sodipodi:cx="24.357143"       id="path1538"       style="color:#000000;fill:url(#radialGradient2308);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:0.50000042;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc" />  </g>  <g     id="layer1"     inkscape:label="Layer 1"     inkscape:groupmode="layer">    <path       inkscape:r_cy="true"       inkscape:r_cx="true"       style="opacity:1;color:#000000;fill:url(#linearGradient3773);fill-opacity:1;fill-rule:nonzero;stroke:#3f4561;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 22.699525,0.94746963 C 22.22635,0.97984519 21.766437,1.0531317 21.301673,1.1063165 L 21.269903,1.1063165 L 20.157975,7.1742671 C 18.345621,7.5870046 16.640562,8.2874574 15.106644,9.2392765 L 10.118853,5.6493371 C 8.770521,6.6961412 7.543552,7.9170049 6.465374,9.2392765 L 9.928236,14.290607 C 8.876814,15.89739 8.086153,17.732094 7.640841,19.659632 C 7.640765,19.668743 7.640779,19.689813 7.640841,19.691401 L 1.60466,20.644482 C 1.494303,21.545851 1.445813,22.477386 1.445813,23.408418 C 1.445813,24.170171 1.466846,24.921747 1.541121,25.664043 L 7.577303,26.744202 C 8.0066,28.840363 8.822112,30.797987 9.960006,32.526228 L 6.370066,37.450482 C 7.398201,38.726866 8.585171,39.888962 9.864698,40.913343 L 14.947798,37.418712 C 16.724273,38.551956 18.707343,39.346604 20.856901,39.737877 L 21.809983,45.742288 C 22.487237,45.803935 23.181758,45.805827 23.874992,45.805827 C 24.853677,45.805826 25.788512,45.768738 26.734236,45.64698 L 27.877933,39.515491 C 29.91886,39.007587 31.836112,38.126493 33.501113,36.942172 L 38.393596,40.500342 C 39.662366,39.420897 40.822583,38.180154 41.824689,36.846863 L 38.266519,31.700225 C 39.230125,30.036028 39.897817,28.199859 40.23622,26.235892 L 46.240632,25.282811 C 46.29329,24.656221 46.30417,24.048546 46.30417,23.408418 C 46.30417,22.296018 46.174875,21.205317 46.018246,20.136172 L 39.918526,19.024244 C 39.440518,17.259164 38.656214,15.612364 37.662901,14.13176 L 41.25284,9.2075071 C 40.140075,7.8466524 38.870718,6.5895264 37.472284,5.5222596 L 32.293876,9.0804296 C 30.805549,8.200202 29.203897,7.5248159 27.464931,7.1424978 L 26.51185,1.1063165 C 25.644369,1.0042729 24.769749,0.94746963 23.874992,0.94746963 C 23.633166,0.94746964 23.384286,0.93986063 23.144296,0.94746963 C 23.027301,0.95117908 22.911525,0.94066346 22.794833,0.94746963 C 22.763228,0.94931296 22.73107,0.94531125 22.699525,0.94746963 z M 23.525529,16.387386 C 23.641592,16.381497 23.757473,16.387386 23.874992,16.387386 C 27.635598,16.387386 30.705408,19.457196 30.705408,23.217802 C 30.705409,26.978407 27.635597,30.016448 23.874992,30.016448 C 20.114387,30.016449 17.076346,26.978407 17.076346,23.217802 C 17.076347,19.574716 19.927558,16.569963 23.525529,16.387386 z "       id="path3243" />    <path       inkscape:r_cy="true"       inkscape:r_cx="true"       sodipodi:type="arc"       style="opacity:0.64772728;color:#000000;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#ffffff;stroke-width:1.62180054;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="path3283"       sodipodi:cx="23.511301"       sodipodi:cy="23.781593"       sodipodi:rx="12.727922"       sodipodi:ry="12.727922"       d="M 36.239223 23.781593 A 12.727922 12.727922 0 1 1  10.783379,23.781593 A 12.727922 12.727922 0 1 1  36.239223 23.781593 z"       transform="matrix(0.616598,0,0,0.616598,9.38202,8.539674)" />    <path       inkscape:r_cy="true"       inkscape:r_cx="true"       id="path3285"       d="M 21.995808,2.1484671 L 21.103024,8.0235243 C 19.404254,8.4103946 16.279442,9.5936035 14.841657,10.485771 L 10.091975,6.9406268 C 8.828145,7.9218257 8.741474,7.9883656 7.730867,9.2277688 L 11.165063,14.320988 C 10.179537,15.827071 8.995796,18.510982 8.570778,20.42893 C 8.570778,20.42893 2.552988,21.443355 2.552988,21.443355 C 2.449547,22.288234 2.49926,24.096528 2.56888,24.792303 L 8.317097,25.82782 C 8.71949,27.79261 10.225324,30.955232 11.291904,32.575161 L 7.656902,37.377719 C 8.620601,38.57411 8.813474,38.683589 10.01281,39.64377 L 14.873441,36.082733 C 16.538581,37.144954 19.84373,38.437109 21.858571,38.80386 L 22.656299,44.604952 C 23.291109,44.662736 25.044829,44.824827 25.931283,44.710701 L 26.824066,38.671821 C 28.737084,38.195749 32.042539,36.838896 33.603191,35.728798 L 38.458624,39.236958 C 39.647878,38.225166 39.658533,38.072709 40.597835,36.822978 L 36.999815,31.708667 C 37.90303,30.148767 39.070902,27.098068 39.388097,25.257187 L 45.279046,24.279744 C 45.328399,23.692424 45.330802,22.054578 45.18399,21.052439 L 39.182092,20.016922 C 38.73404,18.362463 37.196418,15.381153 36.265359,13.993342 L 40.080075,9.1907857 C 39.037052,7.915218 38.64924,7.7402002 37.338448,6.7398212 L 32.313994,10.337839 C 30.918941,9.5127782 28.137095,8.2550417 26.507114,7.8966842 L 25.619528,2.1484671 C 24.806414,2.0528187 22.460488,2.0952921 21.995808,2.1484671 z "       style="opacity:0.34659089;color:#000000;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#ffffff;stroke-width:0.99999923;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccccccccccccccccccccccccccccc" />    <path       style="opacity:0.5;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 10.102903,6.2970655 C 8.7545689,7.3438694 8.1656464,7.9719226 7.0874684,9.2941942 L 10.489927,14.259153 C 9.4385072,15.857755 8.3316275,18.426114 8.1423859,19.987706 C 8.1423859,19.987706 2.0798859,21.0319 2.0798859,21.0319 C 2.0109129,21.595256 1.90625,22.884803 1.90625,22.884803 L 2.0830267,24.447303 C 2.5107567,24.535638 2.9231817,24.617818 3.3642767,24.666053 L 3.8642767,23.134803 C 4.2083177,23.163279 4.5439297,23.197303 4.8955267,23.197303 C 5.2467347,23.197303 5.6139847,23.163473 5.9580267,23.134803 L 6.4267767,24.666053 C 6.8680647,24.617818 7.3115487,24.535638 7.7392767,24.447303 L 7.7392767,22.884803 C 8.4250337,22.72518 9.0712777,22.497045 9.7080267,22.228553 L 10.645527,23.509803 C 11.047878,23.327709 11.421123,23.133984 11.801777,22.916053 L 11.301777,21.416053 C 11.89901,21.053803 12.463529,20.620706 12.989277,20.166053 L 14.270527,21.103553 C 14.596162,20.806973 14.91164,20.491691 15.208027,20.166053 L 14.270527,18.916053 C 14.725373,18.390305 15.127027,17.826171 15.489277,17.228553 L 16.989277,17.697303 C 17.207208,17.316456 17.432571,16.943209 17.614277,16.541053 L 16.333027,15.603553 C 16.601517,14.966804 16.798016,14.320561 16.958027,13.634803 L 18.551777,13.634803 C 18.640112,13.207076 18.691236,12.763591 18.739277,12.322303 L 17.239277,11.853553 C 17.268139,11.509705 17.301777,11.142456 17.301777,10.791053 C 17.301776,10.43965 17.267753,10.104039 17.239277,9.7598034 L 18.739277,9.2910534 C 18.69373,8.8711662 18.633686,8.4490548 18.551777,8.0410534 C 17.404349,8.4403544 15.999117,9.1941729 14.983265,9.8245243 L 10.102903,6.2970655 z "       id="path3767"       inkscape:r_cx="true"       inkscape:r_cy="true"       sodipodi:nodetypes="cccccccccsccccccccccccccccccccsccccc" />    <path       style="opacity:0.5;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 37.236641,17.217754 C 36.85286,17.39913 36.490003,17.603509 36.123236,17.813295 L 36.692886,19.548136 C 35.995792,19.970436 35.338156,20.467825 34.725008,20.998151 L 33.249099,19.910639 C 32.869013,20.256538 32.507327,20.618223 32.161588,20.998151 L 33.249099,22.474059 C 32.718773,23.087371 32.221547,23.745002 31.799084,24.441937 L 31.255328,24.260685 C 31.207646,24.960968 31.018949,25.62217 30.737466,26.228563 L 30.841038,26.306242 C 30.527881,27.048922 30.27649,27.83664 30.090137,28.636624 L 28.614229,28.636624 C 28.477946,28.722076 28.343676,28.821684 28.199938,28.895555 C 28.121568,29.310822 28.065026,29.712881 28.018687,30.138426 L 29.77942,30.708074 C 29.746033,31.10935 29.727633,31.515269 29.727633,31.925052 C 29.727631,32.334993 29.746034,32.740753 29.77942,33.142029 L 28.018687,33.711677 C 28.074705,34.226432 28.148678,34.740347 28.251725,35.239372 L 30.090137,35.213479 C 30.218255,35.763466 30.393202,36.320918 30.582107,36.844746 C 31.327023,36.557466 32.05594,36.214561 32.731236,35.809021 C 32.319649,34.59298 32.083908,33.279913 32.083908,31.925052 C 32.083909,26.727119 35.376289,22.288397 39.981313,20.583861 L 38.893802,20.402608 C 38.671014,19.579946 38.382478,18.774017 38.013435,18.020441 C 38.002581,17.998277 37.99851,17.96486 37.987542,17.942761 L 37.935756,17.890975 L 37.236641,17.217754 z "       id="path3770"       inkscape:r_cx="true"       inkscape:r_cy="true" />  </g></svg>'report  ^report ifNil: [ report := self buildReport ]beChapters  self kind: 'chapters'default: arg1  default := arg1password: arg1  password := arg1group  ^grouproot  ^rootlistItem: arg1  self listItem with: arg1location: arg1  features at: #location put: arg1updateStates: arg1  self states do: [:arg2 |  arg1 register: arg2 ]isPrimitiveType: arg1  ^arg1 isNumber or: [ #(nil true false) includes: arg1 ]orderedList  ^self brush: WAOrderedListTag newrenderSimpleOn: arg1  arg1 heading     level2;     with: 'Simple ruby markup'.  arg1 ruby: [ arg1 text: 'WWW'.        arg1 rubyText: 'World Wide Web' ]unregistered  hasReceivedUnregistered := truetestUploadCallback  | tmp1 tmp2 |  tmp1 := registry store: (WAUploadCallback on: [:arg1 |  log add: arg1 ]).  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: 'foo';                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: (tmp2 := WAFile new);                 yourself) ] raise: WARenderNotification.  self assertLog: (Array with: tmp2)tag  ^'details'sortedWorkingCopies  | tmp1 tmp2 tmp3 |  tmp1 := Dictionary new.  tmp2 := GRPackage grPackages collect: [:arg1 |  arg1 name ].  tmp3 := MCWorkingCopy allManagers select: [:arg1 |  tmp2 includes: arg1 packageName ].  tmp3 do: [:arg1 |  | tmp4 |        tmp4 := tmp1 at: (arg1 packageName copyUpTo: $-) ifAbsentPut: [ SortedCollection sortBlock: [:arg2 :arg3 |  arg2 packageName caseInsensitiveLessOrEqual: arg3 packageName ] ].        tmp4 add: arg1 ].  tmp1 := Array streamContents: [:arg4 |  tmp1 keysAndValuesDo: [:arg5 :arg6 |  arg4 nextPut: arg5 -> arg6 ] ].  ^tmp1 asSortedCollection: [:arg2 :arg3 |  arg2 key caseInsensitiveLessOrEqual: arg3 key ]setSslSessionId: arg1  sslSessionId := arg1parent  ^selfisClosed  ^trueisCollectionAttribute  ^trueinitializeWithKey: arg1  super initializeWithKey: arg1.  self default: #()createCodec  ^GRCodec forEncoding: 'iso-8859-1'contents  ^committed ifFalse: [ bufferedStream contents ]with: arg1  arg1 isNil ifFalse: [ self value: arg1 greaseString ].  super with: nil= arg1  ^(arg1 isKindOf: WAMimeDocument) and: [ self mimeType = arg1 mimeType and: [ self fileName = arg1 fileName and: [ self contents = arg1 contents ] ] ]testMatchingHandlerAbsent  | tmp1 tmp2 |  registry := self createRegistryWithCookiesEnabled.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: '123'.  tmp1 := self dispatch: tmp2 to: registry.  self assertCookieDeletion: tmp1.  self assertExpired: tmp1userinfo: arg1  user := arg1.  password := nilrenderContentOn: arg1  arg1 div     class: 'errorTest';     with: [ self renderHandlerConfigurationOn: arg1.        self renderPartsOn: arg1 ]monthName  ^Date nameOfMonth: self monthIndexrenderExplanationOn: arg1  arg1 paragraph: 'This form uses a HTTP GET request. The upload is not supposed to work.'setBrowseAsDefault  WAAdmin defaultDispatcher defaultName: 'browse'.  self redirectToBrowsehandleAnswer: arg1  (self next handleAnswer: arg1) ifFalse: [ self handleAnswer: arg1 continueWith: [ ^false ] ].  ^truerenderContentOn: arg1  self renderHarryOn: arg1.  self renderAbbreviatedOn: arg1.  self renderAcronymOn: arg1.  self renderKeyboardInputOn: arg1.  self renderVariableOn: arg1.  self renderCodeOn: arg1.  self renderDefinitionOn: arg1.  self renderSampleOn: arg1.  self renderAddressOn: arg1.  self renderModificationOn: arg1parsePort: arg1 from: arg2 to: arg3  | tmp1 |  tmp1 := nil.  arg2 to: arg3 - 1 do: [:arg4 |  | tmp2 |        tmp2 := arg1 at: arg4.        (tmp2 < $0 or: [ tmp2 > $9 ]) ifTrue: [ WAInvalidUrlSyntaxError signal: arg1 ].        tmp1 := (tmp1 isNil ifTrue: [ 0 ] ifFalse: [ 10 * tmp1 ]) + (tmp2 greaseInteger - $0 greaseInteger) ].  ^tmp1greaseString  ^country isNil ifTrue: [ language ] ifFalse: [ | tmp1 tmp2 |        tmp1 := String new: language size + 1 + country size.        tmp2 := WriteStream on: tmp1.        tmp2           nextPutAll: language;           nextPut: $-;           nextPutAll: country.        ^tmp1 ]renderFiltersOn: arg1  arg1 render: filterEditorminute  ^minutenest: arg1  parentBrush := currentBrush.  currentBrush := nil.  self render: arg1.  self flush.  parentBrush := parentBrush parentremoteAddress  ^remoteAddresscomponentName  ^componentName ifNil: [ componentName := 'MyFirstComponent' ]testRegisterDocumentHandler  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 |  tmp2 := WARequest method: 'GET' uri: '/'.  tmp3 := WABufferedResponse new.  tmp4 := WADocumentHandler document: 'body: {color: red}' mimeType: WAMimeType textCss fileName: nil.  tmp1 := WARequestContext request: tmp2 response: tmp3.  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp3 status = WAResponse statusOk.  tmp5 := handler sessions.  self assert: tmp5 size = 1.  tmp6 := tmp5 first.  tmp7 := tmp6 register: tmp4.  self assert: (tmp7 queryFields includesKey: tmp6 documentHandlerFieldName).  tmp2 := WARequest method: 'GET' uri: tmp7.  tmp3 := WABufferedResponse new.  tmp1 := WARequestContext request: tmp2 response: tmp3.  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp3 status = WAResponse statusOk.  self assert: tmp3 contents = tmp4 document contents.  tmp7 := tmp7 copy.  tmp7 queryFields at: tmp6 documentHandlerFieldName put: 'not_existing'.  tmp2 := WARequest method: 'GET' uri: tmp7.  tmp3 := WABufferedResponse new.  tmp1 := WARequestContext request: tmp2 response: tmp3.  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp3 status = WAResponse statusNotFoundinitializeWithToolDecoration: arg1 renderContext: arg2  self initialize.  toolDecoration := arg1.  renderContext := arg2path  ^pathcssClass: arg1  cssClass := arg1hash  ^(self key hash bitXor: self domain hash) bitXor: self path hashrequest: arg1 onAnswer: arg2  self request: arg1 default: nil onAnswer: arg2utf8String  ^self asString: #(195 156 98 195 168 114 115 116 114 195 174 195 177 103 195 169)renderCogValuesOn: arg1  self renderLabel: 'Size of machine code zone' value: (self printMemory: (self vm parameterAt: 46)) on: arg1.  self renderLabel: 'Desired size of machine code zone' value: (self printMemory: (self vm parameterAt: 47)) on: arg1.  self renderLabel: 'Compiled code compactions since startup' value: (self vm parameterAt: 62) on: arg1.  self renderLabel: 'Time spent on compiled code compactions since startup' value: (self printMilliSeconds: (self vm parameterAt: 63)) on: arg1useXSendfile  ^self preferenceAt: #useXSendfilehasAdaptor  ^self adaptor isNotNilbytes  ^value * multiplierisSeasideField: arg1  ^arg1 notEmpty and: [ arg1 first = $_ or: [ arg1 allSatisfy: [:arg2 |  arg2 isDigit ] ] ]labels  ^self optionsopenDocument: arg1 context: arg2  | tmp1 |  self fullDocument ifFalse: [ ^self ].  tmp1 := self rootClass context: arg2.  self rootBlock value: tmp1.  arg1 open: tmp1options: arg1  options := arg1renderSingleSelectionOptionalOn: arg1  self renderLabel: 'Single Selection (Optional)' input: [ arg1 select           beOptional;           list: self elements;           optionalLabel: '(none)';           selected: singleSelectionOptional;           callback: [:arg2 |  singleSelectionOptional := arg2 ] ] output: singleSelectionOptional printString on: arg1onRender: arg1  renderBlock := arg1isOverride  ^self expression isKindOf: WAValueExpressionrestart  self manager restart: selfheadElements: arg1  headElements := arg1resourceUrl: arg1  resourceUrl := arg1password: arg1  ^self addAttribute: (WAPasswordAttribute key: arg1)contentType  ^contentTypestopped  status := #stoppedrenderContentOn: arg1  arg1 listItem     passenger: self;     with: [ arg1 div           class: 'view';           with: [ arg1 checkbox                 class: 'toggle';                 callback: [:arg2 |  self done: arg2 ];                 value: done.              arg1 label: description.              arg1 button class: 'destroy' ].        arg1 textInput           class: 'edit';           style: 'display:none';           callback: [:arg2 |  self description: arg2 ];           value: description ]configurationComponent  ^WARegistryEditor on: selfvalueForField: arg1  ^arg1 isEmptyOrNil ifTrue: [ nil ] ifFalse: [ WAUrl absolute: arg1 ]bufferedStream: arg1  bufferedStream := arg1output  ^self brush: WAOutputTag newgreaseNext: arg1 putAllFast: arg2 startingAt: arg3  | tmp1 tmp2 |  tmp1 := arg3.  tmp2 := ByteString findFirstInString: arg2 inSet: table startingAt: tmp1.  (tmp2 = 0 or: [ tmp2 = (arg3 + arg1) ]) ifTrue: [ ^stream greaseNext: arg1 putAll: arg2 startingAt: arg3 ].  [ tmp2 >= (arg3 + arg1) ifTrue: [ ^stream greaseNext: arg3 + arg1 - tmp2 + 1 putAll: arg2 startingAt: tmp1 ].  tmp2 > tmp1 ifTrue: [ stream greaseNext: tmp2 - tmp1 putAll: arg2 startingAt: tmp1 ].  delegate nextPut: (arg2 at: tmp2).  tmp1 := tmp2 + 1.  tmp2 := ByteString findFirstInString: arg2 inSet: table startingAt: tmp1.  tmp2 = 0 or: [ tmp2 >= (arg3 + arg1) ] ] whileFalse.  tmp1 >= (arg3 + arg1) ifFalse: [ stream greaseNext: arg3 + arg1 - tmp1 putAll: arg2 startingAt: tmp1 ]choose: arg1  self answer: arg1priority  ^5renderAddFileOn: arg1  | tmp1 tmp2 tmp3 |  tmp3 := GRCodec allCodecs.  arg1 form     multipart;     with: [ arg1 div: [ arg1 text: 'Add file: '.              arg1 fileUpload                 size: 40;                 callback: [:arg2 |  tmp1 := arg2 ].              arg1 space.              arg1 text: 'with encoding: '.              arg1 select                 list: (tmp3 sorted: [:arg3 :arg4 |  arg3 name <= arg4 name ]);                 labels: [:arg5 |  arg5 name ];                 selected: (tmp3 detect: [:arg5 |  arg5 name = 'utf-8' ] ifNone: [ nil ]);                 callback: [:arg5 |  tmp2 := arg5 ].              arg1 break.              arg1 submitButton                 value: 'Add';                 callback: [ self addFile: tmp1 withEncoding: tmp2 ] ] ]register: arg1 at: arg2  arg2 ifNil: [ WAError signal: 'Registration key cannot be nil.' ].  handlers at: arg2 put: (arg1           setParent: self;           yourself).  ^arg1isSession  ^trueonMouseOver: arg1  self document scriptGenerator event: 'mouseover' do: arg1 on: selfdestroy  super destroy.  externalStream := nillibrary: arg1  library := arg1navigation  ^self tag: 'nav'isCollectionAttribute  ^trueinitializeWithKey: arg1  self initialize.  key := arg1toPresenterSendRoot: arg1  (WAVisiblePresenterGuide client: (WAUpdateRootVisitor root: arg1)) start: self presentersummary: arg1  self attributes at: 'summary' put: arg1type  ^'radio'testGarbageCollect  self shouldnt: [ GRPlatform current seasideGarbageCollect ] raise: MessageNotUnderstoodrequestWithMethod: arg1  ^WARequest method: arg1 uri: '/app/oneo'selected: arg1  self checked: arg1year: arg1  year contents: (arg1 greaseInteger ifNil: [ 1900 ])testCompileByteArrayAgain  | tmp1 tmp2 |  tmp1 := WATestingMetadataFileLibrary default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoJpeg).  tmp3 := (1 to: 255) asByteArray.  tmp2 := WAFile new     contentType: WAMimeType imageJpeg;     contents: tmp3;     fileName: 'demo.jpeg';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoJpeg).  tmp4 := tmp1 perform: #demoJpeg.  self assert: tmp4 contents value = tmp3.  tmp5 := tmp1 perform: #demoJpeg.  self assert: tmp4 contents value = tmp5 contents value.  tmp3 := (1 to: 255) reverse asByteArray.  tmp2 := WAFile new     contentType: WAMimeType imageJpeg;     contents: tmp3;     fileName: 'demo.jpeg';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoJpeg).  tmp4 := tmp1 perform: #demoJpeg.  self assert: tmp4 contents value = tmp3.  tmp5 := tmp1 perform: #demoJpeg.  self assert: tmp4 contents value = tmp5 contents value ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoJpeg) ]includesUnsafeCharacter: arg1  ^(ByteString findFirstInString: arg1 inSet: table startingAt: 1) ~= 0headElements  ^headElementstestKeyboardAttributes  self assert: [:arg1 |  arg1 anchor accessKey: $a ] gives: '<a accesskey="a"></a>'.  self assert: [:arg1 |  arg1 anchor tabIndex: 3 ] gives: '<a tabindex="3"></a>'renderDispatcherOn: arg1  arg1 table: [ self renderRow: self dispatcher named: '.' on: arg1.        self dispatcher isRoot ifFalse: [ self renderRow: self dispatcher parent named: '..' on: arg1 ].        self handlers keys sorted do: [:arg2 |  self renderRow: (self dispatcher handlers at: arg2) named: arg2 on: arg1 ] ]requestWithMethod: arg1  ^WARequest method: arg1 uri: '/'testLastAddedOverrides  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 |  tmp1 := self basicSystemConfiguration.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp2;     yourself.  tmp3 at: #a put: 2.  tmp4 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp4 at: #a put: 1.  tmp5 := WAUserConfiguration new     addParent: tmp4;     yourself.  tmp6 := WAUserConfiguration new     addParent: tmp3;     addParent: tmp5;     yourself.  tmp7 := WAUserConfiguration new     addParent: tmp5;     addParent: tmp3;     yourself.  self assert: (tmp1 at: #a) = #default.  self assert: (tmp2 at: #a) = #default.  self assert: (tmp3 at: #a) = 2.  self assert: (tmp4 at: #a) = 1.  self assert: (tmp5 at: #a) = 1.  self assert: (tmp6 at: #a) = 1.  self assert: (tmp7 at: #a) = 2tag  ^'textarea'renderMeterOn: arg1  arg1 heading     level2;     with: '<meter>'.  arg1 meter     min: 1;     max: 100;     value: 75;     title: 'test pass rate';     with: '75%'.  arg1 break.  arg1 meter     min: 1;     max: 100;     low: 20;     high: 80;     optimum: 70;     value: 66;     title: 'humidity';     with: '66%'mimeType: arg1  mimeType := arg1 isNil ifFalse: [ arg1 seasideMimeType ] ifTrue: [ WAMimeType applicationOctetStream ]fileName  ^self isWindowsPath ifTrue: [ fileName copyAfterLast: $\ ] ifFalse: [ fileName ]renderInformCheeseCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternUnary;           with: 'informCheese'.        arg1 break.        arg1 span           class: #self;           with: '    self'.        arg1 text: ' inform: '.        arg1 span           class: #string;           with: '''Your favorite is '''.        arg1 text: ', '.        arg1 span           class: #instanceVar;           with: 'cheese'.        arg1 text: ','.        arg1 span           class: #string;           with: '''.'''.        arg1 break ]headerAt: arg1  ^self headers at: arg1comment  ^commentautosave: arg1  self attributeAt: 'autosave' put: arg1priority  ^900sortOrder  ^2postCopy  super postCopy.  handlers := handlers valuesCollect: [:arg1 |  arg1 copy           setParent: self;           yourself ]priority  ^100parents  ^Array with: WAApplicationConfiguration instancemarkDiscardingResultOf: arg1  arg1 on: WAMarkerRequest do: [:arg2 |  arg2 resume: thisContext home ]priority  ^0attributes: arg1  arg1 ifNil: [ ^self ].  arg1 keysAndValuesDo: [:arg2 :arg3 |  self attribute: arg2 with: arg3 ]testBag  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := Bag with: 1 with: 2.  tmp2 := tmp1 snapshotCopy.  tmp1 add: 3.  tmp3 := tmp1 snapshotCopy.  tmp1 remove: 1.  tmp4 := tmp1 snapshotCopy.  tmp1 restoreFromSnapshot: tmp2.  self assert: tmp1 size equals: 2.  self assert: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self deny: (tmp1 includes: 3).  tmp1 restoreFromSnapshot: tmp3.  self assert: tmp1 size equals: 3.  self assert: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self assert: (tmp1 includes: 3).  tmp1 restoreFromSnapshot: tmp4.  self assert: tmp1 size equals: 2.  self deny: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self assert: (tmp1 includes: 3).  tmp1 add: 4.  tmp1 restoreFromSnapshot: tmp4.  self assert: tmp1 size equals: 2.  self deny: (tmp1 includes: 1).  self assert: (tmp1 includes: 2).  self assert: (tmp1 includes: 3).  self deny: (tmp1 includes: 4)testAnchorAttributes  self assert: [:arg1 |  arg1 anchor charset: 'utf-8' ] gives: '<a charset="utf-8"></a>'.  self assert: [:arg1 |  arg1 anchor name: 'foo' ] gives: '<a name="foo"></a>'.  self assert: [:arg1 |  arg1 anchor relationship: 'home' ] gives: '<a rel="home"></a>'.  self assert: [:arg1 |  arg1 anchor           relationship: 'home';           relationship: 'parent' ] gives: '<a rel="home parent"></a>'.  self assert: [:arg1 |  arg1 anchor reverse: 'home' ] gives: '<a rev="home"></a>'.  self assert: [:arg1 |  arg1 anchor           reverse: 'home';           reverse: 'parent' ] gives: '<a rev="home parent"></a>'.  self assert: [:arg1 |  arg1 anchor target: '_new' ] gives: '<a target="_new"></a>'.  self assert: [:arg1 |  arg1 anchor type: 'text/plain' ] gives: '<a type="text/plain"></a>'autofocus  ^autofocusinitializeWithManager: arg1  self initialize.  manager := arg1initializeOn: arg1  self initialize.  handler := arg1.  filterEditor := WAFilterAttributeEditor new     handler: handler;     group: #filters;     parent: self;     yourself.  arg1 configuration isNil ifFalse: [ configurationEditor := arg1 configuration configurationComponent.        configurationEditor parent: self.        configurationEditor onAnswer: [ self answer ] ]renderContentOn: arg1  arg1 paragraph: 'The following two anchors should trigger a 3 step flow. Backtracking and spawning of windows should properly work.'.  arg1 paragraph: [ arg1 anchor           callback: [ self go ];           with: 'Go' ].  arg1 paragraph     style: 'color: red; font-weight: bold';     with: 'WARNING: FOLLOWING SECTION IS FOR DEVELOPERS ONLY'.  arg1 paragraph: [ arg1 text: 'The "Go with ensure" test is '.        arg1 span           style: 'color:red; font-weight:bold';           with: 'expected to fail'.        arg1 text: ' right now, as the ensure fires during rendering. The ensure does not survive across continuations at the present time.' ].  arg1 paragraph: [ arg1 anchor           callback: [ self ensure ];           with: 'Go with ensure' ]requestFieldsFor: arg1  self subclassResponsibilityclear  self cache clearrenderHtmlTextOn: arg1  self renderInline: [:arg2 |  arg2 html: 'abcdefghijklmnopqrstuvwxyz&amp;0123456789' ] factor: 1 / 50 key: #nativeText on: arg1toggleHalos  showHalos contents: showHalos contents notparseCharacter  | tmp1 |  (tmp1 := stream next) = $\ ifFalse: [ ^tmp1 ].  (tmp1 := stream next) = $" ifTrue: [ ^tmp1 ].  tmp1 = $\ ifTrue: [ ^tmp1 ].  tmp1 = $/ ifTrue: [ ^tmp1 ].  tmp1 = $b ifTrue: [ ^Character backspace ].  tmp1 = $f ifTrue: [ ^Character newPage ].  tmp1 = $n ifTrue: [ ^Character lf ].  tmp1 = $r ifTrue: [ ^Character cr ].  tmp1 = $t ifTrue: [ ^Character tab ].  tmp1 = $u ifTrue: [ ^self parseCharacterHex ].  self error: 'invalid escape character \' , (String with: tmp1)execute  self session unregister.  self requestContext redirectTo: self application urltestLangugeOnly  | tmp1 |  tmp1 := WALocale fromString: 'de'.  self assert: tmp1 language = 'de'.  self assert: tmp1 country isNil.  self assert: tmp1 greaseString = 'de'list  ^list ifNil: [ list := OrderedCollection new ]addCookieWithValue: arg1 to: arg2  arg2 response addCookie: (arg2 newCookie           key: self keyCookieName;           value: arg1;           discard: true;           sameSite: 'Strict';           comment: 'the Seaside Session Cookie';           commentUrl: 'https://github.com/SeasideSt/Seaside/wiki/Session-Cookie';           yourself)initialize  super initialize.  main := self message: 'Root Component'testMultiValuesCallback  | tmp1 tmp2 tmp3 tmp4 |  tmp4 := Dictionary new.  tmp2 := '1'.  tmp3 := '2'.  tmp4 at: tmp2 greaseInteger put: '1a'.  tmp4 at: tmp3 greaseInteger put: '2a'.  tmp1 := registry store: (WAMultipleValuesCallback on: [:arg1 |  log := arg1 ] values: tmp4).  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: nil;                 yourself) ] raise: WARenderNotification.  self assert: log isEmpty.  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: '';                 yourself) ] raise: WARenderNotification.  self assert: log isEmpty.  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: tmp2;                 yourself) ] raise: WARenderNotification.  self assertLog: #('1a').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 add: tmp2;                 at: tmp1 add: tmp3;                 yourself) ] raise: WARenderNotification.  self assertLog: #('1a' '2a')port: arg1  port := arg1initializeOn: arg1 table: arg2  self initializeOn: arg1.  table := arg2initialize  super initialize.  navigation := WASimpleNavigation new.  WAStatusItem sortedConcreteSubinstances do: [:arg1 |  arg1 isSupported ifTrue: [ navigation add: arg1 label: arg1 label ] ].  navigation selectFirsttype: arg1  self attributeAt: 'type' put: arg1width: arg1  self attributes at: 'width' put: arg1testPathConsumption  dispatcher := WADispatcher new.  handler := dispatcher register: WANextUnconsumedPathElementRequestHandler new at: 'tweets'.  [ dispatcher handle: self requestContext ] on: WAResponseNotification do: [:arg1 |   ].  self assert: handler nextUnconsumedPathElement = 'kentbeck'initializeOn: arg1  self initialize.  component := WAConfigurationBrowser on: arg1testInternalError  | tmp1 |  tmp1 := self createRequestContext.  [ self handlerClass internalError: WATestError new context: tmp1 ] on: WAResponseNotification do: [:arg1 |  self assert: (tmp1 response isKindOf: WAResponse).        self assert: tmp1 response status = 500.        ^self ].  self assert: falsetype  ^'week'items  ^itemskeyAtValue: arg1 ifAbsent: arg2  self subclassResponsibilityinitializeWithContext: arg1  self initialize.  context := arg1ie55  self ie: '5.5'label  ^'GC'testRootScript  self assertRoot: [:arg1 |  arg1 javascript resourceUrl: 'main.js' ] gives: '<script type="text/javascript" src="' , self resourceBaseUrl , 'main.js"></script>'testNoHandlerFoundForDocumentHandlerKey  | tmp1 tmp2 |  tmp1 := self requestContext.  strategy addKey: 'The_Birthday_Massacre' toUrl: tmp1 request uri copy.  tmp2 := false.  [ strategy noHandlerFoundForKey: 'The_Birthday_Massacre' in: self newApplication context: tmp1 ] on: WAResponseNotification do: [:arg1 |  tmp2 := true ].  self assert: tmp2.  self assertNotFound: tmp1asSpecCommand  ^super asSpecCommand     iconName: #smallQuit;     yourselfdateClass  ^DatekeyCookieName  ^'JSESSIONID'initialize  super initialize.  task := WADelegationTask newbeComponent  dialog := falsesetStringBody: arg1  self setStringBody: arg1 wrap: falsetestImageTag  self assert: [:arg1 |  arg1 image resourceUrl: 'logo.jpeg' ] gives: '<img alt="" src="' , self resourceBaseUrl , 'logo.jpeg"/>'createHandlers  ^Array with: (WARegistry new           cache: WAPredictableCache new;           yourself)hour: arg1  hour := arg1renderTreeOn: arg1  arg1 unorderedList: [ self renderNode: self root on: arg1 ]renderHeadingsOn: arg1  arg1 heading     level2;     with: self library namebidirectional: arg1  self bidirectional with: arg1multicounter  ^multicounter ifNil: [ multicounter := multicounter := WAMultiCounter new ]renderContentOn: arg1  | tmp1 tmp2 tmp3 |  tmp2 := self fullList.  tmp3 := (tmp2 size min: 30) max: 5.  arg1 div     class: 'groupContent';     with: [ arg1 heading           level2;           with: 'Configure attribute: ' , attribute key.        arg1 form: [ self renderActionsOn: arg1.              arg1 paragraph.              arg1 table: [ arg1 tableRow: [ arg1 tableData                             verticalAlign: 'top';                             with: [ arg1 label: 'Available'.                                arg1 break.                                arg1 multiSelect                                   list: tmp2;                                   selected: selections;                                   size: tmp3;                                   callback: [:arg2 |  self selections: arg2 ] ].                          arg1 tableData                             verticalAlign: 'middle';                             with: [ self renderMoveActionsOn: arg1 ].                          arg1 tableData                             verticalAlign: 'top';                             with: [ arg1 label: 'Current'.                                arg1 break.                                tmp1 := self currentList.                                tmp1 isEmpty ifTrue: [ arg1 text: '(empty)' ] ifFalse: [ arg1 multiSelect                                         list: tmp1;                                         disabled: self isWriteable not;                                         selected: selectionsCurrent;                                         labels: [:arg3 |  (self optionForValue: arg3 value) greaseString , ' [' , arg3 key greaseString , ']' ];                                         size: tmp3;                                         callback: [:arg2 |  self selectionsCurrent: arg2 ] ] ].                          arg1 tableData                             verticalAlign: 'middle';                             with: [ self renderMoveUpAndDownOn: arg1 ] ] ].              arg1 submitButton                 callback: [ self answer ];                 with: 'OK' ] ]callback: arg1  self name: (self storeCallback: (WAImageCallback on: arg1))testPreFetchIsForbidden  | tmp1 tmp2 |  tmp2 := self requestWithMethod: 'GET'.  tmp2 headers at: 'x-moz' put: 'prefetch'.  self assert: tmp2 isPrefetch.  tmp1 := WARequestContext request: tmp2 response: WABufferedResponse new.  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp1 response status = WAResponse statusForbiddenonAbort: arg1  self document scriptGenerator event: 'abort' do: arg1 on: selfinitializeWithStream: arg1 codec: arg2  super initializeWithStream: arg1 codec: arg2.  xmlEncoder := GRPlatform current xmlEncoderOn: arg1.  urlEncoder := GRPlatform current urlEncoderOn: arg1 codec: arg2label  ^'JIT'renderNestedSelectionOn: arg1  | tmp1 |  self renderLabel: 'Nested Selection' input: [ tmp1 := arg1 select.        tmp1           callback: [:arg2 |  nestedSelection := arg2 ];           selected: nestedSelection;           with: [ self nestedElements do: [:arg3 |  arg1 optionGroup                       label: arg3 first;                       with: [ arg3 second do: [:arg4 |  arg1 option                                   value: arg4 with: tmp1;                                   with: arg4 ] ] ] ] ] output: nestedSelection printString on: arg1size  ^mutex critical: [ cache size ]assert: arg1 at: arg2 encoding: arg3 quality: arg4  self assert: arg1 at: arg2 charset: arg3 quality: arg4testBasic  | tmp1 |  tmp1 := WAMimeType fromString: 'image/jpeg'.  self assert: tmp1 main = 'image'.  self assert: tmp1 sub = 'jpeg'.  self assert: tmp1 parameters isEmpty.  self assert: tmp1 greaseString = 'image/jpeg'testSettingNilPath  | tmp1 |  tmp1 := WACookie new     key: 'name';     value: 'homer';     path: nil;     yourself.  self assert: tmp1 path equals: '/'.  self assert: tmp1 pathUnencoded equals: '/'.  self assert: tmp1 pathEncoded equals: '/'closeObject  stream nextPut: $}cacheForeverExpiryDate  ^DateAndTime now + (Duration days: 300 hours: 0 minutes: 0 seconds: 0)testCompileByteArray  | tmp1 tmp2 |  tmp1 := WATestingMetadataFileLibrary default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoJpeg).  tmp3 := (1 to: 255) asByteArray.  tmp2 := WAFile new     contentType: WAMimeType imageJpeg;     contents: tmp3;     fileName: 'demo.jpeg';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoJpeg).  tmp4 := tmp1 perform: #demoJpeg.  self assert: tmp4 contents value = tmp3.  self assert: tmp4 mimeType = tmp2 contentType.  self assert: tmp4 filepath = tmp2 fileName.  tmp5 := tmp1 perform: #demoJpeg.  self assert: tmp4 contents value = tmp5 contents value ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoJpeg) ]renderLoadFromUrlOn: arg1  arg1 heading     level2;     with: 'Load version from URL'.  arg1 form: [ arg1 div: [ arg1 textInput                 size: 60;                 value: 'http://';                 callback: [:arg2 |  url := arg2 ].              arg1 space.              arg1 submitButton                 callback: [ self loadURL ];                 text: 'Load' ] ]testWriteOn  | tmp1 tmp2 |  tmp1 := DateAndTime year: 2007 month: 11 day: 21 hour: 14 minute: 42 second: 48 offset: (Duration days: 0 hours: 2 minutes: 0 seconds: 0).  tmp2 := WACookie key: 'ikuser' value: '1234'.  self assert: tmp2 rfc6265String = 'ikuser=1234; path=/'.  tmp2 expiry: tmp1.  tmp2 maxAge: 3600.  self assert: tmp2 rfc6265String = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; Max-Age=3600; path=/'.  tmp2 path: '/seaside/counter'.  self assert: tmp2 rfc6265String = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; Max-Age=3600; path=/seaside/counter'.  tmp2 value: nil.  self assert: tmp2 rfc6265String = 'ikuser=; expires=Wed, 21-Nov-2007 12:42:48 GMT; Max-Age=3600; path=/seaside/counter'.  tmp2 value: '1234'.  tmp2 domain: 'www.example.com'.  tmp2 ports: (Array with: 80 with: 433).  self assert: tmp2 rfc6265String = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; Max-Age=3600; domain=www.example.com; path=/seaside/counter'.  tmp2 discard: true.  tmp2 secure: true.  tmp2 httpOnly: true.  self assert: tmp2 rfc6265String = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; Max-Age=3600; domain=www.example.com; path=/seaside/counter; Secure; HttpOnly'.  tmp2 comment: 'FIS Heer username'.  tmp2 commentUrl: 'http://www.example.com/session-cookie.html'.  self assert: tmp2 rfc6265String = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; Max-Age=3600; domain=www.example.com; path=/seaside/counter; Secure; HttpOnly'collapse: arg1  expanded remove: arg1testTableFull  self assert: [:arg1 |  arg1 table: [ arg1 tableCaption: 'title'.              arg1 tableColumnGroup: [ arg1 tableColumn.                    arg1 tableColumn ].              arg1 tableHead: [ arg1 tableRow: [ arg1 tableHeading: 'a1'.                          arg1 tableHeading: 'a2' ] ].              arg1 tableFoot: [ arg1 tableRow: [ arg1 tableData: 'b1'.                          arg1 tableData: 'b2' ] ].              arg1 tableBody: [ arg1 tableRow: [ arg1 tableData: 'c1'.                          arg1 tableData: 'c2' ].                    arg1 tableRow: [ arg1 tableData: 'd1'.                          arg1 tableData: 'd2' ] ] ] ] gives: '<table><caption>title</caption><colgroup><col/><col/></colgroup><thead><tr><th>a1</th><th>a2</th></tr></thead><tfoot><tr><td>b1</td><td>b2</td></tr></tfoot><tbody><tr><td>c1</td><td>c2</td></tr><tr><td>d1</td><td>d2</td></tr></tbody></table>'beStylesheet  self relationship: 'stylesheet'unorderedList  ^self brush: WAUnorderedListTag newfieldSet: arg1  self fieldSet with: arg1children  ^Array with: childcharSet  ^charSet ifNil: [ charSet := self class defaultCharSet ]rows  | tmp1 |  self sortColumn ifNil: [ ^rows ].  tmp1 := self sortColumn sortRows: rows.  ^self isReversed ifTrue: [ tmp1 reverse ] ifFalse: [ tmp1 ]isGet  ^(self attributeAt: 'method') = 'get'canRender  ^valueBlock argumentCount > 1contents: arg1  contents := arg1initialize  super initialize.  monthIndex := WAValueHolder with: Date today monthIndex.  year := WAValueHolder with: Date today year.  date := WAValueHolder new.  canSelectBlock := [:arg1 |  true ].  selectBlock := [:arg1 |  self answer: arg1 ]request  ^requestisRegistry  ^truesetAccessTime: arg1  accessTime := arg1.  lastCount := count valuechildren  ^Array with: self tablerenderContentOn: arg1  arg1 paragraph: 'Clicking home should always bring back the root component.'.  arg1 paragraph: [ arg1 anchor           callback: [ main show: (self message: 'Called Component') ];           with: 'call'.        arg1 space.        arg1 anchor           callback: [ main home ];           with: 'home' ].  arg1 render: mainrenderContentPaneOn: arg1  arg1 form     class: 'definition';     with: [ arg1 div: [ arg1 textArea on: #contents of: self.              arg1 break.              arg1 submitButton on: #accept of: self ] ]urlInput  ^self brush: WAUrlInputTag newemphasis: arg1  self emphasis with: arg1addHaloVisitor: arg1  client := client addHaloVisitor: arg1.  ^selftelephone  ^telephonerenderContentOn: arg1  arg1 form     class: 'config';     with: [ arg1 heading: 'Basic Configuration'.        arg1 anchor           class: 'goback';           callback: [ self answer ];           with: '[ go back ]'.        self renderDescriptionOn: arg1.        self renderToolsOn: arg1.        self renderWalkbacksOn: arg1.        self renderServerUrlOn: arg1.        self renderButtonsOn: arg1 ]duration  ^self tally time milliSecondsapply  day  ^dayrenderRowsOn: arg1  self rows keysAndValuesDo: [:arg2 :arg3 |  self renderRowNumber: arg2 item: arg3 on: arg1 ]renderCollectionFieldForAttribute: arg1 on: arg2  self visitAttribute: arg1 on: arg2.  arg2 tableData: [ arg2 anchor           onClick: 'return submitForm(this)';           title: 'Configure collection attribute';           callback: [ self configureCollectionAttribute: arg1 ];           with: 'Configure' ]testAdvanceKey  self assert: registry advanceKey = '1'.  self assert: registry advanceKey = '2'.  self assert: registry advanceKey = '3'renderSeconds  | tmp1 |  tmp1 := canvas textInput     id: (self id isNil ifFalse: [ self id , '-secs' ]);     value: (GRNumberPrinter new           padding: $0;           digits: 2;           print: seconds);     yourself.  self addSecondsCallbackToBrush: tmp1.  tmp1     attributeAt: 'size' put: 2;     attributeAt: 'maxlength' put: 2setUp  attributes := WAHtmlAttributes newtestRenderingDelegation  root onRender: [:arg1 |  arg1 text: 'r' ].  child1 onRender: [:arg1 |  arg1 text: '1' ].  child2 onRender: [:arg1 |  arg1 text: '2' ].  child3 onRender: [:arg1 |  arg1 text: '3' ].  root show: child1.  self assertRenders: '1'.  child1 show: child2.  self assertRenders: '2'.  child2 answer.  self assertRenders: '1'.  root show: child3.  self assertRenders: '3'.  root home.  self assertRenders: 'r'method  ^methodnextKey  ^nextKey greaseStringtestRequestContext  | tmp1 |  self should: [ WAObject new requestContext ] raise: WARequestContextNotFound.  tmp1 := WARequestContext request: nil response: nil.  WACurrentRequestContext use: tmp1 during: [ self assert: WAObject new requestContext == tmp1 ]description: arg1  description := arg1lineBreakOpportunity  ^self brush: WAOptionalBreakTag newupdateRoot: arg1  super updateRoot: arg1.  arg1 style: 'body{font-size:12px;}'attributes  ^self description attributestag  ^children isEmptyOrNil ifTrue: [ 'link' ] ifFalse: [ 'style' ]uiProcess  ^UIManager default uiProcessonWheel: arg1  self document scriptGenerator event: 'wheel' do: arg1 on: selfabbreviated: arg1  self abbreviated with: arg1radioGroup: arg1  ^arg1 value: self radioGrouptestSylesheet  self assertRoot: [:arg1 |  arg1 stylesheet resourceUrl: 'main.css' ] gives: '<link rel="stylesheet" type="text/css" href="' , self resourceBaseUrl , 'main.css"/>'priority  ^500nextUnconsumedPathElement  ^nextUnconsumedPathElementmessageList  ^(selectedMessageCategory isNil ifTrue: [ self selectedClass isNil ifTrue: [ #() ] ifFalse: [ self selectedClass selectors ] ] ifFalse: [ | tmp1 tmp2 |        tmp1 := self selectedClass organization.        tmp2 := (tmp1 respondsTo: #protocolOrganizer) ifTrue: [ tmp1 protocolOrganizer ] ifFalse: [ | tmp3 |              tmp3 := Smalltalk globals class name hasClassNamed: 'ClassOrganization'.              (tmp3 importFrom: self selectedClass organization) protocolOrganizer ].        tmp2 methodsInProtocolNamed: selectedMessageCategory ]) sortedvalue  ^countexpressionAt: arg1 ifAbsent: arg2  self subclassResponsibilityexceptionFilter  ^self application filters detect: [:arg1 |  arg1 isExceptionFilter ] ifNone: [ nil ]title  ^'Memory Allocator'testTestingMethods  | tmp1 tmp2 |  tmp1 := WAHttpVersion major: 1 minor: 0.  tmp2 := WAHttpVersion major: 1 minor: 1.  self assert: tmp1 isHttp10.  self deny: tmp2 isHttp10.  self assert: tmp2 isHttp11.  self deny: tmp1 isHttp11peek  ^path firstwriteCommentOn: arg1  self comment isNil ifTrue: [ ^self ].  arg1 nextPutAll: '; Comment='.  self write: self comment asQuotedStringOn: arg1testIsGet  self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.  self assert: [:arg1 |  self assert: arg1 form get isGet ] gives: '<form accept-charset="utf-8" method="get" action="/"><div></div></form>'setUp  url := WAUrl newstates  ^Array with: sortColumnhandler  ^self next handlermap  ^self brush: WAImageMapTag newdefaultAction  ^nilbeIndex  self relationship: 'index'linkSelector: arg1  linkSelector := arg1boolean: arg1  self document stream nextPutAll: (arg1 ifTrue: [ 'true' ] ifFalse: [ 'false' ])renderInline: arg1 factor: arg2 key: arg3 on: arg4  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10 tmp11 tmp12 tmp13 tmp14 |  tmp14 := self class scale.  tmp3 := 0.  tmp13 := 200.  tmp5 := referenceDict at: arg3 ifAbsent: [ 'Undefined' -> 100000 ].  tmp6 := tmp5 key.  tmp7 := tmp5 value.  tmp12 := WriteStream on: String new.  tmp10 := builder documentClass on: tmp12 codec: builder codec.  tmp9 := WARenderContext new.  tmp9 document: tmp10.  tmp9     actionUrl: builder actionUrl;     resourceUrl: builder resourceUrl.  tmp11 := builder rendererClass context: tmp9.  builder openDocument: tmp10 context: tmp9.  arg4 div     class: 'bench';     with: [ arg4 heading: tmp6.        tmp1 := Time millisecondClockValue.        tmp2 := tmp1 + tmp13.        [ Time millisecondClockValue < tmp2 ] whileTrue: [ tmp3 := tmp3 + 1.              tmp11                 render: arg1;                 flush ] ].  builder closeDocument: tmp10.  tmp8 := (tmp3 / tmp7 * (10000 / tmp13)) rounded.  tmp4 := self colorFor: tmp8.  duration := duration + tmp8.  arg4 div     class: 'spi';     with: [ arg4 big: tmp8 greaseString , ' SPI'.        arg4 span           class: 'iteration';           with: '(' , tmp3 greaseString , ' iterations)'.        arg4 break.        arg4 div           class: 'rect';           style: 'background:' , tmp4 , ';width:' , (tmp8 * tmp14) greaseString , 'px' ].  arg4 div style: 'clear:both'writePathQuoted: arg1 on: arg2  pathEncoded isNil ifTrue: [ ^self ].  arg2 nextPutAll: '; path='.  self write: pathEncoded quoted: arg1 on: arg2createString: arg1  ^arg1targetParent  self target: '_parent'close  closed ifTrue: [ ^self ].  closed := true.  self with: nilupdateUrl: arg1  super updateUrl: arg1.  string isNil ifTrue: [ ^self ].  arg1 addToPath: string.  arg1 fragment: stringonUpdateUrl: arg1  updateUrlBlock := arg1onTimeUpdate: arg1  self document scriptGenerator event: 'timeupdate' do: arg1 on: selfclear  dictionary removeAllfindEntryOrNilWithKey: arg1 hash: arg2 index: arg3  | tmp1 |  tmp1 := keyTable at: arg3.  [ tmp1 isNil ] whileFalse: [ (tmp1 keyHash = arg2 and: [ tmp1 key = arg1 ]) ifTrue: [ | tmp2 |              tmp2 := tmp1 byAccessListEntry.              self expunge: tmp2.              self addToAccessEnd: tmp2.              ^tmp1 ] ifFalse: [ tmp1 := tmp1 next ] ].  ^nillocalAttributeAt: arg1 ifAbsent: arg2  ^self attributes at: arg1 ifAbsent: arg2hasSelection  ^dateSelectionStart notNiltestUpToEnd  | tmp1 |  tmp1 := OrderedCollection new     add: 'tweets';     add: 'kentbeck';     yourself.  self assert: consumer upToEnd = tmp1.  self assert: consumer atEndinitialize  super initialize.  startYear := Date today year - 1.  endYear := Date today year + 5.  self date: self dateClass todaytimeInput5  ^self brush: WATimeInputTag newencodeQueryOn: arg1  | tmp1 |  tmp1 := true.  self queryFields keysAndValuesDo: [:arg2 :arg3 |  tmp1 ifFalse: [ arg1 xmlEncoder nextPut: $& ].        tmp1 := false.        arg1 urlEncoder nextPutAll: arg2.        arg3 isNil ifFalse: [ arg1 nextPut: $=.              arg1 urlEncoder nextPutAll: arg3 greaseString ] ]testEncodedXml  self assert: 'Seaside' xmlEncodedGives: 'Seaside'.  self assert: '<div id="&amp;">' xmlEncodedGives: '&lt;div id=&quot;&amp;amp;&quot;&gt;'haloViewForm  ^self formClass extent: 16 @ 16 depth: 1 fromArray: #(0 0 0 0 132120576 486014976 770965504 1341259776 669253632 467140608 132120576 0 0 0 0 0) offset: 0 @ 0testGenericCodecMacRoman  | tmp1 |  tmp1 := GRCodec forEncoding: 'mac-roman'.  self assert: (tmp1 isKindOf: GRPharoGenericCodec).  self assert: tmp1 name = 'mac-roman'.  self assert: tmp1 url name = 'utf-8'.  self assert: (tmp1 url isKindOf: GRPharoUtf8Codec).  self assert: (tmp1 encode: self latin1String) = self macromanString.  self assert: (tmp1 url encode: self latin1String) = self utf8String.  self assert: (tmp1 decode: self macromanString) = self latin1String.  self assert: (tmp1 url decode: self utf8String) = self latin1Stringparagraph: arg1  self paragraph with: arg1renderHeaderForColumn: arg1 on: arg2  arg2 tableHeading     class: arg1 cssClass;     with: [ arg1 canSort ifTrue: [ arg2 anchor                 callback: [ self sortColumn: arg1 ];                 with: arg1 title ] ifFalse: [ arg2 text: arg1 title ] ]attributeAt: arg1 ifAbsentPut: arg2  ^self attributes at: arg1 ifAbsentPut: arg2testEncodedSupplementaryMultilingualPlaneUrl  | tmp1 |  tmp1 := (Character codePoint: 65930) greaseString.  self assert: tmp1 urlEncodedGives: '%F0%90%86%8A'url: arg1  self attributes at: 'src' put: arg1stopAll  adaptors do: [:arg1 |  arg1 stop ]title  ^titledocumentHandlers: arg1  documentHandlers := arg1initialize  super initialize.  message := WAValueHolder newtestMismatchingWithUrlHandler  | tmp1 tmp2 tmp3 |  registry := self createRegistryWithCookiesEnabled.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: '123'.  tmp1 := self dispatch: tmp2 to: registry.  self assertCookieAddition: tmp1 key: tmp3.  self assertDispatched: tmp1closeTag: arg1  stream     nextPutAll: '</';     nextPutAll: arg1;     nextPut: $>beUnchecked  self selected: falsemovedPermanently  self status: WAResponse statusMovedPermanentlyrenderContentOn: arg1  arg1 heading: 'Upload File'.  self renderExplanationOn: arg1.  self renderUploadOn: arg1.  file isNil ifTrue: [ ^self ].  self renderDownloadLinksOn: arg1.  self renderFileContentsOn: arg1myApplication  ^self parent parent handlervisitBooleanAttribute: arg1  self html select     list: (Array with: true with: false);     selected: (self configuration at: arg1 key);     labels: [:arg2 |  arg1 stringForValue: arg2 ];     callback: [:arg3 |  self configuration takeValue: arg3 forAttribute: arg1 ]newStrategy  ^WAQueryFieldHandlerTrackingStrategy newsmallLogoPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 100 0 0 0 54 8 6 0 0 0 49 164 60 168 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 24 17 73 68 65 84 120 218 236 92 9 148 21 229 149 254 170 234 189 215 251 202 210 64 119 211 208 32 75 55 187 118 179 166 9 155 144 12 98 198 96 4 98 86 3 98 142 209 144 81 102 208 204 28 67 68 19 99 130 70 227 118 100 20 145 132 136 25 69 81 1 9 251 34 13 178 54 251 214 244 10 189 239 111 173 170 185 247 175 191 30 143 103 35 40 29 69 164 206 249 121 239 213 94 247 187 247 251 238 189 127 209 138 105 154 184 190 92 61 139 227 186 9 174 108 81 20 229 162 219 244 25 88 225 241 162 57 230 31 184 155 126 186 105 4 46 117 62 245 186 73 255 53 139 239 135 24 163 106 152 18 29 137 233 135 39 225 9 90 21 71 67 187 14 200 151 180 120 216 182 145 244 37 10 232 211 5 179 23 14 196 120 250 21 205 65 117 213 82 22 135 123 73 73 201 53 9 136 159 1 137 161 47 45 52 122 0 63 110 194 239 230 236 195 199 244 203 203 1 196 251 236 119 32 211 25 192 152 102 160 233 38 224 255 152 229 190 116 13 73 75 75 251 194 175 73 137 140 18 230 24 109 158 217 152 204 61 177 52 56 74 116 32 113 8 50 11 235 241 76 105 61 22 13 137 194 88 163 5 121 141 133 232 239 174 0 34 172 171 247 164 81 246 181 17 245 48 16 148 176 109 109 14 142 56 9 19 84 4 13 38 129 28 32 99 52 190 157 81 139 111 243 58 189 136 194 226 12 133 17 1 86 237 70 33 237 209 142 70 141 250 53 3 67 149 194 202 142 232 148 67 147 67 177 247 189 156 241 105 76 236 254 57 198 38 71 227 73 36 211 175 36 26 141 50 191 234 68 35 213 2 200 40 3 98 250 17 119 25 104 153 11 33 250 188 135 241 117 74 123 213 16 227 171 18 0 179 186 186 58 190 93 187 118 85 246 239 144 125 149 144 97 59 189 61 12 6 197 142 166 166 123 145 164 170 184 205 225 192 173 90 12 70 171 73 136 71 7 75 208 133 98 112 164 16 53 161 153 133 131 70 103 242 132 177 64 221 98 224 105 47 254 180 214 90 203 123 184 29 215 8 5 181 150 48 152 33 251 41 210 200 34 50 8 132 126 62 159 239 73 250 62 140 233 170 172 172 236 189 64 32 112 111 126 126 126 113 102 102 166 74 0 105 81 81 81 154 211 233 12 166 169 186 174 27 94 175 87 111 104 104 208 251 246 237 203 171 12 251 82 49 14 156 34 152 18 225 146 198 231 45 213 118 254 43 43 144 29 210 21 136 186 24 44 207 122 224 159 103 240 214 179 0 125 195 89 166 43 206 5 28 95 97 48 194 61 216 94 12 107 151 243 30 28 18 29 206 202 202 202 129 100 220 117 180 77 99 48 26 2 10 226 29 230 191 105 154 102 18 24 183 165 164 164 56 98 98 98 92 14 135 195 169 170 170 214 210 210 210 141 192 234 79 251 166 211 49 155 163 163 163 183 108 220 184 209 216 176 97 131 125 93 197 244 200 250 80 145 154 225 151 195 39 35 164 89 126 103 186 138 183 114 98 79 1 48 221 131 215 100 100 84 90 107 33 248 240 170 172 114 47 3 12 53 140 126 12 73 39 186 253 157 1 145 251 179 227 69 52 53 53 69 54 55 55 191 71 235 114 223 42 113 224 145 125 14 56 20 3 107 199 121 9 20 34 243 150 150 84 138 138 102 138 142 110 180 207 125 116 124 14 125 246 183 133 95 218 106 39 1 244 64 70 70 198 22 251 158 230 13 66 183 9 169 248 81 102 44 38 102 36 99 40 82 164 241 93 242 142 120 79 94 119 78 222 29 165 193 77 180 110 245 42 44 157 10 252 154 179 43 59 21 254 74 1 210 10 253 240 80 43 42 42 190 69 94 63 204 48 140 143 233 115 211 43 175 188 82 242 200 35 143 152 242 217 120 95 39 81 77 20 109 239 236 241 120 14 54 81 84 140 255 103 4 154 253 38 154 73 74 95 25 234 193 168 142 130 129 166 80 84 112 36 252 150 6 75 50 74 169 142 56 84 175 162 168 137 216 166 157 142 172 120 93 0 67 180 55 102 208 160 65 219 36 248 236 24 9 60 238 238 133 190 63 201 196 212 33 41 184 205 57 134 42 17 54 243 70 26 35 173 187 53 15 82 192 124 68 217 112 6 225 243 33 240 124 45 166 45 0 222 103 41 250 202 69 136 4 36 168 5 117 117 117 233 100 224 103 105 253 216 16 47 174 242 251 253 99 187 119 239 94 176 124 249 114 53 39 39 199 153 144 144 16 225 114 185 162 40 58 198 19 40 75 118 85 171 248 249 78 39 26 125 38 154 8 148 197 195 60 200 75 17 199 206 38 234 122 129 239 107 67 133 134 165 167 29 56 80 167 112 38 4 79 192 132 155 192 251 85 111 47 102 102 122 64 26 180 189 119 239 222 227 36 32 129 144 251 98 210 138 57 53 9 191 239 62 5 223 71 169 52 117 47 73 99 180 167 119 15 80 181 138 118 36 250 42 45 196 169 65 38 38 200 228 216 247 85 76 123 131 116 69 96 44 100 48 74 90 20 60 121 216 129 247 74 133 6 183 39 254 127 153 34 68 25 60 120 176 35 62 62 158 176 112 69 146 161 35 200 251 157 65 161 33 63 12 240 176 20 199 18 26 85 21 96 252 254 144 19 15 239 117 6 193 240 233 38 188 68 53 94 250 124 108 191 137 202 102 31 8 216 225 115 231 206 237 20 146 185 233 82 7 234 153 156 98 77 148 139 95 167 249 142 104 236 35 177 120 21 53 85 207 17 62 20 37 209 93 73 235 73 61 18 84 100 174 180 104 139 213 69 115 92 229 194 125 49 48 212 170 170 170 225 180 207 196 70 162 159 59 182 184 112 206 173 144 7 155 120 39 207 135 1 137 102 238 157 119 222 153 19 23 23 87 64 96 68 52 54 54 206 166 99 70 211 184 201 202 95 77 248 13 11 12 17 85 130 232 21 17 177 175 158 212 240 143 34 77 172 225 237 83 82 253 168 246 42 120 187 88 133 25 32 133 246 123 176 231 156 15 67 137 190 70 142 28 57 132 118 251 80 130 17 90 19 6 146 20 12 67 177 165 12 38 249 126 89 62 138 211 246 226 62 18 36 243 63 129 73 89 52 146 28 232 166 81 60 181 111 33 221 177 10 195 102 199 85 12 132 18 210 252 12 93 39 132 156 104 137 89 25 111 146 241 106 125 10 121 59 153 213 208 17 175 234 226 48 50 110 35 237 51 152 132 252 25 90 49 232 194 107 144 93 13 83 12 152 186 20 107 235 18 139 78 58 100 228 152 120 56 219 143 219 187 6 80 71 70 253 199 105 186 108 192 39 70 65 85 0 67 226 3 160 108 140 1 89 103 59 137 4 70 212 51 38 211 211 73 90 65 159 245 135 225 158 85 136 5 44 222 7 40 197 189 19 216 69 223 159 158 19 64 110 94 0 227 95 6 214 218 81 239 40 45 45 253 210 140 207 141 69 187 151 21 86 77 43 97 21 116 176 56 171 173 173 213 120 33 131 215 177 33 227 136 132 116 73 61 179 123 250 144 30 99 50 24 91 137 82 116 162 160 21 180 79 242 177 38 13 127 43 212 144 95 165 98 80 146 129 158 177 186 160 32 139 174 140 224 253 108 171 84 8 92 203 201 57 130 24 12 190 70 140 66 196 31 208 45 64 200 194 122 128 134 110 128 0 87 67 238 247 194 230 98 19 148 0 149 155 158 58 96 65 53 254 248 126 51 10 100 54 85 41 53 167 102 33 177 216 66 171 14 113 200 228 216 235 248 162 154 123 173 80 144 221 170 48 67 30 200 6 192 206 160 28 36 196 66 24 200 211 7 144 145 19 136 130 246 81 106 90 79 135 237 100 143 156 154 30 208 116 242 230 104 213 192 196 20 75 91 73 112 255 72 222 251 52 103 74 235 207 105 248 159 253 46 2 205 50 242 202 18 21 110 93 17 122 0 35 16 212 15 94 138 91 84 1 46 15 214 13 190 181 83 245 58 54 149 219 251 210 9 12 221 34 61 43 129 80 46 214 78 175 44 194 1 103 19 70 190 239 193 146 63 249 69 20 149 203 226 207 39 105 205 45 53 167 49 36 186 254 245 221 222 86 40 40 188 160 51 194 34 131 133 215 65 53 129 139 184 255 14 250 62 153 206 49 84 138 30 27 155 199 26 250 186 128 12 190 142 182 77 24 209 94 199 187 100 232 131 13 14 12 72 50 65 162 62 149 171 112 222 255 241 131 14 97 124 142 136 72 2 109 96 162 137 245 231 136 226 116 105 92 243 188 168 51 53 49 104 186 16 114 96 248 7 26 138 27 100 6 32 1 137 115 154 24 155 162 83 20 170 28 225 31 133 180 91 46 88 186 149 227 1 250 120 70 214 238 245 161 197 95 152 222 248 191 144 249 144 86 128 208 194 27 121 68 63 156 173 152 60 68 120 208 146 156 156 236 160 28 191 63 21 95 191 161 85 121 246 249 184 22 168 167 52 53 43 193 68 188 211 188 153 86 141 163 107 104 44 234 183 111 118 225 44 61 106 167 72 7 182 221 204 207 44 178 254 132 181 103 85 33 200 12 8 167 172 139 243 188 232 159 96 96 65 129 134 231 143 40 173 220 179 165 29 66 236 9 128 226 6 61 8 68 54 93 119 124 138 129 177 237 13 116 138 208 184 136 220 60 107 214 172 252 16 135 106 101 142 10 103 164 131 249 229 111 227 82 118 115 180 113 22 212 106 70 36 175 35 90 23 68 65 14 42 222 162 220 110 247 80 2 98 0 121 57 177 137 185 45 58 58 58 159 91 21 103 207 158 101 106 90 195 223 203 61 42 94 63 165 97 117 185 138 74 143 101 216 104 205 196 220 236 0 238 200 208 5 149 173 41 215 80 239 167 12 137 156 173 184 89 177 235 155 12 254 44 106 182 142 241 144 93 59 68 24 232 27 227 67 128 236 59 178 157 129 231 185 140 86 100 63 81 214 67 166 12 6 93 124 209 49 179 135 15 217 36 222 35 58 154 220 94 65 157 87 195 190 74 39 210 99 21 36 38 38 142 88 184 112 97 207 57 115 230 28 184 72 148 232 82 23 62 211 226 184 66 207 87 46 210 21 69 120 69 77 30 197 233 231 52 73 65 185 76 65 156 102 218 45 9 2 106 55 1 49 159 130 228 87 12 222 59 37 26 94 60 166 161 154 116 147 189 187 37 192 134 53 209 64 180 242 232 1 13 223 35 193 229 227 153 102 12 105 200 240 34 183 64 214 17 12 74 122 164 143 27 132 92 107 88 5 169 170 73 65 55 47 152 23 49 237 80 161 125 230 102 91 73 19 249 6 150 157 113 224 225 221 116 28 165 190 255 157 229 193 109 164 93 217 217 217 252 28 7 194 158 251 138 22 199 231 4 67 11 241 126 45 36 61 5 213 7 65 10 226 110 41 13 23 113 126 58 101 36 220 243 31 111 87 232 249 167 43 113 168 180 142 232 193 64 110 183 246 200 234 146 48 132 142 123 155 141 114 206 171 226 197 163 10 106 40 208 185 182 152 156 26 160 8 1 222 45 210 133 229 171 13 13 155 43 20 124 163 163 5 166 144 3 161 5 186 48 58 129 42 238 133 211 97 93 106 130 105 221 146 184 54 27 152 53 192 20 62 163 95 48 73 101 165 24 180 158 182 147 22 5 143 121 225 132 100 30 218 161 222 107 136 253 233 217 146 46 195 102 159 31 144 207 64 67 154 45 190 148 253 56 194 186 162 93 233 1 152 130 118 240 122 9 198 255 114 45 208 232 241 227 197 141 71 176 246 80 57 234 90 124 240 248 3 52 116 180 120 253 248 213 248 190 248 217 168 30 226 1 150 156 136 68 45 169 176 151 110 231 7 221 252 152 211 55 32 196 252 221 83 154 48 72 130 211 137 254 137 231 43 110 93 128 98 10 154 33 80 131 128 216 219 108 27 243 122 54 178 74 63 184 177 238 215 21 1 0 131 197 105 172 97 58 97 4 227 91 13 182 118 56 10 139 27 101 18 64 163 119 108 0 236 115 101 101 101 251 219 42 50 46 0 228 18 197 152 217 202 36 143 147 128 112 145 161 211 104 220 203 20 100 119 69 109 175 96 10 162 7 98 97 254 5 131 113 236 108 3 238 95 182 67 0 161 147 209 88 60 125 164 158 94 2 196 79 94 189 114 239 105 252 48 55 93 28 191 182 196 9 159 169 17 221 24 66 96 9 104 49 238 234 30 64 35 233 197 140 27 12 2 197 21 188 69 211 254 151 174 203 128 240 245 5 29 90 245 55 1 64 191 53 7 1 98 136 245 130 177 68 101 46 35 76 15 208 96 91 115 221 225 8 42 252 102 202 198 70 180 15 224 241 125 244 216 58 167 96 94 116 113 121 49 36 209 71 53 8 74 72 67 118 132 101 138 87 14 72 72 195 174 181 98 44 56 75 198 5 36 133 168 26 17 17 225 36 47 115 145 193 103 208 177 255 67 15 40 194 182 172 206 141 67 229 181 40 174 110 70 110 119 166 160 196 33 180 125 5 27 128 35 227 158 215 183 163 222 237 227 169 54 140 235 211 25 57 180 207 95 119 156 196 174 211 85 60 251 131 131 197 85 240 122 189 194 96 53 238 8 4 84 138 10 226 251 191 144 142 68 41 26 166 166 42 120 48 219 210 0 151 75 101 106 250 152 238 227 198 11 82 36 9 200 5 225 204 145 193 12 20 226 241 138 108 159 8 102 101 48 200 186 62 202 224 250 240 91 34 186 106 133 19 109 251 193 102 133 42 127 160 193 203 21 186 95 128 242 96 63 143 184 20 49 66 254 174 93 187 220 33 109 255 54 139 16 45 172 157 253 137 98 140 140 240 49 81 144 85 34 107 26 71 199 12 218 188 144 31 112 253 209 114 44 221 126 10 5 165 181 228 241 186 24 236 253 115 38 100 97 102 94 111 225 129 111 236 60 141 202 70 183 248 158 219 189 3 158 184 253 38 171 133 221 228 65 254 169 138 32 21 112 20 176 193 187 69 249 113 136 110 33 224 16 115 165 248 221 33 23 158 39 96 238 166 172 103 70 15 74 236 137 118 232 190 20 92 144 77 152 65 187 48 40 124 30 72 64 236 17 164 32 138 50 174 55 132 215 147 72 251 125 94 114 6 19 57 148 18 199 19 112 13 1 213 186 39 2 161 65 183 170 243 56 114 144 7 178 124 184 49 137 43 116 243 204 188 121 243 30 178 139 185 11 46 126 133 224 56 66 244 192 121 177 98 140 31 208 227 241 172 166 117 143 210 131 182 183 193 120 114 117 1 86 236 41 34 202 49 130 96 48 13 241 239 199 222 219 143 219 111 234 134 132 40 23 54 31 59 43 168 137 151 161 153 237 131 66 199 235 37 137 11 3 16 253 9 142 191 35 157 50 153 195 17 180 202 42 192 152 207 235 73 220 159 56 26 137 23 79 43 88 150 167 83 1 168 12 65 184 5 4 253 232 193 204 77 156 90 110 170 247 157 23 216 189 53 10 149 23 62 209 40 180 1 241 201 237 127 232 111 224 183 5 46 148 52 25 2 176 62 148 42 143 110 239 195 45 148 88 112 155 134 100 177 118 237 218 181 179 118 238 220 89 39 171 110 189 173 35 132 193 112 81 49 54 32 188 24 59 92 94 39 56 63 171 115 2 226 163 92 19 9 4 206 146 214 51 24 75 63 58 133 183 9 12 174 120 189 4 196 148 129 105 168 105 242 97 197 222 51 2 16 54 242 238 194 74 124 179 79 23 68 145 130 250 200 80 25 237 98 241 61 2 169 193 227 195 31 86 21 96 243 241 115 231 1 145 70 100 240 243 58 4 240 76 180 7 175 145 150 108 169 102 78 96 61 208 4 59 112 205 49 125 139 11 171 198 90 125 43 187 118 176 163 140 143 103 80 24 216 88 135 149 129 113 93 177 135 64 216 83 109 160 214 109 96 201 81 90 225 149 128 208 176 52 74 104 85 97 110 114 84 183 119 243 2 226 60 236 32 124 46 254 174 16 109 146 83 174 91 186 116 233 188 151 94 122 233 140 4 35 16 58 67 217 102 128 48 24 116 241 181 60 207 204 90 240 250 71 39 176 166 160 76 208 12 103 66 209 46 7 30 156 216 15 211 134 102 178 85 88 192 241 218 182 19 66 140 217 243 255 235 91 3 40 26 50 8 60 47 222 220 117 146 67 74 24 121 95 97 5 70 246 232 128 5 183 13 193 244 97 153 24 213 51 5 37 53 45 66 220 247 151 212 200 142 69 88 29 64 131 12 83 52 180 189 217 53 47 213 11 246 195 23 78 184 176 225 156 42 137 193 160 2 205 20 173 146 159 247 214 69 118 21 16 125 41 67 84 213 108 64 54 36 103 84 89 241 14 172 160 253 132 174 80 68 220 178 198 16 244 19 175 18 245 123 45 77 96 42 186 49 137 1 80 27 238 187 239 190 111 255 249 207 127 158 79 244 60 148 103 14 25 84 58 87 1 81 244 174 99 199 142 173 188 255 254 251 119 200 89 114 127 8 32 70 248 235 88 87 4 8 211 20 71 6 131 241 238 190 98 188 176 225 168 224 118 183 47 128 22 159 95 164 165 13 36 198 11 222 219 135 59 114 187 243 49 241 249 133 85 168 105 246 136 72 96 64 24 12 209 21 117 170 86 171 193 176 61 222 202 120 152 182 24 140 109 39 43 48 103 89 190 16 247 184 72 39 198 147 184 191 187 231 244 39 111 202 225 232 122 172 145 82 83 170 140 71 116 48 48 42 197 135 37 167 84 204 251 88 70 2 91 196 39 184 92 52 97 173 48 240 9 129 102 48 228 100 19 58 147 248 27 194 135 253 146 158 24 0 31 158 26 228 193 115 71 84 148 54 27 184 187 167 165 91 148 86 239 218 189 123 119 227 168 81 163 238 149 70 14 205 56 205 144 153 193 64 72 100 132 235 199 149 191 171 36 53 35 175 156 34 227 69 2 131 13 205 96 76 30 152 138 49 189 58 145 174 89 15 90 211 228 198 22 166 24 238 138 82 38 101 233 134 69 87 162 43 122 174 30 175 111 61 102 151 204 178 160 82 133 167 50 197 189 177 179 16 63 123 117 43 129 75 2 25 233 194 107 119 125 3 253 211 146 62 49 165 43 38 137 168 222 152 157 31 129 31 109 115 130 103 3 121 153 70 186 18 52 172 207 141 94 145 45 76 33 100 99 175 72 71 69 22 100 4 130 41 50 101 108 53 19 58 184 49 169 67 75 16 140 46 46 15 22 14 108 65 143 40 31 254 56 216 131 55 136 154 38 164 137 123 172 121 235 173 183 230 74 175 183 223 21 225 222 83 75 216 176 223 203 245 183 181 152 135 82 214 100 254 178 116 199 9 212 18 229 176 199 255 96 120 38 126 57 62 203 42 198 62 62 33 174 21 31 21 133 126 169 137 194 248 236 225 172 29 76 89 44 228 35 30 123 7 197 85 13 118 185 44 210 70 210 28 2 53 67 0 82 76 52 181 240 195 131 176 91 37 175 254 100 20 178 233 92 27 143 158 253 196 115 136 172 236 140 6 195 101 77 177 30 168 83 145 22 173 99 67 41 57 165 223 20 160 164 70 233 98 130 200 231 115 8 28 64 5 158 200 132 52 139 178 104 105 168 170 170 90 152 154 154 250 219 63 13 214 241 239 41 1 74 157 253 232 25 229 21 5 160 215 235 223 79 52 214 66 212 196 117 212 142 55 222 120 99 193 115 207 61 87 28 166 11 8 163 162 214 6 218 18 12 187 14 25 42 154 116 7 203 206 167 173 186 37 140 162 24 27 213 83 212 17 51 134 247 18 212 99 27 141 83 91 191 220 207 2 195 162 169 44 242 250 111 245 75 199 45 131 186 33 179 83 162 0 97 209 150 163 226 28 124 220 84 162 183 108 9 172 149 245 156 31 150 120 42 178 5 110 82 165 14 44 56 160 97 93 177 15 31 20 234 178 22 160 154 38 211 79 247 102 69 142 193 117 131 161 10 109 249 78 154 46 142 119 187 221 59 39 76 152 176 136 223 159 74 78 78 190 107 68 138 146 233 167 100 192 235 85 74 40 170 242 231 206 157 251 235 61 123 246 52 75 227 251 47 66 69 184 8 40 173 173 71 91 2 34 154 124 213 77 94 233 241 6 254 178 254 8 34 169 154 154 58 36 21 15 76 234 47 139 49 23 27 112 23 237 123 147 149 10 203 118 5 25 117 230 55 110 16 153 216 8 210 137 164 152 72 209 8 60 88 222 128 30 157 45 163 177 144 243 190 58 25 45 53 49 38 8 198 202 189 133 82 140 207 103 89 188 244 75 52 176 173 158 64 87 2 40 170 245 162 168 130 51 34 183 136 128 217 125 252 24 211 145 133 95 169 37 173 73 250 110 122 64 0 18 163 234 4 136 149 13 81 17 187 132 141 59 122 244 232 231 39 79 158 188 232 158 123 238 25 121 238 220 185 134 159 254 244 167 161 141 64 219 240 182 48 235 97 41 236 165 170 239 127 201 235 58 76 89 251 200 16 3 123 116 140 195 254 226 26 209 236 99 99 255 126 213 1 188 176 254 48 102 229 221 64 25 82 15 68 69 105 144 111 3 134 191 203 131 7 39 13 128 156 207 192 223 119 158 193 67 111 239 22 158 250 187 239 230 224 251 148 93 109 32 106 18 47 22 16 216 167 43 235 69 228 189 190 237 56 10 138 42 133 62 113 83 144 61 156 211 225 228 88 7 102 147 208 86 29 246 225 80 157 95 136 56 11 241 152 78 30 204 232 22 64 106 12 55 7 29 250 170 85 171 166 79 156 56 241 158 164 184 184 91 239 234 197 209 197 116 232 212 79 156 56 241 147 25 51 102 172 178 189 127 229 202 149 62 26 107 90 233 62 24 97 47 215 125 154 30 124 97 239 74 57 200 112 219 25 144 31 143 236 137 95 254 117 135 168 140 173 215 34 21 212 123 3 248 195 154 67 120 105 243 73 252 109 246 24 12 72 79 190 209 110 81 155 33 93 246 11 186 162 155 142 4 189 189 166 177 197 42 42 253 254 96 189 177 116 235 81 236 57 85 134 67 148 246 246 233 20 139 35 165 53 162 117 18 242 42 142 152 243 94 156 219 140 50 55 123 62 243 127 64 86 223 162 22 216 188 110 221 186 223 208 114 152 198 204 55 223 124 243 165 46 93 186 12 35 144 107 143 30 61 186 99 230 204 153 71 66 232 199 184 8 213 180 166 3 198 151 5 66 56 32 79 145 241 110 159 148 157 218 110 17 137 237 75 27 143 8 177 53 100 115 78 84 185 228 185 211 95 220 128 15 230 220 140 174 84 220 5 233 74 246 46 236 168 97 177 47 170 106 180 140 75 6 236 213 33 154 123 62 24 145 145 136 109 39 42 130 21 249 161 162 10 196 185 52 204 29 215 7 247 255 237 35 196 82 84 204 200 237 129 196 232 72 145 126 210 49 7 18 18 18 114 210 99 35 250 233 58 247 173 180 6 2 98 87 101 101 229 202 105 211 166 45 15 169 3 244 169 83 167 110 166 207 77 97 222 175 135 69 64 107 134 54 191 72 42 186 108 64 162 162 162 42 200 0 247 19 40 243 71 246 236 152 57 130 10 185 173 100 188 231 137 174 152 106 236 42 186 190 217 141 21 187 79 227 222 241 253 100 134 101 136 174 45 223 254 230 227 103 49 34 179 3 30 95 185 199 162 32 50 122 106 82 20 6 119 137 101 129 197 119 6 118 193 182 163 165 242 92 58 114 186 38 227 63 110 206 70 231 132 72 172 188 111 156 0 84 182 198 245 15 63 252 240 161 135 31 126 248 32 123 248 99 143 61 214 157 188 190 126 241 226 197 245 23 169 5 46 22 1 70 136 199 95 174 129 175 138 255 31 174 148 151 151 127 159 62 95 23 243 214 101 117 130 106 250 118 78 16 27 151 80 53 62 111 249 71 242 101 0 3 115 110 238 135 217 99 178 176 227 76 13 126 184 72 190 107 44 189 62 62 194 129 134 22 183 20 104 29 79 79 203 21 141 68 158 39 162 132 32 169 180 182 5 69 213 13 84 60 106 184 161 99 172 160 32 114 132 45 49 49 49 60 141 219 192 233 231 246 237 219 255 50 111 222 188 131 33 198 54 194 166 1 140 16 1 54 46 35 253 52 191 108 163 127 158 9 42 158 175 192 179 235 14 227 149 45 199 133 231 175 252 197 120 164 37 71 99 90 78 6 230 253 125 171 85 144 145 225 123 182 139 20 30 127 83 90 2 226 157 138 16 97 43 75 162 106 222 103 129 17 23 161 137 204 108 112 90 34 211 207 153 53 107 214 204 166 76 103 126 90 114 76 78 106 82 180 72 147 137 126 246 213 212 212 108 188 245 214 91 23 134 100 55 254 144 172 167 53 131 183 86 3 92 170 74 254 202 253 85 4 81 135 136 234 120 235 9 217 23 50 176 159 132 182 75 98 36 54 28 46 177 40 136 6 255 30 212 37 158 189 186 132 142 73 123 242 246 33 152 255 206 30 148 84 55 138 10 185 55 121 253 232 27 58 226 150 129 105 84 20 70 48 13 213 174 94 189 122 246 163 143 62 122 128 198 148 39 158 120 162 107 122 122 122 247 58 90 40 13 61 16 230 237 161 233 103 64 70 133 254 41 70 55 175 21 0 62 65 89 101 101 101 226 33 6 62 178 66 128 193 189 171 142 241 46 12 207 72 194 7 123 78 163 161 185 89 0 242 200 148 65 24 151 149 202 128 188 221 174 93 187 129 78 167 179 187 41 219 221 92 209 159 239 138 42 162 43 186 108 217 178 135 94 126 249 229 162 144 226 203 12 155 137 212 47 145 126 42 215 66 4 124 102 202 162 3 182 211 231 240 193 36 180 235 143 148 139 26 161 232 108 51 138 74 43 172 118 132 75 197 172 177 217 248 102 239 78 124 242 186 165 75 151 62 126 252 248 241 154 167 158 122 106 1 105 195 48 74 83 187 18 56 173 117 69 67 59 162 129 86 184 222 188 68 250 105 94 11 30 255 121 40 235 159 228 213 195 231 140 207 66 121 77 3 10 206 84 8 10 138 35 141 24 147 221 25 211 115 50 209 133 184 159 51 160 247 223 127 127 58 101 60 252 50 176 47 55 55 247 30 105 176 208 105 223 208 76 72 111 165 43 218 218 98 124 30 239 191 90 254 224 64 91 191 138 171 44 95 190 92 27 62 124 248 54 138 140 92 238 158 158 58 91 139 72 205 164 129 32 5 145 144 111 217 180 105 211 111 230 207 159 127 48 164 219 105 132 81 80 40 32 230 231 104 69 124 38 26 250 170 0 242 89 41 203 110 39 104 71 142 28 121 138 64 25 197 85 59 207 41 208 32 249 104 222 85 81 81 97 23 99 54 16 254 16 10 10 229 250 139 85 193 198 149 24 254 235 8 136 253 194 155 248 79 244 207 62 251 108 239 189 123 247 54 146 32 55 132 24 52 16 146 150 126 26 5 125 90 21 220 166 122 112 173 254 157 175 208 87 128 236 55 79 236 119 175 194 171 94 61 172 2 110 83 10 186 14 200 133 148 21 58 212 75 52 226 140 171 33 253 188 150 1 177 23 245 51 122 250 151 106 145 107 21 16 71 24 53 93 206 255 83 190 254 71 26 191 32 64 174 27 251 42 88 254 95 128 1 0 171 136 139 29 158 246 22 153 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytestAddField  url addField: 'x'.  self assert: url greaseString = '/?x'.  url addField: 'y'.  self assert: url greaseString = '/?x&y'.  url addField: 'x'.  self assert: url greaseString = '/?x&y&x'testAnchorUrl  | tmp1 tmp2 |  tmp1 := WAUrl new.  tmp1     host: 'www.seaside.st';     addToPath: 'foo bar&zork<blah';     addField: '1' value: nil;     addField: '2' value: 123;     addField: '3' value: 'foo bar&zork'.  tmp2 := 'http://www.seaside.st/foo%20bar%26zork%3Cblah?1&amp;2=123&amp;3=foo%20bar%26zork'.  self assert: [:arg1 |  arg1 anchor           url: tmp1;           with: tmp1 ] gives: '<a href="' , tmp2 , '">' , tmp2 , '</a>'createRegistry  ^WADispatcher new register: (WARedirectingRegistry new           cache: WABidirectionalCache new;           yourself) at: self registryNametestRemoveDelegation  self assert: root delegations isEmpty.  root show: child1.  root show: child2.  self assert: root delegations size = 2.  root removeDelegation.  self assert: root delegations size = 1.  root removeDelegation.  self assert: root delegations isEmpty.  root removeDelegation.  self assert: root delegations isEmptyrenderContentOn: arg1  self renderSubItemsOn: arg1.  self renderFiltersOn: arg1.  self renderHandlerOn: arg1newHandler  ^WAApplication new     preferenceAt: #charSet put: 'utf-16';     yourselfisDecoration  ^falsebuttons  ^#(yes no)items  ^itemsrenderContentOn: arg1  arg1 heading     level: 2;     with: 'Copy request handler: ' , self handler name.  arg1 form: [ arg1 table: [ arg1 tableRow: [ arg1 tableData                       class: 'label';                       with: 'Name for new request handler: '.                    arg1 tableData: [ arg1 textInput                             value: handler name , '_copy';                             callback: [:arg2 |  name := arg2 ] ] ] ].        arg1 break.        arg1 submitButton           callback: [ self copyHandler ];           with: 'OK'.        arg1 space.        arg1 submitButton           callback: [ self answer: nil ];           with: 'Cancel' ]testCopyWithPathParameterValue  | tmp1 |  url addToPath: 'zork'.  tmp1 := url copy.  url addPathParameterAt: 1 key: 'foo' value: 'bar'.  self assert: url printString = '/zork;foo=bar'.  self assert: tmp1 printString = '/zork'type: arg1  self attributes at: 'type' put: arg1command  ^self brush: WACommandTag newrenderListItem: arg1 labelled: arg2  | tmp1 |  tmp1 := canvas option.  self hasCallback ifTrue: [ tmp1 value: (self valueFor: arg1) ].  titleBlock isNil ifFalse: [ tmp1 title: (self titleFor: arg1) ].  tmp1     selected: (self isSelected: arg1);     disabled: (self isEnabled: arg1) not;     with: arg2select: arg1  selection contents: arg1.  self selectionChangedanchor  ^self brush: WAAnchorTag newpreformatted: arg1  self preformatted with: arg1offset  ^zoom ifTrue: [ self topWindow position ] ifFalse: [ 0 @ 0 ]required  ^requiredseconds: arg1  seconds := [ arg1 asNumber ] on: Error do: [:arg2 |  0 ]typeOrNil  ^self attributeAt: 'type' ifAbsent: [ nil ]inheritedValueForContext: arg1  | tmp1 |  (self parents select: [:arg2 |  arg1 isAttributeInheritedOn: arg2 ]) reverseDo: [:arg2 |  tmp1 := arg2 valueForContext: arg1.        tmp1 notNil ifTrue: [ ^tmp1 ] ].  ^nilclickScript  ^'return confirm("Really delete ' , self handler basicUrl pathStringUnencoded , '?")'initialize  super initialize.  builder := WAHtmlCanvas builderlibraryAt: arg1 ifAbsent: arg2  ^self libraries detect: [:arg3 |  arg3 handlesFolder: arg1 ] ifNone: arg2secondPath  ^secondPathreverse: arg1  self attributes at: 'rev' append: arg1home  self delegations do: [:arg1 |  self removeDecoration: arg1 ]ie7  self ie: '7'errorKeyNotFound  ^nilrender: arg1  ^String streamContents: [:arg2 |  self render: arg1 on: arg2 ]testStrictTransportSecurity  self response strictTransportSecurity: 500 includeSubDomains: true.  self assert: (self response headerAt: 'Strict-Transport-Security') = 'max-age=500; includeSubDomains'.  self response strictTransportSecurity: 500 includeSubDomains: false.  self assert: (self response headerAt: 'Strict-Transport-Security') = 'max-age=500'properties  ^propertiesmessageListIndex: arg1  selectedMethod := self selectedClass >> (self messageList at: arg1).  self changed: #messageListIndexpriority  ^100renderUploadOn: arg1  self renderLabel: 'Upload' input: [ arg1 fileUpload callback: [:arg2 |  upload := arg2 ] ] output: upload printString on: arg1renderRow: arg1 named: arg2 on: arg3  arg3 tableRow: [ arg3 tableData: [ self renderRowName: arg1 named: arg2 on: arg3 ].        arg3 tableData: [ self renderRowDescription: arg1 named: arg2 on: arg3 ].        arg3 tableData: [ self renderRowActions: arg1 named: arg2 on: arg3 ] ]contents  self response flush.  ^self response stream contentsinitialRequest: arg1  super initialRequest: arg1.  initialRequestBlock isNil ifFalse: [ initialRequestBlock value: arg1 ]do: arg1  byKey do: arg1at: arg1 ifAbsent: arg2  ^self fields at: arg1 ifAbsent: arg2isClosed  ^closedopen: arg1  GRPlatform current openDebuggerOn: arg1root: arg1  root := arg1priority  ^400renderTimeOn: arg1  arg1 heading     level2;     with: '<time>'.  arg1 paragraph: [ arg1 text: 'Our first date was '.        arg1 time           datetime: '2006-09-23';           with: 'a saturday'.        arg1 text: '.' ].  arg1 paragraph: [ arg1 text: 'We stopped talking at '.        arg1 time           datetime: '2006-09-24 05:00 -7';           with: '5am the next morning'.        arg1 text: '.' ].  arg1 paragraph: [ arg1 text: 'Many people get up at '.        arg1 time: '08:00'.        arg1 text: '.' ]initialize  super initialize.  todos := OrderedCollection new.  1 to: 5000 do: [:arg1 |  self addTodo: 'Task ' , arg1 greaseString ]defaultRequestHandler  ^WADispatcher defaultmultipart: arg1  arg1 ifTrue: [ self multipart ]forwardedFor  | tmp1 tmp2 |  ^self forwarded ifNotNil: [:arg1 |  tmp1 := arg1 indexOfSubCollection: 'for=' startingAt: 1.        tmp1 = 0 ifTrue: [ tmp1 := arg1 indexOfSubCollection: 'For=' startingAt: 1 ].        tmp1 ~= 0 ifTrue: [ tmp2 := (arg1 indexOfAnyOf: ';,' startingAt: tmp1) - 1.              tmp2 = -1 ifTrue: [ tmp2 := arg1 size ].              arg1 copyFrom: tmp1 + 4 to: tmp2 ] ifFalse: [ nil ] ]callbacks  ^callbacksinitialize  super initialize.  self batchSize: 10.  self currentPage: 1renderContentOn: arg1  arg1 paragraph: 'Clicking the following anchor should replace it with the message "3 seconds" for 3 seconds and then restore it.'.  arg1 paragraph: [ arg1 anchor           callback: [ self go ];           with: 'Start' ]localAttributeAt: arg1 ifPresent: arg2  | tmp1 |  tmp1 := self localAttributeAt: arg1 ifAbsent: [ ^nil ].  ^arg2 value: tmp1asSpecCommand  ^super asSpecCommand     iconName: #remove;     yourselfanswer  self answer: selfcloseBrush  onInitialRequest: arg1  initialRequestBlock := arg1selectionInterval  ^1 to: 1type  ^'hidden'testCookiesDisabledMismatchingWithNoHandlers  | tmp1 tmp2 |  registry := self createRegistry.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: '456'.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1monthHeading  ^self monthName , ' ' , self year greaseStringrenderContentOn: arg1  message contents isNil ifFalse: [ arg1 div           class: 'validation-error';           with: message contents ].  self renderNextOn: arg1renderSingleSelectionOn: arg1  self renderLabel: 'Single Selection' input: [ arg1 select           list: self elements;           titles: [:arg2 |  'Title: ' , arg2 greaseString ];           selected: singleSelection;           callback: [:arg3 |  singleSelection := arg3 ] ] output: singleSelection printString on: arg1messageCategoryList  | tmp1 tmp2 tmp3 |  tmp1 := #'-- all --'.  self selectedClass isNil ifTrue: [ ^Array with: tmp1 ].  tmp2 := self selectedClass organization categories.  (tmp2 notEmpty and: [ tmp2 first = tmp1 ]) ifFalse: [ tmp2 := (Array with: tmp1) , tmp2 ].  tmp3 := (Smalltalk at: #Protocol) defaultName.  ^(tmp2 includes: tmp3) ifTrue: [ (Array with: tmp2 first with: tmp3) , (tmp2 allButFirst copyWithout: tmp3) sorted ] ifFalse: [ (Array with: tmp2 first) , tmp2 allButFirst sorted ]evaluateWithFieldValues: arg1  self evaluateWithArgument: (self valueForField: (arg1 at: 1 ifAbsent: [ nil ]))keyAtValue: arg1 ifAbsent: arg2  ^byValue at: arg1 ifAbsent: arg2onSeeking: arg1  self document scriptGenerator event: 'seeking' do: arg1 on: selftestLangugeAndCountry  | tmp1 |  tmp1 := WALocale fromString: 'de-CH'.  self assert: tmp1 language = 'de'.  self assert: tmp1 country = 'CH'.  self assert: tmp1 greaseString = 'de-CH'.  tmp1 := WALocale fromString: 'de_CH'.  self assert: tmp1 language = 'de'.  self assert: tmp1 country = 'CH'.  self assert: tmp1 greaseString = 'de-CH'increaseKey  nextKey := nextKey + 1renderSideBarJoinTheCommunityOn: arg1  arg1 heading     level: 3;     with: 'Join the community'.  arg1 unorderedList: [ arg1 listItem: [ arg1 text: 'Join the '.              arg1 anchor                 url: 'http://lists.squeakfoundation.org/cgi-bin/mailman/listinfo/seaside';                 with: 'mailing list'.              arg1 text: ' to ask questions and get help.' ] ].  arg1 form     action: 'http://www.google.com/search';     get;     with: [ arg1 hiddenInput           value: 'site:lists.squeakfoundation.org/pipermail/seaside/';           name: 'q'.        arg1 textInput name: 'q'.        arg1 submitButton: 'Search'.        arg1 text: ' the mailing list' ]handlerAt: arg1 ifAbsent: arg2  arg1 isNil ifTrue: [ ^arg2 value ].  ^self handlers at: arg1 ifAbsent: arg2renderExamplesStepOn: arg1  arg1 heading     level3;     with: 'Try out some examples'.  arg1 unorderedList: [ arg1 listItem: [ arg1 anchor                 callback: [ self show: WAWelcomeExampleCounter new ];                 with: 'Counter'.              arg1 text: ', a simple Seaside component.' ].        arg1 listItem: [ arg1 anchor                 callback: [ self show: WAWelcomeExampleMultiCounter new ];                 with: 'Multi-Counter'.              arg1 text: ', showing how Seaside components can be re-used.' ].        arg1 listItem: [ arg1 anchor                 callback: [ self show: WAWelcomeExampleFlow new ];                 with: 'Task'.              arg1 text: ', illustrating Seaside''s innovative approach to application control flow.' ] ]commentUrl  ^commentUrltestCreation  | tmp1 |  tmp1 := WAHttpVersion major: 1 minor: 0.  self assert: tmp1 major = 1.  self assert: tmp1 minor = 0owner  ^owner contentsrenderContentOn: arg1  self renderChooserOn: arg1.  self renderComponentOn: arg1url  ^urlrenderMonthHeadingsOn: arg1  self monthsAndLengthsDo: [:arg2 :arg3 |  self renderHeadingSpacerOn: arg1.        arg1 tableHeading           colSpan: arg3;           class: 'MonthHeading';           with: [ arg1 text: arg2 name.              arg1 space.              arg1 text: arg2 year ] ]value: arg1  value := arg1close: arg1 on: arg2  restoreValues  | tmp1 tmp2 |  tmp1 := values readStream.  [ tmp1 atEnd ] whileFalse: [ tmp2 := tmp1 next.        1 to: tmp2 class instSize do: [:arg1 |  tmp2 instVarAt: arg1 put: tmp1 next ].        1 to: tmp2 size do: [:arg1 |  tmp2 at: arg1 put: tmp1 next ] ]parameterAt: arg1 put: arg2  self parameters at: arg1 put: arg2renderCookiesOn: arg1  self cookies do: [:arg2 |  arg1 tableRow: [ arg1 tableData: arg2 key.              arg1 tableData: arg2 value.              arg1 tableData: arg2 path.              arg1 tableData: arg2 domain.              arg1 tableData: arg2 ports.              arg1 tableData: [ arg1 submitButton                       callback: [ self remove: arg2 ];                       text: 'remove' ] ] ]fileSelectors  ^self fileSelectorsTo: WAFileLibrarymonth  ^monthitems  ^itemsrenderDayHeadingsOn: arg1  self renderHeadingSpacerOn: arg1.  self datesDo: [:arg2 |  arg1 tableHeading           class: 'DayHeading';           with: arg2 dayOfMonth ] separatedBy: [ self renderHeadingSpacerOn: arg1 ]height: arg1  self attributes at: 'height' put: arg1unwindFrom: arg1 to: arg2  arg1 unwindTo: arg2.  arg1 terminateTo: arg2relationship: arg1  self attributes at: 'rel' append: arg1isHttp10  ^version isHttp10libraries  ^configuration asSortedCollection: [:arg1 :arg2 |  arg1 name < arg2 name ]renderChooserOn: arg1  arg1 div     class: 'chooser';     with: [ arg1 form: [ arg1 div: [ arg1 select                       selected: class;                       list: self allClasses;                       onChange: 'submit()';                       callback: [:arg2 |  self class: arg2 ] ] ].        self allSelectors size > 1 ifTrue: [ arg1 form: [ arg1 div: [ arg1 select                             selected: selector;                             list: self allSelectors;                             onChange: 'submit()';                             callback: [:arg2 |  self selector: arg2 ] ] ] ] ]collapsedByDefault  ^falserenderStackOn: arg1  self subclassResponsibilitytestCompileString  | tmp1 tmp2 |  tmp1 := WATestingMetadataFileLibrary default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoTxt).  tmp3 := 'this is a string'.  tmp2 := WAFile new     contentType: WAMimeType textPlain;     contents: tmp3;     fileName: 'demo.txt';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoTxt).  tmp4 := tmp1 perform: #demoTxt.  self assert: tmp4 contents value = tmp3.  self assert: tmp4 mimeType = tmp2 contentType.  self assert: tmp4 filepath = tmp2 fileName.  tmp5 := tmp1 perform: #demoTxt.  self assert: tmp4 contents value == tmp5 contents value ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoTxt) ]test10  | tmp1 |  tmp1 := WARequest method: 'GET' uri: '/' version: WAHttpVersion http10.  self assert: tmp1 isGet.  self assert: tmp1 isHttp10.  self deny: tmp1 isSslbeCheckbox  self type: 'checkbox'cacheDuration  ^self class defaultCacheDurationacceptCharset  ^WAAcceptCharset fromString: (self headerAt: 'accept-charset' ifAbsent: [ ^nil ])basicNextPut: arg1  self nextPut: arg1handlersDo: arg1  self keysAndHandlersDo: [:arg2 :arg3 |  arg1 value: arg3 ]initialize  super initialize.  decoration := WAValueHolder with: selfinput  ^inputrenderCacheReplaceOn: arg1  arg1 paragraph: [ arg1 button           class: 'large';           title: 'Replace the cache';           callback: [ self replaceCache ];           with: 'Replace cache' ]children  ^#()testIsPrefetch  | tmp1 tmp2 |  tmp1 := WARequest method: 'GET' uri: '/foo'.  self deny: tmp1 isPrefetch.  tmp2 := Dictionary new.  tmp2 at: 'x-moz' put: 'prefetch'.  tmp1 setHeaders: tmp2.  self assert: tmp1 isPrefetchchildren  ^Array with: componenttestStringSeasideMimeDocumentType  | tmp1 tmp2 |  tmp2 := WAMimeType main: 'text' sub: 'csv'.  tmp1 := 'foo,bar' seasideMimeDocumentType: tmp2.  self assert: tmp1 mimeType = tmp2.  self assert: tmp1 contents = 'foo,bar'stop  self manager stop: selfsize: arg1  self attributes at: 'size' put: arg1isActive  ^self application preferenceAt: #sessionAllowTerminationtestGenericCodecUtf16be  | tmp1 tmp2 |  tmp1 := GRCodec forEncoding: 'utf-16'.  self assert: (tmp1 isKindOf: GRPharoGenericCodec).  tmp2 := self asString: #(254 255).  self assert: tmp1 name = 'utf-16'.  self assert: tmp1 url name = 'utf-8'.  self assert: (tmp1 url isKindOf: GRPharoUtf8Codec).  self assert: (tmp1 encode: self latin1String) = self utf16beString.  self assert: (tmp1 url encode: self latin1String) = self utf8String.  self assert: (tmp1 decode: self utf16beString) = self latin1String.  self assert: (tmp1 decode: tmp2 , self utf16beString) = self latin1String.  self assert: (tmp1 url decode: self utf8String) = self latin1StringbeCss  self type: WAMimeType textCssbasicStart  self subclassResponsibilitydocumentOpened: arg1  arg1 flushflush  super flush.  currentBrush isNil ifTrue: [ ^self ].  currentBrush close.  currentBrush := nillabel: arg1  label := arg1addDayCallbackToBrush: arg1  self hasCallback ifFalse: [ ^self ].  arg1 callback: [:arg2 |  self day: arg2 ]drawFunction  ^'function drawShape(){  // get the canvas element using the DOM  var canvas = document.getElementById(''tutorial'');  // Make sure we don''t execute when canvas isn''t supported  if (canvas.getContext){    // use getContext to use the canvas for drawing    var ctx = canvas.getContext(''2d'');    // Draw shapes    roundedRect(ctx,12,12,150,150,15);    roundedRect(ctx,19,19,150,150,9);    roundedRect(ctx,53,53,49,33,10);    roundedRect(ctx,53,119,49,16,6);    roundedRect(ctx,135,53,49,33,10);    roundedRect(ctx,135,119,25,49,10);    // Character 1    ctx.beginPath();    ctx.arc(37,37,13,Math.PI/7,-Math.PI/7,false);    ctx.lineTo(34,37);    ctx.fill();    // blocks    for(i=0;i<8;i++){      ctx.fillRect(51+i*16,35,4,4);    }    for(i=0;i<6;i++){      ctx.fillRect(115,51+i*16,4,4);    }    for(i=0;i<8;i++){      ctx.fillRect(51+i*16,99,4,4);    }    // character 2    ctx.beginPath();    ctx.moveTo(83,116);    ctx.lineTo(83,102);    ctx.bezierCurveTo(83,94,89,88,97,88);    ctx.bezierCurveTo(105,88,111,94,111,102);    ctx.lineTo(111,116);    ctx.lineTo(106.333,111.333);    ctx.lineTo(101.666,116);    ctx.lineTo(97,111.333);    ctx.lineTo(92.333,116);    ctx.lineTo(87.666,111.333);    ctx.lineTo(83,116);    ctx.fill();    ctx.fillStyle = "white";    ctx.beginPath();    ctx.moveTo(91,96);    ctx.bezierCurveTo(88,96,87,99,87,101);    ctx.bezierCurveTo(87,103,88,106,91,106);    ctx.bezierCurveTo(94,106,95,103,95,101);    ctx.bezierCurveTo(95,99,94,96,91,96);    ctx.moveTo(103,96);    ctx.bezierCurveTo(100,96,99,99,99,101);    ctx.bezierCurveTo(99,103,100,106,103,106);    ctx.bezierCurveTo(106,106,107,103,107,101);    ctx.bezierCurveTo(107,99,106,96,103,96);    ctx.fill();    ctx.fillStyle = "black";    ctx.beginPath();    ctx.arc(101,102,2,0,Math.PI*2,true);    ctx.fill();    ctx.beginPath();    ctx.arc(89,102,2,0,Math.PI*2,true);    ctx.fill();  } else {    alert(''You need Safari or Firefox 1.5+ to see this demo.'');  }}function roundedRect(ctx,x,y,width,height,radius){  ctx.beginPath();  ctx.moveTo(x,y+radius);  ctx.lineTo(x,y+height-radius);  ctx.quadraticCurveTo(x,y+height,x+radius,y+height);  ctx.lineTo(x+width-radius,y+height);  ctx.quadraticCurveTo(x+width,y+height,x+width,y+height-radius);  ctx.lineTo(x+width,y+radius);  ctx.quadraticCurveTo(x+width,y,x+width-radius,y);  ctx.lineTo(x+radius,y);  ctx.quadraticCurveTo(x,y,x,y+radius);  ctx.stroke();}'states  ^Array with: taskscreateCache  ^WAHashCache initialSize: 13 maximumSize: 0 maximumAbsoluteAge: 0 maximumRelativeAge: 0 overflowAction: WAHashCache signalErrorincrementCount  count incrementrenderContentOn: arg1  arg1 heading     level3;     with: presenter greaseString.  super renderContentOn: arg1valueForOption: arg1  ^arg1visitAttribute: arg1 on: arg2  (WAUserConfigurationEditorVisitor configuration: self configuration canvas: arg2) start: arg1closeOn: arg1  arg1 scriptGenerator close: self on: arg1.  self writeFootOn: arg1unregistered  parent := nilcookiesAt: arg1  ^self cookies select: [:arg2 |  arg2 key = arg1 ]matches: arg1  ^(arg1 main = '*' or: [ arg1 main = self main ]) and: [ arg1 sub = '*' or: [ arg1 sub = self sub ] ]responseHeaderName: arg1  self attributeAt: 'http-equiv' put: arg1renderUsernameOn: arg1  arg1 tableRow: [ arg1 tableData: [ arg1 label                 for: #userid;                 with: 'Username:' ].        arg1 tableData: [ arg1 textInput                 id: #userid;                 on: #user of: self ] ]createRequest  ^super createRequest     setRemoteAddress: self remoteAddress;     yourselfhandle: arg1  self handleRequest: arg1.  self handlePadding: arg1address  ^self tag: 'address'testAsMIMEDocumentMorph  | tmp1 tmp2 |  tmp1 := EllipseMorph new     color: Color red;     borderWidth: 1;     borderColor: Color black;     extent: 12 @ 12;     yourself.  tmp2 := tmp1 seasideMimeDocument.  self assert: tmp2 contentType = WAMimeType imagePng.  self assert: (tmp2 content isKindOf: ByteArray)initializeWithRoot: arg1  self initialize.  root := arg1.  condition := 'if'initialRequest: arg1  | tmp1 |  super initialRequest: arg1.  arg1 fields at: 'class' ifPresent: [:arg2 |  Smalltalk at: arg2 asSymbol ifPresent: [:arg3 |  tmp1 := (arg1 fields includesKey: 'meta') ifTrue: [ arg3 class ] ifFalse: [ arg3 ].              self model setClass: tmp1 selector: nil.              arg1 fields at: 'method' ifPresent: [:arg4 |  self model setClass: tmp1 selector: arg4 asSymbol ] ] ]mimetypeForFile: arg1  ^self class mimetypeFor: (arg1 copyAfterLast: $.)initialize  super initialize.  self initializeCacheenableHalos  self properties at: #halosEnabled put: truestart  self requestContext response     nextPutAll: 'start: ';     nextPutAll: self keyrenderDialogOn: arg1  renderInputOn: arg1  arg1 table: [ arg1 tableRow: [ arg1 tableHeading: 'Value:'.              arg1 tableData: self input ].        arg1 tableRow: [ arg1 tableHeading: 'Input:'.              arg1 tableData: [ arg1 textInput on: #input of: self ] ] ]hasCallback  ^values notNilvalue  ^self value: niltitle  self subclassResponsibilityconvertKey: arg1  ^arg1date: arg1  date := arg1rootDecorationClasses  ^(WADecoration allSubclasses select: [:arg1 |  arg1 canBeRoot ]) asSortedCollection: [:arg2 :arg3 |  arg2 name <= arg3 name ]image  ^self brush: WAImageTag newfigureCaption: arg1  self figureCaption with: arg1testDefaultCache  self deny: (self response headers includesKey: 'Pragma').  self deny: (self response headers includesKey: 'Expires').  self deny: (self response headers includesKey: 'Cache-Control')attributeEditor  ^WACollectionAttributeEditorparseValue  stream atEnd ifFalse: [ | tmp1 |        self whitespace.        tmp1 := stream peek.        tmp1 = ${ ifTrue: [ ^self parseObject ].        tmp1 = $[ ifTrue: [ ^self parseArray ].        tmp1 = $" ifTrue: [ ^self parseString ].        (tmp1 = $- or: [ tmp1 between: $0 and: $9 ]) ifTrue: [ ^self parseNumber ].        tmp1 = $t ifTrue: [ self match: 'true' ifTrue: [ ^self createTrue ] ].        tmp1 = $f ifTrue: [ self match: 'false' ifTrue: [ ^self createFalse ] ].        tmp1 = $n ifTrue: [ self match: 'null' ifTrue: [ ^self createNull ] ] ].  self error: 'invalid input'privateIsValidSecond: arg1 hourNumber: arg2 minuteNumber: arg3  ^(arg2 between: 0 and: 23) and: [ (arg3 between: 0 and: 59) and: [ arg1 between: 0 and: 59 ] ]unregister  self manager unregister: selfnext: arg1  next := arg1firstCookie  ^self requestContext newCookie     key: self firstKey;     value: self firstValue;     path: self firstPath;     yourselfmaximumAbsoluteAge  ^maximumAbsoluteAgerenderFirefoxOn: arg1  arg1 listItem: 'On Firefox the path is not supposed to work. But if you look under Settings -> Cookies the cookie should be saved with the correct path.'initialize  super initialize.  overflowActionLabels := Dictionary new: 3.  overflowActionLabels at: WAHashCache removeAbsoluteOldest put: 'remove the oldest element'.  overflowActionLabels at: WAHashCache removeRelativeOldest put: 'remove the element last accessed the longest time ago'.  overflowActionLabels at: WAHashCache signalError put: 'signal an error'render: arg1  arg1 renderOn: selfkey  ^self convertKey: keyinitialize  super initialize.  self secure: false.  self discard: false.  self httpOnly: false.  self version: 1= arg1  ^self species = arg1 species and: [ self key = arg1 key and: [ self domain = arg1 domain and: [ self path = arg1 path ] ] ]nextChunkPut: arg1  self nextChunk: arg1 size put: arg1dispatch: arg1 to: arg2  registrySize := arg2 cache size.  self assert: arg1 consumer next = self registryName.  [ arg2 handle: arg1 ] on: WAResponseNotification do: [:arg3 |   ].  ^arg1 responsecreateHandler  ^self handlerClass context: self createRequestContextrows: arg1  self attributes at: 'rows' put: arg1documentHandlers  documentHandlers isNil ifTrue: [ documentHandlers := self createDocumentHandlerCache ].  ^documentHandlersresourceUrl: arg1  self url: (canvas absoluteUrlForResource: arg1)testExpireRelative  | tmp1 tmp2 |  self workAroundPharo3Bug.  cache := WABulkReapingCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 0 maximumRelativeAge: 3 overflowAction: WAHashCache signalError.  tmp1 := Delay forSeconds: 2.  cache at: 1 put: '1'.  cache at: 2 put: '2'.  tmp1 wait.  cache at: 1 ifAbsent: [ self assert: false ].  tmp1 wait.  self assert: cache reap = 1 description: 'should reap exactly one item'.  self assert: (cache at: 1 ifAbsent: [ self assert: false ]) = '1'.  tmp2 := false.  cache at: 2 ifAbsent: [ tmp2 := true ].  self assert: tmp2request  ^requestexecute  WAAdmin clearConfigurationCachesremovals  ^removalsmultipart  ^multipartsetCookies: arg1  cookies := arg1asFileAndFoldername: arg1  | tmp1 tmp2 tmp3 |  tmp3 := GRPlatform current pathSeparator.  tmp2 := (self fileResourceOf: arg1) filepath.  tmp1 := (tmp2 includes: $/) ifTrue: [ tmp2 := tmp2 copyReplaceAll: '/' with: tmp3.        self name , tmp3 , (tmp2 copyUpToLast: tmp3 first) ] ifFalse: [ self name ].  ^Array with: tmp1 with: (GRPlatform current localNameOf: tmp2)createNumber: arg1  ^arg1 asNumberinitializeWithContext: arg1  self initializeWithStream: arg1 document stream codec: self requestContext codec.  xmlEncoder := GRPlatform current xmlEncoderOn: (singleEncoder := xmlEncoder).  html := WAHtmlCanvas context: arg1.  indentCloseTags := OrderedCollection with: false.  indentLevel := 0.  firstLine := truebeFontDefinition  self relationship: 'fontdef'children  ^super children copyWith: fileEditormaxLength: arg1  self attributes at: 'maxlength' put: arg1testWithValue  WACurrentRequestContext use: 1 during: [ self assert: WACurrentRequestContext value = 1 ]addLoadScript: arg1  ^loadScripts addLast: arg1useCompileUseNewCompiler: arg1 during: arg2  | tmp1 |  self supportsSwitchToNewCompiler ifFalse: [ ^self ].  tmp1 := GRPharoPlatform current useByteArrayLiterals.  [ (Smalltalk at: #Preferences) setPreference: #compileUseNewCompiler toValue: arg1.  arg2 value ] ensure: [ GRPharoPlatform current useByteArrayLiterals ifTrue: [ (Smalltalk at: #Preferences) setPreference: #compileUseNewCompiler toValue: tmp1 ] ]addAll: arg1  self list addAll: arg1space: arg1  arg1 timesRepeat: [ self space ]hash  ^self contentType hashbodyDecodeUsing: arg1  ^body isNil ifFalse: [ (GRCodec forEncoding: arg1) decode: body ]add: arg1  ^headElements add: arg1columnClickBlock: arg1  self clickBlock: [:arg2 |  arg1 value: (self valueForRow: arg2) ]newHandler  ^WAApplication new     preferenceAt: #trackingStrategy put: WAQueryFieldHandlerTrackingStrategy new;     preferenceAt: #serverHostname put: 'www.seaside.st';     yourselfmenu  ^self brush: WAMenuTag newrespond: arg1  self requestContext respond: arg1discard: arg1  discard := arg1testStatus  self assert: self response status = 200.  self response status: 404.  self assert: self response status = 404handlerClass  ^WAErrorHandlerfirstKey  ^firstKeytestIsBinary  | tmp1 tmp2 |  tmp1 := #('text/plain' 'text/bar' 'application/javascript' 'application/x-javascript' 'application/xhml+xml' 'application/xml' 'image/svg+xml').  tmp1 do: [:arg1 |  | tmp3 |        tmp3 := WAMimeType fromString: arg1.        self deny: tmp3 isBinary ].  tmp2 := #('application/octet-stream' 'image/jpeg').  tmp2 do: [:arg1 |  | tmp3 |        tmp3 := WAMimeType fromString: arg1.        self assert: tmp3 isBinary ]states  ^Array with: selftestCopyConfiguration  | tmp1 tmp2 |  tmp1 := handler configuration.  tmp2 := handler copy.  self assert: handler configuration == tmp1.  self deny: tmp2 configuration == handler configuration.  self deny: tmp2 configuration isNilcolSpan: arg1  self attributes at: 'colspan' put: arg1big: arg1  self big with: arg1contents: arg1  contents := arg1removals  ^self currentList select: [:arg1 |  arg1 key = #remove ]evaluateWithFieldValues: arg1  | tmp1 tmp2 |  tmp1 := OrderedCollection new.  tmp2 := arg1 collect: [:arg2 |  arg2 isNil ifFalse: [ arg2 greaseInteger ] ].  tmp2 do: [:arg2 |  values at: arg2 ifPresent: [:arg3 |  tmp1 add: arg3 ] ].  block valueWithPossibleArguments: (Array with: tmp1)listId: arg1  self attributeAt: 'list' put: arg1todos  ^todosbeDescriptions  self kind: 'descriptions'renderFile: arg1 on: arg2  arg2 tableData: [ arg2 anchor           class: 'download';           url: (self urlFor: arg1);           with: arg1 ].  arg2 tableData: [ arg2 anchor           callback: [ self confirm: 'Really remove ''' , arg1 , '''?' onAnswer: [:arg3 |  arg3 ifTrue: [ self library removeFile: arg1 ] ] ];           with: 'Remove'.        arg2 space.        arg2 anchor           callback: [ renamingFile := arg1 ];           with: 'Rename' ]testAsMIMEDocumentByteArrayColon  | tmp1 tmp2 |  tmp1 := #(1 2 3 4) asByteArray seasideMimeDocument.  tmp1 mimeType: WAMimeType imageJpeg.  self assert: tmp1 contentType = WAMimeType imageJpeg.  tmp2 := tmp1 content.  self assert: tmp2 size = 4.  self assert: tmp2 class = ByteArray.  1 to: 4 do: [:arg1 |  self assert: (tmp2 at: arg1) = arg1 ]monthIndex  ^monthIndex contentshasExpressionAt: arg1  self expressionAt: arg1 ifAbsent: [ ^false ].  ^truerenderContentOn: arg1  arg1 table: [ arg1 tableHead: [ self renderTableHeaderOn: arg1 ].        arg1 tableFoot: [ self renderTableFooterOn: arg1 ].        arg1 tableBody: [ self renderRowsOn: arg1 ] ]openOn: arg1  arg1 scriptGenerator open: self on: arg1.  self writeHeadOn: arg1embed: arg1  self embed with: arg1messageCategoryListIndex: arg1  selectedMessageCategory := self messageCategoryList at: arg1.  selectedMethod := nil.  self changed: #messageCategoryListIndextestAsMIMEDocumentByteArrayColon  | tmp1 tmp2 |  tmp1 := WABlockMimeDocument onBlock: [ #(1 2 3 4) asByteArray ].  tmp1 mimeType: WAMimeType imageJpeg.  self assert: tmp1 contentType = WAMimeType imageJpeg.  tmp2 := tmp1 content.  self assert: tmp2 size = 4.  self assert: tmp2 class = ByteArray.  1 to: 4 do: [:arg1 |  self assert: (tmp2 at: arg1) = arg1 ]remove: arg1  self requestContext response deleteCookie: arg1removeKey: arg1 ifAbsent: arg2  | tmp1 |  tmp1 := byKey at: arg1 ifAbsent: [ ^arg2 value ].  byKey removeKey: arg1.  byValue removeKey: tmp1.  ^tmp1assertOk: arg1  self assert: arg1 response status = WAResponse statusOktaskExample  ^taskExample ifNil: [ taskExample := WAFlowConvenienceFunctionalTest new ]renderContentOn: arg1  arg1 paragraph: [ arg1 anchor           callback: [ self call: WACallDuringRenderTestComponent new ];           with: 'This link'.        arg1 text: ' will call a Component which attempts to do a #call: in its #renderContentOn: method. This is not allowed and should trigger a descriptive error. With WAWalkbackErrorHandler enabled, the output should explain to the user the likely cause of the problem.' ]testCompileByteArrayLiteralSource  | tmp1 tmp2 tmp3 tmp4 tmp5 |  GRPharoPlatform current useByteArrayLiterals ifFalse: [ ^self ].  self useCompileUseNewCompiler: true during: [ self assert: GRPharoPlatform current useByteArrayLiterals.        tmp1 := WATestingFiles default.        tmp2 := (1 to: 255) asByteArray.        tmp3 := WAFile new           contentType: WAMimeType imageJpeg;           contents: tmp2;           fileName: 'demo.jpeg';           yourself.        tmp1 addFile: tmp3.        [ tmp4 := WATestingFiles sourceCodeAt: #demoJpeg.        tmp5 := 'demoJpeg	^ #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]'.        self assert: tmp4 greaseString = tmp5 ] ensure: [ tmp1 removeFile: tmp3 fileName ] ]form: arg1  self document: arg1renderListItem: arg1 labelled: arg2  self subclassResponsibilityrenderContentOn: arg1  arg1 object     type: 'image/svg+xml' seasideMimeType;     width: 512;     height: 512;     standby: 'loading tiger';     url: 'http://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg';     with: 'Your browser doesn''t support SVG'printOn: arg1  super printOn: arg1.  arg1     nextPut: $(;     nextPutAll: self greaseString;     nextPut: $)document  ^self context documentrenderContentOn: arg1  WATaskNotDelegated signal: 'This task has no delegation.'renderConfigurationOn: arg1  arg1 form: [ arg1 table           cellspacing: 0;           cellpadding: 0;           with: [ self renderMaximumAbsoluteAgeOn: arg1.              self renderMaximumRelativeAgeOn: arg1.              self renderMaximumSizeOn: arg1.              self renderOverflowActionOn: arg1 ].        self renderCacheReplaceOn: arg1 ]checkValue: arg1  (arg1 isString and: [ (arg1 indexOf: Character cr) ~= 0 or: [ (arg1 indexOf: Character lf) ~= 0 ] ]) ifTrue: [ WAInvalidHeaderValueError signal: 'invalid header value' , arg1 ]isActive  ^self requestor dispatcher notNilrenderRowName: arg1 named: arg2 on: arg3  arg1 isDispatcher ifTrue: [ arg3 anchor           extraPath: arg2;           callback: [ self dispatcher: arg1 ];           with: [ arg3 code: arg2 , '/' ] ] ifFalse: [ arg3 anchor           url: arg1 url;           with: [ arg3 code: arg2 ] ]buttons  ^#(ok cancel)removeHeaderAt: arg1  ^self headers removeKey: arg1accept  ^WAAccept fromString: (self headerAt: 'accept' ifAbsent: [ ^nil ])onResize: arg1  self document scriptGenerator event: 'resize' do: arg1 on: selflabel: arg1  self label with: arg1go  | tmp1 tmp2 |  [ [ tmp1 := self chooseComponentName.  self checkAuthorInitials.  tmp2 := self createComponent: tmp1.  tmp2 isNil ] whileTrue.  self displayComponent: tmp2 named: tmp1 ] repeatauthenticate: arg1  self ifResetPossible: [ self response basicAuthenticationRealm: arg1 ]greaseString  | tmp1 tmp2 tmp3 |  tmp1 := main size + 1 + sub size.  parameters isNil ifFalse: [ parameters keysAndValuesDo: [:arg1 :arg2 |  tmp1 := tmp1 + 1 + arg1 size + 1 + arg2 size ] ].  tmp2 := String new: tmp1.  tmp3 := WriteStream on: tmp2.  tmp3     nextPutAll: main;     nextPut: $/;     nextPutAll: sub.  parameters isNil ifFalse: [ parameters keysAndValuesDo: [:arg1 :arg2 |  tmp3                 nextPut: $;;                 nextPutAll: arg1;                 nextPut: $=;                 nextPutAll: arg2 ] ].  ^tmp2createResponse  ^WABufferedResponse newexpiry: arg1  expiry := arg1 asUTCinitializeWithTag: arg1  self initialize.  tag := arg1testPassword  url     host: 'seaside.st';     user: 'foo';     password: 'bar'.  self assert: url password = 'bar'.  self assert: url greaseString = 'http://foo:bar@seaside.st/'systemCategoryList  ^(self packages collect: [:arg1 |  arg1 packageName ]) sortedsetRemoteAddress: arg1  remoteAddress := arg1isHtml  ^trueon: arg1 of: arg2  self value: (self labelForSelector: arg1 of: arg2).  self callback: (GRDelayedSend receiver: arg2 selector: arg1)onInitialRequest: arg1  initialRequestBlock := arg1initializeOnBlock: arg1  self initialize.  self mimeType: nil.  self fileName: nil.  block := arg1level2  level := 2renderValuesOn: arg1  self renderLabel: 'VM Version' value: (self image vm getSystemAttribute: 1004) on: arg1.  self renderLabel: 'VM Type' value: ((self image vm parameterAt: 40) * 8) printString , 'bit' on: arg1.  self renderLabel: 'Endianness' value: (Smalltalk at: #EndianDetector ifAbsent: [ self image ]) endianness on: arg1.  self renderLabel: 'Image Path' value: (self image vm getSystemAttribute: 1) on: arg1.  self renderLabel: 'Document to Open' value: (self image vm getSystemAttribute: 2) on: arg1.  self renderLabel: 'VM Options' value: (self vmOptionsFrom: self image) on: arg1.  self renderLabel: 'Command Line Arguments' value: (self commandLineArgumentsFrom: self image) on: arg1.  self renderLabel: 'Builtin Modules' value: [ arg1 unorderedList list: ((self image vm respondsTo: #listBuiltinModules) ifTrue: [ self image vm listBuiltinModules ] ifFalse: [ self image listBuiltinModules ]) ] on: arg1.  self renderLabel: 'Loaded Modules' value: [ arg1 unorderedList list: ((self image vm respondsTo: #listLoadedModules) ifTrue: [ self image vm listLoadedModules ] ifFalse: [ self image listLoadedModules ]) ] on: arg1continue  | tmp1 |  tmp1 := self createRenderContinuation.  tmp1 captureState.  self shouldRedirect ifTrue: [ self redirectToContinuation: tmp1 ] ifFalse: [ tmp1 handle: self requestContext ]poster: arg1  self attributeAt: 'poster' put: arg1initialize  super initialize.  stack := #()model  ^presentervalue: arg1  arg1 isNil ifFalse: [ self attributes at: 'value' put: arg1 ]multipart  self attributes at: 'enctype' put: 'multipart/form-data'traverse: arg1 value: arg2 seen: arg3  (arg2 isNil or: [ arg2 isLiteral or: [ arg2 isBehavior or: [ (arg3 includes: arg2) or: [ IgnoredClasses anySatisfy: [:arg4 |  arg2 isKindOf: arg4 ] ] ] ] ]) ifTrue: [ ^self ].  arg2 traverseWithMemory: self seen: arg3renderContentOn: arg1  renderBlock isNil ifTrue: [ super renderContentOn: arg1 ] ifFalse: [ renderBlock value: arg1 ]addFilterForClass: arg1  arg1 isNil ifFalse: [ self handler addFilter: arg1 new ]allAt: arg1  ^Array streamContents: [:arg2 |  delegates do: [:arg3 |  arg2 nextPutAll: (arg3 allAt: arg1) ] ]condition: arg1  condition := arg1configuration  ^configurationyes  self answer: truerange: arg1  range := arg1title  ^'Cog Just-In-Time Compiler'block: arg1  renderValuesOn: arg1  self subclassResponsibilitybasicForm  ^self brush: WABasicFormTag newunregister: arg1  self stop: arg1.  adaptors remove: arg1.  arg1 unregistered.  ^arg1renderContentOn: arg1  arg1 heading     level1;     with: 'Getting started'.  arg1 heading level2 with: 'Test the water with the steps below:'.  arg1 orderedList: [ arg1 listItem: [ self renderExamplesStepOn: arg1 ].        arg1 listItem: [ self renderFirstComponentStepOn: arg1 ].        arg1 listItem: [ self renderDocumentationStepOn: arg1 ] ]tableRow  ^self tag: 'tr'decoration: arg1  decoration contents: arg1beJavascript  self type: WAMimeType textJavascripttestIncludesUnsafeXmlCharacter  | tmp1 |  tmp1 := WAPharoXmlEncoder on: (WriteStream on: String new).  '"<&' do: [:arg1 |  self assert: (tmp1 includesUnsafeCharacter: (String with: arg1)).        self assert: (tmp1 includesUnsafeCharacter: 'a' , (String with: arg1)).        self assert: (tmp1 includesUnsafeCharacter: (String with: arg1) , 'a') ].  tmp1 includesUnsafeCharacter: ''copyForRenderContext: arg1  ^self copy     postCopyForRenderContext: arg1;     yourselfselectedAdditions  ^(selectionsCurrent select: [:arg1 |  arg1 key = #add ]) collect: [:arg2 |  arg2 value ]renderContentOn: arg1  self renderExplanationOn: arg1.  arg1 form     get;     with: [ arg1 table: inputElements.        arg1 div: [ arg1 submitButton ] ]path: arg1  path := arg1date: arg1  date := arg1initializeOn: arg1  super initializeOn: arg1.  self setEmptyPage.  self configure: arg1selectBlock  ^selectBlockrenderContentOn: arg1  arg1 div     class: 'groupContent';     with: [ self renderHeadingsOn: arg1.        self renderFilesOn: arg1.        self renderWriteToDiskOn: arg1.        arg1 space.        self renderDoneOn: arg1 ]addQueryFieldWithValue: arg1 to: arg2  arg2 addField: self keyField value: arg1raiseResumable  1 / 0.  self inform: 'To be displayed' onAnswer: [  ]testDoNotCacheExpiryDate  | tmp1 tmp2 |  tmp1 := self response doNotCacheExpiryDate.  tmp2 := tmp1 - DateAndTime now.  self assert: tmp2 days < -7datalist  ^self brush: WADatalistTag newmethod: arg1  self attributes at: 'method' put: arg1componentName: arg1  componentName := arg1addKey: arg1 toContext: arg2  children  ^taskstype  ^'search'renderContentOn: arg1  self renderFiltersOn: arg1.  self renderActionsOn: arg1inspectIt  | tmp1 |  tmp1 := self evaluate.  self chooseObject: tmp1 named: tmp1 greaseStringactionUrl: arg1  actionUrl := arg1 seasideUrlfilter  ^filter contentstrailName  ^'Item ' , count greaseString , ' (' , self identityHash greaseString , ')'testAddKeyOfSessionToUrl  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := tmp1 request uri copy.  strategy addKey: 'The_Metaphor' toUrl: tmp2.  self assert: tmp2 greaseString = '/catspajamassc2'testAddCookieNonePresentYet  | tmp1 |  tmp1 := self requestContext.  strategy addKey: 'The_Metaphor' toContext: tmp1.  self assertCookieInContext: tmp1 withValue: 'The_Metaphor'pattern: arg1  self attributeAt: 'pattern' put: arg1states  ^Array with: messagecloseBrush  self document closeArrayat: arg1 append: arg2  self at: arg1 append: arg2 separator: Character spacerenderContentOn: arg1  arg1 heading     level: 3;     with: 'A byte array with server side map (ismap)'.  arg1 paragraph: 'Click anywhere on the Style Editor icon and you should get informed about the position where you clicked.'.  arg1 paragraph: [ arg1 map           title: 'Click anywhere on the style editor icon';           callback: [:arg2 |  self inform: 'Clicked at ' , arg2 greaseString , ' on the Style Editor Icon' onAnswer: [  ] ];           with: [ arg1 image                 altText: 'Style Editor Icon';                 width: '40%';                 url: WATestingFiles / #samplePng ] ]assertRenders: arg1  | tmp1 |  tmp1 := self renderingGuide start: root.  self assert: tmp1 client renderContext document stream contents = arg1testDo  | tmp1 |  one at: 'foo' put: 1.  two at: 'bar' put: 2.  two at: 'foo' put: 3.  tmp1 := OrderedCollection new.  merged do: [:arg1 |  tmp1 add: arg1 ].  self assert: tmp1 asArray = #(1 2 3)testUnique  | tmp1 tmp2 |  tmp1 := Set new: self count.  self count timesRepeat: [ tmp2 := WAKeyGenerator current keyOfLength: 48.        self deny: (tmp1 includes: tmp2) description: 'This is extremely unlikely to fail, if it does repeatedly then there is something wrong with the random generator.'.        tmp1 add: tmp2 ]testOneOfManySlashInUrl  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')     path: '/';     yourself.  tmp3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')     path: '/1/2';     yourself.  tmp4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')     path: '/1/2/3';     yourself.  tmp6 := self requestContext.  tmp6 request setCookies: (Array with: tmp1 with: tmp2 with: tmp3 with: tmp4).  tmp5 := strategy keyFromContext: tmp6.  self assert: tmp5 = 'cookie3'user  ^usertag  ^'h' , self level greaseStringresetIfPossible  ^self isCommitted not and: [ super resetIfPossible ]onUpdateStates: arg1  updateStatesBlock := arg1pageExpired  self makePlainTextAndPerform: #doNotCache.  self response nextPutAll: 'This page has expired, please use the back-button to navigate to the last valid page.'handleFiltered: arg1  self performAction.  self continuetype  ^'checkbox'canBeRun  ^self hasAdaptortestXmlGreaseNextPutAllStartingAt  self assert: 'ab' next: 1 startingAt: 1 encoder: self xmlEncoderClass gives: 'a'.  self assert: 'a<b' next: 1 startingAt: 1 encoder: self xmlEncoderClass gives: 'a'.  self assert: 'a<b' next: 2 startingAt: 1 encoder: self xmlEncoderClass gives: 'a&lt;'.  self assert: 'a<b' next: 1 startingAt: 2 encoder: self xmlEncoderClass gives: '&lt;'.  self assert: 'a<b' next: 2 startingAt: 2 encoder: self xmlEncoderClass gives: '&lt;b'.  self assert: 'a<<b' next: 2 startingAt: 2 encoder: self xmlEncoderClass gives: '&lt;&lt;'.  self assert: 'ab<b<' next: 3 startingAt: 2 encoder: self xmlEncoderClass gives: 'b&lt;b'labelBlock  ^labelBlockhours: arg1  hours := arg1 greaseInteger ifNil: [ 0 ]advanceKey  | tmp1 |  tmp1 := self nextKey.  self increaseKey.  ^tmp1initialize  super initialize.  self     name: 'Clear configuration caches';     description: 'Cleat all the caches of the configuration.'renderCellForDate: arg1 on: arg2  arg2 tableData: [ (arg1 monthIndex = self monthIndex and: [ arg1 year = self year ]) ifTrue: [ arg2 span                 class: (self date = arg1 ifTrue: [ 'calendarArchiveDate' ]);                 with: [ (self canSelect: arg1) ifTrue: [ arg2 anchor                             callback: [ self select: arg1 ];                             with: arg1 dayOfMonth ] ifFalse: [ arg2 text: arg1 dayOfMonth ] ] ] ]resetFirst  self firstKey: nil.  self firstValue: nil.  self firstPath: self application url pathStringUnencodedassertLibraryResponse: arg1  self assert: (arg1 contents indexOfSubCollection: self expectedLibraryContents startingAt: 1) > 0response  ^self requestContext responserenderInput: arg1 on: arg2  arg2 form: [ arg2 strong: arg1 capitalized.        arg2 space.        arg2 textInput callback: [:arg3 |  self target perform: arg1 with: arg3 ] ]renderErrorOn: arg1  arg1 heading: 'Error'.  arg1 paragraph: 'Behaviour is exception-handler-dependent. If a Debugger is opened, closing the debugger window should at least result in the socket being closed and should not lock the session. Proceeding from the Debugger should be handled gracefully but behaviour is platform-dependent. On Pharo and GemStone, you should see an error page in the browser. On VW, you should see a message indicating that nil was returned.'.  arg1 anchor     callback: [ self raiseError ];     with: 'Raise error'codebase: arg1  self attributes at: 'codebase' put: arg1windowCss  ^'.window {	margin: 1em;	border: 1px solid #aaa;}.window .window-titlebar {	color: #444;	padding: 5px;	overflow: hidden;	background-color: #eee;	border-bottom: 1px solid #aaa;}.window .window-titlebar .window-title {	float: left;	font-weight: bold;	padding-left: 20px;}.window .window-titlebar .window-close {	float: right;}.window .window-titlebar .window-close a {	color: #444;	text-decoration: none;}.window .window-titlebar .window-close a:hover {	color: #111;}.window .window-content {	clear: both;	padding: 2px;	background-color: #fff;}'bgPng  ^#[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 100 0 0 0 100 2 3 0 0 0 13 140 125 199 0 0 0 12 80 76 84 69 238 238 238 235 235 235 230 230 230 223 223 223 173 223 54 115 0 0 7 253 73 68 65 84 120 94 117 150 209 106 226 138 22 134 151 65 197 72 167 36 65 37 9 173 152 96 36 9 214 103 104 188 154 61 84 169 185 218 83 170 24 239 166 84 159 65 3 103 152 14 83 49 97 206 48 22 149 36 204 25 218 162 121 134 58 180 165 245 74 197 74 245 170 21 149 198 167 56 158 187 217 123 247 60 193 207 226 255 214 183 22 244 166 151 221 241 98 241 116 243 175 219 171 249 172 59 153 63 59 206 139 243 107 90 7 90 240 112 62 145 247 34 110 206 133 161 33 17 71 240 24 134 121 121 26 222 238 100 237 189 141 189 230 187 183 225 203 227 78 99 35 177 215 105 147 39 205 250 33 176 152 171 80 147 12 37 207 96 121 9 99 202 149 188 146 55 116 171 140 192 237 104 120 61 191 158 234 171 254 205 195 224 94 123 158 221 151 87 139 213 243 147 5 158 88 0 8 129 103 81 47 71 187 200 128 155 21 4 23 196 132 104 16 254 60 218 137 111 54 219 228 197 151 214 197 89 174 117 220 105 82 185 68 98 179 19 6 171 162 229 77 197 204 43 73 25 103 37 89 145 241 90 62 99 106 58 1 115 231 190 60 187 254 110 62 124 93 167 252 188 238 141 204 135 117 242 227 227 16 0 231 61 62 154 102 41 160 104 193 71 114 28 71 209 1 222 27 138 193 134 237 75 239 36 74 111 227 23 155 27 197 84 60 189 151 186 72 116 54 178 217 45 208 37 44 163 212 48 9 81 112 166 162 48 121 67 53 160 160 91 17 4 150 211 187 65 127 60 114 22 230 245 108 49 252 117 61 185 153 142 235 103 223 87 31 129 247 115 98 8 13 186 8 78 164 121 209 19 19 35 129 24 231 21 34 49 232 28 109 159 145 205 68 201 78 164 119 54 195 197 63 246 54 247 14 26 185 47 95 46 64 215 140 72 70 75 38 203 186 234 202 67 121 63 175 200 76 205 181 171 230 97 57 186 26 58 47 179 147 219 197 180 251 56 186 182 28 167 123 181 116 230 15 75 16 98 49 158 247 196 162 116 200 141 19 44 66 99 52 30 243 19 140 232 135 55 169 203 176 80 44 85 75 104 177 212 22 142 154 173 102 177 244 254 50 156 109 64 77 213 11 201 154 174 201 26 195 170 153 36 139 72 186 164 17 70 5 129 187 135 207 235 126 86 207 243 213 114 58 152 13 181 222 240 231 96 188 92 57 115 136 178 209 8 237 21 81 145 194 162 2 65 66 12 37 131 81 210 67 9 208 250 240 254 60 126 86 237 164 235 135 197 108 169 145 163 222 53 194 205 236 102 170 3 178 108 105 229 140 108 194 254 186 165 140 92 203 175 115 35 73 196 149 129 222 221 243 242 236 179 115 57 93 78 159 110 235 183 179 171 213 248 170 187 122 186 254 6 68 44 138 248 177 136 55 64 184 163 110 154 16 49 79 16 71 113 134 69 97 175 209 62 190 236 108 53 218 39 7 205 214 118 251 115 235 252 178 189 147 72 217 37 192 192 42 27 172 196 170 210 238 110 217 165 17 10 99 20 140 72 82 210 224 213 89 22 223 30 87 64 163 46 158 70 188 2 130 145 152 40 18 177 88 132 140 224 128 139 28 28 111 196 55 119 236 240 105 22 205 237 36 194 113 59 149 72 240 135 118 177 90 4 171 32 75 140 193 234 153 130 145 172 85 118 203 70 25 84 171 80 67 48 184 89 141 205 137 121 50 92 174 102 243 89 255 121 57 250 122 53 191 185 184 121 185 3 42 228 94 211 140 4 208 40 39 136 162 64 121 66 52 29 11 225 124 20 254 194 178 127 251 224 98 39 188 145 200 118 254 176 65 146 85 147 81 246 53 86 150 165 130 38 89 134 162 238 51 56 81 168 193 106 162 77 238 23 63 234 181 175 163 222 96 220 95 62 142 94 78 230 51 103 48 7 198 197 121 104 31 79 243 40 142 71 137 8 141 208 49 1 141 160 136 15 194 225 240 230 171 108 195 235 75 106 104 22 44 95 206 157 147 251 225 106 218 115 158 7 143 195 241 116 185 152 24 75 115 49 5 212 231 22 124 180 151 166 197 24 30 160 24 65 20 4 26 241 80 129 40 216 135 246 118 251 83 252 160 113 110 31 53 79 201 84 75 60 76 208 103 148 93 133 215 144 86 85 67 143 64 127 53 30 215 23 206 120 229 44 111 38 214 109 175 255 48 113 30 205 110 183 15 4 234 197 61 180 24 240 4 217 128 128 10 30 145 139 209 76 136 194 220 208 218 58 126 211 73 100 247 62 196 155 135 141 122 248 125 174 83 77 87 19 167 246 33 212 12 182 156 7 37 89 174 229 177 74 193 68 76 69 209 101 173 96 233 208 125 188 29 175 122 253 241 195 116 242 159 159 189 193 173 213 187 31 118 31 244 249 13 248 209 192 218 106 164 39 234 230 80 90 240 99 168 203 75 97 132 11 15 192 182 221 56 75 145 217 98 131 76 109 22 183 133 147 15 194 113 187 218 222 56 58 131 130 156 145 144 93 23 195 26 138 129 91 56 129 72 17 107 95 193 213 12 60 140 6 223 190 253 232 127 92 14 151 83 245 119 57 64 212 227 101 162 104 40 246 143 61 130 214 193 59 242 228 168 212 185 248 212 242 111 250 79 75 167 151 217 183 135 167 233 106 21 24 194 80 16 77 47 239 215 202 107 222 12 197 180 44 5 151 116 66 135 191 184 211 153 223 212 43 78 111 60 252 222 251 9 100 40 40 174 231 97 121 183 24 101 121 47 225 9 146 33 96 104 140 133 98 186 117 176 149 78 100 227 241 84 35 219 249 80 191 168 158 151 90 59 199 167 45 80 192 170 89 25 69 173 16 50 206 178 106 132 93 135 230 177 130 166 64 189 59 236 125 92 12 111 150 139 231 197 201 203 252 126 49 185 185 27 119 187 203 49 8 76 48 230 15 197 40 17 19 41 156 66 185 40 133 5 2 126 60 132 65 213 182 223 160 45 187 153 251 159 112 170 29 187 217 217 58 206 165 219 217 20 24 73 66 43 212 42 80 145 205 114 121 223 101 73 132 102 214 106 138 137 193 98 188 188 191 159 141 6 119 191 134 243 254 226 218 49 187 143 142 181 152 220 127 7 158 11 133 88 62 66 163 68 200 3 28 37 186 125 110 10 1 154 229 161 254 182 89 234 124 201 237 189 59 108 218 141 206 70 99 171 216 124 195 111 83 233 15 144 212 147 25 181 156 73 238 3 161 202 136 203 138 236 90 21 93 81 77 25 30 95 180 133 57 180 206 45 213 112 38 203 202 237 197 183 209 15 235 118 248 176 128 117 72 144 229 98 255 212 41 36 46 75 205 163 118 206 222 168 167 143 62 55 171 165 248 31 225 195 211 63 219 233 61 96 245 26 134 20 116 73 46 100 76 139 176 44 217 200 152 25 68 83 48 248 53 31 158 255 248 122 125 119 53 25 44 135 103 31 87 234 245 124 50 122 249 118 53 6 28 197 99 110 127 128 9 174 5 71 146 4 208 148 159 228 125 180 192 192 223 207 104 246 75 170 157 218 46 137 39 80 174 88 58 150 119 153 108 102 87 137 104 251 53 141 88 75 85 77 170 44 12 47 156 101 111 224 204 46 123 221 167 193 197 211 72 125 152 206 175 174 239 71 63 224 111 242 20 57 145 137 176 66 212 67 65 188 42 52 78 138 185 237 79 241 92 99 235 52 141 218 165 141 248 81 188 125 220 132 136 110 200 204 190 107 183 102 228 45 19 171 25 21 89 211 113 67 213 13 24 63 15 255 221 127 154 44 6 99 189 123 53 120 185 185 155 78 103 147 171 201 212 1 150 71 5 63 233 113 179 36 15 172 111 13 29 79 113 136 95 36 252 96 199 109 33 220 121 37 13 50 101 201 144 240 2 91 145 89 185 160 23 10 106 89 46 72 102 94 194 97 244 245 255 16 7 162 24 193 40 81 8 10 66 40 196 139 180 64 227 94 79 84 244 4 8 232 124 38 15 191 219 246 89 194 62 111 156 255 14 5 224 58 166 177 5 139 77 50 8 161 72 187 200 174 92 147 203 101 51 147 132 179 171 155 31 163 243 95 79 203 187 175 127 61 69 16 19 17 206 75 115 46 159 215 77 144 33 159 155 161 252 148 135 21 130 4 84 201 227 234 97 110 47 190 215 10 39 254 60 205 102 83 212 135 163 148 175 84 76 128 73 200 134 130 51 160 151 147 178 162 40 187 249 93 196 220 207 184 164 12 252 214 72 101 245 179 55 185 250 53 239 77 187 159 234 19 16 112 54 196 240 98 208 207 6 8 142 14 177 12 132 4 55 237 13 33 112 26 111 190 105 101 83 27 223 237 247 7 91 191 203 27 10 249 178 41 237 234 114 222 178 64 51 85 131 145 24 36 98 48 150 11 22 183 147 233 195 116 229 60 143 239 158 103 235 183 96 58 190 235 247 231 31 123 231 224 5 154 224 2 94 2 13 162 40 206 5 69 50 202 179 60 205 249 104 40 126 46 182 26 175 73 14 136 74 229 117 37 252 23 111 182 253 224 46 185 167 144 0 0 0 0 73 69 78 68 174 66 96 130]testHorizontalRuleTag  self assert: [:arg1 |  arg1 horizontalRule ] gives: '<hr/>'updateRoot: arg1  self selectorsToInclude do: [:arg2 |  | tmp1 |        tmp1 := self mimetypeOf: arg2.        (tmp1 sub indexOfSubCollection: 'javascript' startingAt: 1) ~= 0 ifTrue: [ arg1 javascript url: (self urlOf: arg2) ].        (tmp1 sub indexOfSubCollection: 'ico' startingAt: 1) ~= 0 ifTrue: [ arg1 link                 beShortcutIcon;                 url: (self urlOf: arg2) ].        tmp1 sub = 'css' ifTrue: [ arg1 stylesheet url: (self urlOf: arg2) ] ]selectionsCurrent: arg1  selectionsCurrent := arg1endDate: arg1  self clearSelection.  super endDate: arg1isRunningCog  ^(self vm respondsTo: #isRunningCog) and: [ self vm isRunningCog ]defaultButton  ^self buttons firstadd: arg1  self list add: arg1errorAlreadyMapped  self error: 'Already mapped'label  ^'Inspector'name  ^nameisMultipart  ^falseparent: arg1  parent := arg1testResourceBaseUrlConfigured  | tmp1 |  handler preferenceAt: #resourceBaseUrl put: (WAUrl absolute: '/15/30').  tmp1 := WATestingFiles default urlOf: #sampleJs using: handler.  self assert: tmp1 greaseString = '/15/30/WATestingFiles/sample.js'testPeekToEnd  | tmp1 |  tmp1 := Array with: 'tweets' with: 'kentbeck'.  self assert: consumer peekToEnd = tmp1.  self deny: consumer atEnd.  self assert: consumer next = 'tweets'.  self assert: consumer next = 'kentbeck'.  self assert: consumer atEndremoveLibrary: arg1  self preferenceAt: #libraries put: ((self preferenceAt: #libraries) reject: [:arg2 |  arg2 value = arg1 ])renderContentOn: arg1  self renderChildOn: arg1.  self renderToolbarOn: arg1modes  ^#(render source)renderAddressOn: arg1  arg1 heading     level2;     with: '<address>'.  arg1 address: [ #('Newsletter editor' 'J.R. Brown' 'JimquickPost News, Jimquick, CT 01234' 'Tel (123) 456 7890') do: [:arg2 |  arg1 text: arg2 ] separatedBy: [ arg1 break ] ]renderHeaderOn: arg1  arg1 tableHead: [ arg1 tableRow: [ arg1 tableData.              arg1 tableHeading: 'Absolute'.              arg1 tableHeading: 'Relative' ] ]initializeWithKey: arg1  super initializeWithKey: arg1.  self default: #()renderRemoveOn: arg1  arg1 listItem: 'Removing should work on Firefox and Safari but only if the path is unchanged. On Opera it should delete the value and the path.'byCreationListEntry  ^byCreationListEntryaction: arg1  self attributes at: 'action' put: arg1updateStates: arg1  arg1 register: nexthandleFiltered: arg1  | tmp1 tmp2 tmp3 tmp4 |  tmp3 := arg1 request fields.  tmp4 := tmp3 at: self documentHandlerFieldName ifAbsent: [ nil ].  tmp4 isNil ifFalse: [ | tmp5 |        tmp5 := self documentHandlers at: tmp4 ifAbsent: [ ^arg1 responseGenerator                 notFound;                 respond ].        ^tmp5 handle: arg1 ].  tmp1 := tmp3 at: self actionField ifAbsent: [ ^self start ].  tmp2 := continuations at: tmp1 ifAbsent: [ ^self unknownRequest ].  tmp2 handle: arg1testValuesCollect  | tmp1 |  cache at: 1 put: '1'.  cache at: 2 put: '2'.  tmp1 := cache valuesCollect: [:arg1 |  arg1 , arg1 ].  self assert: tmp1 class == cache class.  self assert: tmp1 size = 2.  self assert: (tmp1 at: 1 ifAbsent: [ nil ]) = '11'.  self assert: (tmp1 at: 2 ifAbsent: [ nil ]) = '22'render: arg1 on: arg2  | tmp1 tmp2 tmp3 |  tmp2 := self documentClass on: arg2 codec: self codec.  tmp2 scriptGenerator: self scriptGeneratorClass new.  tmp1 := WARenderContext new.  tmp1 document: tmp2.  tmp1     actionUrl: self actionUrl;     resourceUrl: self resourceUrl.  tmp3 := self rendererClass context: tmp1.  self openDocument: tmp2 context: tmp1.  tmp3     render: arg1;     flush.  self closeDocument: tmp2plugins  ^pluginsinitialize  super initialize.  self generator: GRPlatform current newRandom.  self space: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-'flush  stringForValue: arg1  ^arg1 isNil ifFalse: [ arg1 class name greaseString ]isClosed  ^truetestRawAddAllToPath  url rawAddAllToPath: #('files/WAStandardFiles' 'seaside.jpg').  self assert: url path size = 2.  self assert: url path first = 'files/WAStandardFiles'.  self assert: url path last = 'seaside.jpg'.  self assert: url greaseString = '/files%2FWAStandardFiles/seaside.jpg'definition: arg1  self definition with: arg1selectAll  dateSelectionStart := startDate.  dateSelectionEnd := endDate.  rowSelectionStart := 1.  rowSelectionEnd := rows sizecreateCache  self subclassResponsibilityrespondCookiesRequired: arg1  | tmp1 |  tmp1 := WAHtmlCanvas builder     fullDocument: true;     rootBlock: [:arg2 |  arg2           beHtml5;           title: 'Cookies Required' ];     render: [:arg3 |  self renderCookiesRequiredStatementOn: arg3 ].  arg1 respond: [:arg4 |  arg4           forbidden;           contentType: WAMimeType textHtml;           nextPutAll: tmp1 ]citation: arg1  self citation with: arg1contents  | tmp1 |  tmp1 := WriteStream on: String new.  self response writeOn: tmp1.  ^tmp1 contentstime  ^self brush: WATimeTag newaddTeletype  self addMedia: 'tty'reap  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := Time totalSeconds.  tmp4 := OrderedCollection new.  dictionary keysAndValuesDo: [:arg1 :arg2 |  arg2 hasBeenAccessedSinceLastReap ifTrue: [ arg2 setAccessTime: tmp1 ].        (self isExpired: arg2 now: tmp1) ifTrue: [ tmp4 add: arg1 ] ].  tmp3 := 0.  tmp2 := GRPlatform current.  tmp4 do: [:arg1 |  | tmp5 |        arg2 := dictionary removeKey: arg1.        self cacheEntryRemoved: arg2 value.        tmp3 := tmp3 + 1.        (tmp3 \\ 100) isZero ifTrue: [ tmp2 doCommitTransaction ] ].  (tmp3 \\ 100) isZero ifFalse: [ tmp2 doCommitTransaction ].  ^tmp3testFlushNextPutAll  self response nextPutAll: 'Hello World'.  self assert: self response isCommitted.  self should: [ self response committedCheck ] raise: WAIllegalStateException.  self assertLines: #('HTTP/1.1 200 OK' '' 'Hello World')extent: arg1  self     width: arg1 x;     height: arg1 ytestImageButton  self assert: [:arg1 |  arg1 imageButton ] gives: '<input type="image"/>'openBrush  self subclassResponsibilityupdateRoot: arg1  hasAdvancedAttributes: arg1  self propertyAt: #hasAdvanced put: arg1testDelegations  self assert: root delegations isEmpty.  root show: child1.  self assert: root delegations size = 1.  root addDecoration: decoration1.  self assert: root delegations size = 1initialize  super initialize.  input := 'input'hierarchyNames  self isRoot ifTrue: [ ^#() ].  ^self parent hierarchyNames copyWith: self namecreateRequest  ^WARequest method: 'GET' uri: '/seaside/pier/environment/pier.png?view=PRDownloadView' version: 1.1createCache  ^WABulkReapingCache initialSize: 13 maximumSize: maximumSize maximumAbsoluteAge: maximumAbsoluteAge maximumRelativeAge: maximumRelativeAge overflowAction: overflowActioncolor: arg1  color := arg1parents  ^Array with: WARenderLoopConfiguration instanceyear  ^yearisLocal  ^(self isGlobal or: [ self isDelegation ]) notrequestMethodFor: arg1  self subclassResponsibilitytype  ^'color'testIssue655  | tmp1 |  tmp1 := WAMimeType fromString: '*; q=.2'.  self assert: tmp1 main = '*'.  self assert: tmp1 sub = '*'.  self assert: (tmp1 parameters at: 'q') = '.2'.  tmp1 := WAMimeType fromString: '*'.  self assert: tmp1 main = '*'.  self assert: tmp1 sub = '*'.  self assert: (tmp1 parameters at: 'q' ifAbsent: [ nil ]) isNilsyntaxHighlightingCss  ^'span.patternUnary  {color:#000000;font-weight:bold;}span.patternKeyword  {color:#000000;font-weight:bold;}span.patternArg {color:#000088;}span.super  {color:#008888;}span.instanceVar  {color:#000088;}span.number  {color:#880088;}span.receiver  {color:#000088;}span.keyword  {color:#000000;}span.string  {color:#880088;}span.blockArg  {color:#000088;}span.class  {color:#000088;}span.self  {color:#008888;}span.symbol  {color:#880088;}'testAsMIMEDocumentMorphColol  | tmp1 tmp2 |  tmp1 := EllipseMorph new     color: Color red;     borderWidth: 1;     borderColor: Color black;     extent: 12 @ 12;     yourself.  tmp2 := tmp1 seasideMimeDocumentType: WAMimeType imageJpeg.  self assert: tmp2 contentType = WAMimeType imageJpeg.  self assert: (tmp2 content isKindOf: ByteArray)describeOn: arg1  (arg1 string: #smtpServer)     group: #email;     label: 'SMTP Server';     comment: 'The hostname of the SMTP Server to use for sending Emails'.  (arg1 integer: #smtpPort)     beAdvanced;     group: #email;     label: 'SMTP Port';     comment: 'The port of the SMTP Server to use for sending Emails.';     default: 25.  (arg1 string: #smtpUsername)     beAdvanced;     group: #email;     label: 'SMTP Server user name';     comment: 'The user name used to log into the SMTP Server to use for sending Emails'.  (arg1 string: #smtpPassword)     beAdvanced;     group: #email;     label: 'SMTP Server password';     comment: 'The password used to log into the SMTP Server to use for sending Emails'testMimeType  | tmp1 |  tmp1 := WATestingFiles default.  self assert: (tmp1 mimetypeForFile: 'main.js') = 'application/javascript' seasideMimeType.  self assert: (tmp1 mimetypeForFile: 'style2.css') = WAMimeType textCss.  self assert: (tmp1 mimetypeForFile: 'image.jpg') = WAMimeType imageJpeg.  self assert: (tmp1 mimetypeForFile: 'index') = WAMimeType applicationOctetStreamdescribeOn: arg1  select  ^self brush: WASelectTag newleavesBySends  ^String streamContents: [:arg1 |  self tally leavesPrintExactOn: arg1 ]triggerCallback  self requestContext request at: callback key ifAbsent: [ callback evaluateWithFieldValues: #() ]renderTableHeaderOn: arg1  arg1 tableRow: [ columns do: [:arg2 |  self renderHeaderForColumn: arg2 on: arg1 ] ]initializeWithKey: arg1  self initialize.  key := arg1postCopy  super postCopy.  byKey := byKey copy.  byValue := byValue copydatetimelocal  ^datetimelocalvisiblePresentersDo: arg1  (WAVisiblePresenterGuide client: (WAPluggablePresenterVisitor block: arg1)) start: selfrenderCharacterByCharacter: arg1 on: arg2  self requestContext codec name = '(none)' ifTrue: [ ^self ].  arg1 do: [:arg3 |  arg2 span: arg3 ]callback: arg1  arg1 argumentCount > 0 ifTrue: [ GRInvalidArgumentCount signal: 'Anchors expect a niladic callback.' ].  self url addField: (self storeCallback: (WAActionCallback on: arg1))plusButtonHit  showComment := true.  self clearMessageAndProtoclSelection.  self changed: #showtestInvalidSyntax  self should: [ WAUrl decodePercent: 'abc%' ] raise: WAInvalidUrlSyntaxError.  self should: [ WAUrl decodePercent: '%ZZ' ] raise: WAInvalidUrlSyntaxErroron: arg1 of: arg2  self value: (arg2 perform: arg1).  self callback: (GRDelayedSend receiver: arg2 selector: arg1 asMutator)renderTableFooterOn: arg1  arg1 tableRow: [ columns do: [:arg2 |  self renderFooterForColumn: arg2 on: arg1 ] ]nextPutAll: arg1  singleEncoder nextPutAll: arg1strong  ^self tag: 'strong'request: arg1 label: arg2 default: arg3  ^self wait: [:arg4 |  self request: arg1 label: arg2 default: arg3 onAnswer: arg4 ]values: arg1  values := arg1initialize  super initialize.  path := WAPath newrenderHeadingOn: arg1  arg1 heading     level: 1;     with: 'Seaside Walkback'.  arg1 heading     level: 2;     with: self exceptionDescriptionmultipleValuesCallback: arg1  self beMultiple.  self name: (self storeCallback: (WAAllUploadsCallback on: arg1))count  ^countvisitUrlAttribute: arg1  self html textInput     size: 40;     callback: [:arg2 |  self configuration takeValueFromString: arg2 forAttribute: arg1 ];     value: (arg1 stringForValue: (self configuration at: arg1 key))updateRoot: arg1  height: arg1  self attributeAt: 'height' put: arg1rootClass: arg1  rootClass := arg1haloPaintForm  ^self formClass extent: 16 @ 16 depth: 1 fromArray: #(0 0 0 402653184 503316480 192937984 213909504 73400320 103809024 51904512 25690112 14155776 7340032 0 0 0) offset: 0 @ 0renderPackagesOn: arg1  | tmp1 |  tmp1 := [ self sortedWorkingCopies ] on: Error do: [:arg2 |  arg1 render: 'Could not resolve working copies'.        ^self ].  arg1 table: [ arg1 tableHead: [ arg1 tableRow: [ arg1 tableHeading: 'Package'.                    arg1 tableHeading: 'Version' ] ].        tmp1 do: [:arg3 |  arg1 tableRow: [ arg1 tableHeading: arg3 key.                    arg1 tableHeading ].              arg3 value do: [:arg4 |  arg1 tableRow: [ arg1 tableData: arg4 packageName.                          arg1 tableData: (arg4 ancestry ancestorString copyAfterLast: $-) ] ] ] ]execute  self requestor show: (WADispatcherAddPage new           dispatcher: self requestor dispatcher;           yourself) onAnswer: [:arg1 |  arg1 isNil ifFalse: [ self requestor configure: arg1 ] ]testBreakTag  self assert: [:arg1 |  arg1 break ] gives: '<br/>'renderNextOn: arg1  arg1 space.  self isOnLastPage ifFalse: [ arg1 anchor           callback: [ self nextPage ];           with: '>>' ] ifTrue: [ arg1 text: '>>' ]createFalse  ^falseupdateRoot: arg1  super updateRoot: arg1.  arg1 title: self library nametestBasic  self assert: [:arg1 |  arg1 tag: 'the-tag' with: 'the-content' ] gives: '<the-tag>the-content</the-tag>'renderContentOn: arg1  arg1 orderedList: [ arg1 listItem: 'Click button of Step 1'.        arg1 listItem: 'Click back-button'.        arg1 listItem: 'Click button of Step 1'.        arg1 listItem: 'Click button of Step 2' ].  arg1 paragraph: 'Step 1 and Step 2 should have consistent number of visible presenters. Especially there should never be two WAAnswerDecorations.'.  arg1 heading     level: 2;     with: 'Application'.  arg1 render: task.  arg1 heading     level: 2;     with: 'Visible Presenters'.  arg1 table: [ arg1 tableRow: [ arg1 tableHeading: 'Presenter'.              arg1 tableHeading.              arg1 tableHeading: 'Next'.              arg1 tableHeading ].        self visiblePresentersDo: [:arg2 |  arg1 tableRow: [ arg1 tableData: arg2 printString.                    arg1 tableData: arg2 identityHash.                    arg1 tableData: (arg2 isDecoration ifTrue: [ arg2 next printString ] ifFalse: [ arg2 decoration printString ]).                    arg1 tableData: (arg2 isDecoration ifTrue: [ arg2 next identityHash ] ifFalse: [ arg2 decoration identityHash ]) ] ] ]showInstance  self model indicateInstanceMessagestestConditionalComment  self assertRoot: [:arg1 |  arg1 if           greaterThan;           orEqual;           ie55;           do: [ arg1 script                 defer;                 url: 'http://www.example.com/bugs.js' ] ] gives: '<title></title><!--[if gte IE 5.5]><script defer src="http://www.example.com/bugs.js"></script><![endif]-->'.  self assertRoot: [:arg1 |  arg1 if           not;           ie;           do: [ arg1 script url: 'http://www.example.com/bugs.js' ] ] gives: '<title></title><!--[if ! IE]><script src="http://www.example.com/bugs.js"></script><![endif]-->'replaceCache  self confirm: 'This will clear all existing sessions in the current cache. Are you sure you want to continue?' onAnswer: [:arg1 |  arg1 ifTrue: [ self storeConfigurationValues.              self handler cache: self createCache ] ]testUnorderedListTag  self assert: [:arg1 |  arg1 unorderedList ] gives: '<ul></ul>'.  self assert: [:arg1 |  arg1 unorderedList add: 1 ] gives: '<ul><li>1</li></ul>'.  self assert: [:arg1 |  arg1 unorderedList addAll: #(1 2) ] gives: '<ul><li>1</li><li>2</li></ul>'.  self assert: [:arg1 |  arg1 unorderedList list: #(1 2) ] gives: '<ul><li>1</li><li>2</li></ul>'.  self assert: [:arg1 |  arg1 unorderedList           list: #(1 2);           with: [ arg1 listItem: 3 ] ] gives: '<ul><li>1</li><li>2</li><li>3</li></ul>'.  self assert: [:arg1 |  arg1 unorderedList           add: 2;           labels: [:arg2 |  2 * arg2 ] ] gives: '<ul><li>4</li></ul>'.  self assert: [:arg1 |  arg1 unorderedList           add: 2;           labels: [:arg2 |  2 * arg2 ];           with: [ arg1 listItem: 5 ] ] gives: '<ul><li>4</li><li>5</li></ul>'editIntegerVMParameterAt: arg1 named: arg2  self request: arg2 default: (SmalltalkImage current vm parameterAt: arg1) onAnswer: [:arg3 |  SmalltalkImage current vm parameterAt: arg1 put: arg3 greaseInteger ]testRenderingDecoration  root onRender: [:arg1 |  arg1 text: 'r' ].  root addDecoration: decoration1.  decoration1 onRender: [:arg1 :arg2 |  arg1 text: '1'.        arg2 value ].  self assertRenders: '1r'.  decoration1 onRender: [:arg1 :arg2 |  arg2 value.        arg1 text: '1' ].  self assertRenders: 'r1'.  decoration1 onRender: [:arg1 :arg2 |  arg1 text: '1' ].  self assertRenders: '1'sweep: arg1 maximumAge: arg2 now: arg3  | tmp1 |  tmp1 := arg1.  [ tmp1 isNil ] whileFalse: [ arg3 - tmp1 time > arg2 ifTrue: [ self removeCacheEntry: tmp1 cacheEntry.              tmp1 := tmp1 next ] ifFalse: [ ^self ] ]testEventAttributes  self assert: [:arg1 |  arg1 div           onBlur: 1;           onBlur: 2 ] gives: '<div onblur="1;2"></div>'.  self assert: [:arg1 |  arg1 div           onChange: 1;           onChange: 2 ] gives: '<div onchange="1;2"></div>'.  self assert: [:arg1 |  arg1 div           onClick: 1;           onClick: 2 ] gives: '<div onclick="1;2"></div>'.  self assert: [:arg1 |  arg1 div           onDoubleClick: 1;           onDoubleClick: 2 ] gives: '<div ondblclick="1;2"></div>'currentPage  ^currentPage ifNil: [ currentPage := self validPages first ]terminate: arg1  | tmp1 |  tmp1 := arg1.  [ tmp1 notNil ] whileTrue: [ tmp1 := tmp1 swapSender: nil ]beRadio  self type: 'radio'rawContents  ^contentsbefore  super before.  defaultAction ifNil: [ ^nil ].  canvas div: [ canvas submitButton           tabIndex: -1;           value: 'Default';           callback: defaultAction;           style: 'position: absolute; top: -100em'.        self isInternetExplorer ifTrue: [ canvas textInput                 tabIndex: -1;                 callback: [:arg1 |   ];                 style: 'position: absolute; top: -100em' ] ]testImageTag  self assert: [:arg1 |  arg1 image url: 'http://www.seaside.st/logo.jpeg' ] gives: '<img alt="" src="http://www.seaside.st/logo.jpeg"/>'.  self assert: [:arg1 |  arg1 image           title: 'Seaside';           altText: 'the Seaside logo';           url: 'http://www.seaside.st/logo.jpeg' ] gives: '<img alt="the Seaside logo" title="Seaside" src="http://www.seaside.st/logo.jpeg"/>'samplePng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 255 0 255 0 255 160 189 167 147 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 214 4 9 20 4 42 36 195 187 166 0 0 2 112 73 68 65 84 56 203 173 147 221 75 83 113 24 199 63 155 155 110 57 245 164 169 232 24 180 240 173 50 207 48 74 144 68 27 82 209 141 43 147 145 136 226 159 97 36 236 70 130 174 162 232 38 34 42 86 104 26 42 5 74 47 243 5 65 212 110 52 148 48 95 74 156 107 206 236 156 249 50 117 110 167 139 58 232 130 186 144 30 248 193 247 226 249 124 248 61 207 143 31 28 172 146 107 156 213 74 119 119 183 114 16 216 180 15 222 19 184 65 116 67 167 27 228 223 167 211 13 226 31 112 226 126 184 198 89 173 104 84 24 232 183 55 54 10 73 201 41 16 217 37 184 178 66 95 107 171 4 84 44 222 110 89 150 229 96 219 204 204 76 89 93 109 61 85 85 85 212 56 171 105 111 123 169 87 5 157 246 250 122 135 226 245 18 24 25 1 69 225 136 77 132 212 52 94 127 15 140 249 46 86 230 100 103 153 15 23 228 159 160 188 188 92 133 117 64 36 14 224 42 60 40 42 41 73 88 236 233 97 119 99 131 104 56 204 178 94 199 156 205 198 194 217 211 230 230 155 46 163 86 27 135 40 138 108 132 130 60 122 248 88 7 68 0 180 234 112 74 40 4 202 222 78 190 230 230 225 63 83 76 83 83 51 62 159 143 188 188 60 218 59 94 176 24 76 222 108 56 89 89 168 246 169 2 79 48 16 32 45 63 31 157 193 192 252 229 75 248 47 216 185 238 172 197 231 243 97 52 26 233 31 232 227 211 236 23 4 177 250 208 146 144 237 138 17 76 31 79 126 254 166 191 87 193 100 226 104 105 41 19 69 133 92 113 92 99 109 109 13 69 81 88 95 15 50 60 58 202 80 192 138 201 168 195 159 146 105 143 17 124 168 73 170 141 27 44 211 188 21 38 232 26 241 144 62 61 133 167 239 61 130 32 32 203 50 119 238 221 229 227 143 12 66 187 113 108 135 35 49 239 170 3 208 155 37 123 162 152 195 192 173 49 182 36 3 130 55 132 102 106 146 150 251 207 8 71 34 172 104 173 44 109 9 164 101 89 9 200 219 100 202 126 79 140 0 32 204 38 74 244 87 150 204 195 196 235 102 241 246 26 176 228 22 99 200 182 112 42 43 129 213 245 29 62 15 116 72 54 105 201 21 35 8 123 5 207 106 116 206 97 201 201 96 97 122 25 128 236 226 45 178 114 94 49 120 99 202 247 77 41 72 4 200 148 253 30 155 180 228 122 50 249 110 92 21 104 0 28 117 86 49 122 46 208 127 190 193 34 24 73 37 202 46 235 138 159 161 167 43 146 118 40 189 162 203 61 63 254 183 143 161 81 131 163 206 42 238 28 219 113 233 205 146 93 189 85 252 92 188 235 95 240 127 169 159 24 23 11 103 188 240 115 88 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytestUser  url     host: 'seaside.st';     user: 'foo'.  self assert: url user = 'foo'.  self assert: url greaseString = 'http://foo@seaside.st/'retrieveSearchContext: arg1 ifAbsentPut: arg2  | tmp1 |  cachedSearchContexts isNil ifTrue: [ cachedSearchContexts := IdentityDictionary new ].  tmp1 := cachedSearchContexts at: arg1 ifAbsentPut: arg2.  ^tmp1 attribute isNil ifTrue: [ cachedSearchContexts at: arg1 put: arg2 value ] ifFalse: [ tmp1 ]testGenericCodecAll  TextConverter allEncodingNames do: [:arg1 |  (#('utf-8') , GRPharoLatin1Codec supportedEncodingNames includes: arg1) ifFalse: [ | tmp1 |              tmp1 := GRCodec forEncoding: arg1.              self assert: tmp1 name = arg1.              self assert: (tmp1 isKindOf: GRPharoGenericCodec) ] ]renderDownloadLinksOn: arg1  arg1 paragraph: [ | tmp1 tmp2 |        self renderIsByteArray: file rawContents on: arg1.        arg1 break.        tmp2 := file contentType.        tmp1 := (tmp2 isNil or: [ tmp2 isBinary ]) ifTrue: [ file rawContents ] ifFalse: [ file contentsDecodedUsing: 'ISO-8859-1' ].        arg1 anchor           document: tmp1 mimeType: file contentType fileName: file fileName;           with: file fileName , ' (' , file contentType greaseString , ')'.        arg1 break.        arg1 anchor           document: file rawContents;           with: file fileName ]testCopyDispatcher  | tmp1 tmp2 |  tmp1 := handler copy.  self deny: tmp1 == handler.  self assert: tmp1 defaultName = handler defaultName.  self assert: tmp1 handlers keys size = handler handlers keys size.  self assert: (tmp1 handlers keys allSatisfy: [:arg1 |  handler handlers keys includes: arg1 ]).  self assert: (handler handlers keys allSatisfy: [:arg1 |  tmp1 handlers keys includes: arg1 ]).  tmp1 handlers do: [:arg1 |  tmp2 := handler handlerAt: arg1 name.        self assert: arg1 class == tmp2 class.        self deny: arg1 == tmp2.        arg1 isDispatcher ifTrue: [ self assert: arg1 handlers keys = tmp2 handlers keys ] ]testAtPutOverwrite  1 to: 100 do: [:arg1 |  | tmp1 tmp2 |        tmp1 := false.        cache at: arg1 ifAbsent: [ tmp1 := true ].        self assert: tmp1.        cache at: arg1 put: 'zork'.        tmp2 := cache at: arg1 put: arg1 greaseString.        self assert: tmp2 = arg1 greaseString.        tmp2 := cache at: arg1 ifAbsent: [ self assert: false ].        self assert: tmp2 = arg1 greaseString ]addToRemovals  self expression removals: self expression removals , (self selectedInherited reject: [:arg1 |  self expression removals includes: arg1 ])renderButtonsOn: arg1  arg1 div     class: 'dialog-buttons';     with: [ self buttons do: [:arg2 |  arg1 span                 class: 'dialog-button-' , arg2;                 with: [ self renderButtonForSelector: arg2 on: arg1 ] ] ]createCache  ^GRPlatform current createSessionCacheForApplication: selftime  (self privateIsValidSecond: second hourNumber: hour minuteNumber: minute) ifFalse: [ self error: 'Invalid time' ].  ^self timeClass hour: hour minute: minute second: secondisSsl  ^self scheme isEmptyOrNil not and: [ self scheme last = $s ]renderDay  | tmp1 |  tmp1 := canvas textInput     id: (self id isNil ifFalse: [ self id , '-day' ]);     value: (GRNumberPrinter new           padding: $0;           digits: 2;           print: day);     yourself.  self addDayCallbackToBrush: tmp1.  tmp1     attributeAt: 'size' put: 2;     attributeAt: 'maxlength' put: 2serverPath: arg1  self preferenceAt: #serverPath put: arg1postCopy  super postCopy.  mutex := WAMutex new.  cache := cache copyrenderCogValuesOn: arg1  self renderLabel: 'Cog VM - Size of eden (bytes)' value: (self vm parameterAt: 44) on: arg1separator  ^' > 'beAlternateStylesheet  self relationship: 'alternate stylesheet'extent: arg1  self     width: arg1 x;     height: arg1 ychildren  ^Array with: dateSelector with: timeSelectorremove: arg1  self shouldNotImplementrenderNestedMultiSelectionOn: arg1  | tmp1 |  self renderLabel: 'Nested Multi Selection' input: [ tmp1 := arg1 multiSelect.        tmp1           size: 6;           callback: [:arg2 |  nestedMultiSelection := arg2 ];           selected: nestedMultiSelection;           with: [ self nestedElements do: [:arg3 |  arg1 optionGroup                       label: arg3 first;                       with: [ arg3 second do: [:arg4 |  arg1 option                                   value: arg4 with: tmp1;                                   with: arg4 ] ] ] ] ] output: [ nestedMultiSelection isNil ifFalse: [ arg1 unorderedList list: nestedMultiSelection ] ] on: arg1previousPage  self isOnFirstPage ifFalse: [ self currentPage: self currentPage - 1 ]addClass: arg1  self at: 'class' append: arg1 separator: Character spacerenderNextOn: arg1  self next renderUndecoratedWithContext: arg1 contextbefore  self isOptional ifTrue: [ self renderOptional ].  super beforetag  ^'output'textForRow: arg1  ^formatBlock value: (self valueForRow: arg1)renderSlashSuccess: arg1 on: arg2  | tmp1 tmp2 tmp3 |  tmp1 := self requestContext request.  tmp2 := tmp1 url slash.  tmp3 := tmp1 fields at: 'slash' ifAbsent: [ nil ].  tmp3 isNil ifTrue: [ arg2 strong: 'not run' ] ifFalse: [ arg1 greaseString = tmp3 ifTrue: [ tmp2 greaseString = tmp3 ifTrue: [ arg2 strong: 'success' ] ifFalse: [ arg2 strong: 'fail' ] ] ifFalse: [ arg2 strong: 'not run' ] ]previous  | tmp1 |  tmp1 := (self selectionIndex + classes size - 2) \\ classes size + 1.  self selected: (classes at: tmp1)clickBlock: arg1  clickBlock := arg1suspend  self uiProcess suspend.  self stopstartIndex  ^(self currentPage - 1) * self batchSize + 1renderAcceptEncodingFor: arg1 on: arg2  arg2 definitionTerm: 'Accept-Encoding:'.  self renderQualifiedValues: arg1 acceptEncoding on: arg2onDragLeave: arg1  self document scriptGenerator event: 'dragleave' do: arg1 on: selfrendererClass  ^rendererClassassert: arg1 gives: arg2  | tmp1 |  tmp1 := WAXmlCanvas builder render: arg1.  self assert: arg2 = tmp1seasideMimeDocument  ^selfprint: arg1  arg1 encodeOn: selfnewSession  ^WASession newmonth  ^monthinitializeWithException: arg1  | tmp1 |  super initializeWithException: arg1.  tmp1 := arg1 signalerContext.  frames := OrderedCollection new.  [ tmp1 isNil ] whileFalse: [ frames add: tmp1.        tmp1 := tmp1 sender ]parseObject  | tmp1 |  self expectChar: ${.  tmp1 := self createObject.  (self matchChar: $}) ifTrue: [ ^tmp1 ].  [ stream atEnd ] whileFalse: [ tmp1 := self addProperty: self parseProperty to: tmp1.        (self matchChar: $}) ifTrue: [ ^tmp1 ].        self expectChar: $, ].  self error: 'end of object expected'tableBodyCssClass  ^'right'testCompileStringAgain  | tmp1 tmp2 |  tmp1 := WATestingFiles default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoTxt).  tmp3 := 'this is a string'.  tmp2 := WAFile new     contentType: WAMimeType textPlain;     contents: tmp3;     fileName: 'demo.txt';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoTxt).  tmp4 := tmp1 perform: #demoTxt.  self assert: tmp4 = tmp3.  tmp5 := tmp1 perform: #demoTxt.  self assert: tmp4 == tmp5.  tmp3 := 'this is another string'.  tmp2 := WAFile new     contentType: WAMimeType textPlain;     contents: tmp3;     fileName: 'demo.txt';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoTxt).  tmp4 := tmp1 perform: #demoTxt.  self assert: tmp4 = tmp3.  tmp5 := tmp1 perform: #demoTxt.  self assert: tmp4 == tmp5 ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoTxt) ]title  ^self labelevaluateWithArgument: arg1  arg1 isNil ifFalse: [ block valueWithPossibleArguments: (Array with: arg1) ]renderHeadingOn: arg1  arg1 div     class: 'header';     with: self titlecharacter: arg1  self attributes at: 'char' put: arg1style: arg1  self attributes addStyle: arg1testNoneStatisfy  self deny: (#(1 2 3) noneSatisfy: [:arg1 |  arg1 even ]).  self assert: (#(1 3 5) noneSatisfy: [:arg1 |  arg1 even ])redirectToContinuation: arg1  self respond: [:arg2 |  | tmp1 |        tmp1 := arg1 registerForUrl.        jumpTo isNil ifFalse: [ tmp1 fragment: jumpTo ].        arg2 redirectTo: tmp1 ]testIncludesUnsafeUrlCharacter  | tmp1 tmp2 |  tmp1 := WAPharoUrlEncoder on: (WriteStream on: String new).  tmp2 := ((0 to: 127) collect: [:arg1 |  Character codePoint: arg1 ]) reject: [:arg1 |  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.~' includes: arg1 ].  tmp2 do: [:arg1 |  self assert: (tmp1 includesUnsafeCharacter: (String with: arg1)).        self assert: (tmp1 includesUnsafeCharacter: 'a' , (String with: arg1)).        self assert: (tmp1 includesUnsafeCharacter: (String with: arg1) , 'a') ].  tmp1 includesUnsafeCharacter: ''mainCss  ^'/* Pier   Copyright (c) 2003-2006 Lukas Renggli   Copyright (c) 2005-2006 Software Composition Group, University of Berne*/* {	margin: 0px;	padding: 0px;}body {	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;	font-size: 12px;	color: #111111;	margin: 10px;}img {	border: none;}td,th {	text-align: left;	vertical-align: top;}a {	text-decoration: none;	color: #092565;}a:hover {	text-decoration: underline;}.broken {    color: #aa0000;}.protected {    color: #aaaaaa;}'group: arg1  group := arg1.  self setCachedProperties.  self showHelp: falsetopWindow  ^SystemWindow classPool at: #TopWindowencodePathOn: arg1  path isNil ifFalse: [ path keysAndValuesDo: [:arg2 :arg3 |  arg1 nextPut: $/.              arg1 urlEncoder nextPutAll: arg3.              pathParameters isNil ifFalse: [ self encodePathParametersAt: arg2 on: arg1 ] ] ].  (path isNil or: [ path isEmpty or: [ slash ] ]) ifTrue: [ arg1 nextPut: $/ ]beHtml5  self docType: '<!DOCTYPE html>'at: arg1 put: arg2  self at: arg1 put: arg2 overwrite: true.  ^arg2nextPut: arg1  | tmp1 |  tmp1 := arg1 greaseInteger.  tmp1 = 34 ifTrue: [ ^stream nextPutAll: '&quot;' ].  tmp1 = 60 ifTrue: [ ^stream nextPutAll: '&lt;' ].  tmp1 = 38 ifTrue: [ ^stream nextPutAll: '&amp;' ].  tmp1 = 62 ifTrue: [ ^stream nextPutAll: '&gt;' ].  stream nextPut: arg1cacheDuration  ^cacheDurationcomponent  ^componentopen: arg1  self requestContext request isXmlHttpRequest ifTrue: [ ^super open: arg1 ].  self shouldCall ifTrue: [ self openUsingCall: arg1 ] ifFalse: [ self openUsingDirectRendering: arg1 ]sessionClass  ^(self preferenceAt: #sessionClass) valuerenderEmailsOn: arg1  emails isNil ifTrue: [ ^self ].  arg1 unorderedList list: emailsrubyParentheses: arg1  self rubyParentheses with: arg1script  ^niltableCaption: arg1  self tableCaption with: arg1renderWalkbacksOn: arg1  arg1 paragraph: [ arg1 checkbox           id: arg1 nextId;           value: self errorWalkbacksEnabled;           onTrue: [ self enableErrorWalkbacks ] onFalse: [ self disableErrorWalkbacks ];           onChange: arg1 jQuery ajax serializeForm.        arg1 label           for: arg1 lastId;           with: 'Allow debugging of errors' ]content  ^self contentsisOnFirstPage  ^self currentPage = 1name: arg1  self attributeAt: 'name' put: arg1addYearCallbackToBrush: arg1  self hasCallback ifFalse: [ ^self ].  arg1 callback: [:arg2 |  self year: arg2 ]sessionIdFromContext: arg1  self subclassResponsibilityisPlainText  ^falsesetParent: arg1 canvas: arg2  parent := arg1.  canvas := arg2writeSecureOn: arg1  self secure ifTrue: [ arg1 nextPutAll: '; Secure' ]pathStringUnencoded  | tmp1 tmp2 tmp3 |  tmp3 := self detectCommonPathElementClass.  tmp3 isNil ifTrue: [ ^self pathStringSafeUnencoded ].  tmp1 := tmp3 new: self pathStringUnencodedSize.  tmp2 := WriteStream on: tmp1.  self pathUnencodedOn: tmp2.  ^tmp1renderFooterOn: arg1  isChunked  ^(self headerAt: 'Transfer-Encoding' ifAbsent: [ nil ]) = 'chunked'hours  ^hoursrenderInheritedAttribute: arg1 on: arg2  arg2 text: (arg1 stringForValue: (self configuration at: arg1 key))language: arg1  self attributes     at: 'lang' put: arg1;     at: 'xml:lang' put: arg1push: arg1 during: arg2  handlers addFirst: arg1.  ^[ WACurrentRequestContext use: self during: arg2 ] ensure: [ handlers removeFirst ]testStyle  self assertRoot: [:arg1 |  arg1 style: 'body{font-size:12px;}' ] gives: '<title></title><style>body{font-size:12px;}</style>'javascript  ^(JSScript context: self context)     rendererClass: self species;     yourselfinitialize  super initialize.  loadScripts := OrderedCollection newmain: arg1  self main with: arg1createCache  ^WAMutualExclusionCache on: (WAHashCache initialSize: 13 maximumSize: maximumSize maximumAbsoluteAge: maximumAbsoluteAge maximumRelativeAge: maximumRelativeAge overflowAction: overflowAction)renderMaximumRelativeAgeOn: arg1  arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'Maximum Relative Age' ].        arg1 tableData: [ arg1 textInput                 size: 5;                 on: #maximumRelativeAge of: self ] ].  arg1 tableRow: [ arg1 tableData           colSpan: 2;           with: 'After so many seconds of inactivity a session is considered expired. 0 for no limit. Has to be positive.' ]urlencoded  ^urlencodedtestPathConsumption  | tmp1 tmp2 |  tmp2 := self requestWithMethod: 'GET'.  tmp1 := WARequestContext request: tmp2 response: WABufferedResponse new.  tmp1 consumer next.  self assert: tmp1 consumer peek = 'oneo'.  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp1 consumer peek = 'oneo'execute  self open: (WAPluggableTool on: (WAViewer on: self root))tag  ^'command'testAsMIMEDocumentStringColon  | tmp1 |  tmp1 := WABlockMimeDocument onBlock: [ 'hello Seaside' ].  tmp1 mimeType: 'text/x-weirdo' seasideMimeType.  self assert: tmp1 contentType = 'text/x-weirdo' seasideMimeType.  self assert: tmp1 content = 'hello Seaside'values  ^valuesdefaultName  ^defaultNameinitializeWithRequest: arg1  self initialize.  request := arg1renderFileContentsOn: arg1  file size <= 16r10000 ifTrue: [ arg1 preformatted: (file contentsDecodedUsing: 'ISO-8859-1') ] ifFalse: [ arg1 break.        arg1 text: 'file size is: ' , file size greaseString , ' bytes' ]initialize  super initialize.  isReversed := false.  rows := #().  columns := #().  sortColumn := WAValueHolder new.  rowColors := #('#fff' '#eee').  rowPeriod := 1onDragOver: arg1  self document scriptGenerator event: 'dragover' do: arg1 on: selftestTerminate  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := nil.  tmp2 := GRPlatform current semaphoreClass new.  tmp3 := GRPlatform current semaphoreClass new.  tmp4 := GRPlatform current semaphoreClass new.  process := [ tmp1 := [ mutex critical: [ tmp2 signal.        tmp3 wait.        1 ] ] ensure: [ tmp4 signal ] ] newProcess.  process resume.  tmp2 wait.  self assert: mutex owner == process.  mutex terminateOwner.  tmp4 wait.  self assert: mutex owner isNil.  self assert: tmp1 isNil.  self assert: (GRPlatform current isProcessTerminated: process)useBaseUrl  self url: canvas actionBaseUrl copytestKeysAndValuesDo  | tmp1 tmp2 |  one at: 'foo' put: 1.  two at: 'bar' put: 2.  two at: 'foo' put: 3.  tmp1 := OrderedCollection new.  tmp2 := OrderedCollection new.  merged keysAndValuesDo: [:arg1 :arg2 |  tmp1 add: arg1.        tmp2 add: arg2 ].  self assert: tmp1 asArray = #('foo' 'bar' 'foo').  self assert: tmp2 asArray = #(1 2 3)renderActionsOn: arg1  (self isOverride or: [ self isModify ]) ifTrue: [ arg1 anchor           title: 'Clear override';           onClick: 'return submitForm(this)';           callback: [ self clear ];           with: 'Clear'.        self isModify ifTrue: [ arg1 space.              self renderAddToRemovalOn: arg1 ] ] ifFalse: [ arg1 anchor           title: 'Override inherited values';           onClick: 'return submitForm(this)';           callback: [ self override ];           with: 'Override'.        arg1 space.        arg1 anchor           title: 'Define Additions and / or removals';           onClick: 'return submitForm(this)';           callback: [ self modify ];           with: 'Modify' ]shouldRedirect: arg1  ^arg1 request isGet and: [ arg1 request url slash not ]addForm  form := WAFormDecoration new buttons: self buttons.  self addDecoration: forminitializeWithRequest: arg1 response: arg2 codec: arg3  self initialize.  handlers := OrderedCollection new.  request := arg1.  response := arg2.  codec := arg3.  arg1 isNil ifFalse: [ consumer := WAPathConsumer path: arg1 url path copy ]fileSizeOf: arg1  ^(self fileResourceOf: arg1) contents value sizerenderAPInfoOn: arg1  | tmp1 tmp2 |  arg1 horizontalRule.  arg1 paragraph: 'You can also upload files programatically:'.  arg1 blockquote: [ arg1           code: self library class greaseString , ' addAllFilesIn: ''/var/www/files/twitterbootstrap/css''';           break.        arg1 code: self library class greaseString , ' addAllFilesIn: ''/var/www/files/twitterbootstrap/js''' ].  (self library isKindOf: WAFileMetadataLibrary) ifTrue: [ tmp1 := self library class greaseString.        tmp2 := 'Additionally as your file library is derived from ' ] ifFalse: [ tmp1 := 'MYWAFileMetadataDerivedFileLibrary'.        tmp2 := 'Also if you create a file library derived from ' ].  arg1 paragraph: [ arg1           text: tmp2;           code: 'WAFileMetadataLibrary';           text: ' you can store files which include a path component, for example: ' ].  arg1 blockquote: [ arg1 code: tmp1 , ' recursivelyAddAllFilesIn: ''/var/www/files/twitterbootstrap''' ].  arg1 paragraph: [ arg1           text: 'Now all the files in ';           code: [ arg1                 text: '''/var/www/files/twitterbootstrap/';                 strong: 'css';                 text: '''' ];           text: 'and ';           code: [ arg1                 text: '''/var/www/files/twitterbootstrap/';                 strong: 'js';                 text: '''' ];           text: ' will include a the path component of either ';           code: '''css/''';           text: ' or ';           code: '''js/''';           text: ' in their url path.' ].  arg1 horizontalRule.  arg1 paragraph: 'In a rendering method,  you can refer to files in your file library with:'.  arg1 blockquote: [ arg1 code: 'html image url:  MyFileLibrary / #pictureJpg.' ].  arg1 paragraph: [ arg1           text: 'You can easily include all css and javascript referred to within the method ';           code: '#selectorsToInclude';           text: ' in your component''s #updateRoot: using:' ].  arg1 blockquote: [ arg1 code: 'MyFileLibrary default updateRoot: aHtmlRoot.' ].  arg1 horizontalRule.  arg1 paragraph: 'When you are ready to deploy your site, you can write the files from your file library out to the file system, using:'.  arg1 blockquote: [ arg1 code: 'MyFileLibrary default deployFiles.' ].  arg1 paragraph: [ arg1           text: 'In this example, the files will be written to a folder beneath your image named: ';           code: 'MyFileLibrary' ].  arg1 paragraph: [ arg1 text: 'See also: '.        arg1 anchor           url: 'http://book.seaside.st/book/in-action/serving-files';           with: 'serving files'.        arg1 text: ' in the '.        arg1 anchor           url: 'http://book.seaside.st';           with: 'Seaside book' ]renderExplanationOn: arg1  arg1 paragraph: 'This regression tests checks if #call:onAnswer: on the parent component works. If you click "swap parent" "Test passes!" should appear without a tab panel.'seasideUrl  ^selfwriteStatusOn: arg1  arg1 nextPutAll: self httpVersion.  arg1     nextPut: $ ;     nextPutAll: self status greaseString.  self message isNil ifFalse: [ arg1           nextPut: $ ;           nextPutAll: self message ].  arg1 crlfrenderValidationOn: arg1  arg1 anchor     callback: [ self startValidation ];     with: 'Start'testHeaderAfterCommit  self response flush.  self should: [ self response headerAt: 'foo' put: 'bar' ] raise: WAIllegalStateException.  self should: [ self response headerAt: 'foo' append: 'bar' ] raise: WAIllegalStateException.  self should: [ self response removeHeaderAt: 'foo' ] raise: WAIllegalStateExceptiontestMethodTemps  | tmp1 tmp2 |  tmp1 := 0.  tmp1 := tmp1 + (self callcc: [:arg1 |  tmp2 := arg1.              1 ]).  self assert: tmp1 ~= 3.  tmp1 = 2 ifFalse: [ tmp2 value: 2 ]renderModeButtonsOn: arg1  arg1 form     class: 'mode';     with: [ arg1 div: [ arg1 submitButton                 callback: [ self showInstance ];                 value: 'instance'.              arg1 submitButton                 callback: [ self showHelp ];                 value: 'help'.              arg1 submitButton                 callback: [ self showClass ];                 value: 'class' ] ]accept: arg1  self attributes at: 'accept' put: arg1toggleVisbility  self collapsed: self collapsed not.  self collapsed ifTrue: [ self showHelp: false ]click: arg1  | tmp1 |  tmp1 := Array new: 8.  tmp1 at: 1 put: 1.  tmp1 at: 2 put: Time millisecondClockValue.  tmp1 at: 3 put: arg1 x.  tmp1 at: 4 put: arg1 y.  tmp1 at: 5 put: self buttonCode.  tmp1 at: 6 put: 0.  self handleEvent: tmp1.  tmp1 at: 5 put: 0.  self handleEvent: tmp1.  button := #redvalueWithPossibleArguments: arg1  self subclassResponsibilitycountryName  ^self country size = 2 ifTrue: [ self class iso2Countries at: self country ] ifFalse: [ self class iso3Countries at: self country ]id  ^idtag  ^'menu'testWithoutCountry  | tmp1 |  tmp1 := WALocale fromString: 'de_CH'.  self assert: tmp1 language = 'de'.  self assert: tmp1 country = 'CH'.  tmp1 := tmp1 withoutCountry.  self assert: tmp1 language = 'de'.  self assert: tmp1 country isNil.  tmp1 := WALocale fromString: 'de'.  self assert: tmp1 language = 'de'.  self assert: tmp1 country isNil.  tmp1 := tmp1 withoutCountry.  self assert: tmp1 language = 'de'.  self assert: tmp1 country isNilisStreamingResponse  ^truetestError  self should: [ WAObject new error: 'oh dear' ] raise: WAError.  self should: [ WAObject error: 'oh dear' ] raise: WAErrorat: arg1  ^self fields at: arg1cacheFor: arg1  self removeHeaderAt: 'Pragma'.  self headerAt: 'Expires' putDate: DateAndTime now + arg1.  self headerAt: 'Cache-Control' put: 'max-age=' , arg1 asSeconds printStringtestInitialRequest  | tmp1 tmp2 |  tmp1 := WARequest new.  root onInitialRequest: [:arg1 |  self assert: arg1 = tmp1.        self log: 'root' ].  child1 onInitialRequest: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child1' ].  child2 onInitialRequest: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child2' ].  child3 onInitialRequest: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child3' ].  decoration1 onInitialRequest: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration1' ].  decoration2 onInitialRequest: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration2' ].  tmp2 := WAAllPresenterGuide client: (WAInitialRequestVisitor request: tmp1).  tmp2 start: root.  self assertLog: #('root').  root onChildren: [ Array with: child1 with: child2 ].  tmp2 start: root.  self assertLog: #('root' 'child1' 'child2').  root     addDecoration: decoration1;     addDecoration: decoration2.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').  child2 show: child3.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3' 'child2')documentClass: arg1  documentClass := arg1renderDeadDateTimeOn: arg1  arg1 heading     level: 3;     with: 'Div with #dateInput and #timeInput, no callback'.  arg1 form: [ arg1 div           id: #deadInputs;           with: [ arg1 dateInput value: Date today.              arg1 space: 10.              arg1 timeInput                 withSeconds;                 with: Time now.              arg1 break.              arg1 withLineBreaks: 'The year portion of the date should be visible.					The seconds portion of the time should be visible.					Exactly one date and one time selector should be visible.' ] ]addCookie: arg1  self committedCheck.  ^super addCookie: arg1isOnFirstPage  ^self validPages first = self currentPageurl  ^url ifNil: [ url := canvas actionUrl copy ]testQueryEncoding  self assert: (url withField: '/' value: ' ') printString = '/?%2F=%20'.  self assert: (url withField: '+' value: '%') printString = '/?%2B=%25'.  self assert: (url withField: '?' value: '&') printString = '/?%3F=%26'.  self assert: (url withField: '[' value: ']') printString = '/?%5B=%5D'.  self assert: (url withField: '=' value: '<') printString = '/?%3D=%3C'handlerClass  ^WATextFileHandlerListingselectedAdaptor  ^adaptors selection selectedItemtestCreation10  | tmp1 |  tmp1 := WAHttpVersion http10.  self assert: tmp1 major = 1.  self assert: tmp1 minor = 0label  ^'Memory'title  ^'Counter'renderUndecoratedWithContext: arg1  self accept: arg1 visitortestResourceBaseUrlNotConfigured  | tmp1 |  handler preferenceAt: #resourceBaseUrl put: nil.  tmp1 := WATestingFiles default urlOf: #sampleJs using: handler.  self assert: tmp1 greaseString = ('/' , self handlerName , '/WATestingFiles/sample.js')firstKey: arg1  firstKey := arg1initializePresenter  adaptors transmitTo: infos transform: [:arg1 |  arg1 controlPanelInfos ].  self updateAdaptorsTablerenderServerUrlOn: arg1  | tmp1 |  arg1 div     id: (tmp1 := arg1 nextId);     class: 'dialog';     script: (arg1 jQuery new dialog           html: WAWelcomeUrlDialog new;           title: 'Configure server URL';           resizable: false;           modal: true).  arg1 paragraph: [ arg1           text: 'Public server URL: ';           text: self serverUrl;           text: ' [ '.        arg1 anchor           url: '#';           onClick: ((arg1 jQuery id: tmp1) dialog open return: false);           with: 'set'.        self serverUrl isNil ifFalse: [ arg1 text: ' / '.              arg1 anchor                 callback: [ self clearServerUrl ];                 with: 'clear' ].        arg1 text: ' ]' ]chooseComponentName  ^self call: WAWelcomeComponentNamePrompter newhasCallback  ^callbackBlock notNilrenderRequestHandlersOn: arg1  arg1 tableRow: [ arg1 tableHeading: 'Request Handlers:'.        arg1 tableData: [ arg1 orderedList list: self requestContext handlers ] ]endHour: arg1  endHour := arg1testOrderedCollection  | tmp1 tmp2 |  tmp1 := OrderedCollection with: 1 with: 2.  tmp2 := tmp1 snapshotCopy.  tmp1 restoreFromSnapshot: tmp2.  self assert: tmp1 asArray equals: #(1 2).  tmp1 removeLast.  tmp1 restoreFromSnapshot: tmp2.  self assert: tmp1 asArray equals: #(1 2)document: arg1 mimeType: arg2 fileName: arg3  self url: (root context urlForDocument: arg1 mimeType: arg2 fileName: arg3)space: arg1  space := arg1renderOtherHeadersFor: arg1 on: arg2  arg1 headers keys sorted do: [:arg3 |  (#('accept-charset' 'accept-encoding' 'accept' 'accept-language' 'cookie' '') includes: arg3) ifFalse: [ arg2 definitionTerm: arg3 , ':'.              arg2 definitionData: (arg1 headerAt: arg3) ] ]testSqueakCodecLatin1  #('iso-8859-1' 'ISO-8859-1' 'latin-1') do: [:arg1 |  | tmp1 |        tmp1 := GRCodec forEncoding: arg1.        self assert: tmp1 name = arg1.        self assert: tmp1 url name = arg1.        self assert: (tmp1 encode: self latin1String) = self latin1String.        self assert: (tmp1 url encode: self latin1String) = self latin1String.        self assert: (tmp1 decode: self latin1String) = self latin1String.        self assert: (tmp1 url decode: self latin1String) = self latin1String ]requestContext  ^requestContextcanStart  ^manager notNil and: [ self manager canStart: self ]beDisabled  self disabled: truetitle  ^'Space Usage per Class'updateStates: arg1  super updateStates: arg1.  updateStatesBlock isNil ifFalse: [ updateStatesBlock value: arg1 ]paddedSeconds  ^(GRMappedPrinter block: [:arg1 |  arg1 seconds ] next: (GRPrinter numberWithAtLeastDigits: 2)) , ' sec'renderPagesOn: arg1  self allPages do: [:arg2 |  currentPage = arg2 ifFalse: [ (self validPages includes: arg2) ifTrue: [ arg1 anchor                       callback: [ self currentPage: arg2 ];                       with: arg2 ] ifFalse: [ arg1 text: arg2 ] ] ifTrue: [ arg1 strong: arg2 ] ] separatedBy: [ arg1 space ]removeFile: arg1  GRPlatform current removeSelector: (self asSelector: arg1) from: self classcolor  ^colorsortOrder  ^1valueFromString: arg1  ^arg1 isEmptyOrNil ifFalse: [ GRPlatform current secureHashFor: arg1 ]ie6  self ie: '6'form: arg1  self form with: arg1increment  count := count + 1response  ^responsesetUp  file := WAFile newcacheForever  self removeHeaderAt: 'Pragma'.  self headerAt: 'Expires' putDate: self cacheForeverExpiryDate.  self removeHeaderAt: 'Cache-Control'handleAuthorNameSubmission  self authorName: (self authorName select: [:arg1 |  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' includes: arg1 ]).  self authorName ifEmpty: [ self authorName: nil.        ^self ].  GRPlatform current seasideSetAuthorName: self authorName.  self answertestSettingEmptyPath  | tmp1 |  tmp1 := WACookie new     key: 'name';     value: 'homer';     path: '';     yourself.  self assert: tmp1 path equals: '/'.  self assert: tmp1 pathUnencoded equals: '/'.  self assert: tmp1 pathEncoded equals: '/'assertDispatched: arg1  self assert: registry cache size = registrySize.  self assert: arg1 status = 200with: arg1  self openBrush.  super with: [ canvas render: arg1 ].  self closeBrushparseUserPassword: arg1 from: arg2 to: arg3  | tmp1 |  tmp1 := arg1 indexOf: $: startingAt: arg2.  (tmp1 > 0 and: [ tmp1 < arg3 ]) ifTrue: [ self user: (self class decodePercent: arg1 from: arg2 to: tmp1).        self password: (self class decodePercent: arg1 from: tmp1 + 1 to: arg3) ] ifFalse: [ self user: (self class decodePercent: arg1 from: arg2 to: arg3) ]plainMessage  ^String streamContents: [:arg1 |  self renderAddress: self from withHeader: 'From: ' on: arg1.        self to do: [:arg2 |  self renderAddress: arg2 withHeader: 'To: ' on: arg1 ].        self cc do: [:arg2 |  self renderAddress: arg2 withHeader: 'Cc: ' on: arg1 ].        self bcc do: [:arg2 |  self renderAddress: arg2 withHeader: 'Bcc: ' on: arg1 ].        arg1           nextPutAll: 'Subject: ';           nextPutAll: self subject;           nextPut: Character cr.        self replyTo isNil ifFalse: [ self renderAddress: self replyTo withHeader: 'Reply-To: ' on: arg1 ].        self headers keysAndValuesDo: [:arg3 :arg4 |  arg1                 nextPutAll: arg3 greaseString;                 nextPut: $:;                 nextPut: Character space;                 nextPutAll: arg4 greaseString;                 nextPut: Character cr ].        arg1 nextPut: Character cr.        self writeBodyOn: arg1 ]height: arg1  self attributes at: 'height' put: arg1results: arg1  self attributeAt: 'results' put: arg1bodyDecoded  | tmp1 tmp2 |  tmp1 := self contentType.  tmp2 := tmp1 isNil ifFalse: [ tmp1 charSet ].  ^tmp2 isNil ifTrue: [ WAIllegalStateException signal: 'no character set of request body can not be determined' ] ifFalse: [ self bodyDecodeUsing: tmp2 ]pathStringEncodedWith: arg1  | tmp1 |  tmp1 := (self pathStringUnencodedSize * 1.1) greaseInteger.  ^String new: tmp1 streamContents: [:arg2 |  self pathEncodedWith: arg1 on: arg2 ]byAccessListEntry  ^byAccessListEntryassert: arg1 urlEncodedGives: arg2  | tmp1 |  tmp1 := String streamContents: [:arg3 |  (GRPlatform current urlEncoderOn: arg3 codec: self requestContext codec) nextPutAll: arg1 ].  self assert: tmp1 = arg2nestedElements  ^#(#('Functional' #('Haskell ' 'Lisp' 'ML')) #('Dataflow' #('Hartmann pipelines' 'G' 'Max' 'Prograph')) #('Fourth-generation' #('Today' 'Ubercode' 'Uniface')))encodeOn: arg1  self encodeOn: arg1 xmlEncoder usingQuotes: falseget: arg1  get := arg1privateIsValidDay: arg1 monthNumber: arg2 year: arg3  | tmp1 |  (arg2 between: 1 and: 12) ifFalse: [ ^false ].  tmp1 := Date daysInMonth: (Date nameOfMonth: arg2) forYear: arg3.  ^arg1 between: 1 and: tmp1ok  self answer: self selectionmessage  ^messagenotify: arg1 at: arg2 in: arg3  message := arg1 allButLast: 3displayComponent: arg1 named: arg2  self call: (WAWelcomeComponentConfirmation component: arg1 named: arg2)states  ^Array with: selfredirectToBrowse  self requestContext responseGenerator     redirectTo: '/browse';     respondnextPut: arg1  | tmp1 tmp2 |  tmp1 := arg1 greaseInteger + 1.  tmp1 > table size ifTrue: [ stream nextPut: arg1.        ^self ].  tmp2 := table at: tmp1.  tmp2 notNil ifTrue: [ stream nextPutAll: tmp2 ] ifFalse: [ stream nextPut: arg1 ]testStreamHeaderLineParsing  | tmp1 tmp2 |  tmp1 := '  GET   /foo  HTTP/1.1 ' readStream.  tmp1 next: 12.  tmp2 := WAHttpVersion readFrom: tmp1.  self assert: tmp2 major = 1.  self assert: tmp2 minor = 1testAsSelectorLeadingDigits  | tmp1 |  tmp1 := WATestingFiles default.  self assert: (tmp1 asSelector: '1readme.txt') = #readmeTxt.  self assert: (tmp1 asSelector: '123456789readme.txt') = #readmeTxt.  self assert: (tmp1 asSelector: '123456789readme89.txt') = #readme89TxtasSelector: arg1  ^self class asSelector: arg1rawAddToPath: arg1  self path add: arg1sslSessionIdFor: arg1  ^nilgreaterThan  self addToCondition: ' gt'testAddKeyOfSessionToUrl  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := tmp1 request uri copy.  strategy addKey: 'The_Metaphor' toUrl: tmp2.  self assert: tmp2 greaseString = '/1/2'noHandlerFoundForKey: arg1 in: arg2 context: arg3  arg1 = (self keyFromContext: arg3) ifTrue: [ arg2 handleDefault: arg3 withKey: arg1 ] ifFalse: [ super noHandlerFoundForKey: arg1 in: arg2 context: arg3 ]testGreaseNextPutAllStartingAt  self assert: '$(&quot;#seastar&quot;).animate({&quot;left&quot;:&quot;-=100px&quot;},{})' next: 13 startingAt: 4 encoder: self xmlEncoderClass gives: 'quot;#seastar'classListIndex: arg1  selectedClass := (self classesInTheSelectedPackage sorted: [:arg2 :arg3 |  arg2 name <= arg3 name ]) at: arg1.  self clearMessageAndProtoclSelection.  self changed: #classListIndexrenderContentOn: arg1  arg1 heading level1 with: 'Example: ' , self title.  arg1 anchor     class: 'goback';     callback: [ self answer ];     with: '[ go back ]'.  self renderExampleOn: arg1.  arg1 div     class: 'buttons';     with: [ arg1 anchor           callback: [ self answer ];           script: (arg1 jQuery this button primaryIcon: 'ui-icon-arrowreturnthick-1-w');           title: 'Go back';           with: 'Back' ]user: arg1  user := arg1onPaste: arg1  self document scriptGenerator event: 'paste' do: arg1 on: selftestCoreAttributesTitle  self assert: [:arg1 |  arg1 div title: 'Seaside' ] gives: '<div title="Seaside"></div>'testSendUnregistered  | tmp1 tmp2 tmp3 |  cache := WAHashCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 1 maximumRelativeAge: 0 overflowAction: WAHashCache signalError.  tmp1 := Delay forSeconds: 2.  tmp2 := WAObjectUnderstandingUnregistered new.  self deny: tmp2 hasReceivedUnregistered.  cache at: 1 put: tmp2.  tmp1 wait.  tmp3 := false.  cache at: 1 ifAbsent: [ tmp3 := true ].  self assert: tmp3.  self assert: tmp2 hasReceivedUnregisteredassert: arg1 xmlEncodedGives: arg2  | tmp1 |  tmp1 := String streamContents: [:arg3 |  (GRPlatform current xmlEncoderOn: arg3) nextPutAll: arg1 ].  self assert: tmp1 = arg2select: arg1  (self canSelect: arg1) ifFalse: [ ^self ].  self selected: arg1.  self selectBlock isNil ifFalse: [ self selectBlock value: arg1 ]rootComponentIfAbsent: arg1  ^self properties at: #rootComponent ifAbsent: arg1isClosed  ^truetestStringSeasideMimeDocumentType  | tmp1 tmp2 |  tmp2 := WAMimeType main: 'text' sub: 'csv'.  tmp1 := (WABlockMimeDocument onBlock: [ 'foo,bar' ]) seasideMimeDocumentType: tmp2.  self assert: tmp1 mimeType = tmp2.  self assert: tmp1 contents = 'foo,bar'activeComponent  self visiblePresentersDo: [:arg1 |  arg1 isDecoration ifFalse: [ ^arg1 ] ]high: arg1  self attributeAt: 'high' put: arg1image: arg1  self image with: arg1testCombine  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := DateAndTime year: 2007 month: 11 day: 21 hour: 14 minute: 42 second: 48 offset: (Duration days: 0 hours: 2 minutes: 0 seconds: 0).  tmp3 := WACookie key: 'ikuser' value: '1234'.  tmp3 expiry: tmp1.  tmp4 := WACookie key: 'JSESSIONID' value: '8543783483494373483764'.  tmp2 := WACookie combine: (Array with: tmp3 with: tmp4) using: [:arg1 |  arg1 rfc6265String ].  self assert: tmp2 = 'ikuser=1234; expires=Wed, 21-Nov-2007 12:42:48 GMT; path=/, JSESSIONID=8543783483494373483764; path=/'updateUrl: arg1  self session updateUrl: arg1parseNumberExponent  | tmp1 tmp2 |  tmp1 := 0.  tmp2 := stream peek = $-.  (tmp2 or: [ stream peek = $+ ]) ifTrue: [ stream next ].  [ stream atEnd not and: [ stream peek isDigit ] ] whileTrue: [ tmp1 := 10 * tmp1 + (stream next greaseInteger - 48) ].  tmp2 ifTrue: [ tmp1 := tmp1 negated ].  ^10 raisedTo: tmp1initializeWidgets  adaptors := self newTable.  actionBar := (self rootCommandsGroup / 'Toolbar') asToolbarPresenter.  infos := self newText.  adaptors     addColumn: ((SpImageTableColumn title: '' evaluated: [:arg1 |  self iconForAdaptor: arg1 ])           width: 25;           yourself);     addColumn: (SpStringTableColumn title: 'Kind' evaluated: [:arg1 |  arg1 class ]);     addColumn: (SpStringTableColumn title: 'Port' evaluated: [:arg1 |  arg1 port ]);     addColumn: (SpStringTableColumn title: 'Status' evaluated: [:arg1 |  arg1 isRunning ifTrue: [ 'Running' ] ifFalse: [ 'Stopped' ] ]);     contextMenu: [ (self rootCommandsGroup / 'Table menu') beRoot asMenuPresenter ].  infos disablerenderContentOn: arg1  arg1 render: trail.  arg1 div: componentredirectTo: arg1 delay: arg2  self meta redirectAfter: arg2 to: arg1visitClassBindingCollectionAttribute: arg1  | tmp1 tmp2 |  tmp1 := self configuration currentCollectionAt: arg1 key.  tmp1 isEmpty ifTrue: [ ^self html text: '(none)' ].  tmp2 := (tmp1 size min: 10) max: 2.  self html select     disabled;     size: tmp2;     title: 'Current';     labels: [:arg2 |  arg2 value value greaseString , ' [' , arg2 key greaseString , ']' ];     list: tmp1openHandler: arg1  arg1 isNil ifTrue: [ ^self ].  self dispatcher: (arg1 isDispatcher ifFalse: [ arg1 parent ] ifTrue: [ arg1 ])visitListAttribute: arg1  | tmp1 tmp2 |  tmp1 := arg1 options asArray.  tmp2 := self configuration at: arg1 key.  (tmp2 isNil or: [ tmp1 includes: tmp2 ]) ifFalse: [ tmp1 := (Array with: tmp2) , tmp1 ].  self html select     beOptional;     list: tmp1;     selected: tmp2;     optionalLabel: '(none)';     labels: [:arg2 |  arg1 stringForValue: arg2 ];     callback: [:arg2 |  self configuration takeValue: arg2 forAttribute: arg1 ]with: arg1  self type isNil ifFalse: [ self attributes at: 'type' ifAbsentPut: [ self type ] ].  super with: arg1initializeWithStream: arg1 codec: arg2  super initializeWithStream: arg1 codec: arg2.  jsonEncoder := GRPlatform current jsonEncoderOn: arg1extent: arg1  self     width: arg1 x;     height: arg1 yassertNotFound: arg1  self assert: arg1 response status = WAResponse statusFound.  self assert: (arg1 response headerAt: 'Location') greaseString = '/catspajamassc2'testContentType  file contentType: 'text/plain'.  self assert: file contentType = 'text/plain' seasideMimeType.  file contentType: 'text/plain' seasideMimeType.  self assert: file contentType = 'text/plain' seasideMimeType.  file contentType: nil.  self assert: file contentType isNilsortOrder  ^self subclassResponsibilityexecute  self isProfiling ifFalse: [ self session addFilter: self filter reset ] ifTrue: [ self session removeFilter: self filter.        self open: (WAProfilerTool on: self filter items) ]testLeftToRight  self assert: [:arg1 |  arg1 meta beLeftToRight ] gives: '<meta dir="LTR"/>'accept: arg1  arg1 visitNumberAttribute: selfat: arg1 putClass: arg2  self at: arg1 put: (GRPlatform current bindingOf: arg2)externalStream: arg1  externalStream := arg1helpEnabled  ^self propertyAt: #helpEnabled ifAbsent: [ false ]renderCallbackOn: arg1  self renderInline: [:arg2 |  arg2 button           callback: [  ];           with: '' ] key: #callback on: arg1media: arg1  self attributeAt: 'media' put: arg1writeHeadersOn: arg1  self isChunked ifFalse: [ self headerAt: 'Content-Length' put: bufferedStream position ].  super writeHeadersOn: arg1handle: arg1  self states restore.  self withUnregisteredHandlerDo: [ super handle: arg1 ]renderInstructionsOn: arg1  arg1 paragraph: 'This test requires JavaScript. The list boxes should behave normally when used with the submit button. The link will try to submit the value C to the number listbox and the value 3 to the letter list box.'.  arg1 paragraph: 'Current behaviour results in C and 3 being selected in the appropriate lists. What is essential, however, is only that the values are not selected in the wrong list because this might allow an attacker to trick seaside into running methods on the wrong objects.'value: arg1  self attributes at: 'value' put: arg1updateRoot: arg1  super updateRoot: arg1.  updateRootBlock isNil ifFalse: [ updateRootBlock value: arg1 ]source  ^self brush: WASourceTag newclickScript  ^nilshutDown  toggleUIText  ^self uiProcess isSuspended ifFalse: [ 'Suspend UI Process' ] ifTrue: [ 'Resume UI Process' ]tag  ^'img'showFullStack  self limit: self frameCountcall: arg1  ^self wait: [:arg2 |  self call: arg1 onAnswer: arg2 ]codecs  ^GRCodec allCodecs asSortedCollection: #name ascendingleft: arg1  features at: #left put: arg1isWaitingOnSemaphore: arg1  ^arg1 suspendingList isKindOf: SemaphorekeySize  ^mutex critical: [ cache keySize ]entities  ^#(#('non-breaking space' #('&nbsp;' '&#160;' '&#xA0;')) #('ampersand' #('&amp;' '&#38;' '&#x26;')) #('less than sign' #('&lt;' '&#60;' '&#x3C;')) #('greater than sign' #('&gt;' '&#62;' '&#x3E;')) #('euro sign' #('&euro;' '&#8364;' '&#x20AC;')))isActive  ^trueisEmpty  ^delegates allSatisfy: [:arg1 |  arg1 isEmpty ]doIt  | tmp1 |  tmp1 := super doIt.  selected ifNil: [ ^tmp1 ].  ^selected isNumber ifTrue: [ self object at: selected put: tmp1 ] ifFalse: [ self object instVarNamed: selected put: tmp1 ]isSupported  ^self isRunningCogretrieveSearchContext: arg1 default: arg2  ^cachedSearchContexts at: arg1 ifAbsent: [ arg2 ]renderToolbarOn: arg1  arg1 div     class: 'wa-toolbar';     with: [ (self plugins select: [:arg2 |  arg2 isActive ]) do: [:arg2 |  arg1 render: arg2 ] separatedBy: [ arg1 text: ' ' ] ]onClose: arg1  self document scriptGenerator event: 'close' do: arg1 on: selfurlFor: arg1  ^self url     addToPath: (self nameOfHandler: arg1);     yourselfinitialize  super initialize.  calendar := WAMiniCalendar newbasicResume: arg1  ^arg1 isResumable ifTrue: [ arg1 resume ] ifFalse: [ self unableToResumeResponse ]updateUrl: arg1  super updateUrl: arg1.  arg1 addToPath: self selected name greaseStringname: arg1  self attributeAt: 'name' put: arg1newVersion: arg1  | tmp1 tmp2 |  tmp1 := [ arg1 newVersion ] on: MCVersionNameAndMessageRequest do: [:arg2 |  arg2 resume: (Array with: arg2 suggestedName with: '') ].  tmp2 := RWBinaryOrTextStream on: String new.  tmp1 fileOutOn: tmp2.  self requestContext respond: [:arg3 |  arg3           contentType: WAMimeType applicationOctetStream;           attachmentWithFileName: tmp1 fileName;           nextPutAll: tmp2 contents ]userinfo  ^password isNil ifTrue: [ user ] ifFalse: [ String streamContents: [:arg1 |  arg1                 nextPutAll: user;                 nextPut: $:;                 nextPutAll: password ] ]delay: arg1  delay := arg1selectorsToInclude  ^#(welcomeCss syntaxHighlightingCss)tableHead  ^self tag: 'thead'callback: arg1  self name: (self storeCallback: (WACancelActionCallback on: arg1))test11  | tmp1 |  tmp1 := WARequest method: 'GET' uri: '/' version: WAHttpVersion http11.  self assert: tmp1 isGet.  self assert: tmp1 isHttp11.  self deny: tmp1 isSslyear: arg1  year := arg1relativeExamples  ^#(#('http://www.seaside.st/foo' '' 'http://www.seaside.st/foo') #('http://www.seaside.st/foo' '.' 'http://www.seaside.st/foo') #('http://www.seaside.st/foo' './bar' 'http://www.seaside.st/foo/bar') #('http://www.seaside.st/foo' 'bar' 'http://www.seaside.st/foo/bar') #('http://www.seaside.st/foo' 'bar/.' 'http://www.seaside.st/foo/bar') #('http://www.seaside.st/foo' 'bar/..' 'http://www.seaside.st/foo') #('http://www.seaside.st/foo' 'bar/../..' 'http://www.seaside.st/') #('http://www.seaside.st/foo' 'bar/../../..' 'http://www.seaside.st/') #('http://www.seaside.st/foo' '/' 'http://www.seaside.st/') #('http://www.seaside.st/foo' '/.' 'http://www.seaside.st/') #('http://www.seaside.st/foo' '/./bar' 'http://www.seaside.st/bar') #('http://www.seaside.st/foo' '/bar' 'http://www.seaside.st/bar') #('http://www.seaside.st/foo' '/bar/.' 'http://www.seaside.st/bar') #('http://www.seaside.st/foo' '/bar/..' 'http://www.seaside.st/') #('http://www.seaside.st/foo' '/bar/../..' 'http://www.seaside.st/') #('http://www.seaside.st/foo' '/bar/../../..' 'http://www.seaside.st/'))headerAt: arg1 put: arg2  ^self headers at: arg1 put: arg2testEmpty  self assert: [:arg1 |   ] gives: '<html><head><title></title></head><body></body></html>'initializeOn: arg1 table: arg2 delegate: arg3  self initializeOn: arg1.  table := arg2.  delegate := arg3initialize  super initialize.  path := '/'.  pathEncoded := '/'removeKey: arg1  self subclassResponsibilityexecute  | tmp1 |  tmp1 := self adaptorClasses.  (UIManager default chooseFrom: (tmp1 collect: #name) values: tmp1 lines: #() title: 'Add Seaside Adaptor' translated) ifNotNil: [:arg1 |  (UIManager default request: 'Enter a port number' initialAnswer: arg1 basicNew defaultPort greaseString) ifNotNil: [:arg2 |  (arg2 isEmpty or: [ arg2 isAllDigits not ]) ifFalse: [ arg1 port: arg2 greaseInteger.                    context updateAdaptorsTable ] ] ]weeksDo: arg1  | tmp1 tmp2 |  tmp1 := Date newDay: 1 month: (Date nameOfMonth: self monthIndex) year: self year.  tmp1 := tmp1 subtractDays: tmp1 dayOfWeek - 1.  tmp2 := self monthIndex \\ 12 + 1.  [ tmp1 monthIndex = tmp2 ] whileFalse: [ arg1 value: tmp1.        tmp1 := tmp1 addDays: 7 ]tableFoot: arg1  ^self tableFoot with: arg1testAnchorCallback  self assert: [:arg1 |  arg1 anchor callback: [  ] ] gives: '<a href="/?1"></a>'.  self assert: [:arg1 |  self should: [ arg1 anchor callback: [:arg2 |   ] ] raise: Error ] gives: '<a></a>'contents: arg1 notifying: arg2  ^showComment ifTrue: [ selectedClass organization comment: arg1.        true ] ifFalse: [ (self selectedMessageName isNil and: [ selectedMessageCategory isNil ]) ifTrue: [ selectedClass subclassDefinerClass evaluate: arg1 notifying: arg2 logged: true ] ifFalse: [ (self selectedClass compile: arg1 classified: self protocolForSelectedMethod notifying: arg2) isSymbol ] ]setUp  super setUp.  document := WAMimeDocument on: 'aString' mimeType: WAMimeType textPlainselected  ^selecteddeprecated: arg1  notifications := notifications reject: [:arg2 |  arg2 messageText = arg1 messageText and: [ arg2 details = arg1 details ] ].  notifications add: arg1.  arg1 resumevalidate: arg1  ^[ validationBlock value: arg1.  message contents: nil.  true ] on: self exceptionClass do: [:arg2 |  message contents: arg2 messageText.        arg2 return: false ]level6  level := 6dontDestroy  self properties at: #shouldDestroy put: falsehorizontalRule  ^self brush: WAHorizontalRuleTag newvisitPainter: arg1  | tmp1 |  (self renderContext halosEnabled and: [ arg1 canHaveHalo ]) ifTrue: [ tmp1 := self toolDecoration haloFor: arg1.        tmp1 renderWithContext: self renderContext visitor: visitor ] ifFalse: [ visitor visit: arg1 ]register: arg1  | tmp1 |  tmp1 := super register: arg1.  arg1 key: tmp1.  ^tmp1buttons  ^buttonsinheritsFrom: arg1  ^self ancestors includes: arg1configure: arg1  | tmp1 |  arg1 isDispatcher ifTrue: [ self dispatcher: arg1 ].  self selection: arg1.  self editor home.  tmp1 := arg1 configurationComponent.  tmp1 editor isNil ifFalse: [ tmp1 editor beComponent ].  self show: tmp1testEncodedUrl  self assert: 'Seaside Aubergines' urlEncodedGives: 'Seaside%20Aubergines'.  self assert: 'www.seaside.st' urlEncodedGives: 'www.seaside.st'.  self assert: '~seaside-info_' urlEncodedGives: '~seaside-info_'.  self assert: 'http://www.seaside.st?foo=1&bar=2' urlEncodedGives: 'http%3A%2F%2Fwww.seaside.st%3Ffoo%3D1%26bar%3D2'.  self assert: 'a%' urlEncodedGives: 'a%25'.  self assert: (String with: Character cr) urlEncodedGives: '%0D'at: arg1 put: arg2  byValue at: arg2 ifPresent: [:arg3 |  arg3 = arg1 ifFalse: [ self errorAlreadyMapped ] ].  byKey at: arg1 ifPresent: [:arg4 |  byValue removeKey: arg4 ].  byKey at: arg1 put: arg2.  byValue at: arg2 put: arg1.  ^arg2level: arg1  level := (arg1 max: 1) min: 6testEncodedSupplementaryMultilingualPlane  | tmp1 |  tmp1 := (Character codePoint: 65930) greaseString.  self assert: tmp1 xmlEncodedGives: tmp1width: arg1  self attributes at: 'width' put: arg1initialize  super initialize.  headElements := OrderedCollection new.  title := docType := String newnext: arg1  next := arg1destroy  body := method := uri := version := postFields := remoteAddress := headers := cookies := nilnotifications  ^filter notificationsblock: arg1  block := arg1width: arg1  self attributeAt: 'width' put: arg1 greaseStringfullList  ^attribute optionsresourceUrl: arg1  self url: (canvas absoluteUrlForResource: arg1)renderTreeOn: arg1  arg1 strong: 'Selected:'.  arg1 render: selected.  arg1 render: treetestNoHandlerFoundForSessionKey  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := self requestContext.  tmp2 := self newApplication.  [ strategy noHandlerFoundForKey: self sessionId in: tmp2 context: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assertOk: tmp1.  tmp3 := tmp2 cache.  self assert: tmp3 size = 1.  tmp4 := tmp3 at: self sessionId ifAbsent: [ nil ].  self deny: tmp4 isNil.  self assert: tmp4 isSessiondefinitionTerm: arg1  self definitionTerm with: arg1describeOn: arg1  arg1 at: #rootDecorationClasses addAll: (Array with: (GRPlatform current bindingOf: WAToolDecoration))valueBlock: arg1  valueBlock := arg1accept: arg1  arg1 visitUrlAttribute: selfallAt: arg1 ifAbsent: arg2  | tmp1 |  tmp1 := self allAt: arg1.  ^tmp1 isEmpty ifTrue: [ arg2 value ] ifFalse: [ tmp1 ]setUp  merged := WAMergedRequestFields on: (Array with: (one := WARequestFields new) with: (two := WARequestFields new))nextPut: arg1  self document nextPut: arg1removeKey: arg1  | tmp1 tmp2 |  tmp1 := dictionary removeKey: arg1.  tmp2 := tmp1 value.  self cacheEntryRemoved: tmp2.  ^tmp2selectFrom: arg1 to: arg2  renderDoneOn: arg1  arg1 anchor     class: 'large';     title: 'Close and return';     callback: [ self answer ];     with: 'Close'priority  ^-90callback: arg1  self name: (self storeCallback: (WAUrlCallback on: arg1)).  self value: self valuerenderContentOn: arg1  arg1 anchor     title: self tooltip;     class: self cssClass;     onClick: self clickScript;     callback: [ self execute ];     with: self labelinitializeOn: arg1  self initialize.  stream := arg1renderRowName: arg1 named: arg2 on: arg3  arg3 anchor     class: 'handler-name';     class: 'selected' if: arg1 = selection;     callback: [ self configure: arg1 ];     with: [ arg3 text: arg2.        arg1 isDispatcher ifTrue: [ arg3 text: '/' ].        self dispatcher defaultHandler == arg1 ifTrue: [ arg3 span                 title: 'Default handler';                 with: ' (*)' ] ]isDispatcher  ^truebeHelp  self relationship: 'help'forbidden  self ifResetPossible: [ self response           forbidden;           contentType: WAMimeType textHtml ].  self response nextPutAll: (WAHtmlCanvas builder           fullDocument: true;           rootBlock: [:arg1 |  arg1 title: 'Forbidden' ];           render: [:arg2 |  arg2 heading: [ arg2 text: 'Error: you are forbidden to access "'.                    arg2 render: self request url.                    arg2 text: '"' ] ])selectedMessageName  ^selectedMethod isNil ifTrue: [ nil ] ifFalse: [ selectedMethod selector ]optionForValue: arg1  ^arg1keysAndValuesDo: arg1  dictionary keysAndValuesDo: arg1execute  self adaptor ifNotNil: [:arg1 |  arg1 start ].  self context updateAdaptorsTableonChildren: arg1  childrenBlock := arg1testIe6  | tmp1 tmp2 tmp3 |  tmp1 := WAAccept fromString: 'image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/msword, application/vnd.ms-powerpoint, application/x-shockwave-flash, */*'.  self assert: tmp1 size = 9.  self assert: tmp1 at: 1 main: 'image' sub: 'gif' quality: 1.0.  self assert: tmp1 at: 2 main: 'image' sub: 'x-xbitmap' quality: 1.0.  self assert: tmp1 at: 3 main: 'image' sub: 'jpeg' quality: 1.0.  self assert: tmp1 at: 4 main: 'image' sub: 'pjpeg' quality: 1.0.  self assert: tmp1 at: 5 main: 'application' sub: 'vnd.ms-excel' quality: 1.0.  self assert: tmp1 at: 6 main: 'application' sub: 'msword' quality: 1.0.  self assert: tmp1 at: 7 main: 'application' sub: 'vnd.ms-powerpoint' quality: 1.0.  self assert: tmp1 at: 8 main: 'application' sub: 'x-shockwave-flash' quality: 1.0.  self assert: tmp1 at: 9 main: '*' sub: '*' quality: 1.0.  tmp3 := WAAcceptEncoding fromString: 'gzip, deflate'.  self assert: tmp3 size = 2.  self assert: tmp3 at: 1 encoding: 'gzip' quality: 1.0.  self assert: tmp3 at: 2 encoding: 'deflate' quality: 1.0.  tmp2 := WAAcceptLanguage fromString: 'de-ch'.  self assert: tmp2 size = 1.  self assert: tmp2 at: 1 language: 'de' country: 'ch' quality: 1.0target: arg1  self attributes at: 'target' put: arg1createProperty: arg1 with: arg2  ^arg1 -> arg2renderLetterListOn: arg1  arg1 select     id: 'letter-list';     size: 3;     selected: letter;     list: (Array with: $A with: $B with: $C);     callback: [:arg2 |  letter := arg2 ]testInstantiateUtf8  self should: [ GRPharoGenericCodec forEncoding: 'utf-8' ] raise: GRUnsupportedEncodingErrordocument: arg1 mimeType: arg2 fileName: arg3  self url: (canvas context urlForDocument: arg1 mimeType: arg2 fileName: arg3)renderIdTestOn: arg1  self renderInline: [:arg2 |  | tmp1 |        tmp1 := arg2 nextId.        arg2 span           id: tmp1;           with: tmp1.        arg2 break ] key: #id on: arg1testCanvasWithUrls  self assert: [:arg1 |  arg1 withUrls: 'This is http://www.seaside.st online.' ] gives: 'This is <a href="http://www.seaside.st">http://www.seaside.st</a> online.'beSubsection  self relationship: 'subsection'labelForSelector: arg1 of: arg2  ^arg2 labelForSelector: arg1onMouseDown: arg1  self document scriptGenerator event: 'mousedown' do: arg1 on: selftestRawAddToPath  url rawAddToPath: 'a/b'.  self assert: url greaseString = '/a%2Fb'hasMultiplePages  ^self maxPages > 1endHour  ^endHourencodeCharacter: arg1  self html: '&#' , arg1 greaseInteger greaseString , ';'onUnload: arg1  self document scriptGenerator event: 'unload' do: arg1 on: selfcheckAuthorInitials  GRPlatform current seasideIsAuthorNameSet ifFalse: [ self call: WAWelcomeAuthorNamePrompter new ]mainCss  ^WAFileLibraryResource filepath: 'main.css' mimeType: WAMimeType textCss cacheDuration: (Duration days: 0 hours: 0 minutes: 30 seconds: 0) contents: (GRDelayedSend receiver: self selector: #mainCssContent)sslSessionId  ^sslSessionIdparseFragment: arg1 from: arg2  arg2 > arg1 size ifTrue: [ ^self ].  self fragment: (self class decodePercent: arg1 from: arg2)onDragEnter: arg1  self document scriptGenerator event: 'dragenter' do: arg1 on: selfaddFile: arg1 withEncoding: arg2  arg1 isNil ifTrue: [ ^self ].  (arg1 contentType isNil or: [ arg1 contentType isBinary ]) ifFalse: [ arg2 class == GRNullCodec ifFalse: [ arg1 contentType charset: arg2 name ] ].  self library addFile: arg1updateUrl: arg1  super updateUrl: arg1.  updateUrlBlock isNil ifFalse: [ updateUrlBlock value: arg1 ]unregistered  manager := nilid: arg1  id := arg1registerForUrl: arg1  | tmp1 |  tmp1 := self session actionUrlForContinuation: self.  arg1 ifTrue: [ self updateUrl: tmp1 ].  ^tmp1execute  self requestContext redirectTo: self handler urlshouldRedirect  ^falseloadURL  | tmp1 tmp2 |  url asUrl fileName ifEmpty: [ self inform: 'no valid URL given' onAnswer: [  ].        ^self ].  tmp1 := url asUrl retrieveContents content asByteArray readStream.  tmp2 := (MCVersionReader readerClassForFileNamed: url) versionFromStream: tmp1.  tmp2 loadrenderRemoteAddressFor: arg1 on: arg2  arg2 definitionTerm: 'Remote Address:'.  arg2 definitionData: arg1 remoteAddresstestAsFilename  | tmp1 |  tmp1 := WATestingFiles default.  self assert: (tmp1 asFilename: #mainJs) = 'main.js'.  self assert: (tmp1 asFilename: #style2Css) = 'style2.css'.  self assert: (tmp1 asFilename: #index) = 'index'testSearchContextsCaching  | tmp1 tmp2 |  tmp1 := self basicSystemConfiguration.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  self assert: (tmp2 retrieveSearchContext: #a default: 'testingSearchContextsCache') = 'testingSearchContextsCache'.  tmp2 at: #a.  self assert: (tmp2 retrieveSearchContext: #a default: 'testingSearchContextsCache') attribute default = #default.  tmp2 clearSearchContexts.  self assert: (tmp2 retrieveSearchContext: #a default: 'testingSearchContextsCache') = 'testingSearchContextsCache'blockquote  ^self tag: 'blockquote'for: arg1  self attributes at: 'for' put: arg1children  ^Array with: pathauthConfigurationError: arg1  WAAuthConfigurationError signal: arg1valueFromString: arg1  ^arg1 isEmptyOrNil ifFalse: [ arg1 ]saveImage  SmalltalkImage current snapshot: true andQuit: falsecreateCache  ^WABidirectionalCache newaddProperty: arg1 to: arg2  ^arg2     add: arg1;     yourselfnoAutocomplete  self attributes at: 'autocomplete' put: 'off'renderContentOn: arg1  arg1 text: 'body{font-size:12px;}'testWithoutValue  self assert: WADynamicVariable value isNiltestRenderingChildren  root onChildren: [ Array with: child1 with: child2 ].  child1 onRender: [:arg1 |  arg1 text: '1' ].  child2 onRender: [:arg1 |  arg1 text: '2' ].  self assertRenders: '12'.  root onRender: [:arg1 |  arg1           text: 'a';           render: child1;           text: 'b';           render: child2;           text: 'c' ].  self assertRenders: 'a1b2c'.  root onChildren: [ Array with: child2 with: child1 ].  self assertRenders: 'a1b2c'.  root onRender: [:arg1 |  arg1           text: 'a';           render: child2;           text: 'b';           render: child1;           text: 'c' ].  self assertRenders: 'a2b1c'testMain  self assert: [:arg1 |  arg1 main ] gives: '<main></main>'.  self assert: [:arg1 |  arg1 main: 'test' ] gives: '<main>test</main>'.  self assert: [:arg1 |  arg1 main with: [ arg1 text: 'test' ] ] gives: '<main>test</main>'fragment  ^fragmentasFilename: arg1  self subclassResponsibilitypathUnencoded: arg1 codec: arg2  arg1 = '/' ifTrue: [ pathEncoded := '/'.        ^self ].  pathEncoded := String new: (arg1 size * 1.1) greaseInteger streamContents: [:arg3 |  | tmp1 tmp2 |        tmp1 := arg2 isNil ifTrue: [ self requestContext codec ] ifFalse: [ arg2 ].        tmp2 := GRPlatform current urlEncoderOn: arg3 codec: tmp1.        GRPlatform subStringsIn: arg1 splitBy: $/ do: [:arg4 |  arg3 nextPut: $/.              tmp2 nextPutAll: arg4 ] ]open: arg1 onAnswer: arg2  self session presenter show: (arg1           addDecoration: (WAWindowDecoration new                 cssClass: self cssClass;                 title: self title;                 yourself);           yourself) onAnswer: arg2testTableColumn  self assert: [:arg1 |  arg1 tableColumn ] gives: '<col/>'.  self assert: [:arg1 |  arg1 tableColumn           character: '.';           characterOffset: 2 ] gives: '<col char="." charoff="2"/>'.  self assert: [:arg1 |  arg1 tableColumn           align: 'right';           verticalAlign: 'top' ] gives: '<col align="right" valign="top"/>'.  self assert: [:arg1 |  arg1 tableColumn           span: 3;           width: '20' ] gives: '<col span="3" width="20"/>'unitDictionary  ^Dictionary new     at: 1 put: 'bytes';     at: 1024 put: 'KiB';     at: 1024 squared put: 'MiB';     at: (1024 raisedTo: 3) put: 'GiB';     yourselfinitializeFromString: arg1  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 |  self initialize.  tmp5 := arg1 size.  tmp1 := arg1 indexOf: $#.  tmp1 > 0 ifTrue: [ self parseFragment: arg1 from: tmp1 + 1 ].  tmp2 := arg1 indexOf: $?.  (tmp2 > 0 and: [ tmp1 = 0 or: [ tmp2 < tmp1 ] ]) ifTrue: [ self parseQuery: arg1 from: tmp2 + 1 to: (tmp1 = 0 ifTrue: [ tmp5 + 1 ] ifFalse: [ tmp1 ]) ].  tmp3 := arg1 indexOfSubCollection: '://'.  (tmp3 > 0 and: [ tmp1 = 0 or: [ tmp3 < tmp1 ] ]) ifTrue: [ tmp9 := false.        self scheme: (arg1 copyFrom: 1 to: tmp3 - 1).        tmp4 := arg1 indexOf: $/ startingAt: tmp3 + 3.        tmp7 := tmp3 + 3 ] ifFalse: [ tmp9 := true.        tmp4 := arg1 indexOf: $/ startingAt: 1.        tmp7 := 0 ].  tmp4 > 0 ifTrue: [ (tmp4 > tmp1 and: [ tmp1 > 0 ]) ifTrue: [ WAInvalidUrlSyntaxError signal: arg1 ].        (tmp4 > tmp2 and: [ tmp2 > 0 ]) ifTrue: [ WAInvalidUrlSyntaxError signal: arg1 ].        tmp8 := tmp4 ] ifFalse: [ (tmp1 > 0 or: [ tmp2 > 0 ]) ifTrue: [ WAInvalidUrlSyntaxError signal: arg1 ].        tmp8 := tmp5 + 1 ].  tmp7 > 0 ifTrue: [ self parseAuthority: arg1 from: tmp7 to: tmp8 ].  tmp6 := tmp5 + 1.  tmp1 > 0 ifTrue: [ tmp6 := tmp1 ].  (tmp2 > 0 and: [ tmp1 = 0 or: [ tmp2 < tmp1 ] ]) ifTrue: [ tmp6 := tmp2 ].  tmp9 ifTrue: [ (tmp5 > 0 and: [ (arg1 at: 1) = $/ ]) ifTrue: [ self parsePath: arg1 absolute: true from: 2 to: tmp6 ] ifFalse: [ self parsePath: arg1 absolute: false from: 1 to: tmp6 ] ] ifFalse: [ tmp4 > 0 ifTrue: [ self parsePath: arg1 absolute: true from: tmp4 + 1 to: tmp6 ] ]isClosed  ^falsemonthNames  ^(1 to: 12) collect: [:arg1 |  Date nameOfMonth: arg1 ]remoteAddressFromRequest: arg1  | tmp1 |  tmp1 := arg1 forwardedFor ifNil: [ arg1 remoteAddress ].  remoteAddress ifNil: [ remoteAddress := tmp1 ].  ^tmp1incremental: arg1  self attributeAt: 'incremental' put: arg1request: arg1  ^self wait: [:arg2 |  self request: arg1 onAnswer: arg2 ]handleDefault: arg1  ^self open: arg1strategyFor: arg1  ^(self isFromCrawler: arg1) ifTrue: [ ipStrategy ] ifFalse: [ cookieStrategy ]tag  ^'table'tag  ^'button'tag  ^'td'frameCount  self subclassResponsibilityat: arg1  ^self at: arg1 ifAbsent: [ self errorKeyNotFound ]testRendering  | tmp1 |  tmp1 := WAEmailAddress address: 'philippe.marschall@gmail.com' username: 'Philippe Marschall'.  self assert: tmp1 address = 'philippe.marschall@gmail.com'.  self assert: tmp1 username = 'Philippe Marschall'.  self assert: (self render: tmp1) = 'Philippe Marschall &lt;philippe.marschall@gmail.com&gt;'addKey: arg1 toContext: arg2  | tmp1 |  tmp1 := self cookieFromContext: arg2 ifAbsent: [ nil ].  (tmp1 isNil or: [ tmp1 value ~= arg1 ]) ifTrue: [ self addCookieWithValue: arg1 to: arg2 ]renderBlock: arg1  self contentString: (WAHtmlCanvas builder           fullDocument: true;           render: arg1)tag  ^'ol'nextPutAll: arg1  1 to: arg1 size do: [:arg2 |  self nextPut: (arg1 at: arg2) ]valueForField: arg1  ^arg1 isEmptyOrNil ifTrue: [ nil ] ifFalse: [ WAEmailAddress address: arg1 ]track  ^self brush: WATrackTag newcreateComponent: arg1  | tmp1 |  Smalltalk globals at: arg1 ifPresent: [:arg2 |  self inform: 'Sorry a component named: ''' , arg1 , ''' already exists, please choose a different name.'.        ^nil ].  arg1 first isLetter ifFalse: [ self inform: '''' , arg1 , ''' is not a valid name for a component. Component names should begin with a letter. Please choose again.'.        ^nil ].  tmp1 := WAComponent subclass: arg1 instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Seaside-User-Examples'.  tmp1 isNil ifTrue: [ self inform: 'A problem occurred creating ''' , arg1 , ''' component..'.        ^nil ].  GRPlatform current compile: self sampleComponentRenderMethod into: tmp1 classified: #rendering.  WAAdmin register: tmp1 asApplicationAt: arg1.  ^tmp1 newrenderOn: arg1  self renderWithContext: arg1 contextaddBraille  self addMedia: 'braille'newHandler  ^WAFileHandler newresponseAfter: arg1  self requestContext response initialize.  arg1 on: WAResponseNotification do: [:arg2 |   ].  ^self requestContext responsetestAllAt  one at: 'one' put: 1.  one at: 'both' put: 1.  two at: 'two' put: 2.  two at: 'both' put: 2.  self assert: (merged allAt: 'one') = #(1).  self assert: (merged allAt: 'two') = #(2).  self assert: (merged allAt: 'both') = #(1 2).  self assert: (merged allAt: 'neither') = #()testAllTests  | tmp1 |  tmp1 := self defaultDispatcher handlerAtAll: #('tests' 'functional').  self assert: tmp1 class == WAApplication.  self assert: tmp1 isApplication.  self deny: tmp1 isDispatcher.  self deny: tmp1 parent isNil.  self assert: tmp1 name = 'functional'.  self assert: tmp1 url pathStringUnencoded = '/tests/functional'label  ^label ifNil: [ self labelForSelector: self key ]actionBaseUrl: arg1  actionBaseUrl := arg1 seasideUrlat: arg1 ifPresent: arg2  delegates do: [:arg3 |  arg3 at: arg1 ifPresent: [:arg4 |  ^arg2 value: arg4 ] ].  ^nilisMultipart  ^truerenderButtonOn: arg1  | tmp1 |  tmp1 := state == #ON ifTrue: [ #logoff ] ifFalse: [ #logon ].  arg1 div: [ arg1 submitButton on: tmp1 of: self ]= arg1  ^(arg1 isKindOf: WAMimeType) and: [ self main = arg1 main and: [ self sub = arg1 sub ] ]initialize  super initialize.  batchFunctionalTest := WABatchFunctionalTest newpattern  ^patternblockquote: arg1  self blockquote with: arg1visit: arg1  arg1 accept: selfencodeBeforeOn: arg1  arg1 openTag: self tag attributes: attributes closed: self isClosedrenderLabel: arg1 on: arg2  arg2 tableHeading: arg1 , ':'status: arg1 message: arg2  status := arg1.  message := arg2maximumAbsoluteAge: arg1  maximumAbsoluteAge := arg1 asUnsignedIntegermax: arg1  self attributeAt: 'max' put: arg1scriptGenerator  ^scriptGenerator ifNil: [ scriptGenerator := WADefaultScriptGenerator new ]rootComponent: arg1  self properties at: #rootComponent put: arg1valueFromString: arg1  self error: 'List attributes cannot be converted from Strings'contentsDecoded  | tmp1 tmp2 |  tmp1 := self contentType.  tmp2 := tmp1 isNil ifFalse: [ tmp1 charSet ].  ^tmp2 isNil ifTrue: [ WAIllegalStateException signal: 'no character set of file upload can not be determined' ] ifFalse: [ self contentsDecodedUsing: tmp2 ]contents  self subclassResponsibilitymodel  ^modeldestroy  stream := root := nilpqg: arg1  self attributeAt: 'pqg' put: arg1dispatcher  ^handlerupdateUrl: arg1  super updateUrl: arg1.  self model selectedClass isNil ifFalse: [ arg1 addField: 'class' value: self model selectedClass fullName.        self model metaClassIndicated ifTrue: [ arg1 addField: 'meta' ] ].  self model selectedMessageName isNil ifFalse: [ arg1 addField: 'method' value: self model selectedMessageName ]builder  ^WAHtmlCanvas builderkeysAndValuesDo: arg1  dictionary keysAndValuesDo: [:arg2 :arg3 |  arg1 value: arg2 value: arg3 value ]reverse: arg1  self attributeAt: 'rev' put: arg1defaultName: arg1  defaultName := arg1chooseFrom: arg1 default: arg2  ^self wait: [:arg3 |  self chooseFrom: arg1 default: arg2 onAnswer: arg3 ]scriptGenerator: arg1  scriptGenerator := arg1atEnd  ^path isEmptyisStarting  self subclassResponsibilityhandleEvent: arg1  (Sensor respondsTo: #handleEvent:) ifTrue: [ Sensor perform: #handleEvent: with: arg1 ] ifFalse: [ Sensor perform: #processEvent: with: arg1 ]testHeadersAt  self assert: (self response headerAt: 'foo') isNil.  self response headerAt: 'foo' put: 'bar'.  self assert: (self response headerAt: 'foo') = 'bar'describeOn: arg1  (arg1 classBinding: #actionPhaseContinuationClass)     beAdvanced;     group: #renderLoop;     comment: 'The continuation used for the Render Loop''s action phase.';     options: [ self actionPhaseContinuationClasses ];     default: WACallbackProcessingActionContinuation.  (arg1 classBinding: #renderPhaseContinuationClass)     beAdvanced;     group: #renderLoop;     comment: 'The continuation used for the Render Loop''s render phase.';     options: [ self renderPhaseContinuationClasses ];     default: WARenderPhaseContinuation.  (arg1 classBinding: #rootClass)     comment: 'The root component of this seaside application.';     options: [ self rootClasses ].  (arg1 classBindingCollection: #rootDecorationClasses)     comment: 'The decoration clases that should wrap the root component.';     options: [ self rootDecorationClasses ].  arg1 at: #initialContinuationClass putClass: WAInitialRenderLoopContinuationkeyOfLength: arg1  | tmp1 |  tmp1 := String new: arg1.  1 to: arg1 do: [:arg2 |  tmp1 at: arg2 put: (space at: (generator nextInt: space size)) ].  ^tmp1addAttribute: arg1  ^self add: arg1 to: attributestestForwarded  | tmp1 tmp2 |  tmp1 := WARequest method: 'GET' uri: '/foo?bar=1'.  tmp2 := Dictionary new.  tmp2 at: 'forwarded' put: 'For="[2001:db8:cafe::17]:4711"'.  tmp1 setHeaders: tmp2.  self assert: tmp1 forwarded = 'For="[2001:db8:cafe::17]:4711"'renderTopBarOn: arg1  | tmp1 |  arg1 div     class: 'topbar';     with: [ | tmp2 |        tmp1 := component selection.        tmp2 := (WAConfigurationToolPlugin allSubclassesOn: tmp1 for: component) select: [:arg2 |  arg2 isActive ].        (tmp2 select: [:arg2 |  arg2 priority < 0 ]) do: [:arg2 |  arg1 render: arg2 ] separatedBy: [ arg1 space ].        arg1 text: ' | '.        (tmp2 select: [:arg2 |  arg2 priority >= 0 ]) do: [:arg2 |  arg1 render: arg2 ] separatedBy: [ arg1 space ] ]keysDo: arg1  delegates do: [:arg2 |  arg2 keysDo: arg1 ]min: arg1  self attributeAt: 'min' put: arg1isPassenger  ^falsetestWindowsPath  file fileName: 'C:\important\passwords.txt'.  self assert: file fileName = 'passwords.txt'.  file fileName: '/important/passwords.txt'.  self assert: file fileName = '/important/passwords.txt'.  file fileName: 'passwords.txt'.  self assert: file fileName = 'passwords.txt'updateUrl: arg1  super updateUrl: arg1.  updateUrlBlock isNil ifFalse: [ updateUrlBlock value: arg1 ]valueForField: arg1  ^arg1 isEmptyOrNil ifTrue: [ nil ] ifFalse: [ WAEmailAddress address: arg1 ]terminate: arg1  mutex terminateOwner.  arg1 respond: [:arg2 |  arg2           contentType: WAMimeType textPlain;           nextPutAll: 'Process terminated' ]fieldName  ^'_s'initialize  super initialize.  callbacks := Dictionary new.  nextKey := 1initializeFrom: arg1 to: arg2  self initialize.  values := self captureFrom: arg1 to: arg2moveDown: arg1 using: arg2  | tmp1 |  arg1 reverse do: [:arg3 |  tmp1 := arg2 indexOf: arg3 ifAbsent: [ arg2 size ].        tmp1 < arg2 size ifTrue: [ arg2 swap: tmp1 with: tmp1 + 1 ] ].  ^arg2scriptGeneratorClass: arg1  scriptGeneratorClass := arg1width: arg1  self attributeAt: 'width' put: arg1renderFormOn: arg1  arg1 form: [ arg1 label: [ arg1 text: 'CC: '.              arg1 emailInput                 listId: 'contacts';                 multipleValuesCallback: [:arg2 |  emails := arg2 ] ].        arg1 datalist           id: 'contacts';           with: [ arg1 option: 'hedral@damowmow.com'.              arg1 option: 'pillar@example.com'.              arg1 option: 'astrophy@cute.example'.              arg1 option: 'astronomy@science.example.org' ].        arg1 submitButton ]rootDecorationClasses  ^(self application preferenceAt: #rootDecorationClasses) collect: [:arg1 |  arg1 value ]testAsSelectorFunky  self assert: (WAFileLibrary asSelector: '1_2$3-4/5()6!7   8.9.test 1 2 3 me 4 5 6 .txt') = #test123me456Txtpriority  ^700value: arg1  value := arg1visitClassBindingCollectionAttribute: arg1  self visitListAttribute: arg1renderUrlencodedOn: arg1  arg1 heading     level2;     with: 'Urlencoded'.  arg1 heading     level3;     id: #urlencodedheading;     with: self urlencoded.  self renderCharacterByCharacter: self urlencoded on: arg1.  arg1 form     id: #urlencodedform;     with: [ arg1 div: [ arg1 textInput on: #urlencoded of: self.              arg1 submitButton text: self urlencoded ] ].  self renderClassName: self urlencoded on: arg1beBookmark  self relationship: 'bookmark'beOptional  isOptional := trueclassBinding: arg1  ^self addAttribute: (WAClassBindingAttribute key: arg1)start  self manager start: selftestCopy  | tmp1 tmp2 |  cache at: 1 put: '1'.  cache at: 2 put: '2'.  tmp1 := cache copy.  tmp1 remove: '2'.  tmp1 at: 1 put: '1a'.  tmp1 at: 3 put: '3'.  self assert: (cache at: 1 ifAbsent: [ self assert: false ]) = '1'.  self assert: (cache at: 2 ifAbsent: [ self assert: false ]) = '2'.  self assert: (cache keyAtValue: '1' ifAbsent: [ self assert: false ]) = 1.  self assert: (cache keyAtValue: '2' ifAbsent: [ self assert: false ]) = 2.  tmp2 := false.  cache at: 3 ifAbsent: [ tmp2 := true ].  self assert: tmp2.  tmp2 := false.  cache keyAtValue: '1a' ifAbsent: [ tmp2 := true ].  self assert: tmp2.  cache keyAtValue: '3' ifAbsent: [ tmp2 := true ].  self assert: tmp2.  self assert: (tmp1 at: 1 ifAbsent: [ self assert: false ]) = '1a'.  self assert: (tmp1 at: 3 ifAbsent: [ self assert: false ]) = '3'.  self assert: (tmp1 keyAtValue: '1a' ifAbsent: [ self assert: false ]) = 1.  self assert: (tmp1 keyAtValue: '3' ifAbsent: [ self assert: false ]) = 3.  tmp2 := false.  tmp1 at: 2 ifAbsent: [ tmp2 := true ].  self assert: tmp2.  tmp2 := false.  tmp1 keyAtValue: '1' ifAbsent: [ tmp2 := true ].  self assert: tmp2.  tmp1 keyAtValue: '2' ifAbsent: [ tmp2 := true ].  self assert: tmp2renderContentOn: arg1  arg1 paragraph: 'Example of the srcset attribute. The image contains a coloured striped pattern with some inline text that indicates which of the candidate images were selected.'.  arg1 paragraph: 'Requires a high-resolution display and browser support. Currently only Retina and Safari/Chrome'.  arg1 image     altText: 'Example of the srcset attribute. The image contains a coloured striped pattern with some inline text that indicates which of the candidate images were selected.';     sourceSet: 'http://webkit.org/demos/srcset/image-1x.png 1x, http://webkit.org/demos/srcset/image-2x.png 2x';     url: 'http://webkit.org/demos/srcset/image-src.png';     style: 'width: 400px; height: 400px;'isGlobal  ^falseonDurationChange: arg1  self document scriptGenerator event: 'durationchange' do: arg1 on: selfprintOn: arg1  super printOn: arg1.  arg1     nextPutAll: ' status: ';     print: self status.  arg1     nextPutAll: ' message: ';     print: self messagetestAddressUsername  | tmp1 |  tmp1 := WAEmailAddress address: 'philippe.marschall@gmail.com' username: 'Philippe Marschall'.  self assert: tmp1 address = 'philippe.marschall@gmail.com'.  self assert: tmp1 username = 'Philippe Marschall'.  self assert: tmp1 greaseString = '"Philippe Marschall" <philippe.marschall@gmail.com>'tag  ^'hr'updateRoot: arg1  super updateRoot: arg1.  WADevelopmentFiles default updateRoot: arg1minusPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 9 112 72 89 115 0 0 14 195 0 0 14 195 1 199 111 168 100 0 0 0 24 116 69 88 116 83 111 102 116 119 97 114 101 0 80 97 105 110 116 46 78 69 84 32 118 51 46 51 54 169 231 226 37 0 0 2 0 73 68 65 84 56 79 165 147 221 75 20 81 24 198 71 66 188 238 38 186 169 16 11 186 242 63 8 4 47 67 186 93 109 203 68 17 33 81 81 92 89 149 62 16 215 40 21 92 54 165 72 41 19 21 68 203 80 243 123 63 6 180 182 47 92 42 42 91 65 151 221 113 219 97 102 103 119 102 21 202 125 122 207 204 90 45 161 104 29 248 241 156 243 206 251 62 231 204 123 102 56 238 127 199 20 191 234 182 79 172 169 77 67 95 209 56 72 12 124 129 181 255 19 44 15 63 160 190 239 61 234 122 125 168 189 255 14 53 247 222 162 186 251 21 42 29 47 113 163 111 89 101 117 250 222 182 81 255 142 125 102 19 135 165 166 203 189 163 27 176 157 255 133 242 59 46 232 6 141 3 171 72 36 18 135 166 180 109 193 48 176 62 254 12 77 211 160 234 168 80 85 130 230 60 207 239 137 70 57 87 90 103 83 6 212 176 88 44 6 83 139 239 23 113 90 51 131 189 70 60 30 199 229 155 207 13 3 214 237 168 162 64 137 18 74 52 165 202 190 6 10 229 155 175 77 26 6 236 170 36 73 134 44 203 186 234 200 18 169 68 49 67 127 195 158 83 156 40 106 126 102 24 212 61 88 129 40 138 136 164 96 115 49 34 254 253 254 93 245 112 93 204 193 124 126 38 156 166 19 176 149 20 27 6 213 61 175 17 14 135 211 122 192 214 127 246 32 48 222 13 159 229 28 182 38 59 144 252 56 13 109 184 22 222 171 185 216 120 226 112 115 85 14 47 4 65 32 54 83 202 230 66 154 129 231 210 25 36 168 24 246 2 160 225 40 96 203 70 228 118 30 60 230 211 27 92 165 253 5 130 193 16 17 68 136 96 106 96 196 152 178 99 39 223 140 165 93 138 124 253 56 139 39 185 246 71 75 75 21 157 60 216 151 85 118 107 17 37 173 115 40 110 153 161 46 79 232 141 50 53 141 99 236 252 49 168 189 165 0 21 109 91 56 72 196 122 197 17 184 10 79 10 7 250 23 215 71 218 157 222 242 179 223 67 13 217 248 102 205 132 191 44 3 139 23 178 126 248 7 109 206 3 25 176 164 192 211 187 78 143 57 39 192 142 237 46 60 21 218 45 254 9 161 148 165 98 25 0 87 73 0 0 0 0 73 69 78 68 174 66 96 130) asByteArrayjQuery  ^(JQueryClass context: self context)     rendererClass: self species;     yourselfexecute  self open: (WADeprecation on: filter)initialize  super initialize.  self     name: 'Start';     description: 'Start the selected adaptor'createHandlers  | tmp1 |  tmp1 := WARequestHandler new.  tmp1 preferenceAt: #charSet put: 'utf-16'.  ^Array with: tmp1from: arg1  from := arg1canStart: arg1  ^arg1 isStopped and: [ self adaptors noneSatisfy: [:arg2 |  arg2 ~= arg1 and: [ arg2 port = arg1 port and: [ arg2 isStopped not ] ] ] ]tag  ^'iframe'setBrowserSessionIDFor: arg1  (arg1 request cookieAt: self browserSessionIDCookieKey) ifNotNil: [:arg2 |  browserSessionID := arg2 value ] ifNil: [ browserSessionID := self newBrowserSessionID.        arg1 response           addCookie: (self createBrowserSessionIDCookieFor: arg1);           redirectTo: (self cookieCheckUrlFor: arg1) ]batchFunctionalTestLoop  self session presenter show: WABatchFunctionalTest newlabel  ^'Clear Default'classBindingCollection: arg1  ^self addAttribute: (WAClassBindingCollectionAttribute key: arg1)port  ^portsweepIncrementally  | tmp1 |  tmp1 := Time totalSeconds.  maximumAbsoluteAge > 0 ifTrue: [ self sweep: byCreationStart maximumAge: maximumAbsoluteAge now: tmp1 ].  maximumRelativeAge > 0 ifTrue: [ self sweep: byAccessStart maximumAge: maximumRelativeAge now: tmp1 ]valueFromString: arg1  ^arg1 isEmptyOrNil ifFalse: [ Number readFrom: arg1 readStream ]handleFiltered: arg1  | tmp1 tmp2 |  tmp1 := self trackingStrategy keyFromContext: arg1.  tmp1 isNil ifTrue: [ self handleDefault: arg1 ] ifFalse: [ tmp2 := self cache at: tmp1 ifAbsent: [ nil ].        tmp2 isNil ifTrue: [ self trackingStrategy noHandlerFoundForKey: tmp1 in: self context: arg1 ] ifFalse: [ self handleKeyed: tmp2 with: tmp1 context: arg1 ] ]onTrue: arg1 onFalse: arg2  self callback: [:arg3 |  arg3 ifTrue: [ arg1 value ] ifFalse: [ arg2 value ] ]with: arg1  super with: (value ifNil: [ arg1 ])value: arg1  value := arg1editorClass  ^WAHashCacheAttributeEditorarticle: arg1  self article with: arg1baseUrlForLibrary  | tmp1 |  tmp1 := self resourceBaseUrl.  ^tmp1 isNil ifTrue: [ self url ] ifFalse: [ tmp1 copy ]renderHeadingOn: arg1  arg1 tableRow: [ arg1 tableHeading.        arg1 tableHeading: 'Control'.        arg1 tableHeading: 'Print String' ]properties  ^properties ifNil: [ properties := GRSmallDictionary2 new ]defaultConfiguration  ^super defaultConfiguration     removeParent: WARegistryConfiguration instance;     addParent: WAApplicationConfiguration instance;     yourselfdownPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 9 112 72 89 115 0 0 14 195 0 0 14 195 1 199 111 168 100 0 0 0 24 116 69 88 116 83 111 102 116 119 97 114 101 0 80 97 105 110 116 46 78 69 84 32 118 51 46 51 54 169 231 226 37 0 0 2 13 73 68 65 84 56 79 173 210 237 75 83 81 28 7 112 255 171 94 132 16 189 237 77 108 43 159 46 118 135 101 97 35 71 99 134 75 163 7 45 153 33 110 152 54 201 185 76 52 212 96 196 84 76 139 76 154 153 161 180 150 104 150 175 34 69 45 237 110 119 247 105 119 223 206 195 189 34 245 198 196 31 124 225 112 239 239 124 206 143 115 111 81 209 81 212 216 204 234 116 56 177 150 189 62 248 21 129 1 146 254 47 168 239 91 70 93 236 51 252 209 52 124 61 41 92 237 94 132 55 178 128 218 206 121 120 58 230 112 51 58 155 165 251 216 249 119 159 125 51 195 19 27 248 223 120 67 211 38 3 232 201 135 73 117 235 107 48 32 208 191 138 195 84 213 189 151 28 168 127 178 194 246 107 70 30 42 137 162 25 200 42 6 36 69 199 174 172 225 103 70 193 230 78 14 235 91 50 190 111 102 176 182 46 177 126 177 249 133 5 144 11 163 165 155 38 244 124 158 65 57 221 128 172 114 232 119 206 192 175 172 138 45 137 64 187 10 54 182 115 172 191 242 214 56 7 232 109 211 202 19 192 160 8 137 70 32 133 64 50 157 134 64 25 58 145 108 96 39 163 99 91 82 89 191 112 99 148 3 244 83 49 160 80 96 128 13 105 100 173 82 136 32 54 36 89 16 237 47 111 120 206 1 223 163 143 123 0 69 108 200 158 70 37 144 103 74 196 197 49 1 238 120 9 132 167 14 214 95 26 136 115 160 182 235 3 7 72 76 107 18 134 144 176 123 33 185 144 168 192 192 82 15 250 62 69 224 140 158 98 253 46 255 8 7 174 116 188 103 15 104 21 44 196 180 38 177 39 170 28 118 161 55 213 137 200 98 8 21 189 78 44 253 72 195 233 27 226 128 39 252 110 15 248 123 209 250 182 9 238 225 18 248 18 53 232 90 104 71 104 62 8 111 188 6 39 155 142 163 248 154 131 3 247 31 39 147 151 218 102 64 255 172 243 45 175 224 110 158 196 185 59 19 228 150 19 40 111 140 195 21 41 195 229 145 42 180 207 181 32 152 188 141 210 110 7 142 249 79 32 24 123 51 203 128 131 84 117 76 92 17 162 103 112 246 225 105 148 181 185 150 15 178 231 159 30 241 129 144 22 195 66 106 255 139 63 178 240 158 138 24 78 243 14 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytrackingStrategyClasses  ^(WAHandlerTrackingStrategy allSubclasses reject: [:arg1 |  arg1 isAbstract ]) asSortedCollection: [:arg2 :arg3 |  arg2 name <= arg3 name ]aside  ^self tag: 'aside'renderPreviousOn: arg1  self isOnFirstPage ifFalse: [ arg1 anchor           callback: [ self previousPage ];           with: '<<' ] ifTrue: [ arg1 text: '<<' ].  arg1 spaceevaluateWithFieldValues: arg1  self evaluateWithArgument: ((arg1 collect: [:arg2 |  self valueForField: arg2 ]) reject: [:arg2 |  arg2 isNil ])invalidExamples  ^#('http://www.seaside.st:8x/' 'http://www.seaside.st:x8/')renderLoadFromFileOn: arg1  arg1 heading     level2;     with: 'Load version from file'.  arg1 form     multipart;     with: [ arg1 div: [ arg1 fileUpload callback: [:arg2 |  file := arg2 ].              arg1 space.              arg1 submitButton                 callback: [ self loadFile ];                 text: 'Load' ] ]cancel  self answer: nilsetUp  super setUp.  consumer := WAPathConsumer path: #('tweets' 'kentbeck') asOrderedCollectionvisitPresenter: arg1  arg1 updateStates: self snapshotimageButton  ^self brush: WAImageButtonTag newassertLines: arg1  self assert: self lines = arg1children  ^Array with: editorresetIfPossible  ^committed ifTrue: [ false ] ifFalse: [ self initializeFields.        bufferedStream reset.        true ]initialize  super initialize.  codec := self defaultCodec.  port := self defaultPorttestDictionaryConversion  | tmp1 |  tmp1 := Dictionary new     at: 1 put: 2;     yourself.  collection := tmp1 seasideRequestFields.  self assert: (collection isKindOf: WARequestFields).  self assertAssociations: (Array with: 1 -> 2)defaultOptions  ^#(month day year)testRemove  1 to: 100 do: [:arg1 |  cache at: arg1 put: arg1 greaseString ].  1 to: 100 do: [:arg1 |  | tmp1 |        self assert: (cache at: arg1 ifAbsent: [ self assert: false ]) = arg1 greaseString.        cache remove: arg1 greaseString.        tmp1 := false.        cache at: arg1 ifAbsent: [ tmp1 := true ].        self assert: tmp1 ]renderResumableErrorOn: arg1  arg1 heading: 'Resumable error'.  arg1 paragraph: 'Behaviour is handler-dependent. If a Debugger is opened, clicking on proceed should display the message "To be displayed".'.  arg1 anchor     callback: [ self raiseResumable ];     with: 'Raise zero divide'renderInitializeCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternUnary;           with: 'initialize'.        arg1 break.        arg1 span           class: #super;           with: '    super'.        arg1 text: ' initialize.'.        arg1 break.        arg1 span           class: #instanceVar;           with: '    counters'.        arg1 text: ' := ('.        arg1 span           class: #number;           with: '1'.        arg1 text: ' to: '.        arg1 span           class: #number;           with: '5'.        arg1 text: ')'.        arg1 break.        arg1 text: '         collect: [ '.        arg1 span           class: #blockArg;           with: ':each'.        arg1 text: ' | '.        arg1 span           class: #class;           with: 'WACounter'.        arg1 text: ' new ]' ]div: arg1  self div with: arg1docType  ^docTypepasswordInput: arg1  ^self passwordInput with: arg1initialize  | tmp1 |  super initialize.  boundary := self class newBoundary.  tmp1 := Dictionary new.  tmp1 at: 'boundary' put: boundary.  self headerAt: 'Content-Type' put: (WAMimeType main: 'multipart' sub: 'alternative' parameters: tmp1)binary  bufferedStream := GRCountingStream on: GRPlatform current readWriteByteStream.  externalStream binarytestEmpty  self assert: [:arg1 |   ] gives: '<html><head><title></title></head><body onload="onLoad()"><script type="text/javascript">function onLoad(){};</script></body></html>'handlers  ^self dispatcher handlersmimeType: arg1  mimeType := arg1priority  ^1000keyOfLength: arg1  | tmp1 |  tmp1 := keys at: current.  current := current + 1.  ^tmp1renderAudioOn: arg1  arg1 heading     level2;     with: '<audio>'.  arg1 audio     url: 'http://upload.wikimedia.org/wikipedia/commons/9/94/Mix.ogg';     autoplay: true;     controls: true;     loop: true;     preload: truesummary: arg1  self summary with: arg1type: arg1  self attributes at: 'type' put: arg1noHandlerFoundForKey: arg1 in: arg2 context: arg3  | tmp1 |  tmp1 := self queryFieldKeyFromContext: arg3.  arg1 = tmp1 ifFalse: [ self deleteSessionCookieOf: arg2 from: arg3 ].  super noHandlerFoundForKey: arg1 in: arg2 context: arg3initialize  super initialize.  button := #red.  zoom := falsepath  ^path ifNil: [ path := OrderedCollection new: 5 ]contentType: arg1  contentType := arg1 isNil ifFalse: [ arg1 seasideMimeType ]haloDebugForm  ^self formClass extent: 16 @ 16 depth: 1 fromArray: #(0 0 0 50331648 25165824 12582912 281018368 415236096 264241152 132120576 7340032 3670016 1572864 0 0 0) offset: 0 @ 0renderContentOn: arg1  self renderExplanationOn: arg1.  arg1 form     get;     with: [ arg1 div: [ arg1 textInput on: #input of: self.              arg1 submitButton ] ].  arg1 definitionList: [ arg1 definitionTerm: 'Input'.        arg1 definitionData: self input.        arg1 definitionTerm: 'Parameter'.        arg1 definitionData: self parameter.        arg1 definitionTerm: 'Path'.        arg1 definitionData: self path ]assertLog: arg1  self assert: log asArray = arg1 asArray description: 'Expected ' , arg1 asArray printString , ', but got ' , log asArray printString.  log := OrderedCollection newisStopped  ^status = #stoppedrenderGoCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternUnary;           with: 'go'.        arg1 break.        arg1 text: '    [ '.        arg1 span           class: #self;           with: 'self'.        arg1 text: ' chooseCheese.'.        arg1 break.        arg1 text: '      '.        arg1 span           class: #self;           with: 'self'.        arg1 text: ' confirmCheese'.        arg1 text: ' ] whileFalse.'.        arg1 break.        arg1 text: '    '.        arg1 span           class: #self;           with: 'self'.        arg1 text: ' informCheese.' ]renderOutputOn: arg1  arg1 heading     level2;     with: '<output>'.  arg1 form: [ arg1 output: output.        arg1 space.        arg1 submitButton callback: [ output := output + 1 ] ]fileSelectors  ^self fileSelectorsTo: WAFileMetadataLibrarybeRss  self type: 'application/rss+xml' seasideMimeTyperequestBodyFor: arg1  self subclassResponsibilityselections: arg1  selections := arg1go  self call: component1 onAnswer: [:arg1 |  self call: component2 onAnswer: [  ] ]title: arg1  self attributeAt: 'title' put: arg1value: arg1  | tmp1 |  tmp1 := Time totalSeconds.  accessTime := tmp1.  creationTime := tmp1.  value := arg1session  ^self requestContext sessionbatch  ^self items copyFrom: self startIndex to: self endIndexpriority  ^50handleFiltered: arg1  [ super handleFiltered: arg1 ] on: GRDeprecatedApiNotification , GRPlatform current deprecationExceptionSet do: [:arg2 |  self deprecated: arg2 ]tableColumn  ^self brush: WATableColumnTag newdisplayAdvancedAttributes  ^self propertyAt: #displayAdvanced ifAbsent: [ false ]collection: arg1  ^self addAttribute: (WACollectionAttribute key: arg1)isClosed  ^truerange  ^rangelanguage: arg1  language := arg1monthInput  ^self brush: WAMonthInputTag newaddCookie: arg1  ^self cookies add: arg1testIsFromCrawler  | tmp1 |  tmp1 := self requestContext.  self crawlerUserAgents do: [:arg1 |  tmp1 request headers at: 'user-agent' put: arg1.        self assert: (strategy isFromCrawler: tmp1) ]initialize  super initialize.  self initializeTestsgroup: arg1  group := arg1initializeTime  time := Time totalSecondsremoveCacheEntry: arg1  self removeFromKeyTable: arg1.  self expunge: arg1 byAccessListEntry.  self expunge: arg1 byCreationListEntry.  self cacheEntryRemoved: arg1 value.  size := size - 1.  ^arg1 valuerenderHeaderOn: arg1  arg1 tableHead: [ arg1 tableRow: [ arg1 tableHeading: 'Name'.              arg1 tableHeading: 'Priority'.              arg1 tableHeading: 'Process'.              arg1 tableData ] ]renderSignalSemaphore: arg1 on: arg2  (self isWaitingOnSemaphore: arg1) ifTrue: [ arg2 anchor           callback: [ self signalSemaphore: arg1 ];           with: 'signal semaphore' ]renderContentOn: arg1  self renderExplanationOn: arg1.  key isNil ifTrue: [ self renderKeyGeneratorOn: arg1 ] ifFalse: [ self renderKeyOn: arg1 ]addToPath: arg1  | tmp1 |  tmp1 := self path.  self pathElementsIn: arg1 do: [:arg2 |  tmp1 add: arg2 ].  self slash: (arg1 notEmpty and: [ arg1 last = $/ ])testInvalidConfig  | tmp1 |  tmp1 := self defaultDispatcher handlerAt: 'examplesxyz/counter' ifAbsent: [ nil ].  self assert: tmp1 isNil.  tmp1 := self defaultDispatcher handlerAt: 'examples/counterxyz' ifAbsent: [ nil ].  self assert: tmp1 isNilimgglyphiconshalflingsPng  ^WAFileLibraryResource filepath: 'img/glyphicons-halflings.png' mimeType: (WAMimeType main: 'image' sub: 'png') cacheDuration: (Duration days: 0 hours: 0 minutes: 30 seconds: 0) contents: (GRDelayedSend receiver: self selector: #imgglyphiconshalflingsPngContent)execute  self adaptor ifNotNil: #inspecttestNotImplemented  | tmp1 tmp2 |  #('OPTIONS' 'HEAD' 'PUT' 'DELETE' 'TRACE' 'CONNECT') do: [:arg1 |  tmp2 := self requestWithMethod: arg1.        tmp1 := WARequestContext request: tmp2 response: WABufferedResponse new.        [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg2 |   ].        self assert: tmp1 response status = 501 ].  #('GET' 'POST') do: [:arg1 |  tmp2 := self requestWithMethod: arg1.        tmp1 := WARequestContext request: tmp2 response: WABufferedResponse new.        [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg2 |   ].        self assert: tmp1 response status ~= 501 ]testParagraphTag  self assert: [:arg1 |  arg1 paragraph ] gives: '<p></p>'.  self assert: [:arg1 |  arg1 paragraph: 'foo' ] gives: '<p>foo</p>'testJson  self deny: (WAMimeType fromString: 'text/json') isBinary.  self deny: (WAMimeType fromString: 'application/json') isBinaryprintOn: arg1  super printOn: arg1.  arg1     nextPut: $(;     print: value;     nextPutAll: ',q=';     print: quality;     nextPut: $)testInlineWithFileName  self response inlineWithFileName: 'bar.txt'.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Disposition: inline; filename="bar.txt"' 'Content-Length: 0' '')seconds  ^secondsdescription: arg1  describeBlock := arg1includesKey: arg1  ^delegates anySatisfy: [:arg2 |  arg2 includesKey: arg1 ]createCache  ^WAUnidirectionalCache newchildren  ^Array with: reportrenderRenderErrorOn: arg1  renderError ifTrue: [ self error: 'Error during rendering.' ].  arg1 heading: 'Error During Rendering'.  arg1 paragraph: 'This will trigger an error during the next render phase.'.  arg1 anchor     callback: [ renderError := true ];     with: 'Raise error'testAddToPathWithoutLeadingSlash  url addToPath: 'files/WAStandardFiles/seaside.jpg'.  self assert: url path size = 3.  self assert: url path first = 'files'.  self assert: url path second = 'WAStandardFiles'.  self assert: url path third = 'seaside.jpg'.  self assert: url greaseString = '/files/WAStandardFiles/seaside.jpg'initialize  super initialize.  self initializeFilters.  continuations := self createContinuationCacheid  ^self attributes at: 'id'seasidePossibleCauses  ^#('The Task is embedded in another Component but has not been included in the list of child Components returned by the Component''s #children method.' 'The Task has an empty #go method.' 'The Task does not call another Component in its #go method.' 'The #go method is written to depend on the looping execution of Tasks. If the Task needs looping behaviour without calling a Component, implement the looping behaviour within the #go method.')renderMouseButtonOn: arg1  arg1 form: [ arg1 table: [ arg1 tableRow: [ | tmp1 |                    arg1 tableData: 'Button: '.                    tmp1 := arg1 radioGroup.                    tmp1                       callback: [:arg2 |  button := arg2 ];                       selected: button.                    #(red yellow blue) do: [:arg3 |  arg1 tableData                             style: 'background-color: ' , arg3;                             with: [ tmp1 radioButton value: arg3 ] ].                    arg1 tableData: [ arg1 submitButton text: 'Set' ] ] ] ]updateDatesCache  | tmp1 |  (startDate isNil or: [ endDate isNil ]) ifTrue: [ ^self ].  datesCache := OrderedCollection new.  tmp1 := startDate.  [ tmp1 > endDate ] whileFalse: [ datesCache add: tmp1.        tmp1 := tmp1 next ]parent  ^parentselectionIndex  ^classes indexOf: self selectedevaluateWithArgument: arg1  self subclassResponsibilityrenderHarryOn: arg1  arg1 heading     level2;     with: '<cite>, <q>, <strong>'.  arg1 paragraph: [ arg1 text: 'As '.        arg1 citation: 'Harry S. Truman'.        arg1 text: ' said, '.        arg1 quote: 'The buck stops here.'.        arg1 break.        arg1 text: 'More information can be found in '.        arg1 citation: '[ISO-0000]'.        arg1 text: '.'.        arg1 break.        arg1 text: 'Please refer to the following reference number in future correspondence: '.        arg1 strong: '1-234-55' ]addBcc: arg1  ^self bcc add: arg1title  ^'Garbage Collector'writeCommentUrlOn: arg1  self commentUrl isNil ifTrue: [ ^self ].  arg1 nextPutAll: '; CommentURL='.  self write: self commentUrl greaseString asQuotedStringOn: arg1block  ^blockinitialize  super initialize.  attributes := IdentityDictionary new.  expressions := IdentityDictionary newprotectorByRemoteAddress  | tmp1 |  tmp1 := WARemoteAddressProtectionFilter new.  self session addFilter: tmp1.  child inform: 'Open this page on a different computer by copying the complete URL to a machine with a different IP address. Seaside should reply with a forbidden message. Closing this dialog should remove the filter.' onAnswer: [ self session removeFilter: tmp1 ]testHandlerInstanceValidExceptionSelector  [ [ self unhandledExceptionClass signal ] on: self createHandler do: [:arg1 |  self assert: false ] ] on: Exception do: [:arg1 |  ^self ].  self assert: falseonRateChange: arg1  self document scriptGenerator event: 'ratechange' do: arg1 on: selfcollapsed  ^self propertyAt: #collapsed ifAbsent: [ false ]type  ^'month'tag  ^'form'description  ^descriptiontestQueryEmpty  self assert: url queryFields isEmpty.  self assert: url printString = '/'renderContentForException: arg1 on: arg2  arg2 heading     level1;     with: arg1 description.  arg2 paragraph: 'Your request could not be completed. An exception occurred.'pathEncoded: arg1 codec: arg2  pathEncoded := arg1 isNil ifTrue: [ '/' ] ifFalse: [ arg1 ].  path := arg1 isNil ifTrue: [ '/' ] ifFalse: [ arg2 isNil ifTrue: [ arg1 ] ifFalse: [ ((WAUrl absolute: arg1) decodedWith: arg2) pathStringUnencoded ] ]dateInput5  ^self brush: WADateInputTag newport: arg1  port := arg1callbackAt: arg1  self greaseDeprecatedApi: 'WARenderContext>>#callbackAt:' details: 'Report if you still need it.'.  ^callbacks at: arg1 ifAbsent: [  ]type: arg1  self attributeAt: 'type' put: arg1helpSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   width="48.000000px"   height="48.000000px"   id="svg6361"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/tigert/cvs/freedesktop.org/tango-icon-theme/scalable/apps"   sodipodi:docname="help-browser.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective23" />    <linearGradient       id="linearGradient2431">      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="0"         id="stop2433" />      <stop         style="stop-color:#b8b8b8;stop-opacity:1;"         offset="1"         id="stop2435" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient21644">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop21646" />      <stop         style="stop-color:#000000;stop-opacity:0;"         offset="1"         id="stop21648" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient21644"       id="radialGradient21650"       cx="25.125"       cy="36.75"       fx="25.125"       fy="36.75"       r="15.75"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.595238,3.369686e-16,14.87500)"       gradientUnits="userSpaceOnUse" />    <linearGradient       id="linearGradient2933">      <stop         id="stop2935"         offset="0"         style="stop-color:#9cbcde;stop-opacity:1" />      <stop         id="stop2937"         offset="1"         style="stop-color:#204a87" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient2933"       id="radialGradient2207"       cx="26.544321"       cy="28.458725"       fx="26.544321"       fy="28.458725"       r="22.376116"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.238342,5.954846e-3,-6.507762e-3,1.351272,-6.992513,-9.744842)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient2431"       id="radialGradient2437"       cx="-19.515638"       cy="16.855663"       fx="-19.515638"       fy="16.855663"       r="8.7536434"       gradientTransform="matrix(4.445991,-8.852599e-16,1.367217e-15,6.8665,67.25071,-104.6679)"       gradientUnits="userSpaceOnUse" />  </defs>  <sodipodi:namedview     inkscape:guide-bbox="true"     showguides="true"     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="0.15294118"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="1"     inkscape:cx="25.160747"     inkscape:cy="22.523569"     inkscape:current-layer="layer1"     showgrid="true"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:window-width="1014"     inkscape:window-height="818"     inkscape:window-x="0"     inkscape:window-y="30"     inkscape:showpageshadow="false"     fill="#deb887"     stroke="#204a87">    <inkscape:grid       id="GridFromPre046Settings"       type="xygrid"       originx="0px"       originy="0px"       spacingx="1px"       spacingy="1px"       color="#7171cd"       empcolor="#7b7bc3"       opacity="0.12156863"       empopacity="0.5372549"       empspacing="10"       visible="true"       enabled="true" />  </sodipodi:namedview>  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:title>Help Browser</dc:title>        <dc:date>2005-11-06</dc:date>        <dc:creator>          <cc:Agent>            <dc:title>Tuomas Kuosmanen</dc:title>          </cc:Agent>        </dc:creator>        <dc:subject>          <rdf:Bag>            <rdf:li>help</rdf:li>            <rdf:li>browser</rdf:li>            <rdf:li>documentation</rdf:li>            <rdf:li>docs</rdf:li>            <rdf:li>man</rdf:li>            <rdf:li>info</rdf:li>          </rdf:Bag>        </dc:subject>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />        <dc:contributor>          <cc:Agent>            <dc:title>Jakub Steiner, Andreas Nilsson</dc:title>          </cc:Agent>        </dc:contributor>        <dc:source>http://tigert.com</dc:source>      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     id="layer1"     inkscape:label="Layer 1"     inkscape:groupmode="layer">    <path       sodipodi:type="arc"       style="opacity:0.63068181;color:#000000;fill:url(#radialGradient21650);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4.0000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"       id="path21642"       sodipodi:cx="25.125000"       sodipodi:cy="36.750000"       sodipodi:rx="15.750000"       sodipodi:ry="9.3750000"       d="M 40.875000 36.750000 A 15.750000 9.3750000 0 1 1  9.3750000,36.750000 A 15.750000 9.3750000 0 1 1  40.875000 36.750000 z"       transform="matrix(1.173803,0.000000,0.000000,0.600000,-5.004403,20.32500)" />    <path       sodipodi:type="arc"       style="fill:url(#radialGradient2207);fill-opacity:1.0000000;stroke:#204a87"       id="path2093"       sodipodi:cx="23.909048"       sodipodi:cy="23.825787"       sodipodi:rx="21.876116"       sodipodi:ry="21.876116"       d="M 45.785164 23.825787 A 21.876116 21.876116 0 1 1  2.0329323,23.825787 A 21.876116 21.876116 0 1 1  45.785164 23.825787 z"       transform="matrix(0.938442,0.000000,0.000000,0.938680,1.564075,1.633906)" />    <path       transform="matrix(0.855103,0.000000,0.000000,0.855213,3.555288,3.625019)"       d="M 45.785164 23.825787 A 21.876116 21.876116 0 1 1  2.0329323,23.825787 A 21.876116 21.876116 0 1 1  45.785164 23.825787 z"       sodipodi:ry="21.876116"       sodipodi:rx="21.876116"       sodipodi:cy="23.825787"       sodipodi:cx="23.909048"       id="path2209"       style="fill:none;fill-opacity:1.0000000;stroke:#ffffff;stroke-width:3.0307744;stroke-miterlimit:4.0000000;stroke-dasharray:none;stroke-opacity:1.0000000;opacity:0.96022727"       sodipodi:type="arc" />    <path       sodipodi:type="inkscape:offset"       inkscape:radius="0.13495015"       inkscape:original="M -20.25 6 C -21.298341 6.000026 -22.372769 6.1244771 -23.5 6.34375 C -24.627244 6.563073 -25.886043 6.8832479 -27.25 7.34375 L -27.25 12.5 C -26.100219 11.776335 -24.997109 11.236862 -23.9375 10.875 C -22.877902 10.502213 -21.881822 10.312521 -20.96875 10.3125 C -19.999334 10.312521 -19.259834 10.530174 -18.71875 10.96875 C -18.177686 11.396402 -17.906262 12.013726 -17.90625 12.78125 C -17.906261 13.285654 -18.039408 13.776881 -18.34375 14.28125 C -18.636843 14.785651 -19.107484 15.33609 -19.75 15.90625 L -20.84375 16.84375 C -22.038631 17.918325 -22.815518 18.829509 -23.1875 19.53125 C -23.559495 20.22205 -23.750005 21.007137 -23.75 21.90625 L -23.75 22.71875 L -17.65625 22.71875 L -17.65625 21.96875 C -17.656262 21.475338 -17.517981 21.030712 -17.28125 20.625 C -17.044542 20.208345 -16.547785 19.648586 -15.78125 18.96875 L -14.71875 18.03125 C -13.659161 17.055386 -12.908389 16.156813 -12.46875 15.3125 C -12.029144 14.457253 -11.781268 13.480828 -11.78125 12.40625 C -11.781268 10.311973 -12.525902 8.7417969 -13.96875 7.65625 C -15.41163 6.559783 -17.499549 6.0000261 -20.25 6 z M -23.75 25.15625 L -23.75 31 L -17.65625 31 L -17.65625 25.15625 L -23.75 25.15625 z "       xlink:href="#text2215"       style="font-size:34.15322876px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;text-align:start;line-height:125%;writing-mode:lr-tb;text-anchor:start;fill:url(#radialGradient2437);fill-opacity:1;stroke:#ffffff;stroke-width:1.09947276px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.78612713;font-family:Bitstream Vera Sans"       id="path1554"       d="M -20.25,5.875 C -21.309019,5.8750263 -22.397637,5.9982356 -23.53125,6.21875 C -24.664175,6.4391783 -25.911412,6.7562625 -27.28125,7.21875 C -27.291632,7.21754 -27.302118,7.21754 -27.3125,7.21875 C -27.324563,7.2273788 -27.335121,7.237937 -27.34375,7.25 C -27.355813,7.2586288 -27.366371,7.269187 -27.375,7.28125 C -27.37621,7.2916315 -27.37621,7.3021185 -27.375,7.3125 C -27.37621,7.3228815 -27.37621,7.3333685 -27.375,7.34375 L -27.375,12.5 C -27.37621,12.510382 -27.37621,12.520868 -27.375,12.53125 C -27.37621,12.541632 -27.37621,12.552118 -27.375,12.5625 C -27.366371,12.574563 -27.355813,12.585121 -27.34375,12.59375 C -27.335121,12.605813 -27.324563,12.616371 -27.3125,12.625 C -27.302118,12.62621 -27.291632,12.62621 -27.28125,12.625 C -27.270868,12.62621 -27.260382,12.62621 -27.25,12.625 C -27.239618,12.62621 -27.229132,12.62621 -27.21875,12.625 C -27.208368,12.62621 -27.197882,12.62621 -27.1875,12.625 C -26.045062,11.905957 -24.954148,11.357862 -23.90625,11 C -22.858109,10.631244 -21.863134,10.437521 -20.96875,10.4375 C -20.019532,10.437521 -19.323825,10.648045 -18.8125,11.0625 C -18.303777,11.46459 -18.031262,12.04554 -18.03125,12.78125 C -18.03126,13.261907 -18.175438,13.73266 -18.46875,14.21875 C -18.751741,14.705766 -19.209015,15.249245 -19.84375,15.8125 L -20.9375,16.75 C -22.138959,17.83049 -22.926743,18.741022 -23.3125,19.46875 C -23.695613,20.180196 -23.875005,20.988074 -23.875,21.90625 L -23.875,22.71875 C -23.87621,22.729132 -23.87621,22.739618 -23.875,22.75 C -23.87621,22.760382 -23.87621,22.770868 -23.875,22.78125 C -23.866371,22.793313 -23.855813,22.803871 -23.84375,22.8125 C -23.835121,22.824563 -23.824563,22.835121 -23.8125,22.84375 C -23.802118,22.84496 -23.791632,22.84496 -23.78125,22.84375 C -23.770868,22.84496 -23.760382,22.84496 -23.75,22.84375 L -17.65625,22.84375 C -17.645868,22.84496 -17.635382,22.84496 -17.625,22.84375 C -17.614618,22.84496 -17.604132,22.84496 -17.59375,22.84375 C -17.581687,22.835121 -17.571129,22.824563 -17.5625,22.8125 C -17.550437,22.803871 -17.539879,22.793313 -17.53125,22.78125 C -17.53004,22.770868 -17.53004,22.760382 -17.53125,22.75 C -17.53004,22.739618 -17.53004,22.729132 -17.53125,22.71875 L -17.53125,21.96875 C -17.531261,21.500554 -17.38288,21.075901 -17.15625,20.6875 C -16.933955,20.296216 -16.448177,19.737141 -15.6875,19.0625 L -14.625,18.125 C -13.558412,17.14269 -12.794341,16.240346 -12.34375,15.375 C -11.894481,14.500954 -11.656268,13.50158 -11.65625,12.40625 C -11.656268,10.279985 -12.400019,8.6722224 -13.875,7.5625 C -15.350197,6.4414748 -17.48124,5.8750263 -20.25,5.875 z M -23.8125,25.03125 C -23.824563,25.039879 -23.835121,25.050437 -23.84375,25.0625 C -23.855813,25.071129 -23.866371,25.081687 -23.875,25.09375 C -23.87621,25.104132 -23.87621,25.114618 -23.875,25.125 C -23.87621,25.135382 -23.87621,25.145868 -23.875,25.15625 L -23.875,31 C -23.87621,31.010382 -23.87621,31.020868 -23.875,31.03125 C -23.87621,31.041632 -23.87621,31.052118 -23.875,31.0625 C -23.866371,31.074563 -23.855813,31.085121 -23.84375,31.09375 C -23.835121,31.105813 -23.824563,31.116371 -23.8125,31.125 C -23.802118,31.12621 -23.791632,31.12621 -23.78125,31.125 C -23.770868,31.12621 -23.760382,31.12621 -23.75,31.125 L -17.65625,31.125 C -17.645868,31.12621 -17.635382,31.12621 -17.625,31.125 C -17.614618,31.12621 -17.604132,31.12621 -17.59375,31.125 C -17.581687,31.116371 -17.571129,31.105813 -17.5625,31.09375 C -17.550437,31.085121 -17.539879,31.074563 -17.53125,31.0625 C -17.53004,31.052118 -17.53004,31.041632 -17.53125,31.03125 C -17.53004,31.020868 -17.53004,31.010382 -17.53125,31 L -17.53125,25.15625 C -17.53004,25.145868 -17.53004,25.135382 -17.53125,25.125 C -17.53004,25.114618 -17.53004,25.104132 -17.53125,25.09375 C -17.539879,25.081687 -17.550437,25.071129 -17.5625,25.0625 C -17.571129,25.050437 -17.581687,25.039879 -17.59375,25.03125 C -17.604132,25.03004 -17.614618,25.03004 -17.625,25.03125 C -17.635382,25.03004 -17.645868,25.03004 -17.65625,25.03125 L -23.75,25.03125 C -23.760382,25.03004 -23.770868,25.03004 -23.78125,25.03125 C -23.791632,25.03004 -23.802118,25.03004 -23.8125,25.03125 z "       transform="matrix(0.849895,0,0,0.835205,41.72981,8.548327)" />  </g></svg>'initialize  super initialize.  self     name: 'Inspect';     description: 'Inspect the currently selected adaptor.'renderTodosOn: arg1  | tmp1 tmp2 |  arg1 section     id: 'main';     with: [ arg1 checkbox id: 'toggle-all'.        arg1 label           for: 'toggle-all';           with: 'Mark all as complete'.        arg1 unorderedList           id: 'todo-list';           script: (arg1 jQuery this on: 'click' selector: '.toggle' do: ((arg1 jQuery ajax serializeWithHidden: (arg1 jQuery expression: (JSStream on: 'event.target'))) asFunction: #(event)));           script: (arg1 jQuery this on: 'click' selector: '.destroy' do: ((arg1 jQuery ajax                       callback: [:arg2 |  arg2 first remove ] passengers: ((arg1 jQuery expression: (JSStream on: 'event.target')) closest: 'li');                       onComplete: ((arg1 jQuery expression: (JSStream on: 'event.target')) closest: 'li') remove) asFunction: #(event)));           script: (arg1 jQuery this on: 'click' selector: '.view>label' do: ((((arg1 jQuery expression: (JSStream on: 'event.target')) hide closest: 'li') find: '.edit') show asFunction: #(event)));           script: (arg1 jQuery this on: 'change' selector: '.edit' do: ((arg1 jQuery ajax                       serialize: (arg1 jQuery expression: (JSStream on: 'event.target'));                       callback: [:arg2 |  tmp1 := arg2 first ] passengers: ((arg1 jQuery expression: (JSStream on: 'event.target')) closest: 'li');                       callback: [:arg3 |  tmp2 := arg3 ] value: (JSStream on: '$(event.target).closest("li").get(0).id');                       script: [:arg4 |  arg4 << (((arg4 jQuery id: tmp2) find: 'label') html: tmp1 description) ];                       onComplete: (((arg1 jQuery expression: (JSStream on: 'event.target')) closest: 'li') find: '.edit') hide , (((arg1 jQuery expression: (JSStream on: 'event.target')) closest: 'li') find: 'label') show) asFunction: #(event)));           with: [ self todos do: [:arg5 |  arg5 renderOn: arg1 ] ] ]initialize  super initialize.  inputElements := WAInputElementContainer newlabel: arg1  self attributes at: 'label' put: arg1username  ^usernametestIsInternetExplorer  self assertUserAgent: 'Mozilla/5.0 (compatible; Konqueror/3.2; Linux 2.6.2) (KHTML, like Gecko)' isInternetExplorer: false.  self assertUserAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; MSIE 5.5; Windows NT 5.1) Opera 7.04 [de]' isInternetExplorer: false.  self assertUserAgent: 'Opera/9.10 (Windows NT 5.0; U; de)' isInternetExplorer: false.  self assertUserAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.0; de-DE; rv:1.6) Gecko/20040206 Firefox/1.0.1' isInternetExplorer: false.  self assertUserAgent: 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; WOW64; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.0.04506)' isInternetExplorer: true.  self assertUserAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)' isInternetExplorer: true.  self assertUserAgent: 'Lynx/2.8.4rel.1 libwww-FM/2.14 SSL-MM/1.4.1 OpenSSL/0.9.6c' isInternetExplorer: false.  self assertUserAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de-AT; rv:1.8.1.2) Gecko/20070222 SeaMonkey/1.1.1' isInternetExplorer: false.  self assertUserAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3' isInternetExplorer: falsereadRequestBody  ran := true.  hasBody := self requestContext request rawBody notNilrendererClass  ^WAHtmlCanvasrenderContentOn: arg1  self renderExplanationOn: arg1.  self renderUrlencodedOn: arg1.  self renderMultipartOn: arg1.  self renderGetOn: arg1urlForFile: arg1  ^self urlOf: (self asSelector: arg1)tag  ^'source'with: arg1  super with: (value ifNil: [ arg1 ])startValidation  self call: (WAValidationTestComponent new           validateWith: [:arg1 |  arg1 ifFalse: [ WAValidationNotification signal: 'Validation Failed!' ] ];           yourself).  self inform: 'Validation Suceeded!'greaseNext: arg1 putAll: arg2 startingAt: arg3  arg2 isByteString ifTrue: [ self greaseNext: arg1 putAllFast: arg2 startingAt: arg3 ] ifFalse: [ delegate greaseNext: arg1 putAll: arg2 startingAt: arg3 ]remove  todos remove: selftestSuspendCallbackDo  | tmp1 tmp2 |  tmp1 := nil.  self withCallbackContinuationDo: [:arg1 |  tmp1 := arg1 ] resultBlock: [:arg2 |  tmp2 := arg2 ].  self assert: tmp1 notNil.  self evaluateCallbackContinuation: tmp1 with: 123.  self assert: tmp2 = 123renderFilesOn: arg1  arg1 unorderedList: [ self library filenames do: [:arg2 |  arg1 listItem: [ arg1 anchor                       class: 'download';                       url: (self urlFor: arg2);                       with: arg2 ] ] ]testContentType  self assert: handler contentType = ('text/html' seasideMimeType                 charset: 'iso-8859-1';                 yourself)execute  self open: (WAInspector current on: self root)initializeOn: arg1  self initialize.  items := arg1isStreamingResponse  ^truehandleDefault: arg1  self requestContext respond: [:arg2 |  arg2           internalError;           contentType: (WAMimeType textHtml                 charset: self requestContext charSet;                 yourself);           nextPutAll: (self rendererClass builder                 fullDocument: true;                 rootBlock: [:arg3 |  self updateHtmlRoot: arg3 forException: arg1 ];                 render: [:arg4 |  self renderContentForException: arg1 on: arg4 ]) ]meter: arg1  self meter with: arg1renderRowForSelector: arg1 on: arg2  arg2 div     id: 'dialog-row-' , arg1;     class: 'dialog-row';     with: [ arg2 span           class: 'dialog-form-label';           with: [ self renderLabelForSelector: arg1 on: arg2 ].        arg2 span           class: 'dialog-form-field';           with: [ self renderFieldForSelector: arg1 on: arg2 ] ]renderCloseButtonOn: arg1  arg1 anchor     title: 'Close';     callback: [ self decoratedComponent answer: nil ];     with: [ arg1 html: '&times;' ]testCancelCallback  | tmp1 tmp2 tmp3 |  tmp1 := registry store: (WAValueCallback on: [:arg1 |  log add: arg1 ]).  tmp2 := registry store: (WAActionCallback on: [ log add: 'save' ]).  tmp3 := registry store: (WACancelActionCallback on: [ log add: 'cancel' ]).  self should: [ self request: (WARequestFields new                 at: tmp1 put: 'a';                 at: tmp2 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #('a' 'save').  self should: [ self request: (WARequestFields new                 at: tmp2 put: nil;                 at: tmp1 put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #('b' 'save').  self should: [ self request: (WARequestFields new                 at: tmp1 put: 'a';                 at: tmp3 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #('cancel').  self should: [ self request: (WARequestFields new                 at: tmp3 put: nil;                 at: tmp1 put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #('cancel')not  self addToCondition: ' !'renderNodeLabel: arg1 on: arg2  | tmp1 |  arg2 span     class: 'label';     class: (self selected == arg1 ifTrue: [ 'active' ] ifFalse: [ 'inactive' ]);     with: [ tmp1 := self labelOf: arg1.        (self canSelect: arg1) ifFalse: [ arg2 render: tmp1 ] ifTrue: [ self renderNodeLabelLink: arg1 action: (GRDelayedSend receiver: self selector: #select: argument: arg1) text: tmp1 on: arg2 ] ]teletype: arg1  self teletype with: arg1onChange: arg1  self document scriptGenerator event: 'change' do: arg1 on: selfnotImplemented  self status: WAResponse statusNotImplementedconfiguration: arg1  super configuration: arg1 underlyingCacheallValuesCallbackClass  ^WAAllUrlsCallbackcacheDuration: arg1  cacheDuration := arg1label: arg1  self attributeAt: 'label' put: arg1writeExpiresOn: arg1  expiry isNil ifTrue: [ ^self ].  arg1     nextPutAll: '; expires=';     nextPutAll: self expiryStringheaderAt: arg1 ifAbsent: arg2  ^self headers at: arg1 ifAbsent: arg2parent  ^parentmoveParentDown: arg1  | tmp1 |  self clearSearchContexts.  tmp1 := parents indexOf: arg1 ifAbsent: [ ^self ].  tmp1 < parents size ifTrue: [ parents swap: tmp1 with: tmp1 + 1 ]list: arg1  ^self addAttribute: (WAListAttribute key: arg1)serverPath  ^self preferenceAt: #serverPathremove  self isOverride ifTrue: [ self expression value isEmpty ifTrue: [ self expression value: self selectionsCurrent ] ifFalse: [ self expression value: (self removeAll: self selectionsCurrent from: self expression value) ] ] ifFalse: [ self isModify ifTrue: [ self expression additions: (self removeAll: self selectedAdditions from: self expression additions) ] ]go  (1 to: 3) do: [:arg1 |  self inform: arg1 ]createAndVerifyBinaryDocumentNamed: arg1 hasAttachment: arg2  self createAndVerifyDocumentNamed: arg1 content: WATestingFiles default samplePng mimeType: WAMimeType imagePng hasAttachment: arg2isRegistry  ^falseinitialize  super initialize.  items := #().  labelBlock := [:arg1 |  arg1 greaseString ]isImplemented: arg1  ^#('GET' 'POST') includes: arg1createHandlers  ^#()isProfiling  ^self session filters includes: self filtermatch: arg1 ifTrue: arg2  self whitespace.  arg1 do: [:arg3 |  (stream atEnd or: [ arg3 ~= stream next ]) ifTrue: [ self error: arg1 , ' expected' ] ].  arg2 valueonAnswer: arg1  ^self addDecoration: (WAAnswerHandler new block: arg1)testCompileByteArray  | tmp1 tmp2 |  tmp1 := WATestingFiles default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoJpeg).  tmp3 := (1 to: 255) asByteArray.  tmp2 := WAFile new     contentType: WAMimeType imageJpeg;     contents: tmp3;     fileName: 'demo.jpeg';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoJpeg).  tmp4 := tmp1 perform: #demoJpeg.  self assert: tmp4 = tmp3.  tmp5 := tmp1 perform: #demoJpeg.  self assert: tmp4 = tmp5 ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoJpeg) ]testDefaultFiles  | tmp1 |  tmp1 := self defaultDispatcher handlerAt: 'files'.  self assert: tmp1 class == WAFileHandler.  self deny: tmp1 isDispatcher.  self deny: tmp1 isApplication.  self deny: tmp1 parent isNil.  self assert: tmp1 name = 'files'.  self assert: tmp1 url pathStringUnencoded = '/files'second  ^secondvalue  ^valuedocumentClasses  ^WADocument withAllSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]handle: arg1  | tmp1 tmp2 tmp3 |  tmp1 := arg1 consumer next.  tmp2 := self asSelector: tmp1.  (self fileSelectors includes: tmp2) ifFalse: [ ^self ].  tmp3 := arg1 handler.  tmp3 useXSendfile ifTrue: [ arg1 respond: [:arg2 |  arg2                 cacheFor: self cacheDuration;                 headerAt: 'X-Sendfile' put: (self fullPathForFileName: tmp1 using: tmp3);                 contentType: (self mimetypeOf: tmp2) ] ] ifFalse: [ arg1 respond: [:arg2 |  arg2                 cacheFor: self cacheDuration;                 document: (self documentOf: tmp2) mimeType: (self mimetypeOf: tmp2) ] ]renderContentOn: arg1  arg1 hiddenInput callback: [ validationError := nil ].  validationError isNil ifFalse: [ self renderValidationError: validationError on: arg1 ].  arg1 div     class: self divClass;     with: [ self renderDialogOn: arg1 ]maximumSize: arg1  maximumSize := arg1 asUnsignedIntegerhasAdvancedAttributesDefault  ^falseauthorName: arg1  authorName := arg1renderContentOn: arg1  arg1 form: [ arg1 text: 'You are about to create your first component in this Smalltalk image, please enter your name to associate it with your code:'.        arg1 textInput on: #authorName of: self.        arg1 submitButton           text: 'OK';           callback: [ self handleAuthorNameSubmission ] ]append: arg1  transcript     nextPutAll: arg1;     nextPut: Character crtestDefaultNeverOverrides  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := self basicSystemConfiguration.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp2 at: #a put: #value.  tmp3 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp4 := WAUserConfiguration new     addParent: tmp2;     addParent: tmp3;     yourself.  tmp5 := WAUserConfiguration new     addParent: tmp3;     addParent: tmp2;     yourself.  self assert: (tmp1 at: #a) = #default.  self assert: (tmp2 at: #a) = #value.  self assert: (tmp3 at: #a) = #default.  self assert: (tmp4 at: #a) = #value.  self assert: (tmp5 at: #a) = #valueunregistered  super unregistered.  self clearheaderAt: arg1 append: arg2  ^self headers at: arg1 add: arg2 greaseStringcanvas  ^self brush: WACanvasTag newtestIsSsl  url := WAUrl absolute: 'https://www.seaside.st/'.  self assert: url isSsl.  url := WAUrl absolute: 'http://www.seaside.st/'.  self deny: url isSsl.  url := WAUrl absolute: 'ftps://www.seaside.st/'.  self assert: url isSsl.  url := WAUrl absolute: 'ftp://www.seaside.st/'.  self deny: url isSsl.  self deny: WAUrl new isSslopen: arg1 onAnswer: arg2  | tmp1 tmp2 |  tmp1 := self session presenter.  tmp2 := tmp1 decorations detect: [:arg3 |  arg3 isKindOf: WAToolDecoration ] ifNone: [ nil ].  tmp2 isNil ifTrue: [ ^super open: arg1 onAnswer: arg2 ].  tmp1 removeDecoration: tmp2.  super open: arg1 onAnswer: [:arg4 |  tmp1 addDecoration: tmp2.        arg2 value: arg4 ]onMouseOut: arg1  self document scriptGenerator event: 'mouseout' do: arg1 on: selfknownEvents  ^self class knownEventsurl: arg1  self attributes at: 'src' put: arg1keyFromContext: arg1  | tmp1 |  tmp1 := self queryFieldKeyFromContext: arg1.  ^tmp1 isNil ifTrue: [ (self cookieFromContext: arg1 ifAbsent: [ ^nil ]) value ] ifFalse: [ tmp1 ]testCacheForever  self response cacheForever.  self assert: (self response headerAt: 'Pragma') isNil.  self assert: (self response headerAt: 'Expires') notNil.  self assert: (self response headerAt: 'Cache-Control') isNiltestIsBinary  self deny: (WAFileMetadataLibrary isBinary: 'scipt.js').  self deny: (WAFileMetadataLibrary isBinary: 'markup.xml').  self deny: (WAFileMetadataLibrary isBinary: 'markup.xhtml').  self deny: (WAFileMetadataLibrary isBinary: 'markup.html').  self deny: (WAFileMetadataLibrary isBinary: 'file.txt').  self deny: (WAFileMetadataLibrary isBinary: 'calendar.ics').  self assert: (WAFileMetadataLibrary isBinary: 'image.jpeg').  self assert: (WAFileMetadataLibrary isBinary: 'squeak.exe')tag  ^'meta'onLoad: arg1  self document scriptGenerator event: 'load' do: arg1 on: selfexpectedMimeType  ^WAMimeType textPlainloadScripts  ^self scriptGenerator loadScriptsnextIfPresentDo: arg1  self atEnd ifFalse: [ arg1 value: self next ]setKey: arg1 callbacks: arg2  super setKey: arg1 callbacks: arg2.  callbacks := arg2scriptGeneratorClass  ^(self application preferenceAt: #scriptGeneratorClass) valuerenderContentOn: arg1  arg1 div     class: 'kalsey';     with: [ arg1 div           class: 'navigation-options';           with: [ self renderOptionsOn: arg1 ].        arg1 div           class: 'navigation-content';           with: [ self renderSelectionOn: arg1 ] ]beChecked  self selected: truetag  ^'video'performAction  self withNotificationHandlerDo: [ self basicPerformAction ].  self startTasksnewStrategy  ^WAEnterpriseAuberginesStrategy newstates  ^states ifNil: [ states := WASnapshot new ]renderPossibleFiltersOn: arg1  | tmp1 tmp2 |  tmp2 := self potentialFilters.  arg1 label: 'Possible filters: '.  arg1 break.  tmp1 := WAValueHolder new.  arg1 select     list: tmp2;     class: 'fix';     labels: [:arg2 |  arg2 name ];     callback: [:arg3 |  tmp1 contents: arg3 ].  arg1 space.  arg1 anchor     class: 'large';     title: 'Add new filter';     onClick: 'return submitForm(this)';     callback: [ self addFilterForClass: tmp1 contents ];     with: 'Add'currentCollectionAt: arg1  | tmp1 tmp2 |  tmp1 := self expressionAt: arg1 ifAbsent: [ nil ].  tmp1 isNil ifTrue: [ tmp2 := (self at: arg1) collect: [:arg2 |  #inherited -> arg2 ] ] ifFalse: [ (tmp1 isKindOf: WAValueExpression) ifTrue: [ tmp2 := (tmp1 value collect: [:arg2 |  #self -> arg2 ]) asOrderedCollection ] ifFalse: [ tmp2 := (tmp1 additions collect: [:arg2 |  #add -> arg2 ]) asOrderedCollection.              tmp2 addAll: (tmp1 removals collect: [:arg2 |  #remove -> arg2 ]).              (self at: arg1) reverse do: [:arg2 |  (tmp2 detect: [:arg3 |  arg3 value = arg2 ] ifNone: [  ]) isNil ifTrue: [ tmp2 addFirst: #inherited -> arg2 ] ] ] ].  ^tmp2codec: arg1  codec := arg1renderFooterForColumn: arg1 on: arg2  arg2 tableData     class: arg1 cssClass;     with: (arg1 totalForRows: rows)groups  ^groupsrenderListOn: arg1  arg1 orderedList     reversed: reversed;     start: start;     type: type;     with: [ self items do: [:arg2 |  arg1 listItem: arg2 ] ]title  ^'Multi-Counter'addBoth  self requestContext response addCookie: self firstCookie.  self requestContext response addCookie: self secondCookie.  self resetFirst.  self resetSecondrenderContentOn: arg1  arg1 form: [ arg1 table: [ arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'required' ].                    arg1 tableData: [ arg1 textInput                             required;                             on: #required of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'autofocus' ].                    arg1 tableData: [ arg1 textInput                             autofocus;                             on: #autofocus of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'pattern ([0-9][A-Z]{3})' ].                    arg1 tableData: [ arg1 textInput                             pattern: '[0-9][A-Z]{3}';                             on: #pattern of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'search' ].                    arg1 tableData: [ arg1 searchInput                             autosave: 'Seaside';                             placeholder: 'placeholder ...';                             results: 5;                             incremental: false;                             on: #search of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'range (6..12) by 2' ].                    arg1 tableData: [ arg1 rangeInput                             min: 6;                             max: 12;                             step: 2;                             on: #range of: self.                          arg1 space.                          arg1 render: self range ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'email' ].                    arg1 tableData: [ arg1 emailInput on: #email of: self ].                    arg1 tableData: self email class name ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'url' ].                    arg1 tableData: [ arg1 urlInput on: #url of: self ].                    arg1 tableData: self url class name ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'number' ].                    arg1 tableData: [ arg1 numberInput on: #number of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'datetimelocal' ].                    arg1 tableData: [ arg1 dateTimeLocalInput on: #datetimelocal of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'datetime' ].                    arg1 tableData: [ arg1 dateTimeInput on: #datetime of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'date' ].                    arg1 tableData: [ arg1 dateInput5 on: #date of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'time' ].                    arg1 tableData: [ arg1 timeInput5 on: #time of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'month' ].                    arg1 tableData: [ arg1 monthInput                             step: 3;                             on: #month of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'week' ].                    arg1 tableData: [ arg1 weekInput on: #week of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'color' ].                    arg1 tableData: [ arg1 colorInput on: #color of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'telephone' ].                    arg1 tableData: [ arg1 telephoneInput on: #telephone of: self ] ].              arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'datalist' ].                    arg1 tableData: [ arg1 textInput listId: #datalist.                          arg1 datalist                             id: #datalist;                             with: [ arg1 option value: 'HTML 2'.                                arg1 option value: 'HTML 3.2'.                                arg1 option value: 'HTML 4.0'.                                arg1 option value: 'HTML 4.0.1'.                                arg1 option value: 'HTML 5'.                                arg1 option                                   disabled: true;                                   value: 'XHTML' ] ] ] ].        arg1 submitButton ]renderWithContext: arg1  arg1 visitor visit: selfrenderMultipartOn: arg1  arg1 heading     level2;     with: 'Multipart'.  arg1 heading     level3;     id: #multipartheading;     with: self multipart.  self renderCharacterByCharacter: self multipart on: arg1.  arg1 form     multipart;     id: #multipartform;     with: [ arg1 div: [ arg1 textInput on: #multipart of: self.              arg1 submitButton text: self multipart ] ].  self renderClassName: self multipart on: arg1acceptLanguage  ^WAAcceptLanguage fromString: (self headerAt: 'accept-language' ifAbsent: [ ^nil ])callback: arg1  self name: (self storeCallback: (WAEmailCallback on: arg1)).  self value: self valuetestEmptyAfterReset  | tmp1 |  tmp1 := self response     status: WAResponse statusNotFound;     attachmentWithFileName: 'upload.csv';     nextPutAll: 'the content';     resetIfPossible.  self assert: tmp1.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Length: 0' '')accept  | tmp1 |  WADevelopment ensureAuthorInitialsWith: [:arg1 |  self request: arg1 ].  message := nil.  tmp1 := contents.  model contents: contents notifying: self.  contents := tmp1preferenceAt: arg1 put: arg2  arg2 isNil ifTrue: [ self configuration removeExpressionAt: arg1 ] ifFalse: [ self configuration at: arg1 put: arg2 ].  ^arg2items: arg1  batcher := WABatchedList new     items: arg1;     batchSize: 8;     yourselfautosubmit  self attributeAt: 'autosubmit' put: trueasFilename: arg1  ^(self fileResourceOf: arg1) filepathdocumentClass  ^documentClass ifNil: [ documentClass := WADocument ]testParseAmbigous  self ambigousExamples do: [:arg1 |  self assert: (WAUrl absolute: arg1 first) greaseString = arg1 last description: arg1 last resumable: true ]initializeOn: arg1  self initialize.  dialog := true.  WASystemConfiguration clearAllDescriptions.  configuration := arg1.  self buildGroupsboundary  ^boundaryrenderHaltOn: arg1  arg1 heading: 'Halt'.  arg1 paragraph: 'Behaviour is handler-dependent. In most cases, a Debugger should open in in the image. There are comments in the #raiseHalt method suggesting other things that should be tested from within the Debugger. Clicking on proceed should display the information message "To be displayed".'.  arg1 anchor     callback: [ self raiseHalt ];     with: 'Halt execution'address: arg1  self address with: arg1updateUrl: arg1  super updateUrl: arg1.  self updateUrlHandler hierarchyNames do: [:arg2 |  arg1 addToPath: arg2 ]embed  ^self brush: WAEmbedTag newassertCookieDeletion: arg1  | tmp1 |  self assert: arg1 cookies size = 1.  tmp1 := arg1 cookies first.  self assert: tmp1 path = self path.  self assert: tmp1 key = self cookieKey.  self assert: tmp1 expiry < (DateAndTime now - (Duration days: 1 hours: 0 minutes: 0 seconds: 0)).  self deny: tmp1 discardisActive  ^WAInspector current notNiltag  ^'col'testOrderedDictionary  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := Dictionary new.  tmp1     at: 1 put: #a;     at: 2 put: #b.  tmp2 := tmp1 snapshotCopy.  tmp1 at: 3 put: #c.  tmp3 := tmp1 snapshotCopy.  tmp1 at: 3 put: #d.  tmp4 := tmp1 snapshotCopy.  tmp1 removeKey: 1.  tmp5 := tmp1 snapshotCopy.  tmp1 restoreFromSnapshot: tmp2.  self assert: tmp1 size = 2.  self assert: (tmp1 at: 1 ifAbsent: [  ]) equals: #a.  self assert: (tmp1 at: 2 ifAbsent: [  ]) equals: #b.  self assert: (tmp1 at: 3 ifAbsent: [  ]) isNil.  self assert: (tmp1 at: 4 ifAbsent: [  ]) isNil.  tmp1 restoreFromSnapshot: tmp3.  self assert: (tmp1 at: 1 ifAbsent: [  ]) equals: #a.  self assert: (tmp1 at: 2 ifAbsent: [  ]) equals: #b.  self assert: (tmp1 at: 3 ifAbsent: [  ]) equals: #c.  self assert: (tmp1 at: 4 ifAbsent: [  ]) isNil.  tmp1 restoreFromSnapshot: tmp4.  self assert: (tmp1 at: 1 ifAbsent: [  ]) equals: #a.  self assert: (tmp1 at: 2 ifAbsent: [  ]) equals: #b.  self assert: (tmp1 at: 3 ifAbsent: [  ]) equals: #d.  self assert: (tmp1 at: 4 ifAbsent: [  ]) isNil.  tmp1 restoreFromSnapshot: tmp5.  self assert: (tmp1 at: 1 ifAbsent: [  ]) isNil.  self assert: (tmp1 at: 2 ifAbsent: [  ]) equals: #b.  self assert: (tmp1 at: 3 ifAbsent: [  ]) equals: #d.  self assert: (tmp1 at: 4 ifAbsent: [  ]) isNil.  tmp1 at: 2 put: #!.  tmp1 restoreFromSnapshot: tmp5.  self assert: (tmp1 at: 1 ifAbsent: [  ]) isNil.  self assert: (tmp1 at: 2 ifAbsent: [  ]) equals: #b.  self assert: (tmp1 at: 3 ifAbsent: [  ]) equals: #d.  self assert: (tmp1 at: 4 ifAbsent: [  ]) isNilname: arg1  self attributes at: 'name' put: arg1testHost  url host: 'seaside.st'.  self assert: url host = 'seaside.st'.  self assert: url greaseString = 'http://seaside.st/'configurationComponent  ^WAUserConfigurationEditor on: self configurationwriteMaxAgeQuoted: arg1 on: arg2  maxAge isNil ifTrue: [ ^self ].  arg2 nextPutAll: '; Max-Age='.  self write: self maxAge greaseString quoted: arg1 on: arg2assertListing: arg1  self assert: arg1 status = 403.  self assert: arg1 contentType main = 'text'.  self assert: arg1 contentType sub = 'plain'checked: arg1  self attributes at: 'checked' put: arg1clearServerUrl  WAWelcomeUrlDialog clearServerUrlisExpired: arg1  ^self isExpired: arg1 now: Time totalSecondswriteMiddleBoundaryOn: arg1  arg1     nextPut: Character cr;     nextPutAll: '--';     nextPutAll: self boundary;     nextPut: Character crupdateStates: arg1  self session updateStates: arg1collectionClass  ^WARequestFieldsinitialize  super initialize.  properties := Dictionary newinitializeOnBuffered: arg1 external: arg2  self initialize.  bufferedStream := arg1.  externalStream := arg2.  committed := false.  closed := falsetestDefaultTests  | tmp1 |  tmp1 := self defaultDispatcher handlerAt: 'tests'.  self assert: tmp1 class == WADispatcher.  self assert: tmp1 isDispatcher.  self deny: tmp1 isRoot.  self deny: tmp1 isApplication.  self deny: tmp1 parent isNil.  self assert: tmp1 name = 'tests'.  self assert: tmp1 url pathStringUnencoded = '/tests'ancestorsDo: arg1  | tmp1 |  tmp1 := IdentitySet new.  self ancestorsDo: arg1 seen: tmp1.  ^tmp1testContentType  self assertRoot: [:arg1 |  arg1 meta contentType: 'application/xhtml+xml' seasideMimeType ] gives: '<title></title><meta http-equiv="Content-Type" content="application/xhtml+xml"/>'.  self assertRoot: [:arg1 |  arg1 meta contentType: 'application/xhtml+xml' ] gives: '<title></title><meta http-equiv="Content-Type" content="application/xhtml+xml"/>'rootBlock  ^rootBlock isNil ifTrue: [ [:arg1 |  arg1 base target: '_top' ] ] ifFalse: [ rootBlock ]testClosingTimes  self assert: [:arg1 |  arg1           div;           div ] gives: '<div></div><div></div>'.  self assert: [:arg1 |  arg1           break;           div ] gives: '<br/><div></div>'.  self assert: [:arg1 |  arg1           div;           break ] gives: '<div></div><br/>'.  self assert: [:arg1 |  arg1           break;           break ] gives: '<br/><br/>'.  self assert: [:arg1 |  arg1           div: [ arg1 div ];           div ] gives: '<div><div></div></div><div></div>'.  self assert: [:arg1 |  arg1           div: [ arg1 break ];           div ] gives: '<div><br/></div><div></div>'.  self assert: [:arg1 |  arg1           div: [ arg1 div ];           break ] gives: '<div><div></div></div><br/>'.  self assert: [:arg1 |  arg1           div: [ arg1 break ];           break ] gives: '<div><br/></div><br/>'renderSideBarOn: arg1  arg1 space.  arg1 form     action: 'http://www.google.com/search';     get;     with: [ arg1 hiddenInput           value: 'site:seaside.st';           name: 'q'.        arg1 textInput name: 'q'.        arg1 submitButton: 'Search'.        arg1 text: ' the Seaside site' ].  self renderSideBarJoinTheCommunityOn: arg1.  self renderSideBarDivingInOn: arg1unregistered  super unregistered.  Unregistered := Unregistered + 1requestHeadersFor: arg1  self subclassResponsibilityrenderSingleSelectionCustomOn: arg1  self renderLabel: 'Single Selection (Custom)' input: [ arg1 select           dispatchCallback;           with: [ self elements do: [:arg2 |  arg1 option                       label: 'Short: ' , (arg2 copyFrom: 1 to: 3);                       callback: [ singleSelectionCustom := arg2 ];                       selected: singleSelectionCustom = arg2;                       with: 'Custom:' , arg2 greaseString ] ] ] output: singleSelectionCustom printString on: arg1add: arg1  children ifNil: [ children := OrderedCollection new ].  children add: arg1disableHalos  self properties at: #halosEnabled put: falsetestDeleteRfc2965Cookie  | tmp1 tmp2 tmp3 |  tmp1 := (WARequestCookie key: 'password' value: 'sex')     path: '/en/private_kunden/wealth_management';     version: 1;     yourself.  self requestContextWithUrl: '/' cookies: (Array with: tmp1).  self requestContext response deleteCookie: tmp1.  tmp2 := self requestContext response cookies.  self assert: tmp2 size = 1.  tmp3 := tmp2 any.  self assert: (tmp3 isKindOf: WACookie).  self assert: tmp3 value = ''.  self assert: tmp3 path = '/en/private_kunden/wealth_management'labelOf: arg1  ^self labelBlock value: arg1priority  ^600chooseFrom: arg1 default: arg2 onAnswer: arg3  self chooseFrom: arg1 default: arg2 caption: nil onAnswer: arg3isDisabled  ^self attributes at: 'disabled' ifAbsent: [ false ]children  ^Array with: mainevaluateWithArgument: arg1  block valueWithPossibleArguments: (Array with: arg1).  self signalRenderNotificationchildren  ^self todostestHeadersRemoveAt  self response headerAt: 'foo' put: 'bar'.  self response headerAt: 'bar' put: 'baz'.  self assert: (self response removeHeaderAt: 'foo') = #('bar').  self assert: (self response removeHeaderAt: 'bar') = #('baz').  self assert: self response headers isEmptyinitialize  super initialize.  self fullDocument: falserenderValuesOn: arg1  headAttributes  ^headAttrs ifNil: [ headAttrs := WAHtmlAttributes new ]handleFiltered: arg1  self next handleFiltered: arg1handler  ^selfkeyCookieName  ^self keyFieldpathParameterKeyFromContext: arg1  | tmp1 |  tmp1 := arg1 request url.  1 to: tmp1 path size do: [:arg2 |  | tmp2 |        tmp2 := tmp1 pathParameterAt: arg2 key: self keyField ifAbsent: [ nil ].        tmp2 isNil ifFalse: [ ^tmp2 ] ].  ^nilshow: arg1 onAnswer: arg2  ^parent isNil ifFalse: [ parent parent show: arg1 onAnswer: arg2 ] ifTrue: [ super show: arg1 onAnswer: arg2 ]isRunning  ^status = #runningrenderAncestryListOn: arg1  arg1 paragraph.  arg1 label: 'Assigned parents: '.  arg1 table: [ arg1 tableRow: [ arg1 tableData                 verticalAlign: 'top';                 with: [ arg1 select                       size: 5;                       selected: selectedConfiguration contents;                       class: 'fix';                       labels: [:arg2 |  arg2 isShared ifTrue: [ '(*) ' , arg2 name ] ifFalse: [ arg2 name ] ];                       list: self configuration parents;                       callback: [:arg3 |  selectedConfiguration contents: arg3 ] ].              arg1 tableData: [ arg1 anchor                       title: 'Move parent up';                       onClick: 'return submitForm(this)';                       callback: [ self configuration moveParentUp: selectedConfiguration contents ];                       with: [ arg1 html: '&uarr;' ].                    arg1                       break;                       break.                    arg1 anchor                       title: 'Remove parent configuration';                       onClick: 'return submitForm(this)';                       callback: [ self removeConfiguration: selectedConfiguration contents ];                       with: 'X'.                    arg1                       break;                       break.                    arg1 anchor                       title: 'Move parent down';                       onClick: 'return submitForm(this)';                       callback: [ self configuration moveParentDown: selectedConfiguration contents ];                       with: [ arg1 html: '&darr;' ] ] ] ].  arg1 break.  arg1 anchor     class: 'large';     title: 'Configure shared parent';     onClick: 'return submitForm(this)';     callback: [ self openConfiguration: selectedConfiguration contents ];     with: 'Configure'plusPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 9 112 72 89 115 0 0 14 195 0 0 14 195 1 199 111 168 100 0 0 0 24 116 69 88 116 83 111 102 116 119 97 114 101 0 80 97 105 110 116 46 78 69 84 32 118 51 46 51 54 169 231 226 37 0 0 1 242 73 68 65 84 56 79 165 147 223 75 83 97 28 198 207 191 209 157 55 65 55 93 116 21 4 94 116 169 8 33 93 40 161 57 205 44 108 228 116 20 204 137 52 252 49 99 203 233 152 74 162 98 37 22 244 131 54 167 178 163 214 228 128 63 67 107 77 177 172 238 182 57 60 236 236 236 156 205 43 121 122 191 239 25 217 8 67 235 133 15 207 251 125 207 251 62 239 123 158 247 28 65 248 223 54 35 237 46 122 131 63 116 251 243 111 104 157 100 76 124 133 237 233 14 238 143 111 225 222 88 20 214 209 8 90 134 55 97 121 188 129 166 193 117 152 125 171 120 48 182 172 211 58 190 119 247 235 239 135 222 208 30 78 139 165 127 241 144 27 208 206 255 66 131 43 12 110 208 58 177 139 92 46 119 106 110 56 23 12 3 219 179 47 200 102 179 208 57 58 116 157 193 250 146 36 29 75 150 205 49 117 137 121 3 22 88 38 147 65 101 71 228 23 26 171 201 224 184 166 105 26 174 59 102 13 3 74 59 173 170 80 211 12 53 157 87 245 175 6 42 155 95 213 62 109 24 208 85 165 82 10 20 69 225 202 81 82 76 83 108 204 208 35 232 57 27 103 92 107 11 24 6 214 145 79 144 101 25 251 121 168 47 239 203 127 188 255 240 43 15 90 6 171 209 208 123 5 166 135 37 40 183 53 27 6 77 67 31 144 76 38 11 50 160 250 247 12 166 150 95 192 241 178 22 193 232 0 62 198 69 120 230 26 81 225 57 143 254 55 142 176 112 215 183 134 68 34 193 216 203 43 245 19 5 6 117 174 82 248 63 247 193 191 237 229 185 186 231 111 194 51 127 11 197 150 162 3 193 236 93 65 44 22 103 196 16 103 144 26 24 99 164 101 246 11 152 137 142 20 92 74 32 50 128 139 119 206 64 112 63 89 90 186 221 43 129 190 172 250 158 119 168 237 154 67 77 71 136 165 28 228 65 85 218 253 184 100 46 130 75 172 131 83 52 113 19 103 200 116 116 130 147 252 140 67 129 158 247 87 221 231 240 72 172 7 237 76 74 53 207 224 164 205 247 182 51 124 217 122 86 163 99 147 82 77 107 127 2 98 11 165 169 154 244 167 238 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytestCharSet  | tmp1 |  tmp1 := WAMimeType fromString: 'text/html'.  tmp1 charset: 'utf-8'.  self assert: tmp1 greaseString = 'text/html;charset=utf-8'label  ^'Seaside'testWarning  | tmp1 |  tmp1 := self createRequestContext.  [ self handlerClass handleExceptionsDuring: [ Warning signal ] context: tmp1 ] on: WAResponseNotification do: [:arg1 |  self assert: tmp1 response status = 500.        ^self ].  self assert: falserenderSubItemsOn: arg1  super renderSubItemsOn: arg1.  arg1 render: fileEditorisExecuting  ^self activeComponent ~~ selfminor  ^minorhandleRequest: arg1  [ self requestHandler handle: arg1 ] on: WAResponseNotification do: [:arg2 |   ]language  ^languagefirstParameterValue  ^'firstValue'preconditionFailed  self status: WAResponse statusPreconditionFailedrendererClass: arg1  rendererClass := arg1selected: arg1  selected := arg1fieldsFor: arg1  ^arg1 inspectorFieldstestAddFieldValue  url addField: 'x' value: 1.  self assert: url greaseString = '/?x=1'.  url addField: 'y' value: 2.  self assert: url greaseString = '/?x=1&y=2'.  url addField: 'x' value: 3.  self assert: url greaseString = '/?x=1&y=2&x=3'basicNextPutAll: arg1  self nextPutAll: arg1renderValidationErrorOn: arg1  arg1 span     class: 'error';     with: 'invalid time'createTrue  ^truetestName  | tmp1 |  tmp1 := WATestingFiles default.  self assert: tmp1 name = 'WATestingFiles'.  self assert: tmp1 name isString.  self deny: tmp1 name isSymbolassertLog: arg1  self assert: log asArray = arg1 description: 'Expected ' , arg1 printString , ', but got ' , log asArray printString.  log := OrderedCollection newrenderContentOn: arg1  arg1 render: batcher.  arg1 unorderedList list: batcher batchlibraries  ^WAAbstractFileLibrary librariesdate  ^datevalue  ^valuecachedValues  ^cachedValuesmainCssContent  ^''definitionData  ^self tag: 'dd'callbackClass  ^WAMultipleValuesCallbackinitialize  super initialize.  component1 := WAFormDialog new     addMessage: 'Step 1';     yourself.  component2 := WAFormDialog new     addMessage: 'Step 2';     yourselfperformTest  requestContext := self createRequestContext.  WACurrentRequestContext use: self requestContext during: [ self pushAll: self createHandlers during: [ super performTest ] ]testCookiesDisabledNoFieldCookieHandlerPresent  | tmp1 tmp2 tmp3 |  registry := self createRegistry.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: nil cookieKey: tmp3.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDefault: tmp1forbidden  self status: WAResponse statusForbiddenprocess: arg1  | tmp1 |  tmp1 := self contextFor: arg1.  ^[ self handle: tmp1.  tmp1 push: self requestHandler during: [ self responseFrom: tmp1 ] ] ensure: [ tmp1 destroy ]renderNotAnsweringToolsOn: arg1  arg1 anchor     url: self debugUrl;     title: 'Open a debugger in your IDE and block until you hit "Proceed"';     with: 'Debug'.  self exception isResumable ifTrue: [ arg1 space.        arg1 anchor           url: self proceedUrl;           with: 'Proceed' ].  self limit < self frameCount ifTrue: [ arg1 space.        arg1 anchor           url: self fullStackUrl;           with: 'Full Stack' ]testCookiesDisabledMismatchingWithBothHandlers  | tmp1 tmp2 tmp3 tmp4 |  registry := self createRegistry.  tmp3 := self registerNewHandler.  tmp4 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: tmp4.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDispatched: tmp1acceptCharset: arg1  self attributes at: 'accept-charset' put: arg1unregister: arg1  serverUrl: arg1  self class serverUrl: arg1testAsMIMEDocumentForm  | tmp1 tmp2 |  self formClassExists ifFalse: [ ^self ].  tmp1 := self sampleForm.  tmp2 := tmp1 seasideMimeDocument.  self assert: tmp2 contentType = WAMimeType imagePng.  self assert: (tmp2 content isKindOf: ByteArray)renderContentOn: arg1  self     renderColumnsOn: arg1;     renderModeButtonsOn: arg1;     renderMessageOn: arg1;     renderContentPaneOn: arg1tag  ^'script'model: arg1  model notNil ifTrue: [ model removeDependent: self ].  arg1 notNil ifTrue: [ arg1 addDependent: self ].  model := arg1.  contents := model contentsfileSizeOf: arg1  ^(self perform: arg1) sizekey  ^key<= arg1  ^self priority <= arg1 priorityrenderFilesOn: arg1  files isNil ifTrue: [ ^self ].  arg1 unorderedList: [ files do: [:arg2 |  arg1 listItem: arg2 fileName ] ]testAtEnd  self deny: consumer atEnd.  consumer next.  self deny: consumer atEnd.  consumer next.  self assert: consumer atEndrenderContentOn: arg1  self call: WAMiniCalendar newregistry  ^handlers detect: [:arg1 |  arg1 isRegistry ] ifNone: [ nil ]renderContentOn: arg1  arg1 heading level1 with: 'Browse installed applications'.  arg1 anchor     class: 'goback';     callback: [ self answer ];     with: '[ go back ]'.  arg1 paragraph: [ arg1 text: 'Would you like to set '.        arg1 anchor           url: '/browse';           with: 'Browse'.        arg1 text: ' to be the default application when you visit this site? This will disable this welcome screen (though you can always find it later at '.        arg1 anchor           url: self application url;           with: self application url.        arg1 text: ').' ].  arg1 div     class: 'buttons';     with: [ arg1 anchor           callback: [ self setBrowseAsDefault ];           script: (arg1 jQuery this button primaryIcon: 'ui-icon-pin-s');           title: 'Yes, change the default';           with: 'Yes'.        arg1 anchor           callback: [ self redirectToBrowse ];           script: (arg1 jQuery this button primaryIcon: 'ui-icon-folder-open');           title: 'No, just Browse for now';           with: 'No'.        arg1 anchor           callback: [ self answer ];           script: (arg1 jQuery this button primaryIcon: 'ui-icon-arrowreturnthick-1-w');           title: 'Go back';           with: 'Back' ]typesDictionary  ^Dictionary new     add: $1 -> 'decimal';     add: $a -> 'lower-alpha';     add: $A -> 'upper-alpha';     add: $i -> 'lower-roman';     add: $I -> 'upper-roman';     yourselfrenderTrackOn: arg1  arg1 heading     level2;     with: '<track>'.  arg1 video     url: 'brave.webm';     with: [ arg1 track           beSubtitles;           url: 'brave.en.vtt';           sourceLanguage: 'en';           label: 'English'.        arg1 track           beCaptions;           url: 'brave.en.vtt';           sourceLanguage: 'en';           label: 'English for the Hard of Hearing'.        arg1 track           beSubtitles;           url: 'brave.fr.vtt';           sourceLanguage: 'fr';           language: 'fr';           label: 'Francais'.        arg1 track           beSubtitles;           url: 'brave.de.vtt';           sourceLanguage: 'de';           language: 'de';           label: 'Deutsch' ]onCancel: arg1  self document scriptGenerator event: 'cancel' do: arg1 on: selftodoCss  ^'html,body {	margin: 0;	padding: 0;}button {	margin: 0;	padding: 0;	border: 0;	background: none;	font-size: 100%;	vertical-align: baseline;	font-family: inherit;	color: inherit;	-webkit-appearance: none;	/*-moz-appearance: none;*/	-ms-appearance: none;	-o-appearance: none;	appearance: none;}body {	font: 14px ''Helvetica Neue'', Helvetica, Arial, sans-serif;	line-height: 1.4em;	background: #eaeaea url(''bg.png'');	color: #4d4d4d;	width: 550px;	margin: 0 auto;	-webkit-font-smoothing: antialiased;	-moz-font-smoothing: antialiased;	-ms-font-smoothing: antialiased;	-o-font-smoothing: antialiased;	font-smoothing: antialiased;}#todoapp {	background: #fff;	background: rgba(255, 255, 255, 0.9);	margin: 130px 0 40px 0;	border: 1px solid #ccc;	position: relative;	border-top-left-radius: 2px;	border-top-right-radius: 2px;	box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.2),				0 25px 50px 0 rgba(0, 0, 0, 0.15);}#todoapp:before {	content: '''';	border-left: 1px solid #f5d6d6;	border-right: 1px solid #f5d6d6;	width: 2px;	position: absolute;	top: 0;	left: 40px;	height: 100%;}#todoapp input::-webkit-input-placeholder {	font-style: italic;}#todoapp input::-moz-placeholder {	font-style: italic;	color: #a9a9a9;}#todoapp h1 {	position: absolute;	top: -120px;	width: 100%;	font-size: 70px;	font-weight: bold;	text-align: center;	color: #b3b3b3;	color: rgba(255, 255, 255, 0.3);	text-shadow: -1px -1px rgba(0, 0, 0, 0.2);	-webkit-text-rendering: optimizeLegibility;	-moz-text-rendering: optimizeLegibility;	-ms-text-rendering: optimizeLegibility;	-o-text-rendering: optimizeLegibility;	text-rendering: optimizeLegibility;}#header {	padding-top: 15px;	border-radius: inherit;}#header:before {	content: '''';	position: absolute;	top: 0;	right: 0;	left: 0;	height: 15px;	z-index: 2;	border-bottom: 1px solid #6c615c;	background: #8d7d77;	background: -webkit-gradient(linear, left top, left bottom, from(rgba(132, 110, 100, 0.8)),to(rgba(101, 84, 76, 0.8)));	background: -webkit-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));	background: -moz-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));	background: -o-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));	background: -ms-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));	background: linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr=''#9d8b83'', EndColorStr=''#847670'');	border-top-left-radius: 1px;	border-top-right-radius: 1px;}#new-todo,.edit {	position: relative;	margin: 0;	width: 100%;	font-size: 24px;	font-family: inherit;	line-height: 1.4em;	border: 0;	outline: none;	color: inherit;	padding: 6px;	border: 1px solid #999;	box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);	-webkit-box-sizing: border-box;	-moz-box-sizing: border-box;	-ms-box-sizing: border-box;	-o-box-sizing: border-box;	box-sizing: border-box;	-webkit-font-smoothing: antialiased;	-moz-font-smoothing: antialiased;	-ms-font-smoothing: antialiased;	-o-font-smoothing: antialiased;	font-smoothing: antialiased;}#new-todo {	padding: 16px 16px 16px 60px;	border: none;	background: rgba(0, 0, 0, 0.02);	z-index: 2;	box-shadow: none;}#main {	position: relative;	z-index: 2;	border-top: 1px dotted #adadad;}label[for=''toggle-all''] {	display: none;}#toggle-all {	position: absolute;	top: -42px;	left: -4px;	width: 40px;	text-align: center;	border: none; /* Mobile Safari */}#toggle-all:before {	content: ''»'';	font-size: 28px;	color: #d9d9d9;	padding: 0 25px 7px;}#toggle-all:checked:before {	color: #737373;}#todo-list {	margin: 0;	padding: 0;	list-style: none;}#todo-list li {	position: relative;	font-size: 24px;	border-bottom: 1px dotted #ccc;}#todo-list li:last-child {	border-bottom: none;}#todo-list li.editing {	border-bottom: none;	padding: 0;}#todo-list li.editing .edit {	display: block;	width: 506px;	padding: 13px 17px 12px 17px;	margin: 0 0 0 43px;}#todo-list li.editing .view {	display: none;}#todo-list li .toggle {	text-align: center;	width: 40px;	/* auto, since non-WebKit browsers doesn''t support input styling */	height: auto;	position: absolute;	top: 0;	bottom: 0;	margin: auto 0;	border: none; /* Mobile Safari */	-webkit-appearance: none;	/*-moz-appearance: none;*/	-ms-appearance: none;	-o-appearance: none;	appearance: none;}#todo-list li .toggle:after {	content: ''✔'';	line-height: 43px; /* 40 + a couple of pixels visual adjustment */	font-size: 20px;	color: #d9d9d9;	text-shadow: 0 -1px 0 #bfbfbf;}#todo-list li .toggle:checked:after {	color: #85ada7;	text-shadow: 0 1px 0 #669991;	bottom: 1px;	position: relative;}#todo-list li label {	word-break: break-word;	padding: 15px;	margin-left: 45px;	display: block;	line-height: 1.2;	-webkit-transition: color 0.4s;	-moz-transition: color 0.4s;	-ms-transition: color 0.4s;	-o-transition: color 0.4s;	transition: color 0.4s;}#todo-list li.completed label {	color: #a9a9a9;	text-decoration: line-through;}#todo-list li .destroy {	display: none;	position: absolute;	top: 0;	right: 10px;	bottom: 0;	width: 40px;	height: 40px;	margin: auto 0;	font-size: 22px;	color: #a88a8a;	-webkit-transition: all 0.2s;	-moz-transition: all 0.2s;	-ms-transition: all 0.2s;	-o-transition: all 0.2s;	transition: all 0.2s;}#todo-list li .destroy:hover {	text-shadow: 0 0 1px #000,				 0 0 10px rgba(199, 107, 107, 0.8);	-webkit-transform: scale(1.3);	-moz-transform: scale(1.3);	-ms-transform: scale(1.3);	-o-transform: scale(1.3);	transform: scale(1.3);}#todo-list li .destroy:after {	content: ''✖'';}#todo-list li:hover .destroy {	display: block;}#todo-list li .edit {	display: none;}#todo-list li.editing:last-child {	margin-bottom: -1px;}#footer {	color: #777;	padding: 0 15px;	position: absolute;	right: 0;	bottom: -31px;	left: 0;	height: 20px;	z-index: 1;	text-align: center;}#footer:before {	content: '''';	position: absolute;	right: 0;	bottom: 31px;	left: 0;	height: 50px;	z-index: -1;	box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),				0 6px 0 -3px rgba(255, 255, 255, 0.8),				0 7px 1px -3px rgba(0, 0, 0, 0.3),				0 43px 0 -6px rgba(255, 255, 255, 0.8),				0 44px 2px -6px rgba(0, 0, 0, 0.2);}#todo-count {	float: left;	text-align: left;}#filters {	margin: 0;	padding: 0;	list-style: none;	position: absolute;	right: 0;	left: 0;}#filters li {	display: inline;}#filters li a {	color: #83756f;	margin: 2px;	text-decoration: none;}#filters li a.selected {	font-weight: bold;}#clear-completed {	float: right;	position: relative;	line-height: 20px;	text-decoration: none;	background: rgba(0, 0, 0, 0.1);	font-size: 11px;	padding: 0 10px;	border-radius: 3px;	box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.2);}#clear-completed:hover {	background: rgba(0, 0, 0, 0.15);	box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.3);}#info {	margin: 65px auto 0;	color: #a6a6a6;	font-size: 12px;	text-shadow: 0 1px 0 rgba(255, 255, 255, 0.7);	text-align: center;}#info a {	color: inherit;}/*	Hack to remove background from Mobile Safari.	Can''t use it globally since it destroys checkboxes in Firefox and Opera*/@media screen and (-webkit-min-device-pixel-ratio:0) {	#toggle-all,	#todo-list li .toggle {		background: none;	}	#todo-list li .toggle {		height: 40px;	}	#toggle-all {		top: -56px;		left: -15px;		width: 65px;		height: 41px;		-webkit-transform: rotate(90deg);		transform: rotate(90deg);		-webkit-appearance: none;		appearance: none;	}}.hidden{	display:none;}'attribute  ^attributevalue: arg1  value := arg1legend: arg1  legend := arg1classId: arg1  self attributes at: 'classid' put: arg1testKeepParameters  | tmp1 tmp2 |  [ handler handleFiltered: self requestContext ] on: WAResponseNotification do: [:arg1 |   ].  tmp2 := self requestContext response.  self assert: tmp2 status = 301.  tmp1 := tmp2 headerAt: 'Location'.  self assert: tmp1 greaseString = '/pier/environment/pier.png?view=PRDownloadView'configurationComponent  ^WADispatcherEditor on: selfaddDecoration: arg1  | tmp1 tmp2 |  tmp1 := nil.  tmp2 := self decoration.  [ tmp2 ~~ self and: [ self decoration: tmp2 shouldWrap: arg1 ] ] whileTrue: [ tmp1 := tmp2.        tmp2 := tmp2 next ].  arg1 setNext: tmp2.  tmp1 isNil ifTrue: [ self decoration: arg1 ] ifFalse: [ tmp1 setNext: arg1 ].  ^arg1testValueWithoutAttribute  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := self basicSystemConfiguration.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp2 at: #a put: 1.  tmp2 removeParent: tmp1.  tmp3 := WAUserConfiguration new     addParent: tmp1;     addParent: tmp2;     yourself.  tmp4 := WAUserConfiguration new     addParent: tmp2;     addParent: tmp1;     yourself.  self assert: (tmp1 at: #a) = #default.  self should: [ tmp2 at: #a ] raise: WAAttributeNotFound.  self assert: (tmp3 at: #a) = #default.  self assert: (tmp4 at: #a) = #default.  self should: [ tmp2 at: #a put: 2 ] raise: ErrorinitializeOn: arg1  self initialize.  value := arg1on: arg1 of: arg2  self callback: (GRDelayedSend receiver: arg2 selector: arg1).  self with: (self labelForSelector: arg1 of: arg2)contentType  ^self mimeType seasideMimeType     charset: self requestContext charSet;     yourselftestNestedEvaluation  | tmp1 tmp2 |  self assert: (self mark: [ 2 * (self callcc: [:arg1 |  tmp1 := arg1.                          3 * (self callcc: [:arg2 |  tmp2 := arg2.                                      4 ]) ]) ]) = 24.  self assert: (self mark: [ tmp1 value: 5 ]) = 10.  self assert: (self mark: [ tmp2 value: 5 ]) = 30vmOptionsFrom: arg1  | tmp1 |  tmp1 := ((-1 to: -1000 by: -1) collect: [:arg2 |  arg1 vm getSystemAttribute: arg2 ]) select: [:arg2 |  arg2 notNil ].  ^String streamContents: [:arg3 |  tmp1 do: [:arg2 |  arg3 nextPutAll: arg2 ] separatedBy: [ arg3 space ] ]renderFilesOn: arg1  arg1 table: [ self library filenames sorted do: [:arg2 |  arg1 tableRow: [ renamingFile = arg2 ifTrue: [ self renderRenameFormForFile: arg2 on: arg1 ] ifFalse: [ self renderFile: arg2 on: arg1 ] ] ] ]latin1String  ^self asString: #(220 98 232 114 115 116 114 238 241 103 233)string  ^stringexceptionDescription  ^String streamContents: [:arg1 |  | tmp1 |        tmp1 := self exception.        arg1 nextPutAll: tmp1 class name.        tmp1 messageText isNil ifFalse: [ arg1                 nextPutAll: ': ';                 nextPutAll: tmp1 messageText ] ]user: arg1  user := arg1notification  ^notificationtextArea: arg1  ^self textArea with: arg1initialRequest: arg1  super initialRequest: arg1.  initialRequestBlock isNil ifFalse: [ initialRequestBlock value: arg1 ]details  ^self brush: WADetailsTag newtestTableHeading  self assert: [:arg1 |  arg1 tableHeading ] gives: '<th></th>'.  self assert: [:arg1 |  arg1 tableHeading           character: '.';           characterOffset: 2 ] gives: '<th char="." charoff="2"></th>'.  self assert: [:arg1 |  arg1 tableHeading           align: 'right';           verticalAlign: 'top' ] gives: '<th align="right" valign="top"></th>'.  self assert: [:arg1 |  arg1 tableHeading           abbreviation: 'short';           with: 'longer' ] gives: '<th abbr="short">longer</th>'.  self assert: [:arg1 |  arg1 tableHeading axis: 'time' ] gives: '<th axis="time"></th>'.  self assert: [:arg1 |  arg1 tableHeading           colSpan: 2;           rowSpan: 3 ] gives: '<th colspan="2" rowspan="3"></th>'.  self assert: [:arg1 |  arg1 tableHeading headers: 'zork' ] gives: '<th headers="zork"></th>'.  self assert: [:arg1 |  arg1 tableHeading scope: 'colgroup' ] gives: '<th scope="colgroup"></th>'beLast  self relationship: 'last'renderWarningOn: arg1  arg1 heading: 'Warning'.  arg1 paragraph: 'In Pharo and GemStone the warning test works the same as the resumable error test.'.  arg1 paragraph: 'In VisualWorks the warning test works the same as the halt test.'.  arg1 anchor     callback: [ self raiseWarning ];     with: 'Raise warning'tally  ^tallyvisitor: arg1  visitor := arg1deleted  ^self brush: (WAEditTag tag: 'del')exceptionHandlerClasses  ^WAExceptionHandler withAllSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]haloClass  ^WAHaloaccept: arg1  arg1 visitClassListAttribute: selfcache  ^cacheisSelected: arg1  ^selected = arg1add  | tmp1 tmp2 |  tmp1 := self currentValues.  tmp2 := selections     reject: [:arg1 |  tmp1 includes: (self valueForOption: arg1) ];     collect: [:arg1 |  self valueForOption: arg1 ].  self isOverride ifTrue: [ self expression value: self expression value , tmp2 ] ifFalse: [ self isModify ifTrue: [ self expression additions: self expression additions , tmp2 ] ].  selectionsCurrent := self currentList select: [:arg1 |  tmp2 includes: arg1 value ]fileName: arg1  fileName := arg1leavesByTime  ^String streamContents: [:arg1 |  self tally leavesPrintOn: arg1 threshold: 1 ]renderEditIntegerParameterAt: arg1 named: arg2 on: arg3  | tmp1 |  tmp1 := SmalltalkImage current vm parameterAt: arg1.  self renderLabel: arg2 value: [ arg3 render: tmp1.        self renderEditVMParameterAt: arg1 callback: [ self editIntegerVMParameterAt: arg1 named: arg2 ] on: arg3 ] on: arg3writeContentOn: arg1  self subclassResponsibilityrunCase  GRPlatform current doSilently: [ super performTest ]type  ^'image'seasidePossibleCauses  ^#('you need to clear your configuration caches to see new attributes (try "WAAdmin clearConfigurationCaches" in a workspace)' 'you have not included a necessary ancestor in a configuration')reverse  isReversed := isReversed notsslSessionId  ^'F42BAA17C89C707060E6BF5D251CC7E8832117056C1A8B0883387CA0EDDB52CF'testHome  root show: child1.  child1 show: child2.  self assert: root activeComponent = child2.  self assert: child1 activeComponent = child2.  root home.  self assert: root activeComponent = root.  self assert: child1 activeComponent = child2.  self assert: child2 activeComponent = child2.  child1 home.  self assert: root activeComponent = root.  self assert: child1 activeComponent = child1.  self assert: child2 activeComponent = child2.  child2 home.  self assert: root activeComponent = root.  self assert: child1 activeComponent = child1.  self assert: child2 activeComponent = child2onDragEnd: arg1  self document scriptGenerator event: 'dragend' do: arg1 on: selfvisit: arg1  arg1 acceptDecorated: selfisGet  ^self method = 'GET'endRow  ^rowSelectionStart max: rowSelectionEndrenderPushOn: arg1  arg1 heading level2 with: 'Push'.  arg1 paragraph: 'Clicking the button should not do anything.'.  arg1 button     bePush;     with: 'Push'currentValues  ^self currentList collect: [:arg1 |  arg1 value ]keyAtValue: arg1 ifAbsent: arg2  ^mutex critical: [ cache keyAtValue: arg1 ifAbsent: arg2 ]preformatted  ^self tag: 'pre'defaultConfiguration  ^super defaultConfiguration     removeParent: WARequestHandlingConfiguration instance;     addParent: WAFileHandlerConfiguration instance;     yourselfvalidationError: arg1  validationError := arg1createObject  ^Dictionary newbasicPerformAction  quote  ^self tag: 'q'requestWithMethod: arg1  ^WARequest method: arg1 uri: '/'renderContentOn: arg1  self configuration isShared ifTrue: [ arg1 heading: self configuration name ].  arg1 form: [ self renderFormOn: arg1.        self renderButtonsOn: arg1 ]testFlushDelay  self response forbidden.  self response headerAt: 'X-Application-Server' put: 'Seaside'.  self deny: self response isCommitted.  self shouldnt: [ self response committedCheck ] raise: WAIllegalStateExceptionwhitespace  [ stream atEnd not and: [ stream peek isSeparator ] ] whileTrue: [ stream next ]path  | tmp1 |  tmp1 := self requestContext request url path last.  ^tmp1 = input ifTrue: [ tmp1 ] ifFalse: [ 'fail!' ]removeExpressionAt: arg1 ifAbsent: arg2  self clearSearchContexts.  ^expressions removeKey: arg1 ifAbsent: arg2at: arg1 ifAbsent: arg2  ^mutex critical: [ cache at: arg1 ifAbsent: arg2 ]expireInSeconds: arg1  self expiry: (Duration days: 0 hours: 0 minutes: 0 seconds: arg1).  self maxAge: arg1renderNotSupportedOn: arg1  arg1 heading: 'Your image doesn''t have the Form class'renderContentOn: arg1  self renderExplanationOn: arg1.  self renderTreeOn: arg1testCopyDocumentHandler  | tmp1 |  tmp1 := handler copy.  self assert: tmp1 = handler.  self deny: tmp1 == handler.  self assert: tmp1 document = handler document.  self deny: tmp1 document == handler documentlimit: arg1  limit := arg1addFormByDefault  ^truevalueForField: arg1  ^arg1 ifNil: [ String new ]renderStopOn: arg1  arg1 form: [ arg1 text: 'Stop VNC (running on ' , self currentDisplay , ') '.        arg1 submitButton           callback: [ self stop ];           text: 'Stop' ]mode: arg1  mode contents: arg1language: arg1  self attributeAt: 'lang' put: arg1presenter  ^self session presenteractionUrlFor: arg1  | tmp1 |  tmp1 := arg1 actionUrl copy.  tmp1 addField: self parameterName value: self firstParameterValue.  ^tmp1handles: arg1  ^self class handles: arg1testEmpty  | tmp1 |  tmp1 := WAEmailAddress address: (String with: Character cr with: Character lf) , 'philippe.marschall@gmail.com'.  self assert: tmp1 address = ''.  self assert: tmp1 username isNil.  self assert: tmp1 greaseString = ''serverUrl  ^WAWelcomeUrlDialog serverUrlrenderContentOn: arg1  arg1 heading     level: 3;     with: 'Add new request handler'.  arg1 form: [ arg1 table: [ arg1 tableRow: [ arg1 tableData                       class: 'label';                       with: 'Name: '.                    arg1 tableData: [ arg1 textInput callback: [:arg2 |  name := arg2 ] ] ].              arg1 tableRow: [ arg1 tableData                       class: 'label';                       with: 'Type: '.                    arg1 tableData: [ arg1 select                             selected: type;                             list: self handlerClasses;                             callback: [:arg2 |  type := arg2 ];                             labels: [:arg3 |  arg3 description ] ] ] ].        arg1 break.        arg1 submitButton           callback: [ self addRequestHandler ];           with: 'OK'.        arg1 space.        arg1 submitButton           callback: [ self answer: nil ];           with: 'Cancel' ]debugActionField  ^'_debugAction'initialize  super initialize.  self firstPath: self application url pathStringUnencoded.  self secondPath: self application url pathStringUnencodedkey: arg1  resourceBaseUrl  ^self preferenceAt: #resourceBaseUrlreplyTo: arg1  replyTo := arg1potentialParents  | tmp1 |  tmp1 := WASystemConfiguration allSubclasses collect: [:arg1 |  arg1 instance ].  tmp1 addAll: WASharedConfiguration configurations.  ^tmp1 select: [:arg1 |  (self configuration canAddParent: arg1) and: [ (self configuration inheritsFrom: arg1) not ] ]testEnsure  | tmp1 tmp2 |  tmp2 := 0.  self mark: [ 2 * (self callcc: [:arg1 |  tmp1 := arg1.                    0 ]) ].  self assert: (self mark: [ [ tmp1 value: 3 ] ensure: [ tmp2 := tmp2 + 1 ] ]) = 6.  self assert: tmp2 = 1.  tmp2 := 0.  self mark: [ [ 2 * (self callcc: [:arg1 |  tmp1 := arg1.                    0 ]) ] ensure: [ tmp2 := tmp2 + 1 ] ].  self assert: tmp2 = 1.  self assert: (tmp1 value: 2) = 4.  self assert: tmp2 = 2.  self assert: (tmp1 value: 3) = 6.  self assert: tmp2 = 3weekInput  ^self brush: WAWeekInputTag newemphasis  ^self tag: 'em'basicAuthenticationRealm: arg1  self headerAt: 'WWW-Authenticate' put: 'Basic realm="' , arg1 greaseString , '"'.  self authenticationFailedconfigureCollectionAttribute: arg1  self show: (arg1 attributeEditor new           configuration: configuration;           attribute: arg1;           yourself)figureCaption  ^self tag: 'figcaption'renderDescriptionOn: arg1  arg1 paragraph: [ arg1 text: 'Here are a few common settings you might want to change. Once you''re ready for more, you can jump over to the '.        arg1 anchor           url: '/config';           with: 'advanced configuration tool'.        arg1 text: '.' ]updateRoot: arg1  | tmp1 |  tmp1 := self application contentType charSet.  tmp1 isNil ifFalse: [ arg1 meta charset: tmp1 ].  arg1 beHtml5.  arg1 title: 'Seaside'.  self application libraries do: [:arg2 |  arg2 default updateRoot: arg1 ].  self session updateRoot: arg1writeBodyOn: arg1  self body isNil ifFalse: [ arg1 nextPutAll: self body greaseString ]children  ^Array with: tablecallback: arg1  values := Dictionary new.  key := canvas callbacks store: (WAValuesCallback on: arg1 values: values)adaptors  ^adaptors copysetNext: arg1  next contents: arg1withField: arg1 value: arg2  ^self copy     addField: arg1 value: arg2;     yourselfaddCookie: arg1  self committedCheck.  ^super addCookie: arg1isInternetExplorer  | tmp1 |  tmp1 := self requestContext request userAgent.  ^tmp1 notNil and: [ (tmp1 indexOfSubCollection: 'MSIE' startingAt: 1) ~= 0 and: [ (tmp1 indexOfSubCollection: 'Opera' startingAt: 1) = 0 ] ]tag  ^'select'priority  ^500renderContentOn: arg1  self renderConfigurationOn: arg1.  self renderListOn: arg1renderYear  | tmp1 |  tmp1 := canvas textInput     id: (self id isNil ifFalse: [ self id , '-year' ]);     value: (GRNumberPrinter new           padding: $0;           digits: 4;           print: year);     yourself.  self addYearCallbackToBrush: tmp1.  tmp1     attributeAt: 'size' put: 4;     attributeAt: 'maxlength' put: 4iconForAdaptor: arg1  ^self iconNamed: (arg1 isRunning ifTrue: [ #adaptorRunningIcon ] ifFalse: [ #adaptorStoppedIcon ])initializeWithStream: arg1 codec: arg2  super initializeWithStream: arg1 codec: arg2.  xmlEncoder := arg1testSimple  self assert: (self mark: [ self callcc: [:arg1 |  arg1 value: true ] ])isSession  ^falsevalidateWith: arg1  validationBlock := arg1initializeWithParameter: arg1  self initialize.  parameterIndex := arg1.  memoryInput := WAMemoryInput bytes: (SmalltalkImage current vm parameterAt: arg1)name  ^class namelabelBlock: arg1  labelBlock := arg1testKeyButNotValue  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp1 request uri addField: strategy keyField.  tmp2 := strategy keyFromContext: tmp1.  self assert: tmp2 isNilbeMultiple  self attributeAt: 'multiple' put: truehalosEnabled  ^self properties at: #halosEnabled ifAbsent: [ false ]isWindowsPath  ^fileName notEmpty and: [ fileName first isLetter and: [ fileName size >= 3 and: [ (fileName copyFrom: 2 to: 3) = ':\' ] ] ]addKey: arg1 toUrl: arg2  updateUrlHandler  ^self selectionisCollectionAttribute  ^falseisXmlHttpRequest  ^(self headerAt: 'x-requested-with') = 'XMLHttpRequest'key: arg1  key := arg1parameter: arg1  self parametertestIsBinary  self deny: (WAFileLibrary isBinary: 'scipt.js').  self deny: (WAFileLibrary isBinary: 'markup.xml').  self deny: (WAFileLibrary isBinary: 'markup.xhtml').  self deny: (WAFileLibrary isBinary: 'markup.html').  self deny: (WAFileLibrary isBinary: 'file.txt').  self deny: (WAFileLibrary isBinary: 'calendar.ics').  self assert: (WAFileLibrary isBinary: 'image.jpeg').  self assert: (WAFileLibrary isBinary: 'squeak.exe')testHandlerClassValidExceptionSelector  [ [ self unhandledExceptionClass signal ] on: self handlerClass do: [:arg1 |  self assert: false ] ] on: Exception do: [:arg1 |  ^self ].  self assert: falseadaptor  ^self context selectedAdaptorasync  self attributes at: 'async' put: truescheme: arg1  scheme := arg1 isNil ifFalse: [ arg1 asLowercase ]definitionList  ^self tag: 'dl'requestContext  ^requestContexturl: arg1  self attributeAt: 'href' put: arg1parseNumber  | tmp1 tmp2 |  tmp1 := stream peek = $-.  tmp1 ifTrue: [ stream next ].  tmp2 := self parseNumberInteger.  stream peek = $. ifTrue: [ stream next.        tmp2 := tmp2 + self parseNumberFraction ].  ('eE' includes: stream peek) ifTrue: [ stream next.        tmp2 := tmp2 * self parseNumberExponent ].  tmp1 ifTrue: [ tmp2 := tmp2 negated ].  ^self     whitespace;     createNumber: tmp2rendererClass  ^WAHtmlCanvasmonth: arg1  month := arg1redirectWithTrailingSlash: arg1  arg1 responseGenerator     redirectTo: (arg1 request url copy           takeServerParametersFromRequest: arg1 request;           slash: true;           yourself);     respondrenderVideoOn: arg1  arg1 heading     level2;     with: '<video>'.  arg1 video     url: 'http://people.opera.com/howcome/2007/video/A_New_Computer--small.ogg';     autoplay: true;     controls: true;     loop: true;     preload: true;     poster: 'http://seaside.st/styles/logo-plain.png';     width: 360;     height: 240;     with: 'Theora decoder not found'languageName  ^self language size = 2 ifTrue: [ self class iso2Languages at: self language ] ifFalse: [ self class iso3Languages at: self language ]onDoubleClick: arg1  self document scriptGenerator event: 'dblclick' do: arg1 on: selfassert: arg1 gives: arg2  | tmp1 |  tmp1 := WAHtmlCanvas builder     fullDocument: false;     rootBlock: arg1;     render: arg1.  self assert: arg2 = tmp1handlerName  ^'foo'tableColumn: arg1  self tableColumn with: arg1with: arg1  ^arg1 value: selfkeyFor: arg1 ifAbsent: arg2  ^self cache keyAtValue: arg1 ifAbsent: arg2testValuesCallback  | tmp1 tmp2 tmp3 tmp4 |  tmp4 := Dictionary new.  tmp2 := '1'.  tmp3 := '2'.  tmp4 at: tmp2 greaseInteger put: '1a'.  tmp4 at: tmp3 greaseInteger put: '2a'.  tmp1 := registry store: (WAValuesCallback on: [:arg1 |  log add: arg1 ] values: tmp4).  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: '';                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: tmp2;                 yourself) ] raise: WARenderNotification.  self assertLog: #('1a').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: tmp3;                 yourself) ] raise: WARenderNotification.  self assertLog: #('2a')testActiveComponent  self assert: root activeComponent = root.  root onChildren: [ Array with: child1 with: child2 ].  self assert: root activeComponent = root.  self assert: child1 activeComponent = child1.  self assert: child2 activeComponent = child2.  root     addDecoration: decoration1;     addDecoration: decoration2.  self assert: root activeComponent = root.  self assert: child1 activeComponent = child1.  self assert: child2 activeComponent = child2.  child2 show: child3.  self assert: root activeComponent = root.  self assert: child1 activeComponent = child1.  self assert: child2 activeComponent = child3.  self assert: child3 activeComponent = child3.  child3 show: child4.  self assert: root activeComponent = root.  self assert: child1 activeComponent = child1.  self assert: child2 activeComponent = child4.  self assert: child3 activeComponent = child4.  self assert: child4 activeComponent = child4jQuery: arg1  ^self jQuery with: arg1describeOn: arg1  (arg1 string: #charSet)     beAdvanced;     label: 'Character Set';     comment: 'The character set reported to the browser. This is only used if you set the encoding in the server to ''(none)''.';     default: 'utf-8'.  (arg1 classBinding: #documentClass)     beAdvanced;     options: [ self documentClasses ];     default: WAHtmlDocument.  (arg1 classBinding: #scriptGeneratorClass)     beAdvanced;     options: [ self scriptGeneratorClasses ];     default: WADefaultScriptGenerator.  (arg1 classBinding: #responseGenerator)     beAdvanced;     options: [ self responseGenerators ];     default: WAResponseGenerator.  (arg1 list: #serverProtocol)     beAdvanced;     group: #server;     comment: 'The protocol in URLs generated by Seaside.';     options: [ self serverProtocols ].  (arg1 string: #serverHostname)     beAdvanced;     group: #server;     comment: 'The hostname in URLs generated by Seaside.'.  (arg1 integer: #serverPort)     beAdvanced;     group: #server;     comment: 'The port in URLs generated by Seaside.'.  (arg1 string: #serverPath)     group: #server;     comment: 'The path in URLs generated by Seaside.'fragment: arg1  fragment := arg1exceptionHandler  ^self configuration at: #exceptionHandlerisOnLastPage  ^self currentPage = self maxPagesonError: arg1  self document scriptGenerator event: 'error' do: arg1 on: selfrenderTextOn: arg1  self renderInline: [:arg2 |  arg2 text: 'abcdefghijklmnopqrstuvwxyz&0123456789' ] factor: 1 / 50 key: #seasideText on: arg1noHandlerFoundForKey: arg1 in: arg2 context: arg3  ^(self strategyFor: arg3) noHandlerFoundForKey: arg1 in: arg2 context: arg3onLoadEnd: arg1  self document scriptGenerator event: 'loadend' do: arg1 on: selfbufferedStream  ^bufferedStreambeAtom  self type: 'application/atom+xml' seasideMimeTypetag  ^'base'height: arg1  self attributeAt: 'height' put: arg1 greaseStringnextPut: arg1  stream nextPut: arg1testCanStartWithAvailablePort  | tmp1 |  adaptor starting.  self deny: (manager canStart: adaptor).  adaptor running.  self deny: (manager canStart: adaptor).  adaptor stopping.  self deny: (manager canStart: adaptor).  adaptor stopped.  self assert: (manager canStart: adaptor).  tmp1 := WATestServerAdaptor manager: manager.  tmp1 port: adaptor port.  tmp1 stopped.  self assert: (manager canStart: tmp1)isSelected: arg1  ^selected notNil and: [ selected includes: arg1 ]testTextStreamSeasideMimeDocumentType  | tmp1 tmp2 |  tmp2 := WAMimeType main: 'text' sub: 'csv'.  tmp1 := 'foo,bar' readStream seasideMimeDocumentType: tmp2.  self assert: tmp1 mimeType = tmp2.  self assert: tmp1 contents = 'foo,bar'minute: arg1  minute := arg1tooltip  ^nilbefore  super before.  legend isNil ifFalse: [ canvas legend: legend ]rendererClass  ^WARenderer defaultsnapshot  objects associationsDo: [:arg1 |  arg1 value: arg1 key snapshotCopy ]testAsMIMEDocumentFormColonString  | tmp1 tmp2 |  self formClassExists ifFalse: [ ^self ].  tmp1 := self sampleForm.  tmp2 := tmp1 seasideMimeDocumentType: WAMimeType imageJpeg greaseString.  self assert: tmp2 contentType = WAMimeType imageJpeg.  self assert: (tmp2 content isKindOf: ByteArray)version: arg1  version := arg1passenger: arg1  canvas callbacks registerPassenger: arg1 named: self ensureIdshouldDestroy  ^self properties at: #shouldDestroy ifAbsent: [ true ]responseForLibrary: arg1  context responseGenerator     forbidden;     respondaddKey: arg1 toContext: arg2  initializeWith: arg1  self initialize.  component := arg1.  component onAnswer: [ self answer ]renderPostErrorOn: arg1  arg1 heading: 'POST Error'.  arg1 paragraph: 'Behaviour should be like ''Error''.'.  arg1 form     post;     with: [ arg1 button           callback: [ self raiseError ];           with: 'Raise error' ]includesKey: arg1  ^byKey includesKey: arg1done: arg1  done := arg1testRfc4  | tmp1 |  tmp1 := WAAccept fromString: 'text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5'.  self assert: tmp1 size = 5.  self assert: tmp1 at: 1 main: 'text' sub: '*' quality: 0.3.  self assert: tmp1 at: 2 main: 'text' sub: 'html' quality: 0.7.  self assert: tmp1 at: 3 main: 'text' sub: 'html' quality: 1.0.  self assert: tmp1 at: 4 main: 'text' sub: 'html' quality: 0.4.  self assert: tmp1 at: 5 main: '*' sub: '*' quality: 0.5.  self assert: ((tmp1 at: 3) value parameters at: 'level') = '1'.  self assert: ((tmp1 at: 4) value parameters at: 'level') = '2'testNoKey  | tmp1 |  tmp1 := strategy keyFromContext: self requestContext.  self assert: tmp1 isNilhandleFiltered: arg1  (self shouldRedirect: arg1) ifFalse: [ super handleFiltered: arg1 ] ifTrue: [ self redirectWithTrailingSlash: arg1 ]basicUrl  | tmp1 |  tmp1 := self parent url.  self parent trackingStrategy addKey: key toUrl: tmp1.  ^tmp1brush: arg1  self flush.  currentBrush := arg1.  arg1 setParent: parentBrush canvas: self.  ^arg1visitClassBindingAttribute: arg1  | tmp1 tmp2 tmp3 |  tmp1 := arg1 options asArray.  tmp2 := self configuration at: arg1 key.  (tmp2 notNil and: [ (tmp1 includes: tmp2 value) not ]) ifTrue: [ tmp1 := (Array with: tmp2 value) , tmp1 ].  tmp3 := tmp2 isNil ifTrue: [ nil ] ifFalse: [ tmp2 value ].  self html select     list: tmp1;     selected: tmp3;     labels: [:arg2 |  arg1 stringForValue: arg2 ];     callback: [:arg2 |  self configuration takeValue: (GRPlatform current bindingOf: arg2) forAttribute: arg1 ]testFromStringRfc2965  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := WARequestCookie fromString: '$Version="1";                 Customer="WILE_E_COYOTE"; $Path="/acme"; $Port="1"; $Domain="www.1.com";                 Part_Number="Rocket_Launcher_0001"; $Path="/acme/rockes"; $Port="2,3"; $Domain="www.2.com";                 Shipping="FedEx"' codec: GRNullCodec new.  self assert: tmp1 size = 3.  tmp2 := tmp1 detect: [:arg1 |  arg1 key = 'Customer' ].  self assert: tmp2 version = 1.  self assert: tmp2 value = 'WILE_E_COYOTE'.  self assert: tmp2 path = '/acme'.  self assert: tmp2 domain = 'www.1.com'.  self assert: tmp2 ports size = 1.  self assert: tmp2 ports first = 1.  tmp3 := tmp1 detect: [:arg1 |  arg1 key = 'Part_Number' ].  self assert: tmp3 version = 1.  self assert: tmp3 value = 'Rocket_Launcher_0001'.  self assert: tmp3 path = '/acme/rockes'.  self assert: tmp3 domain = 'www.2.com'.  self assert: tmp3 ports size = 2.  self assert: tmp3 ports first = 2.  self assert: tmp3 ports second = 3.  tmp4 := tmp1 detect: [:arg1 |  arg1 key = 'Shipping' ].  self assert: tmp4 version = 1.  self assert: tmp4 value = 'FedEx'.  self assert: tmp4 path = '/'.  self assert: tmp4 domain isNil.  self assert: tmp4 ports isNilrunning  status := #runningobject  ^path currentSegmentbuttons  ^#(ok)document: arg1 mimeType: arg2 fileName: arg3  self url: (canvas context urlForDocument: arg1 mimeType: arg2 fileName: arg3)beCaptions  self kind: 'captions'secondCookie  ^self requestContext newCookie     key: self secondKey;     value: self secondValue;     path: self secondPath;     yourselfinitialize  super initialize.  memoryInput := WAMemoryInput newtestMultiSelectTag  self assert: [:arg1 |  arg1 multiSelect ] gives: '<select multiple></select>'.  self assert: [:arg1 |  arg1 multiSelect list: #(1 2) ] gives: '<select multiple><option>1</option><option>2</option></select>'.  self assert: [:arg1 |  arg1 multiSelect           list: #(1 2);           labels: [:arg2 |  2 * arg2 ] ] gives: '<select multiple><option>2</option><option>4</option></select>'.  self assert: [:arg1 |  arg1 multiSelect           list: #(1 2);           enabled: [:arg2 |  arg2 even ] ] gives: '<select multiple><option disabled>1</option><option>2</option></select>'.  self assert: [:arg1 |  arg1 multiSelect           list: #(3 4);           callback: [:arg2 |   ] ] gives: '<select name="1" multiple><option value="1">3</option><option value="2">4</option></select><input name="2" type="hidden"/>'initializeRequestor: arg1  self initialize.  requestor := arg1passengerAt: arg1 ifAbsent: arg2  | tmp1 |  tmp1 := callbacks at: arg1 ifAbsent: [ ^arg2 value ].  tmp1 isPassenger ifFalse: [ ^arg2 value ].  ^tmp1 objecttestEvent  self assert: [:arg1 |  arg1 anchor           onClick: 'console.log("clicked")';           with: 'click' ] gives: '<html><head><title></title></head><body><a onclick="console.log(&quot;clicked&quot;)">click</a></body></html>'days  ^1 to: 31maximumRelativeAge  ^maximumRelativeAgehandler  ^handlerlabel  ^'Image'initialize  super initialize.  windowTitle := '_blank'.  features := GRSmallDictionary2 newtag  self subclassResponsibilityevaluateWithArgument: arg1  values at: arg1 greaseInteger ifPresent: [:arg2 |  block valueWithPossibleArguments: (Array with: arg2) ]absoluteUrlForResource: arg1  ^self context absoluteUrlForResource: arg1updateStates: arg1  super updateStates: arg1.  (WAAllPresenterGuide client: (WAUpdateStatesVisitor snapshot: arg1)) start: self presenter= arg1  ^self species = arg1 species and: [ self document = arg1 document ]testBasicAuthorisation  | tmp1 tmp2 |  tmp1 := WARequest method: 'GET' uri: '/foo?bar=1'.  tmp2 := Dictionary new.  tmp2 at: 'authorization' put: 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='.  tmp1 setHeaders: tmp2.  self assert: tmp1 authorization = 'Aladdin:open sesame'.  self assert: tmp1 user = 'Aladdin'.  self assert: tmp1 password = 'open sesame'pattern: arg1  pattern := arg1responseForLibrary: arg1  | tmp1 tmp2 |  tmp1 := 'Index of ' , arg1 name.  tmp2 := WAHtmlCanvas builder     fullDocument: true;     rootBlock: [:arg2 |  arg2 title: tmp1 ];     render: [:arg2 |  arg2 heading           level: 1;           with: tmp1.        arg2 table: [ arg2 tableRow: [ arg2 tableHeading: 'Name'.                    arg2 tableHeading: 'Size'.                    arg2 tableHeading: 'Description' ].              arg1 fileSelectors do: [:arg3 |  arg2 tableRow: [ arg2 tableData: [ arg2 anchor                                   url: (arg1 urlOf: arg3);                                   with: (arg1 asFilename: arg3) ].                          arg2 tableData: (arg1 fileSizeOf: arg3).                          arg2 tableData: (arg1 mimetypeOf: arg3) ] ] ] ].  context respond: [:arg4 |  arg4           contentType: WAMimeType textHtml;           nextPutAll: tmp2 ]goButtons  1 to: 5 do: [:arg1 |  self inform: arg1 greaseString , ': ' , self stackDepth greaseString ]proceed  self answer: falseactionUrl  ^actionUrl ifNil: [ actionUrl := WAUrl new ]decorateWith: arg1 during: arg2  | tmp1 |  self addDecoration: arg1.  tmp1 := arg2 value.  self removeDecoration: arg1.  ^tmp1decodeAuthorization: arg1  | tmp1 |  tmp1 := arg1 lastIndexOf: $ .  ^GRPlatform current base64Decode: (tmp1 = 0 ifTrue: [ arg1 ] ifFalse: [ arg1 copyFrom: tmp1 + 1 to: arg1 size ])renderAddNewTodoOn: arg1  | tmp1 |  arg1 header     id: #header;     with: [ arg1 heading           level: 1;           with: 'todos'.        arg1 textInput           id: #'new-todo';           autofocus;           attributeAt: 'autocomplete' put: 'off';           callback: [:arg2 |  tmp1 := self addTodo: arg2 ];           onChange: (arg1 jQuery ajax                 serializeThis;                 script: [:arg3 |  arg3 << ((arg3 jQuery id: 'todo-list') append: tmp1) ];                 onComplete: ((arg1 jQuery id: #'new-todo') value: ''));           placeholder: 'What needs to be done?' ]start: arg1  (self canStart: arg1) ifTrue: [ [ arg1 basicStart ] ifCurtailed: [ self stop: arg1 ] ]controlPanelInfos  ^String streamContents: [:arg1 |  arg1           nextPutAll: 'Type: ';           nextPutAll: self class name;           nextPut: Character cr;           nextPutAll: 'Port: ';           nextPutAll: self port greaseString;           nextPut: Character cr;           nextPutAll: 'Encoding: ';           nextPutAll: self codec name;           nextPut: Character cr.        self additionalStatusOn: arg1.        arg1 nextPutAll: self statusString ]model  ^selfweek: arg1  week := arg1initialize  super initialize.  components := OrderedCollection newrenderFooterOn: arg1  actionField  ^'_k'pageRangeEnd  ^self maxPages min: self currentPage + 9tableBody  ^self tag: 'tbody'expireInPast  self maxAge: 0.  self expiry: DateAndTime now - (Duration days: 10 hours: 0 minutes: 0 seconds: 0)takeValueFromString: arg1 forAttribute: arg2  ^self takeValue: (arg2 valueFromString: arg1) forAttribute: arg2visitAttribute: arg1  testIsCommitted  super testIsCommitted.  self deny: self response isCommittedrenderSubmitOn: arg1  arg1 heading level2 with: 'Submit'.  arg1 paragraph: 'Clicking the button should submit the form and update the value in "Value:" with the value in "Input"'.  arg1 button with: 'Submit'informCheese  self inform: 'Your favorite cheese is ' , cheese , '.'decoration: arg1 shouldWrap: arg2  ^(arg1 isGlobal and: [ arg2 isGlobal not ]) or: [ arg1 isDelegation and: [ arg2 isLocal ] ]passengerAt: arg1  ^self passengerAt: arg1 ifAbsent: [ nil ]targetBlank  self target: '_blank'remove: arg1  self shouldNotImplementautoplay: arg1  self attributeAt: 'autoplay' put: arg1jsbootstrapJs  ^WAFileLibraryResource filepath: 'js/bootstrap.js' mimeType: (WAMimeType main: 'application' sub: 'javascript') cacheDuration: (Duration days: 0 hours: 0 minutes: 30 seconds: 0) contents: (GRDelayedSend receiver: self selector: #jsbootstrapJsContent)enableErrorWalkbacks  WAAdmin applicationExceptionHandlingDefaults at: #exceptionHandler put: WAWalkbackErrorHandleronToggle: arg1  self document scriptGenerator event: 'toggle' do: arg1 on: selftestPathString  self assert: (url pathStringEncodedWith: GRNullCodec new) = '/'.  url path: #('foo' 'bar').  self assert: (url pathStringEncodedWith: GRNullCodec new) = '/foo/bar'configuration: arg1  configuration := arg1testCanStop  adaptor starting.  self assert: (manager canStop: adaptor).  adaptor running.  self assert: (manager canStop: adaptor).  adaptor stopping.  self assert: (manager canStop: adaptor).  adaptor stopped.  self deny: (manager canStop: adaptor)renderInitializeCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternUnary;           with: 'initialize'.        arg1 break.        arg1 span           class: #super;           with: '    super'.        arg1 text: ' initialize.'.        arg1 break.        arg1 span           class: #instanceVar;           with: '    count'.        arg1 text: ' := '.        arg1 span           class: #number;           with: '0' ]testMultipleMappings  cache at: 'key1' put: 'value'.  self should: [ cache at: 'key2' put: 'value' ] raise: ErrorvalueFromString: arg1  ^arg1 isEmptyOrNil ifFalse: [ arg1 greaseInteger ]additions  ^additionsupdateRoot: arg1  super updateRoot: arg1.  arg1 title: self title.  arg1 link     beShortcutIcon;     url: WAToolFiles / #faviconIcohasChildren: arg1  ^(self childrenOf: arg1) isEmpty notrubyParentheses  ^self tag: 'rp'deprecatedMethod  self greaseDeprecatedApi: 'this method is deprecated' details: 'use a different method instead'labelForOption: arg1  ^labelBlock isNil ifTrue: [ arg1 ] ifFalse: [ labelBlock value: arg1 ]initializeWithName: arg1  self initialize.  name := arg1checkbox  ^self brush: WACheckboxTag newtestScaledDecimal  self assert: [:arg1 |  arg1 render: 123.4s1 ] gives: '123.4'captureState  states := nil.  self updateStates: self statesallValuesCallbackClass  ^WAAllEmailsCallbacktestPeek  self assert: consumer peek = 'tweets'.  self assert: consumer peek = 'tweets'.  consumer next.  self assert: consumer peek = 'kentbeck'.  self assert: consumer peek = 'kentbeck'.  consumer next.  self should: [ consumer peek ] raise: Errortitle  ^'Processes'key  ^keychildren  ^Array with: self multicounteroverflowAction: arg1  overflowAction := arg1testCopyFilters  | tmp1 |  handler addFilter: WARequestFilter new.  handler addFilter: WARequestFilter new.  tmp1 := handler copy.  self deny: handler == tmp1.  self deny: handler filter == tmp1 filter.  self deny: handler filter next == tmp1 filter next.  self assert: handler filter handler == handler.  self assert: tmp1 filter handler == tmp1assertNoCookies: arg1  self assert: arg1 cookies isEmptylocalAttributesDo: arg1  self attributes do: arg1renderExecutedOn: arg1  arg1 strong: (self wasSuccessful ifTrue: [ 'success' ] ifFalse: [ 'fail' ])initialize  super initialize.  showHalos := WAValueHolder with: false.  halos := GRPlatform current weakDictionaryOfSize: 20.  plugins := WAToolPlugin allSubclassesFor: selfdocument: arg1 mimeType: arg2 fileName: arg3  self url: (canvas context urlForDocument: arg1 mimeType: arg2 fileName: arg3)initialize  super initialize.  selection := WAValueHolder newresizable: arg1  features at: #resizable put: arg1handle: arg1  | tmp1 |  tmp1 := arg1 consumer.  nextUnconsumedPathElement := tmp1 atEnd ifTrue: [ nil ] ifFalse: [ arg1 consumer peek ].  super handle: arg1textInput: arg1  ^self textInput with: arg1serverProtocol: arg1  self preferenceAt: #serverProtocol put: arg1validPages  ^(items collect: [:arg1 |  arg1 greaseString asUppercase first ]) asSet sortedrenderButtonForSelector: arg1 on: arg2  arg2 submitButton on: arg1 of: self decoratedComponentrenderContentOn: arg1  self renderExplanationOn: arg1.  arg1 form: [ arg1 table: inputElements.        arg1 div: [ self renderRequestBodyOn: arg1.              arg1 submitButton ] ]asSpecCommand  ^super asSpecCommand     iconName: #window;     yourselfmanager  ^managerassertHandles: arg1  self assertHandles: arg1 returnsSatisfying: [:arg2 |  arg2 ]removeDependent: arg1  dependent := nilclass: arg1  self attributes addClass: arg1committedCheck  self isCommitted ifTrue: [ WAIllegalStateException signal ]label  ^'Browser'onMouseLeave: arg1  self document scriptGenerator event: 'mouseleave' do: arg1 on: selfisClosed  ^falseisStopped  self subclassResponsibilitytestCopyWithPathParameter  | tmp1 |  url addToPath: 'zork'.  tmp1 := url copy.  url addPathParameterAt: 1 key: 'foo'.  self assert: url printString = '/zork;foo'.  self assert: tmp1 printString = '/zork'testExtendedNesting  self assert: [:arg1 |  arg1 div: nil ] gives: '<div></div>'.  self assert: [:arg1 |  arg1 div: #(1 $a) ] gives: '<div>1a</div>'.  self assert: [:arg1 |  arg1 div: [ arg1 span ] ] gives: '<div><span></span></div>'removeParent: arg1  self clearSearchContexts.  parents remove: arg1 ifAbsent: [  ]name: arg1  self attributes at: 'name' put: arg1value  ^valuetestInternalError  | tmp1 |  tmp1 := WAResponseGenerator on: self requestContext.  self requestContext response nextPutAll: 'oops'.  [ WATestError signal ] on: WATestError do: [:arg1 |  tmp1 internalError: arg1 ].  self assertContents: 'Internal Error: 'requestHandler  ^requestHandler ifNil: [ self defaultRequestHandler ]testIso3  | tmp1 |  tmp1 := WALocale fromString: 'gsw-CHE'.  self assert: tmp1 language = 'gsw'.  self assert: tmp1 country = 'CHE'.  self assert: tmp1 greaseString = 'gsw-CHE'.  tmp1 := WALocale fromString: 'gsw_CHE'.  self assert: tmp1 language = 'gsw'.  self assert: tmp1 country = 'CHE'.  self assert: tmp1 greaseString = 'gsw-CHE'addDependent: arg1  dependent := arg1testAsMIMEDocumentString  | tmp1 |  tmp1 := (WABlockMimeDocument onBlock: [ 'hello Seaside' ])     mimeType: WAMimeType textPlain;     yourself.  self assert: tmp1 contentType = WAMimeType textPlain.  self assert: tmp1 content = 'hello Seaside'testParseWithoutSlash  | tmp1 |  tmp1 := #('http://seaside.st/foo' 'http://seaside.st/foo?key=value' 'http://seaside.st/foo#x' 'http://seaside.st/foo?key=value#x').  tmp1 do: [:arg1 |  url := WAUrl absolute: arg1.        self deny: url slash.        self assert: url greaseString = arg1 ]contentScriptType: arg1  self responseHeaderName: 'Content-Script-Type'.  self content: arg1addMinutesCallbackToBrush: arg1  self hasCallback ifFalse: [ ^self ].  arg1 callback: [:arg2 |  self minutes: arg2 ]logoPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 200 0 0 0 107 8 3 0 0 0 5 14 61 236 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 3 0 80 76 84 69 132 164 183 238 198 176 162 187 202 255 135 0 155 183 200 167 197 216 8 94 145 5 149 237 255 165 0 207 175 160 223 3 1 238 238 238 222 222 222 8 150 238 229 21 3 183 212 230 78 164 217 139 186 214 71 132 168 1 88 141 196 217 229 232 232 232 102 182 232 17 99 149 211 211 211 0 142 229 235 235 235 234 234 234 193 205 213 1 83 133 254 72 0 73 170 229 1 86 137 0 137 220 217 225 230 42 150 217 199 144 144 203 204 205 12 96 147 2 143 229 255 156 0 211 218 223 189 203 211 208 208 208 0 146 236 178 192 200 246 151 78 35 110 154 209 221 229 53 121 161 163 205 231 219 219 219 214 214 214 118 188 231 203 213 219 145 196 226 121 161 186 220 220 220 37 158 232 12 152 238 212 212 212 43 162 235 88 178 233 255 107 0 16 154 238 237 189 169 216 216 216 12 146 229 206 74 74 132 189 225 210 56 54 125 181 215 255 147 0 255 99 0 255 91 0 0 144 232 238 211 197 241 110 42 255 116 0 0 140 226 255 82 0 176 197 209 49 165 236 247 57 0 138 197 232 140 192 224 194 208 216 133 195 233 143 192 221 255 125 0 55 117 154 107 154 181 115 159 185 80 137 171 182 180 180 243 180 143 153 189 212 99 174 220 151 201 232 217 222 225 42 114 158 202 209 212 97 149 179 131 169 191 28 158 236 185 163 163 174 208 229 110 176 217 9 140 220 87 171 223 199 191 191 214 152 118 0 145 234 2 148 237 245 157 94 200 112 108 29 146 218 9 91 141 18 148 227 210 214 216 235 31 0 225 228 230 168 191 205 217 78 48 26 105 152 157 203 232 3 90 142 143 170 186 19 155 238 126 192 232 0 135 217 50 160 228 198 200 201 182 199 210 228 156 145 109 147 171 67 124 158 216 221 223 241 43 1 58 162 228 23 97 141 15 142 218 64 170 235 59 167 235 242 167 114 157 201 228 95 146 177 236 225 221 20 153 233 0 146 235 134 192 228 184 134 132 26 102 148 106 151 178 0 138 223 111 157 184 240 50 0 223 226 228 225 226 226 5 145 231 8 148 234 98 141 167 152 176 190 213 35 29 22 156 238 185 206 219 163 182 194 120 155 176 5 142 226 217 219 220 16 93 139 147 199 230 29 107 153 17 152 236 198 210 217 191 211 223 226 137 93 8 143 226 159 198 222 48 111 150 3 147 234 35 103 144 228 229 230 3 145 232 211 213 214 5 88 138 79 175 234 54 167 236 14 150 233 5 92 144 229 229 229 251 251 251 228 228 228 230 230 230 252 252 252 247 247 247 250 250 250 249 249 249 224 224 224 227 227 227 248 248 248 243 243 243 246 246 246 244 244 244 245 245 245 241 241 241 240 240 240 242 242 242 226 226 226 225 225 225 231 231 231 21 102 151 226 227 227 228 229 229 221 221 221 144 199 232 189 197 202 103 151 180 14 144 224 5 144 229 208 216 221 64 127 166 183 100 100 220 223 224 251 87 27 246 236 230 224 85 85 23 153 232 26 153 229 245 130 46 88 142 175 95 144 172 214 217 219 172 203 222 13 139 216 66 161 219 12 89 136 221 224 226 77 129 160 253 121 14 216 205 200 143 199 234 250 100 11 145 177 197 252 112 13 248 78 0 250 89 0 148 174 190 237 85 55 242 104 29 200 93 84 251 119 36 228 124 70 253 253 253 254 254 254 255 255 255 148 77 63 186 0 0 23 172 73 68 65 84 120 218 212 155 11 84 84 231 181 199 81 8 24 230 136 6 56 48 14 136 84 171 69 192 2 206 1 65 209 73 198 68 25 72 17 212 168 248 106 19 49 40 106 47 182 209 24 174 33 190 72 53 105 53 177 154 164 162 141 77 172 137 137 49 239 230 250 224 204 153 215 57 243 126 153 78 181 213 235 189 183 183 105 82 155 222 155 107 109 111 31 51 116 239 239 59 243 64 161 139 68 71 195 151 181 178 100 6 87 190 223 236 189 255 251 191 247 153 36 244 12 170 19 194 211 231 59 9 131 139 195 104 182 88 204 198 208 96 7 9 233 255 243 155 223 100 61 38 125 104 144 131 4 77 127 171 173 253 70 149 194 222 7 201 160 2 209 223 95 11 231 45 70 97 186 62 187 6 19 72 200 60 68 87 91 171 107 184 83 114 89 130 131 26 196 58 68 167 171 213 233 254 82 196 58 174 75 174 65 5 98 26 162 211 232 116 77 181 111 169 195 201 21 10 5 141 70 99 16 36 57 97 80 213 250 16 93 189 166 54 177 169 225 78 47 36 23 66 152 45 78 155 205 105 213 7 67 131 11 228 30 93 98 125 109 83 65 61 36 151 205 98 54 91 29 63 124 242 191 102 205 122 82 97 55 15 46 16 251 51 186 154 196 218 250 130 26 221 91 156 95 161 184 255 201 255 79 75 197 195 65 166 13 42 16 231 51 154 154 26 157 174 96 88 77 195 223 159 124 235 63 242 242 230 61 69 72 118 64 241 15 38 16 163 227 25 77 65 65 125 109 205 176 97 137 160 94 154 250 250 63 61 133 28 179 118 248 109 131 8 36 20 50 187 190 83 95 48 44 177 182 105 216 176 97 5 53 53 53 137 154 131 105 105 16 146 213 143 178 206 193 146 90 40 80 86 207 253 127 4 134 154 90 13 5 73 172 157 247 212 188 121 105 169 207 143 135 86 31 76 24 20 20 122 139 201 243 195 123 190 254 71 8 200 176 2 13 20 73 65 65 77 125 67 94 158 78 115 48 245 223 191 173 101 109 131 65 181 192 186 219 21 247 63 243 155 250 250 68 40 14 56 245 181 137 5 5 137 186 188 60 77 98 226 159 82 103 45 231 4 116 44 9 95 126 14 235 61 95 255 159 250 166 196 130 97 242 73 108 208 36 66 56 0 167 166 126 211 203 203 139 124 164 205 223 94 16 139 77 161 176 5 67 253 207 125 160 185 150 239 104 52 192 81 83 32 147 20 36 54 52 212 54 52 104 224 133 196 121 105 171 199 51 42 226 234 111 39 136 149 229 241 8 30 48 27 193 254 96 140 14 205 53 7 40 26 26 154 128 163 64 179 233 249 115 199 88 135 57 116 123 77 163 211 96 160 32 130 41 40 131 68 99 19 193 50 218 254 6 151 175 39 71 3 150 177 150 112 96 153 20 212 92 125 121 185 50 108 233 111 31 136 217 111 48 140 221 122 234 84 171 32 248 123 113 244 62 70 251 144 223 232 160 249 97 110 225 229 107 160 62 26 26 242 116 137 240 167 171 105 203 57 214 65 125 240 237 3 81 25 12 35 166 79 155 54 124 106 169 228 181 196 130 4 205 38 147 213 24 1 49 185 197 59 223 250 139 78 87 47 151 73 65 83 131 174 73 151 87 219 148 152 168 73 251 107 145 95 30 77 110 33 72 168 119 111 48 24 30 155 113 247 180 225 41 41 175 123 125 30 99 56 185 140 142 28 154 113 172 137 82 25 45 78 5 175 30 127 231 223 255 175 86 211 68 64 52 13 77 160 87 160 190 245 154 121 169 95 101 220 183 46 181 204 168 77 122 114 173 96 196 111 88 32 32 91 16 100 253 115 162 232 70 16 56 118 160 192 67 74 39 199 26 194 215 244 22 187 75 101 96 184 29 255 242 141 90 13 144 212 52 212 98 150 53 229 61 117 85 247 167 180 180 111 203 33 137 63 136 69 214 166 28 75 48 182 166 161 212 31 71 144 245 197 17 16 19 75 40 198 102 182 182 142 40 5 13 200 193 225 47 136 211 147 221 166 200 225 3 69 111 53 64 75 108 106 168 39 229 210 52 47 237 169 171 243 82 239 213 170 236 198 91 33 191 246 176 52 9 108 47 16 155 193 240 217 150 187 33 32 109 207 49 140 2 174 108 85 17 138 201 89 187 167 31 217 114 100 238 252 67 130 228 50 155 205 122 68 65 22 143 130 255 223 134 196 97 5 186 6 168 115 168 250 196 250 131 169 105 7 211 82 191 42 146 228 138 55 136 5 32 198 206 63 117 234 33 65 242 218 141 49 53 237 64 16 200 172 226 182 251 8 136 21 179 170 180 124 238 145 45 119 223 61 13 75 167 92 242 249 60 22 11 33 193 164 212 91 221 190 134 68 104 135 58 84 46 157 166 169 30 140 86 234 166 84 57 185 226 13 194 242 134 204 211 195 225 131 255 133 79 204 209 95 3 130 153 181 191 14 64 220 122 61 164 213 99 15 65 44 40 7 252 133 148 86 145 241 217 173 132 132 214 189 201 15 32 154 188 122 226 123 55 109 58 120 245 234 65 28 71 238 213 130 249 141 55 8 4 100 236 105 172 232 226 169 162 40 68 65 130 65 10 2 153 53 234 62 70 116 233 21 188 225 177 242 8 6 254 133 182 49 111 50 1 143 19 72 140 132 164 39 100 249 97 94 83 77 67 67 34 112 252 235 243 223 125 57 53 53 45 109 19 146 220 249 51 144 146 56 131 184 120 126 43 126 190 197 109 191 102 24 201 44 23 137 209 234 176 17 16 124 131 128 56 121 254 103 229 91 128 99 90 152 99 127 221 212 69 106 181 202 1 36 122 57 37 45 67 242 234 235 243 116 77 181 243 254 186 124 199 248 29 171 239 77 165 231 121 209 21 119 27 159 195 243 167 48 32 251 235 198 48 12 171 39 26 107 194 106 240 67 95 255 12 53 171 142 128 64 6 126 70 57 182 236 206 218 157 178 126 253 254 182 81 51 31 212 106 37 151 211 14 32 180 61 90 135 228 105 106 243 116 16 143 229 227 213 62 175 168 29 255 252 44 4 89 237 117 199 27 36 200 243 135 118 147 128 212 189 19 128 146 14 99 208 131 32 109 163 0 196 231 134 12 220 77 210 106 213 227 143 9 165 167 33 177 70 141 154 115 153 227 24 55 36 151 57 12 114 79 94 109 94 222 213 131 79 173 30 31 96 21 46 5 116 151 234 111 127 247 175 171 171 253 158 120 131 132 32 34 89 36 225 179 2 12 99 130 182 224 244 163 198 142 248 108 225 228 82 195 103 40 190 8 226 5 144 201 119 147 242 88 8 58 45 108 5 240 81 115 14 140 227 184 42 133 203 105 178 144 93 34 20 251 61 121 121 243 160 204 159 223 81 133 107 45 236 46 172 192 168 25 131 2 58 73 92 65 160 237 241 124 230 238 105 41 171 182 2 135 2 82 196 129 24 243 79 31 129 178 158 254 248 47 134 147 79 254 62 70 130 158 153 69 56 86 101 34 200 227 132 227 192 35 74 78 171 112 217 98 64 16 99 19 204 182 16 2 148 100 189 197 233 81 40 20 46 187 57 174 170 69 210 1 174 56 182 117 114 166 200 48 60 220 199 10 28 153 187 143 108 33 234 116 100 55 214 14 128 136 146 0 153 69 228 106 238 88 65 144 164 103 49 177 14 124 229 17 165 82 171 112 219 76 86 90 237 65 235 61 128 145 54 107 121 181 32 251 171 16 62 193 178 130 26 4 227 216 71 100 157 53 249 73 91 247 137 162 228 36 205 34 115 238 145 176 56 165 144 128 80 144 210 85 248 82 202 158 177 146 228 245 62 139 1 249 10 130 112 42 5 174 118 137 0 7 205 247 167 165 165 190 188 90 158 109 35 255 153 96 40 94 94 43 214 146 27 33 36 135 38 151 151 103 250 188 172 222 4 205 98 6 193 64 137 69 109 170 11 131 100 82 180 211 99 189 151 50 91 103 144 128 124 101 156 82 169 6 16 123 4 196 245 228 172 123 151 23 137 42 231 173 120 98 69 250 132 133 206 19 32 82 54 254 231 165 167 166 173 47 222 179 66 18 204 57 188 97 50 114 192 141 167 207 192 87 219 34 32 35 104 136 230 78 46 31 51 245 131 58 2 242 131 7 149 74 70 225 118 160 254 146 254 163 183 43 24 109 149 164 114 152 131 61 113 7 1 145 244 228 16 159 72 221 46 136 212 41 146 68 35 96 162 133 174 135 53 13 63 238 201 148 132 242 226 253 81 144 135 40 200 225 51 117 117 248 26 130 92 110 84 86 75 170 24 16 163 217 233 86 41 220 206 190 56 110 50 72 40 104 243 71 6 10 94 101 13 66 117 103 174 34 22 229 117 65 176 241 80 10 132 227 141 86 159 207 59 118 95 91 12 136 236 75 8 5 130 188 125 57 87 89 173 133 123 59 76 22 61 181 91 104 28 77 38 82 218 113 6 177 168 104 167 27 59 98 68 233 99 24 20 43 154 245 105 49 32 147 177 62 214 23 111 23 25 81 244 158 218 127 45 200 126 153 99 227 211 107 222 121 148 227 180 94 21 202 175 89 31 246 141 100 210 138 207 23 6 98 151 31 116 48 202 220 122 106 250 170 85 83 247 60 244 115 32 113 243 134 173 17 16 48 94 11 167 17 231 190 142 97 12 162 55 171 152 132 36 12 34 139 216 204 237 89 239 188 121 65 173 213 2 8 175 80 120 162 17 9 253 179 139 36 220 28 8 50 42 241 32 74 173 97 85 74 73 201 58 196 243 110 217 52 18 16 5 180 61 106 188 178 170 2 172 40 45 44 38 36 177 32 51 215 45 122 19 122 39 195 28 171 56 193 105 181 90 152 145 227 14 130 197 231 112 41 88 86 225 177 144 217 21 90 114 105 214 42 89 149 214 195 89 40 240 44 1 65 51 251 186 36 168 120 126 198 112 106 120 213 1 149 87 88 184 190 184 184 23 200 254 186 167 63 86 7 32 235 196 103 199 108 159 250 224 79 181 218 28 4 49 199 19 4 212 41 39 186 39 96 173 33 163 65 16 50 247 144 249 142 218 240 182 253 83 199 10 124 24 164 109 138 87 0 42 152 177 208 240 46 170 98 84 18 128 172 199 144 32 136 240 16 246 149 226 182 237 19 3 140 87 244 110 125 15 146 108 227 26 45 228 86 124 65 66 33 179 92 215 20 68 96 245 10 224 56 125 228 141 55 104 69 64 25 215 213 181 101 18 16 242 89 183 77 241 161 163 154 75 43 250 1 0 17 132 249 196 174 3 136 55 6 132 17 125 210 136 125 196 53 94 214 106 25 133 199 9 32 198 120 128 132 87 7 6 195 138 5 87 150 44 107 110 94 214 178 66 144 114 124 62 95 214 145 125 0 178 42 235 245 173 251 136 250 212 61 43 8 8 66 100 117 138 24 11 18 16 21 8 66 222 233 5 178 11 56 132 215 139 177 236 95 29 201 105 197 56 128 196 148 53 145 167 159 119 118 93 108 222 156 61 97 66 242 230 74 9 188 148 248 201 175 129 227 204 145 201 146 36 150 83 21 133 174 215 15 8 3 32 252 252 225 50 136 15 64 82 16 164 120 238 46 224 192 86 9 1 217 184 134 227 36 119 12 72 207 13 131 92 35 79 100 166 104 252 232 236 217 179 217 200 209 221 145 209 2 238 118 69 214 190 125 111 76 27 126 74 242 138 204 39 111 207 153 51 103 212 152 75 189 64 188 172 64 64 224 211 126 128 241 197 128 48 80 36 175 35 200 250 226 233 165 18 128 204 32 115 213 184 69 28 103 80 220 68 16 98 158 236 78 167 53 98 104 13 134 137 93 155 17 3 57 146 59 50 50 202 30 13 4 42 166 238 59 115 230 204 225 44 201 199 48 21 27 1 100 251 155 36 8 125 128 212 61 32 74 160 197 20 100 20 1 153 76 65 142 140 144 36 169 116 21 177 241 35 115 171 185 156 155 7 18 179 142 229 109 100 230 134 188 90 112 81 198 0 14 8 72 198 201 78 181 250 167 27 55 2 199 225 61 146 200 4 170 22 61 61 114 81 5 35 242 138 62 65 160 242 133 24 144 0 227 147 50 215 163 98 23 23 111 245 122 47 205 32 166 113 237 29 48 142 16 23 47 175 182 110 8 36 162 178 148 196 111 7 63 11 241 72 39 73 53 33 187 36 155 112 228 231 31 213 106 63 217 184 113 230 225 195 239 29 46 159 200 4 2 85 199 212 208 16 4 87 95 32 168 197 18 130 44 164 5 115 159 154 17 189 153 195 9 71 219 190 242 173 219 1 99 206 129 109 235 138 148 74 62 214 51 126 113 144 112 89 27 12 187 10 135 38 37 117 2 137 193 132 67 222 71 52 24 31 13 93 144 116 188 131 128 36 112 218 79 126 57 19 65 218 218 166 63 48 145 1 22 134 145 60 214 88 16 31 5 193 154 254 5 105 243 229 41 116 102 87 3 73 233 244 226 98 34 218 163 8 6 12 35 133 69 74 134 165 158 241 139 131 132 203 218 131 20 159 182 63 92 86 114 118 194 132 205 203 78 240 60 155 195 243 141 52 167 206 99 151 88 66 56 70 39 112 92 46 128 188 248 34 128 180 213 109 127 238 18 184 12 81 97 141 130 140 154 194 80 16 18 18 0 129 234 153 145 130 205 113 206 125 90 117 21 35 206 0 12 116 94 115 8 198 182 113 157 69 69 28 171 26 176 250 94 11 210 91 158 220 128 113 161 165 153 170 19 92 189 236 2 230 215 135 203 200 15 199 119 1 136 208 18 1 89 57 238 237 183 127 69 64 224 115 157 58 229 18 52 4 133 41 22 68 140 130 148 99 131 121 108 42 186 149 57 7 102 115 90 136 223 179 239 17 43 60 231 0 98 108 187 12 28 74 137 165 99 213 231 6 161 195 93 100 175 73 154 119 123 89 88 101 147 187 187 187 187 48 8 21 205 201 112 186 63 250 16 110 35 156 71 144 209 163 19 170 57 110 54 128 124 240 65 219 254 54 114 246 180 130 142 42 194 32 224 74 24 209 79 65 128 100 6 238 74 90 201 86 235 0 128 112 18 20 20 41 113 18 141 109 227 102 143 7 14 145 85 185 7 28 144 24 16 172 8 79 14 153 237 236 196 250 35 199 149 227 17 149 237 238 238 232 200 190 0 23 104 207 38 80 75 241 83 45 220 44 131 40 171 171 87 94 126 245 87 31 212 81 16 248 215 153 249 240 11 50 200 126 2 2 110 236 52 225 40 62 13 144 135 246 20 211 101 201 108 37 231 21 212 129 11 15 206 164 43 135 145 119 21 22 21 21 85 123 33 177 92 196 250 126 62 144 176 123 226 233 115 47 16 60 248 243 149 205 145 180 234 198 170 206 72 130 27 36 117 227 153 208 8 28 21 101 221 97 16 101 53 119 226 193 153 95 251 160 110 191 28 146 54 116 238 114 31 105 35 62 209 15 173 142 54 240 148 231 86 188 57 166 141 114 108 155 173 172 246 230 48 85 85 85 39 22 205 158 189 168 19 130 1 135 19 144 195 102 183 70 2 50 48 144 136 202 78 92 80 113 8 81 28 65 167 193 144 91 66 57 210 151 118 101 19 142 140 37 144 249 157 19 58 186 187 55 95 1 142 198 178 228 40 8 87 205 169 223 25 115 24 64 138 101 146 85 165 212 52 98 41 140 90 164 14 176 146 144 69 2 210 86 247 226 212 153 114 65 108 251 221 183 148 213 130 138 101 170 212 106 152 165 170 149 74 200 42 206 203 230 168 220 192 129 206 119 64 1 145 65 168 9 228 27 43 211 203 74 154 203 150 84 192 127 31 133 183 139 112 100 183 124 42 8 149 200 145 159 191 12 204 233 143 219 247 126 84 153 11 191 114 229 44 105 135 249 20 164 138 227 212 85 199 90 199 188 23 37 153 79 76 35 213 166 69 106 53 206 82 235 233 12 130 20 175 110 167 5 81 164 172 134 79 95 193 50 132 4 80 180 2 96 40 220 30 224 136 38 214 128 64 66 46 244 178 67 47 110 150 171 225 56 180 12 224 152 88 130 28 201 203 176 50 23 116 35 71 254 226 42 244 19 120 63 126 215 146 100 154 112 50 136 40 130 140 6 124 98 235 152 51 197 68 185 234 234 178 240 87 183 210 141 244 34 45 128 248 70 96 179 160 26 123 224 242 29 107 183 109 131 128 20 41 181 120 111 23 12 105 188 96 240 179 72 1 63 194 32 34 115 12 24 132 112 52 166 71 60 96 71 71 51 234 172 33 137 190 112 5 65 62 77 70 142 252 119 213 140 32 17 142 220 139 68 187 206 118 135 65 48 181 0 196 231 245 182 238 110 171 195 233 123 212 24 52 232 91 137 149 61 112 23 167 245 51 226 138 185 180 50 176 168 59 149 179 199 141 27 217 94 132 153 5 23 247 120 108 46 133 124 224 39 8 135 21 56 244 3 228 64 144 144 9 229 137 150 3 181 78 25 29 45 8 210 69 56 160 170 5 73 218 69 64 70 3 8 111 130 145 149 31 90 130 24 221 231 151 70 34 2 2 188 96 209 39 151 0 196 251 233 41 186 156 90 135 83 82 57 9 1 128 112 188 200 136 83 234 100 142 113 141 80 210 185 160 79 202 106 17 34 0 1 112 56 108 54 143 203 237 6 10 135 195 110 50 65 157 71 57 6 4 2 89 148 132 221 130 90 114 114 210 63 132 203 46 35 100 19 58 37 201 235 19 55 32 7 130 176 32 169 124 203 4 194 177 84 104 201 136 128 228 174 219 56 115 102 150 207 43 121 165 201 31 144 244 153 173 14 136 98 57 21 39 4 201 1 223 146 245 43 108 22 143 172 201 37 226 164 132 72 250 128 195 99 115 218 237 224 176 157 128 227 128 63 202 24 3 231 0 16 92 70 85 52 19 142 230 243 45 23 241 98 224 203 119 193 109 203 80 119 187 147 59 189 190 220 164 37 39 17 36 63 61 32 230 8 200 129 177 75 134 86 18 5 89 57 242 151 96 82 126 93 10 17 145 70 188 136 31 251 129 59 180 208 232 202 105 159 187 163 154 243 43 152 0 19 120 103 205 186 7 239 34 24 1 14 194 168 134 66 119 219 224 242 38 171 213 36 31 139 197 28 198 24 40 7 128 96 251 56 79 242 234 98 133 224 189 208 140 165 144 145 126 72 224 87 52 147 105 35 185 101 201 197 227 39 73 133 228 231 87 50 94 232 52 73 84 19 150 124 24 11 210 248 3 4 57 51 2 64 188 83 190 134 233 243 200 74 14 234 191 156 62 34 128 225 130 85 168 124 129 42 89 100 65 98 13 172 63 71 69 194 225 192 130 192 99 38 71 175 15 99 12 152 163 39 1 250 222 135 11 104 64 134 10 48 75 252 150 92 248 9 40 232 138 18 90 250 84 175 200 41 89 41 202 111 192 59 23 15 9 4 68 238 35 223 34 32 135 159 243 121 125 187 158 38 94 99 77 53 87 165 85 191 243 54 254 112 151 146 211 98 41 176 1 42 178 156 196 178 44 82 96 117 56 77 248 20 58 246 24 229 239 116 12 152 163 39 193 8 50 155 68 56 206 22 10 62 145 169 196 11 255 54 64 239 75 198 191 8 198 201 157 147 68 201 207 243 93 164 213 79 40 20 174 7 121 241 197 233 173 111 78 217 78 58 221 184 92 37 199 107 213 31 175 123 245 237 113 80 33 156 1 115 200 230 81 9 62 31 152 104 136 5 209 42 196 160 250 36 19 200 8 49 95 147 24 208 74 33 193 98 48 20 86 82 193 26 10 1 97 86 46 43 249 109 18 227 149 65 232 216 132 103 194 206 202 246 99 140 15 94 191 208 76 64 210 49 32 194 249 72 106 125 107 237 90 116 141 117 103 254 155 88 38 218 32 88 8 201 199 119 220 177 0 56 68 210 227 224 120 220 238 136 198 218 136 60 17 140 24 128 96 175 47 123 12 108 55 146 96 231 13 67 31 38 28 29 101 157 0 18 80 63 26 96 200 7 31 1 57 249 253 197 63 26 90 113 12 38 12 81 2 13 104 63 75 42 164 11 57 62 76 143 128 116 254 110 237 171 175 126 173 142 14 20 208 232 238 2 77 18 114 176 95 147 61 174 87 129 28 14 208 37 20 89 23 182 13 140 5 214 70 180 34 174 65 248 28 28 61 9 78 168 221 189 178 242 102 159 239 196 189 43 76 158 10 187 12 2 243 248 178 63 23 86 225 139 226 130 194 11 216 11 175 144 10 233 32 32 185 103 73 102 141 126 165 72 89 52 242 192 28 114 168 241 104 47 194 9 79 165 80 33 137 90 237 39 189 218 142 154 68 100 214 233 180 199 80 232 251 68 248 28 24 0 98 229 249 206 174 240 18 33 227 133 189 185 162 8 211 181 195 73 65 224 181 13 133 48 192 1 70 99 122 201 241 230 19 0 178 148 244 144 142 189 18 28 57 179 70 255 4 58 66 227 35 7 72 171 3 140 71 214 20 18 14 217 122 192 191 17 131 72 108 68 100 173 150 176 60 25 251 163 24 56 6 22 59 207 79 188 18 177 233 25 25 217 123 79 120 37 193 224 138 130 76 10 48 62 209 215 62 1 223 173 132 144 60 76 102 147 140 178 143 197 64 37 237 235 163 71 239 196 214 214 120 121 45 96 172 253 193 184 217 56 80 192 96 148 3 154 68 202 130 182 57 104 16 112 119 179 57 86 99 141 253 81 124 222 5 104 66 8 230 213 11 205 81 16 136 74 203 37 65 32 53 146 76 65 240 161 204 143 203 200 123 31 65 58 237 237 166 191 155 222 146 158 159 79 57 70 47 70 16 101 238 236 145 151 71 174 185 171 16 71 10 208 87 148 91 15 84 133 157 156 235 36 86 111 236 179 44 190 224 86 61 33 132 206 41 41 187 59 10 2 87 172 32 35 45 130 116 100 108 104 4 14 233 66 50 121 103 47 68 235 60 253 77 42 102 139 95 35 32 144 90 90 180 91 136 67 230 34 47 117 226 212 110 64 30 89 105 183 54 70 78 159 197 125 3 15 107 18 66 22 226 1 155 209 244 70 72 202 112 177 16 1 1 251 36 52 210 55 19 0 170 37 140 1 0 239 79 122 31 57 222 61 167 172 246 121 113 152 192 158 173 196 137 66 133 3 158 195 110 183 134 251 53 165 8 246 39 178 55 68 65 64 66 65 168 7 126 98 87 73 44 201 82 0 57 113 156 228 91 247 80 175 36 9 87 232 229 219 193 246 53 102 147 63 34 192 239 95 82 38 188 255 254 187 63 57 135 45 131 85 249 37 152 88 25 175 159 78 20 104 4 99 42 186 223 48 220 12 12 10 66 72 248 19 149 155 163 36 205 32 180 151 74 104 190 181 0 136 68 250 69 126 201 191 169 213 129 143 47 134 75 227 251 79 64 30 157 155 180 3 10 4 172 173 138 206 18 196 119 16 12 90 220 189 40 250 251 154 242 141 63 136 37 32 102 55 238 28 132 138 165 199 195 36 217 141 48 62 53 211 24 149 237 242 29 171 164 49 120 133 227 96 180 238 44 33 28 191 223 57 73 118 226 202 106 45 175 34 183 119 185 93 110 89 107 77 114 117 27 251 13 194 205 163 144 65 108 188 124 132 93 93 217 180 0 54 12 133 2 191 40 71 232 226 146 50 26 130 119 199 131 99 210 170 213 43 127 180 115 241 206 239 29 69 12 53 90 113 192 160 51 30 206 70 160 181 182 200 92 20 193 136 31 65 4 132 236 79 248 220 246 11 228 25 90 123 54 169 227 13 67 193 167 156 167 209 201 143 100 210 81 40 99 86 208 162 231 88 73 4 138 99 12 126 191 159 37 38 214 227 116 80 161 149 39 138 152 142 29 87 130 8 8 114 116 94 60 126 182 185 144 124 59 119 25 105 113 47 156 131 118 254 82 152 131 40 236 232 215 142 226 120 205 170 34 235 14 142 97 113 83 64 10 219 227 113 58 173 22 200 38 252 71 54 30 125 245 186 184 125 169 10 58 187 225 211 206 18 156 206 187 120 222 47 72 231 105 18 173 132 145 232 227 230 140 72 199 131 151 142 210 53 38 220 91 37 170 181 1 217 139 147 133 7 218 15 20 90 179 37 90 220 55 91 95 7 224 126 219 31 38 91 81 178 246 241 165 83 239 4 51 168 90 125 244 181 8 199 251 175 236 160 238 9 47 238 114 185 101 121 114 83 10 168 8 106 63 244 250 222 86 246 22 81 32 136 139 55 180 164 147 117 73 217 68 65 144 26 55 16 65 154 164 228 36 168 133 164 119 55 156 60 121 242 181 247 255 240 196 185 162 48 7 117 79 242 186 67 30 40 80 159 204 102 57 153 250 8 198 45 248 63 9 0 132 7 16 180 191 201 149 21 133 9 47 144 8 124 175 72 201 177 18 218 239 73 47 253 249 165 115 69 69 178 237 160 123 27 226 194 137 15 116 134 41 122 25 192 96 252 75 187 15 16 15 130 200 54 190 228 5 154 73 139 199 147 89 66 146 103 34 226 58 56 31 113 79 196 140 71 79 212 8 222 232 96 116 195 32 48 143 52 46 145 167 17 185 34 222 157 132 79 139 224 218 42 190 138 110 10 212 162 159 165 225 112 202 251 14 51 117 80 189 66 17 254 26 210 173 167 32 91 20 158 255 180 49 153 62 9 164 133 253 135 29 242 211 9 5 20 181 138 53 128 196 230 132 215 177 177 238 169 255 194 190 213 16 114 31 225 133 31 119 101 200 147 30 132 35 1 203 218 199 210 86 237 241 184 220 209 117 172 211 212 11 163 79 19 216 115 155 14 116 118 22 68 183 50 251 36 112 156 124 109 241 19 59 194 67 145 27 29 135 188 41 112 133 215 177 212 61 245 187 240 184 109 24 196 107 89 114 36 31 211 254 163 63 236 252 201 43 71 17 67 89 21 126 60 65 14 10 84 120 85 112 93 28 130 183 49 153 174 3 9 153 88 145 9 168 35 242 36 97 247 118 123 112 182 187 126 85 96 12 222 248 194 35 94 32 193 160 221 64 65 184 106 250 208 139 110 199 77 22 115 244 220 196 125 71 28 65 204 22 147 194 224 99 188 146 63 242 180 200 110 183 152 123 203 147 241 203 161 78 253 131 4 17 196 106 119 120 92 189 159 22 133 167 236 254 139 162 231 203 116 8 136 209 98 49 217 29 116 147 105 115 68 214 177 255 68 157 190 92 16 81 16 189 197 98 53 81 7 229 188 110 184 187 93 238 233 115 130 244 144 139 234 193 114 88 172 228 244 150 167 47 99 93 247 3 66 252 17 4 5 124 184 37 82 224 193 65 134 65 31 134 134 232 20 113 237 22 112 208 48 68 159 179 83 219 218 123 149 57 88 0 122 127 243 33 20 253 127 1 190 52 230 233 139 128 244 196 117 117 118 43 65 122 6 59 70 236 247 181 6 53 70 79 207 63 4 24 0 133 51 241 30 228 174 147 219 0 0 0 0 73 69 78 68 174 66 96 130) asByteArrayresetSecond  self secondKey: nil.  self secondValue: nil.  self secondPath: self application url pathStringUnencodedrenderContentOn: arg1  arg1 form     defaultAction: [ self defaultAction ];     with: [ arg1 div: [ self renderNextOn: arg1.              self renderButtonsOn: arg1 ] ]initializeWithKey: arg1 value: arg2  self initialize.  key := arg1.  keyHash := arg1 hash.  value := arg2at: arg1  | tmp1 tmp2 |  tmp2 := self getSearchContextFor: arg1.  tmp1 := self valueForContext: tmp2.  ^tmp1 isNil ifTrue: [ tmp2 attribute default ] ifFalse: [ tmp1 ]renderContentOn: arg1  arg1 div     class: 'window';     with: [ arg1 div           class: 'window-titlebar';           with: [ arg1 div                 class: 'window-title';                 class: cssClass;                 with: title.              arg1 div                 class: 'window-close';                 with: [ self renderCloseButtonOn: arg1 ] ].        arg1 div           class: 'window-content';           with: [ self renderNextOn: arg1 ] ]with: arg1  self add: arg1url: arg1  ^self addAttribute: (WAUrlAttribute key: arg1)rendererClass  ^WAHtmlCanvascallcc: arg1  ^WAPartialContinuation currentDo: arg1renderPagesOn: arg1  self pageRange do: [:arg2 |  self currentPage = arg2 ifFalse: [ arg1 anchor                 callback: [ self currentPage: arg2 ];                 with: arg2 ] ifTrue: [ arg1 strong: arg2 ] ] separatedBy: [ arg1 space ]application  ^self requestContext applicationremove: arg1  | tmp1 |  tmp1 := byValue removeKey: arg1.  byKey removeKey: tmp1handleFiltered: arg1  initializeOn: arg1  self initialize.  root := arg1.  mode := WAValueHolder with: self modes first.  plugins := WAHaloPlugin allSubclassesOn: self root for: selfyear  ^yearexecute  self open: (WABrowser fullOnClass: self root class)testRevealedConditionalComment  self assertRoot: [:arg1 |  arg1 revealedIf           ie7;           do: [ arg1 script                 defer;                 url: 'http://www.example.com/bugs.js' ] ] gives: '<title></title><!--[if IE 7]><!--><script defer src="http://www.example.com/bugs.js"></script><!--<![endif]-->'toggleAdvanced  self displayAdvancedAttributes: self displayAdvancedAttributes not.  self displayAdvancedAttributes ifTrue: [ self collapsed: false ]states  ^Array with: selectionscriptGenerator: arg1  removeForm  form isNil ifFalse: [ self removeDecoration: form ]renderRenderContentOnCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternKeyword;           with: 'renderContentOn: '.        arg1 span           class: #patternArg;           with: 'html'.        arg1 break.        arg1 span           class: #receiver;           with: '    html'.        arg1 text: ' heading: '.        arg1 span           class: #instanceVar;           with: 'count.'.        arg1 break.        arg1 span           class: #receiver;           with: '    html'.        arg1 text: ' anchor'.        arg1 break.        arg1 text: '        callback: [ '.        arg1 span           class: #instanceVar;           with: 'count '.        arg1 text: ':= '.        arg1 span           class: #instanceVar;           with: 'count'.        arg1 text: ' + '.        arg1 span           class: #number;           with: '1'.        arg1 text: ' ];'.        arg1 break.        arg1 text: '        with: '.        arg1 span           class: #string;           with: '''++'''.        arg1 text: '.'.        arg1 break.        arg1 span           class: #receiver;           with: '    html'.        arg1 text: ' space.'.        arg1 break.        arg1 span           class: #receiver;           with: '    html'.        arg1 text: ' anchor'.        arg1 break.        arg1 text: '        callback: [ '.        arg1 span           class: #instanceVar;           with: 'count '.        arg1 text: ':= '.        arg1 span           class: #instanceVar;           with: 'count'.        arg1 text: ' - '.        arg1 span           class: #number;           with: '1'.        arg1 text: ' ];'.        arg1 break.        arg1 text: '        with: '.        arg1 span           class: #string;           with: '''--'''.        arg1 text: '.' ]renderContentOn: arg1  arg1 div     class: self cssClass;     with: [ self requestor modes do: [:arg2 |  arg1 anchor                 class: 'active' if: self requestor mode = arg2;                 callback: [ self requestor mode: arg2 ];                 with: (self labelForSelector: arg2) ] separatedBy: [ arg1 text: ' / ' ] ]path: arg1  path := self sanitizePath: arg1.  self pathUnencoded: path codec: nilrenderContentOn: arg1  arg1 paragraph: 'This test is just like WADelegationFunctionalTest, but it uses Flow/Continuations.'.  super renderContentOn: arg1isRenderLoopContinuation  ^self class isRenderLoopContinuationrenderRenameFormForFile: arg1 on: arg2  arg2 tableData     colSpan: 2;     with: [ arg2 form: [ arg2 textInput                 value: arg1;                 callback: [:arg3 |  newName := arg3 ].              arg2 anchor                 onClick: 'return submitForm(this)';                 callback: [ self library renameFile: arg1 to: newName.                    renamingFile := nil ];                 with: 'Rename'.              arg2 space.              arg2 anchor                 onClick: 'return submitForm(this)';                 callback: [ renamingFile := nil ];                 with: 'Cancel' ] ]contents: arg1  contents := arg1codec: arg1  codec := arg1privatePathParameterMapAt: arg1  pathParameters isNil ifTrue: [ pathParameters := OrderedCollection new: self path size ].  ^pathParameters size >= arg1 ifTrue: [ pathParameters at: arg1 ] ifFalse: [ arg1 - pathParameters size - 1 timesRepeat: [ pathParameters add: nil ].        pathParameters add: GROrderedMultiMap2 new ]parents  ^self configuration parentsunregister: arg1  handlers removeKey: arg1 name ifAbsent: [ ^nil ].  ^arg1 unregisteredurlEncoderClass  ^WAPharoUrlEncoderrenderValue: arg1 on: arg2  valueBlock value: arg1 value: arg2testSelfTerminate  | tmp1 tmp2 |  tmp1 := nil.  tmp2 := GRPlatform current semaphoreClass new.  process := [ tmp1 := mutex critical: [ tmp2 signal.        mutex terminateOwner.        1 ] ] newProcess.  process resume.  tmp2 wait.  self assert: mutex owner isNil.  self assert: tmp1 isNil.  self assert: (GRPlatform current isProcessTerminated: process)size  ^sizetestHash  url host: 'seaside.st'.  self assert: url hash = url hash.  self assert: url hash = url copy hashexpressionAt: arg1 ifAbsent: arg2  ^self description expressions at: arg1 ifAbsent: arg2defaultCodec  ^GRNullCodec newaddParent: arg1  arg1 isNil ifFalse: [ self configuration addParent: arg1.        (arg1 isKindOf: WAAuthConfiguration) ifTrue: [ self myApplication                 preferenceAt: #login put: 'admin';                 preferenceAt: #passwordHash put: (GRPlatform current secureHashFor: 'seaside');                 addFilter: WAAuthenticationFilter new ].        self parent buildGroups.        selectedConfiguration contents: arg1 ]testWithFieldValue  | tmp1 |  tmp1 := url withField: 'foo' value: 'bar'.  url addToPath: 'zork'.  url addField: 'zork'.  self assert: url printString = '/zork?zork'.  self assert: tmp1 printString = '/?foo=bar'messageListIndex  ^selectedMethod isNil ifTrue: [ 0 ] ifFalse: [ self messageList indexOf: selectedMethod selector ]pathEncodedWith: arg1 on: arg2  | tmp1 |  tmp1 := WAUnescapedDocument on: arg2 codec: arg1.  self encodePathOn: tmp1testExpireAbsolute  | tmp1 tmp2 |  self workAroundPharo3Bug.  cache := WABulkReapingCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 3 maximumRelativeAge: 0 overflowAction: WAHashCache signalError.  tmp1 := Delay forSeconds: 2.  cache at: 1 put: '1'.  tmp1 wait.  cache at: 2 put: '2'.  tmp1 wait.  self assert: cache reap = 1 description: 'should reap exactly one item'.  tmp2 := false.  cache at: 1 ifAbsent: [ tmp2 := true ].  self assert: tmp2 description: 'the oldest item should be gone'.  self assert: (cache at: 2 ifAbsent: [ self assert: false ]) = '2' description: 'the newest item should not be gone'updateRoot: arg1  | tmp1 |  super updateRoot: arg1.  tmp1 := arg1 context actionUrl withField: (arg1 context callbacks store: (WAActionCallback on: [ self decoratedComponent answer ])).  arg1 meta redirectAfter: self delay to: tmp1 greaseStringonUpdateStates: arg1  updateStatesBlock := arg1testAddKeyToContext  | tmp1 |  tmp1 := self requestContext.  strategy addKey: 'The_Metaphor' toContext: tmp1.  self assertNoCookies: tmp1goAnchors  1 to: 5 do: [:arg1 |  | tmp1 |        tmp1 := WAComponent new.        tmp1 addMessage: [:arg2 |  arg2 anchor                 callback: [ tmp1 answer ];                 with: arg1 greaseString , ': ' , self stackDepth greaseString ].        self call: tmp1 ]group  ^groupprintOn: arg1  arg1 nextPutAll: 'HTTP/'.  major printOn: arg1.  arg1 nextPut: $..  minor printOn: arg1currentPage: arg1  currentPage := arg1isClosed  ^falsetestEmptyAfterReset  | tmp1 |  tmp1 := self response     status: WAResponse statusNotFound;     attachmentWithFileName: 'upload.csv';     nextPutAll: 'the content';     resetIfPossible.  self assert: tmp1.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Length: 0' '')deleteSessionCookieOf: arg1 from: arg2  | tmp1 tmp2 |  tmp1 := self cookieFromContext: arg2 ifAbsent: [ ^self ].  tmp2 := arg1 url.  arg2 response deleteCookie: tmp1 path: tmp2 pathStringUnencoded domain: tmp2 hostmode  ^mode contentsbaseUrlWithSlash: arg1  ^self application url     addToPath: self class name greaseString;     addField: 'slash' value: arg1 greaseString;     slash: arg1;     yourselfchildren  ^Array with: inputElementsassert: arg1 gives: arg2  | tmp1 |  tmp1 := self builder render: arg1.  self assert: tmp1 = arg2 description: 'Expected: ' , arg2 printString , ', Actual: ' , tmp1 printString resumable: truetestQueryString  self assert: url queryString = ''.  url addField: 'foo'.  self assert: url queryString = 'foo'.  url addField: 'foo' value: 'bar'.  self assert: url queryString = 'foo&foo=bar'.  url addField: 'foo#' value: 'bar#'.  self assert: url queryString = 'foo&foo=bar&foo%23=bar%23'yearRange  ^self startYear to: self endYearlabelBlock  ^labelBlockisGlobal  ^truelibraryClasses  ^WAAbstractFileLibrary libraries asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]isClosed  ^truetestCacheFor  self response cacheFor: (Duration days: 1 hours: 0 minutes: 0 seconds: 0).  self assert: (self response headerAt: 'Pragma') isNil.  self assert: (self response headerAt: 'Expires') notNil.  self assert: (self response headerAt: 'Cache-Control') = 'max-age=86400'queryFields: arg1  queryFields := arg1responseForContext: arg1  | tmp1 tmp2 |  tmp2 := arg1 consumer.  tmp2 atEnd ifTrue: [ ^(self fileHandlerListingClass on: self context: arg1) responseForLibraries ].  tmp1 := self libraryAt: tmp2 next asSymbol ifAbsent: [ ^arg1 responseGenerator           notFound;           respond ].  tmp2 atEnd ifTrue: [ | tmp3 |        tmp3 := self fileHandlerListingClass on: self context: arg1.        tmp3 responseForLibrary: tmp1 default ] ifFalse: [ tmp1 handle: arg1.        arg1 responseGenerator           notFound;           respond ]assertContents: arg1  self assert: self requestContext response contents = arg1dependent: arg1  features at: #dependent put: arg1url: arg1  url := arg1testUpdateStates  | tmp1 tmp2 |  tmp1 := WASnapshot new.  root onUpdateStates: [:arg1 |  self assert: arg1 = tmp1.        self log: 'root' ].  child1 onUpdateStates: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child1' ].  child2 onUpdateStates: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child2' ].  child3 onUpdateStates: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child3' ].  decoration1 onUpdateStates: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration1' ].  decoration2 onUpdateStates: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration2' ].  tmp2 := WAAllPresenterGuide client: (WAUpdateStatesVisitor snapshot: tmp1).  tmp2 start: root.  self assertLog: #('root').  root onChildren: [ Array with: child1 with: child2 ].  tmp2 start: root.  self assertLog: #('root' 'child1' 'child2').  root     addDecoration: decoration1;     addDecoration: decoration2.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').  child2 show: child3.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3' 'child2')at: arg1 ifAbsent: arg2  ^dictionary at: arg1 ifAbsent: arg2handleFiltered: arg1  self subclassResponsibilitysmall  ^self tag: 'small'properties: arg1  properties := arg1renderLink: arg1 on: arg2  arg2 anchor on: arg1 of: self target.  arg2 breakcollectionClass  ^WAHeaderFieldsemail  ^emailrenderNodeChildren: arg1 on: arg2  | tmp1 |  tmp1 := self childrenOf: arg1.  tmp1 isEmpty ifFalse: [ (self isExpanded: arg1) ifTrue: [ arg2 unorderedList: [ tmp1 do: [:arg3 |  self renderNode: arg3 on: arg2 ] ] ] ]label  ^'Copy'defaultAction  ^WAUnhandledNotificationError signalWithNotification: selfhandlerAt: arg1  ^self handlerAt: arg1 ifAbsent: [ WAError signal: 'Handler not found.' ]detectCommonPathElementClass  | tmp1 |  path isEmptyOrNil ifTrue: [ ^'' species ].  tmp1 := (path at: 1) species.  2 to: path size do: [:arg1 |  (path at: arg1) species ~= tmp1 ifTrue: [ ^nil ] ].  ^tmp1bidirectionalOverride  ^self tag: 'bdo'takeValue: arg1 forAttribute: arg2  ^arg1 isNil ifFalse: [ self storeExpression: ((WAValueExpression key: arg2 key)                 value: arg1;                 yourself) forAttribute: arg2 ]testOverrides  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 |  tmp1 := self basicSystemConfiguration.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp2;     yourself.  tmp3 at: #a put: 2.  tmp6 := WAConfigurationMock new     description: [:arg1 |  arg1 at: #a put: #override ];     parents: [ Array with: tmp3 ];     yourself.  tmp4 := WAUserConfiguration new     addParent: tmp6;     yourself.  tmp5 := WAUserConfiguration new     addParent: tmp4;     yourself.  tmp5 at: #a put: 4.  tmp7 := WAUserConfiguration new     addParent: tmp5;     yourself.  self assert: (tmp1 at: #a) = #default.  self assert: (tmp2 at: #a) = #default.  self assert: (tmp3 at: #a) = 2.  self assert: (tmp6 at: #a) = #override.  self assert: (tmp4 at: #a) = #override.  self assert: (tmp5 at: #a) = 4.  self assert: (tmp7 at: #a) = 4actionUrlForKey: arg1  ^self url     addField: self actionField value: arg1;     yourselfmimeType  ^self preferenceAt: #mimeTypeinitialize  super initialize.  counters := (1 to: 5) collect: [:arg1 |  WACounter new ]onCanPlayThrough: arg1  self document scriptGenerator event: 'canplaythrough' do: arg1 on: selfparsePath: arg1  | tmp1 |  tmp1 := arg1 notEmpty and: [ arg1 first = $/ ].  self parsePath: arg1 absolute: tmp1 from: (tmp1 ifTrue: [ 2 ] ifFalse: [ 1 ]) to: arg1 size + 1handleFiltered: arg1 named: arg2  (self handlerAt: arg2 ifAbsent: [ arg1 responseGenerator           notFound;           respond ]) handle: arg1handle: arg1 registering: arg2 at: arg3  self register: arg2 at: arg3.  self dispatch: arg1 to: arg2 key: arg3parseCharacterHexDigit  | tmp1 |  stream atEnd ifFalse: [ tmp1 := stream next greaseInteger.        (tmp1 between: 48 and: 57) ifTrue: [ ^tmp1 - 48 ].        (tmp1 between: 65 and: 70) ifTrue: [ ^tmp1 - 55 ].        (tmp1 between: 97 and: 102) ifTrue: [ ^tmp1 - 87 ] ].  self error: 'hex-digit expected'openConfiguration: arg1  arg1 isNil ifFalse: [ arg1 isShared ifTrue: [ self show: arg1 configurationComponent ] ]renderContentOn: arg1  self renderGroup: [ self renderConfigurationOn: arg1 ] named: (self labelForSelector: group) on: arg1previous: arg1  previous := arg1helpPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 9 112 72 89 115 0 0 14 195 0 0 14 195 1 199 111 168 100 0 0 0 24 116 69 88 116 83 111 102 116 119 97 114 101 0 80 97 105 110 116 46 78 69 84 32 118 51 46 51 54 169 231 226 37 0 0 2 138 73 68 65 84 56 79 173 147 91 79 19 81 20 133 253 111 198 196 23 159 124 210 23 34 136 136 64 12 196 75 132 132 72 84 76 129 40 6 170 128 64 64 148 18 37 72 128 86 232 104 167 87 134 66 75 111 180 116 154 66 167 51 189 76 135 225 210 118 102 40 55 151 211 70 219 152 16 30 140 39 249 222 246 90 103 175 189 207 185 116 233 127 159 195 227 159 241 248 238 41 233 220 46 48 22 90 145 200 77 89 178 209 50 19 229 11 164 92 56 139 95 120 159 144 59 165 108 17 133 143 102 142 176 197 43 136 36 243 37 162 105 25 161 132 140 5 247 46 207 137 5 234 92 147 76 246 132 34 54 242 82 76 56 132 119 123 15 58 11 7 205 76 24 157 211 155 24 38 182 64 133 118 64 167 242 152 176 36 164 88 70 254 219 68 62 58 99 137 64 150 223 202 40 88 14 139 232 80 69 67 68 20 156 168 128 21 101 204 172 36 208 166 243 195 184 158 66 144 205 170 134 49 254 64 58 102 203 157 168 237 145 27 156 4 119 116 31 237 83 65 60 30 243 66 46 156 168 156 254 230 4 29 83 62 180 125 244 192 22 20 96 221 40 146 33 203 6 179 171 2 67 171 89 71 137 24 30 142 121 208 50 234 6 183 163 102 94 75 128 12 164 161 168 102 100 32 137 134 1 59 222 44 132 224 103 246 208 61 29 96 202 6 35 68 92 137 36 115 104 159 244 161 121 196 133 198 33 74 45 118 192 224 98 177 151 47 128 223 83 48 254 131 198 221 126 43 154 223 59 16 98 15 208 60 72 41 101 131 190 249 136 66 39 114 104 253 228 67 195 160 3 247 222 217 81 255 214 142 156 114 140 184 144 71 147 214 138 218 215 38 220 86 105 210 154 17 228 246 81 215 107 169 24 104 231 105 38 16 223 135 86 79 163 113 128 66 189 214 134 186 62 11 238 244 146 37 106 186 9 212 116 45 161 186 107 17 157 186 53 184 162 2 238 107 173 149 8 223 61 41 114 201 149 128 35 36 20 91 43 11 197 236 33 132 3 5 85 154 111 37 106 52 122 16 235 44 38 213 56 58 19 93 25 162 90 200 62 25 113 242 206 176 0 163 155 67 67 191 25 213 61 70 244 207 122 74 20 197 183 94 206 225 179 57 2 179 47 129 27 207 12 124 74 148 42 107 44 14 99 141 22 168 234 30 147 100 15 166 65 250 147 120 49 233 68 221 171 69 212 118 25 240 116 220 1 163 139 129 201 203 225 234 163 175 146 217 203 157 255 26 151 131 105 170 74 99 228 39 136 77 172 70 50 240 49 98 137 149 48 143 97 125 0 215 90 103 121 147 135 61 95 252 103 37 73 81 138 127 48 134 200 155 207 13 204 149 7 211 210 229 150 47 210 245 246 57 102 88 239 39 57 33 119 241 103 250 151 159 253 11 116 160 42 115 65 169 198 103 0 0 0 0 73 69 78 68 174 66 96 130) asByteArrayobject: arg1  self chooseObject: arg1 named: arg1 greaseStringchildrenDo: arg1  self children do: [:arg2 |  arg2 == self ifTrue: [ WAChildComponentShouldNotBeSelfError signal: self class name greaseString , ' >> #children - the returned collection contains a reference to self. Exception raised to avoid infinite recursion.' ].        arg2 isNil ifFalse: [ arg1 value: arg2 ] ]testSmallDictionaryConversion  | tmp1 |  tmp1 := GRSmallDictionary2 new     at: 1 put: 2;     yourself.  collection := tmp1 seasideRequestFields.  self assert: (collection isKindOf: WARequestFields).  self assertAssociations: (Array with: 1 -> 2)renderImagesOn: arg1  arg1 form: [ arg1 div: [ arg1 text: 'This one is clickable: '.              arg1 imageButton                 callback: [ self inform: 'ok' onAnswer: [  ] ];                 form: self haloDebugForm ] ].  arg1 paragraph: [ arg1 image           form: self haloViewForm;           altText: 'Halo-View'.        arg1 space.        arg1 image           document: self haloPaintForm mimeType: 'image/png' fileName: 'Paint.png';           altText: 'Halo-Paint' ]totalForRows: arg1  ^hasTotal ifFalse: [ '' ] ifTrue: [ formatBlock value: (arg1 inject: 0 into: [:arg2 :arg3 |  arg2 + (self valueForRow: arg3) ]) ]addPathParameterAt: arg1 key: arg2  (self privatePathParameterMapAt: arg1) at: arg2 put: niladdRedirectedToHeader: arg1  (arg1 request headerAt: 'x-requested-with') = 'Ajaxifier' ifTrue: [ arg1 response headerAt: 'X-RedirectedTo' put: arg1 request url greaseString ]createCache  ^WAMutualExclusionCache on: WABidirectionalCache newbeAppendix  self relationship: 'appendix'message  ^messagepriority  ^-100renderRowNumber: arg1 item: arg2 on: arg3  arg3 tableRow     style: 'background-color: ' , (self colorForRowNumber: arg1);     with: [ columns do: [:arg4 |  self renderColumn: arg4 row: arg2 on: arg3 ] ]handleFiltered: arg1  | tmp1 |  tmp1 := arg1 consumer.  tmp1 atEnd ifTrue: [ self handleDefault: arg1 ] ifFalse: [ self handleFiltered: arg1 named: tmp1 next ]testByteArraySeasideMimeDocumentType  | tmp1 tmp2 |  tmp2 := WAMimeType main: 'audio' sub: 'mpeg'.  tmp1 := (WABlockMimeDocument onBlock: [ #(1 2 3 4) asByteArray ]) seasideMimeDocumentType: tmp2.  self assert: tmp1 mimeType = tmp2.  self assert: tmp1 contents = #(1 2 3 4) asByteArraytitle  ^'Smalltalk Image'number: arg1  number := arg1testCountryName  | tmp1 |  tmp1 := WALocale fromString: 'de-CH'.  self assert: tmp1 countryName = 'SWITZERLAND'.  tmp1 := WALocale fromString: 'en-ZA'.  self assert: tmp1 countryName = 'SOUTH AFRICA'.  tmp1 := WALocale fromString: 'eng-ZAF'.  self assert: tmp1 countryName = 'SOUTH AFRICA'headerAt: arg1 append: arg2  self committedCheck.  ^super headerAt: arg1 append: arg2scriptGeneratorClass  self subclassResponsibilityassert: arg1 gives: arg2  | tmp1 |  tmp1 := WAHtmlCanvas builder     fullDocument: true;     scriptGeneratorClass: self scriptGeneratorClass;     render: arg1.  self assert: arg2 = tmp1isPrefetch  ^(self headerAt: 'x-moz') = 'prefetch'resetIfPossible  self initializeFields.  contentsStream reset.  ^truesearch  ^searchaddLibrary: arg1  self preferenceAt: #libraries put: ((self preferenceAt: #libraries) copyWith: (GRPlatform current bindingOf: arg1))root: arg1  root := arg1execute  self adaptor ifNotNil: [:arg1 |  arg1 stop ].  self context updateAdaptorsTabletestAsFileAndFoldernameWithSubfolders  | tmp1 tmp2 |  tmp1 := WATestingMetadataFileLibrary default.  tmp2 := tmp1 asFileAndFoldername: #jsbootstrapJs.  self assert: tmp2 first equals: tmp1 name , GRPlatform current pathSeparator , 'js'.  self assert: tmp2 last equals: 'bootstrap.js'testValueWithoutAttribute2  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := self basicSystemConfiguration.  tmp4 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp4 at: #a put: 1.  tmp5 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp5 at: #a put: 2.  tmp5 removeParent: tmp1.  tmp2 := WAUserConfiguration new     addParent: tmp4;     addParent: tmp5;     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp5;     addParent: tmp4;     yourself.  self assert: (tmp1 at: #a) = #default.  self assert: (tmp4 at: #a) = 1.  self should: [ tmp5 at: #a ] raise: WAAttributeNotFound.  self assert: (tmp2 at: #a) = 1.  self assert: (tmp3 at: #a) = 1chooseRow: arg1 column: arg2  arg2 chooseRow: arg1updateHtmlRoot: arg1 forException: arg2  arg1 title: (self titleForException: arg2)urlForDebugAction: arg1  | tmp1 |  tmp1 := self requestContext request url copy.  tmp1 queryFields at: self debugActionField put: arg1.  ^tmp1renderMaximumAbsoluteAgeOn: arg1  arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'Maximum Absolute Age' ].        arg1 tableData: [ arg1 textInput                 size: 5;                 on: #maximumAbsoluteAge of: self ] ].  arg1 tableRow: [ arg1 tableData           colSpan: 2;           with: 'After so many seconds after its creation a session is considered expired no matter when it was last accessed. 0 for no limit. Has to be positive.' ]expand: arg1  expanded add: arg1exception  ^exceptionclearMessageAndProtoclSelection  selectedMethod := nil.  selectedMessageCategory := nilteletype  ^self tag: 'tt'start  ^startsafePrintString: arg1  ^[ arg1 printStringLimitedTo: 100 ] on: Error do: [:arg2 |  'unprintable ' , arg1 class name ]newStrategy  ^WASslSessionTrackingStrategy newcopy  ^self species newregisterForUrl  ^self registerForUrl: trueselectionsCurrent  ^selectionsCurrent collect: [:arg1 |  arg1 value ]evaluate  self subclassResponsibilityrenderContentOn: arg1  self isSupported ifTrue: [ self renderImagesOn: arg1 ] ifFalse: [ self renderNotSupportedOn: arg1 ]selectedClass  | tmp1 |  tmp1 := selectedClass.  (tmp1 notNil and: [ showInstance not ]) ifTrue: [ tmp1 := tmp1 theMetaClass ].  ^tmp1determineValueWithContext: arg1 configuration: arg2  | tmp1 tmp2 |  tmp1 := arg2 inheritedValueForContext: arg1.  tmp1 isNil ifTrue: [ tmp1 := arg1 attribute default ].  tmp1 isNil ifTrue: [ tmp1 := Array new ].  tmp2 := OrderedCollection withAll: tmp1.  tmp2 := tmp2 reject: [:arg3 |  (self additions includes: arg3) or: [ self removals includes: arg3 ] ].  tmp2 addAll: self additions.  ^tmp2 asArrayallClasses  ^(WAComponent allSubclasses select: [:arg1 |  arg1 class selectors anySatisfy: [:arg2 |  arg2 beginsWithSubCollection: self selectorPrefix ] ]) asSortedCollection: [:arg3 :arg4 |  arg3 name < arg4 name ]ports  ^portsstore: arg1  | tmp1 |  tmp1 := self advanceKey.  callbacks at: (arg1 convertKey: tmp1) put: arg1.  arg1 setKey: tmp1 callbacks: callbacks.  ^tmp1initializeRequestor: arg1  super initializeRequestor: arg1.  filter := self session filters detect: [:arg2 |  arg2 isKindOf: WADeprecatedToolFilter ] ifNone: [ self session addFilter: WADeprecatedToolFilter new ]assertRoot: arg1 gives: arg2  | tmp1 |  tmp1 := WAHtmlCanvas builder     fullDocument: true;     rootBlock: arg1;     render: [:arg3 |   ].  self assert: ('<html><head>' , arg2 , '</head><body onload="onLoad()"><script type="text/javascript">function onLoad(){};</script></body></html>') = tmp1renderCommands: arg1 on: arg2  arg2 anchor     callback: [ message := arg1 tree ];     with: 'Tree'.  arg2 text: ' '.  arg2 anchor     callback: [ message := arg1 leavesByTime ];     with: 'Leaves (time)'.  arg2 text: ' '.  arg2 anchor     callback: [ message := arg1 leavesBySends ];     with: 'Leaves (sends)'.  arg2 text: ' '.  arg1 time > 0 ifTrue: [ arg2 anchor           callback: [ message := arg1 stats ];           with: 'GC Stats' ] ifFalse: [ arg2 text: 'GC Stats' ]store: arg1  | tmp1 tmp2 |  tmp2 := WABulkReapingCacheEntry value: arg1.  [ | tmp3 |  tmp3 := false.  tmp1 := WAKeyGenerator current keyOfLength: self keySize.  dictionary at: tmp1 ifAbsentPut: [ tmp3 := true.        tmp2 ].  tmp3 ] whileFalse.  ^tmp1disabled: arg1  self attributeAt: 'disabled' put: arg1setParent: arg1 canvas: arg2  super setParent: arg1 canvas: arg2.  self     post;     action: arg2 actionUrlremoteAddress  ^'17.154.81.95'initializeOn: arg1  super initializeOn: arg1.  committed := false.  externalStream := arg1testStreaming  | tmp1 |  self response notFound.  tmp1 := self response stream.  tmp1 nextPutAll: 'A long long way from home.'.  tmp1 crlf.  tmp1 nextPut: $!.  tmp1 print: 123.  self assertLines: #('HTTP/1.1 404 Not Found' 'Content-Length: 32' '' 'A long long way from home.' '!123')request: arg1 label: arg2 onAnswer: arg3  self request: arg1 label: arg2 default: nil onAnswer: arg3renderValidationError: arg1 on: arg2  arg2 span     class: 'dialog-validation';     with: arg1assert: arg1 at: arg2 language: arg3 country: arg4 quality: arg5  | tmp1 tmp2 |  tmp1 := arg1 at: arg2.  self assert: (tmp1 isKindOf: WAQualifiedValue).  self assert: tmp1 quality = arg5.  tmp2 := tmp1 value.  self assert: (tmp2 isKindOf: WALocale).  self assert: tmp2 language = arg3.  self assert: tmp2 country = arg4multipart: arg1  multipart := arg1after  label  ^'Styles'renderMinutes  | tmp1 |  tmp1 := canvas textInput     id: (self id isNil ifFalse: [ self id , '-mins' ]);     value: (GRNumberPrinter new           padding: $0;           digits: 2;           print: minutes);     yourself.  self addMinutesCallbackToBrush: tmp1.  tmp1     attributeAt: 'size' put: 2;     attributeAt: 'maxlength' put: 2testSettingPathWithoutLeadingSlash  | tmp1 |  tmp1 := WACookie new     key: 'name';     value: 'homer';     path: 'springfield/powerplant';     yourself.  self assert: tmp1 path equals: '/springfield/powerplant'.  self assert: tmp1 pathUnencoded equals: '/springfield/powerplant'.  self assert: tmp1 pathEncoded equals: '/springfield/powerplant'testSendUnregistered  | tmp1 tmp2 tmp3 |  self workAroundPharo3Bug.  cache := WABulkReapingCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 1 maximumRelativeAge: 0 overflowAction: WAHashCache signalError.  tmp1 := Delay forSeconds: 2.  tmp2 := WAObjectUnderstandingUnregistered new.  self deny: tmp2 hasReceivedUnregistered.  cache at: 1 put: tmp2.  tmp1 wait.  self assert: cache reap = 1 description: 'should reap exactly one item'.  tmp3 := false.  cache at: 1 ifAbsent: [ tmp3 := true ].  self assert: tmp3.  self assert: tmp2 hasReceivedUnregisteredrenderAcceptFor: arg1 on: arg2  arg2 definitionTerm: 'Accept:'.  self renderQualifiedValues: arg1 accept on: arg2accumulate: arg1  (instances at: arg1 class ifAbsentPut: [ WAMemoryItem on: arg1 class ]) accumulate: arg1moveParentUp: arg1  | tmp1 |  self clearSearchContexts.  tmp1 := parents indexOf: arg1 ifAbsent: [ ^self ].  tmp1 > 1 ifTrue: [ parents swap: tmp1 with: tmp1 - 1 ]renderSuccessUrl: arg1 on: arg2  arg2 paragraph: [ arg2 text: 'Success! '.        arg2 button           bePush;           onClick: (arg2 jQuery ajax                 callback: [ self serverUrl: arg1 ];                 onComplete: arg2 javascript refresh);           with: 'Update Configuration' ]addStyle: arg1  self at: 'style' append: arg1 separator: $;value: arg1  value := arg1handlerClass  self subclassResponsibilitymultiSelect  ^self brush: WAMultiSelectTag newattributes: arg1  attributes := arg1setPostFields: arg1  postFields := arg1 seasideRequestFieldspriority  ^600trackingStrategy  ^self configuration at: #trackingStrategynextPutAll: arg1  self stream nextPutAll: arg1address: arg1  address := self sanitize: arg1updateUrl: arg1  super updateUrl: arg1.  input isEmptyOrNil ifTrue: [ ^self ].  arg1 addToPath: input.  arg1 addField: 'input' value: inputbuttons: arg1  buttons := arg1decode: arg1  ^self class decodePercent: arg1abbreviation: arg1  self attributes at: 'abbr' put: arg1key: arg1 value: arg2  ^(self brush: (WAJsonKeyValueBrush key: arg1)) with: arg2sub: arg1  sub := arg1closeBrush  self document closeObjectdateAndTime: arg1  self document stream nextPut: $".  arg1 printOn: self document stream.  self document stream nextPut: $"renderOverflowActionOn: arg1  arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'Overflow Action' ].        arg1 tableData: [ arg1 select                 list: WAHashCache overflowActions;                 labels: [:arg2 |  overflowActionLabels at: arg2 ifAbsent: [ arg2 ] ];                 on: #overflowAction of: self ] ].  arg1 tableRow: [ arg1 tableData           colSpan: 2;           with: 'What to do when the maximum number of sessions is reached. Only matters when the maximum size is bigger than 0.' ]table  ^self brush: WATableTag newvalueForOption: arg1  ^GRPlatform current bindingOf: arg1isFileSelector: arg1  | tmp1 |  tmp1 := arg1 endsWithSubCollection: #Content.  ^tmp1 not and: [ super isFileSelector: arg1 ]handlePadding: arg1  | tmp1 |  tmp1 := arg1 response stream size.  ^(tmp1 < 512 and: [ #(400 403 404 405 406 408 409 410 500 501 505) includes: arg1 response status ]) ifTrue: [ arg1 response nextPutAll: ((String new: 512 - tmp1) atAllPut: $ ) ]canvas: arg1  self canvas with: arg1spaceTallyItems  ^(SpaceTally new spaceTally: self classesWithManyInstances) sort: [:arg1 :arg2 |  arg1 spaceForInstances > arg2 spaceForInstances ]value  ^valueonDragStart: arg1  self document scriptGenerator event: 'dragstart' do: arg1 on: selftitle: arg1  title := arg1updateRoot: arg1  super updateRoot: arg1.  self style isNil ifFalse: [ arg1 addStyle: self style ].  self script isNil ifFalse: [ arg1 addScript: self script ]overflowAction  ^overflowActiontestContentStream  | tmp1 |  tmp1 := document contentStream.  'aString' do: [:arg1 |  self deny: tmp1 atEnd.        self assert: tmp1 next = arg1 ].  self assert: tmp1 atEndseasidePossibleCauses  ^#('No WAAuthConfiguration has been added to the application.')testHandlesError  self assert: (self handlerClass handles: Error new).  self assert: (self createHandler handles: Error new)testAddCookieOneAlreadyPresent  | tmp1 tmp2 |  tmp2 := WARequestCookie key: strategy keyCookieName value: 'The_Metaphor'.  tmp1 := self requestContext.  tmp1 request setCookies: (Array with: tmp2).  strategy addKey: 'The_Metaphor' toContext: tmp1.  self assertNoCookies: tmp1properties  ^properties ifNil: [ properties := GRSmallDictionary2 new ]reset  items := Array newdetails: arg1  self details with: arg1cssClass: arg1  cssClass := arg1bidirectionalOverride: arg1  self bidirectionalOverride with: arg1initialize  super initialize.  to := OrderedCollection new.  cc := OrderedCollection new.  bcc := OrderedCollection new.  headers := Dictionary new.  self headerAt: 'Date' put: (GRPrinter rfc822 print: DateAndTime now)initialize  super initialize.  next := WAValueHolder newisVendorSpecific  ^self sub beginsWithSubCollection: 'vnd.'document: arg1 mimeType: arg2  self document: arg1 mimeType: arg2 fileName: nilalign: arg1  self attributes at: 'align' put: arg1slash: arg1  slash := arg1createHandlers  | tmp1 tmp2 tmp3 tmp4 |  tmp4 := WADispatcher new.  tmp1 := tmp4 register: WADispatcher new at: 'rails'.  tmp2 := tmp1 register: WAApplication new at: 'homepage'.  tmp3 := WASession new.  tmp2 register: tmp3.  ^super createHandlers , (Array with: tmp4 with: tmp1 with: tmp2 with: tmp3)renderSampleOn: arg1  arg1 heading     level2;     with: '<samp>'.  arg1 paragraph: [ arg1 text: 'If you select the ''champion'' option, you will receive the message '.        arg1 sample: 'The monkey is not a caterpillar'.        arg1 text: '.' ]errorNotMapped  self error: 'Not mapped'displayAdvancedAttributes: arg1  self propertyAt: #displayAdvanced put: arg1add: arg1  super add: arg1.  attributes isNil ifFalse: [ attributes removeKey: 'rel' ifAbsent: [  ] ]fragment: arg1  self url fragment: arg1timeClass  ^TimeinternalError: arg1  self requestContext responseGenerator     internalError: arg1;     respondbyAccessListEntry: arg1  byAccessListEntry := arg1headingGroup  ^self tag: 'hgroup'postCopy  super postCopy.  visitor := visitor copyForRenderContext: self.  actionUrl := actionUrl copy.  resourceUrl := resourceUrl copy.  properties := properties copystyle  ^'.dialog-row {	clear: both;	/*set position: relative to handle the ie disappearing text bug*/	position: relative;	margin-top: 3px;}.dialog-form-label {	width: 100px;	float: left;	text-align: right;	padding: 2px 6px;	margin-right: 4px;	margin-top: 2px;}.dialog-form-field {	text-align: left;	padding: 2px;	margin-top: 2px;	float: left;}.dialog-buttons {	clear: both;	padding: 10px;	text-align: center}.dialog-spacer {	clear: both;	height: 10px;}	'type  ^'time'updateRoot: arg1  super updateRoot: arg1.  arg1 title: 'Version Uploader'testSimpleCallCC  | tmp1 tmp2 |  tmp1 := self callcc: [:arg1 |  tmp2 := arg1.        false ].  tmp1 ifFalse: [ tmp2 value: true ].  self assert: tmp1listingClasses  ^WAFileHandlerListing allSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]testNextIfPresent  | tmp1 |  tmp1 := false.  consumer nextIfPresentDo: [:arg1 |  self assert: arg1 = 'tweets'.        tmp1 := true ].  self assert: tmp1.  tmp1 := false.  consumer nextIfPresentDo: [:arg1 |  self assert: arg1 = 'kentbeck'.        tmp1 := true ].  self assert: tmp1.  tmp1 := false.  consumer nextIfPresentDo: [:arg1 |  tmp1 := true ].  self deny: tmp1assertDefault: arg1  self assert: registry cache size = registrySize.  self assert: arg1 status = 404parent  ^parenttag  ^tagaddSecondsCallbackToBrush: arg1  self hasCallback ifFalse: [ ^self ].  arg1 callback: [:arg2 |  self seconds: arg2 ]frames  ^frames first: (self limit min: frames size)kill  self basicStopget  ^getvalueWithArguments: arg1  self subclassResponsibilitychildren  ^Array with: self selectedComponentwriteHeadOn: arg1  arg1 nextPutAll: docType.  arg1 openTag: 'html' attributes: htmlAttrs.  arg1 openTag: 'head' attributes: headAttrs.  self writeElementsOn: arg1.  self writeStylesOn: arg1.  self writeScriptsOn: arg1.  arg1 closeTag: 'head'.  arg1 openTag: 'body' attributes: bodyAttrstestExpireAbsolute  | tmp1 tmp2 |  cache := WAHashCache initialSize: 13 maximumSize: 10 maximumAbsoluteAge: 3 maximumRelativeAge: 0 overflowAction: WAHashCache signalError.  tmp1 := Delay forSeconds: 2.  cache at: 1 put: '1'.  tmp1 wait.  cache at: 2 put: '2'.  tmp1 wait.  tmp2 := false.  cache at: 1 ifAbsent: [ tmp2 := true ].  self assert: tmp2.  self assert: (cache at: 2 ifAbsent: [ self assert: false ]) = '2'beCopyright  self relationship: 'copyright'resume  self uiProcess resumeevaluateCallbackContinuation: arg1 with: arg2  | tmp1 |  tmp1 := WAActionCallback new.  tmp1 block: [ arg1 value: arg2 ].  [ tmp1 evaluateWithArgument: nil ] on: WARenderNotification do: [:arg3 |   ]visitDecorationsOfComponent: arg1  arg1 decoration accept: selfdocument  ^documentredirectTo: arg1  | tmp1 |  tmp1 := self response cookies.  self ifResetPossible: [ tmp1 do: [:arg2 |  self response addCookie: arg2 ].        self response redirectTo: arg1 ]registryName  ^'test'sameSite: arg1  sameSite := arg1selectionContainsDate: arg1 rowIndex: arg2  ^((arg1 between: dateSelectionStart and: dateSelectionEnd) or: [ arg1 between: dateSelectionEnd and: dateSelectionStart ]) and: [ (arg2 between: rowSelectionStart and: rowSelectionEnd) or: [ arg2 between: rowSelectionEnd and: rowSelectionStart ] ]renderMoveUpAndDownOn: arg1  (self isWriteable and: [ self currentList isEmpty not ]) ifTrue: [ arg1 anchor           title: 'Move selected element up';           onClick: 'return submitForm(this)';           callback: [ self moveUp ];           with: [ arg1 html: '&uarr;' ].        arg1           break;           break.        arg1 anchor           title: 'Move selected element down';           onClick: 'return submitForm(this)';           callback: [ self moveDown ];           with: [ arg1 html: '&darr;' ] ]execute  self adaptor isStopped ifTrue: [ self adaptor unregister ].  self context updateAdaptorsTablelines  | tmp1 tmp2 |  tmp1 := OrderedCollection new.  tmp2 := self contents readStream.  [ tmp2 atEnd ] whileFalse: [ tmp1 add: (tmp2 greaseUpToAll: (String with: Character cr with: Character lf)) ].  ^tmp1 asArrayhasCallback  ^values notNilrequest: arg1 default: arg2 onAnswer: arg3  self request: arg1 label: nil default: arg2 onAnswer: arg3colorFor: arg1  | tmp1 tmp2 |  tmp1 := self class colors.  tmp2 := 800.  arg1 >= tmp2 ifTrue: [ ^tmp1 first ].  arg1 = 0 ifTrue: [ ^tmp1 last ].  ^tmp1 at: tmp1 size - (arg1 / tmp2 * tmp1 size) greaseIntegerfor: arg1  self attributeAt: 'for' put: arg1sessionId  ^self sslSessionIdkey  ^keylegend  ^self tag: 'legend'renderInputFirstOn: arg1  arg1 tableRow: [ self renderInputForCookie: #first on: arg1.        arg1 tableData: [ arg1 submitButton                 id: #addFirstCookie;                 on: #addFirst of: self ] ]go  self call: component1.  self call: component2testError  | tmp1 |  tmp1 := self createRequestContext.  [ self handlerClass handleExceptionsDuring: [ WAError signal ] context: tmp1 ] on: WAResponseNotification do: [:arg1 |  self assert: tmp1 response status = 500.        ^self ].  self assert: falsecharacterOffset: arg1  self attributes at: 'charoff' put: arg1canSelectBlock  ^canSelectBlockbrowserSessionIDSize  ^20bytes: arg1  arg1 isZero ifTrue: [ multiplier := 0.        self value: 0 ] ifFalse: [ multiplier := self unitDictionary keys sorted inject: 1 into: [:arg2 :arg3 |  (arg1 \\ arg3) isZero ifTrue: [ arg3 ] ifFalse: [ arg2 ] ].        self value: arg1 // multiplier ]addHoursCallbackToBrush: arg1  self hasCallback ifFalse: [ ^self ].  arg1 callback: [:arg2 |  self hours: arg2 ]renderLabel: arg1 value: arg2 on: arg3  arg3 tableRow: [ arg3 tableHeading: arg1.        arg3 tableData: arg2 ]radioGroup  ^WARadioGroup canvas: selftestEvent  self assert: [:arg1 |  arg1 anchor           onClick: 'console.log("clicked")';           with: 'click' ] gives: '<html><head><title></title></head><body onload="onLoad()"><a onclick="console.log(&quot;clicked&quot;)">click</a><script type="text/javascript">function onLoad(){};</script></body></html>'renderValue: arg1 on: arg2  arg2 tableData: arg1assertCookieInContext: arg1 withValue: arg2  | tmp1 tmp2 |  tmp1 := arg1 response cookies.  self assert: tmp1 size = 1.  tmp2 := tmp1 first.  self assert: tmp2 key = strategy keyCookieName.  self assert: tmp2 value = arg2accept: arg1  arg1 visitClassBindingCollectionAttribute: selfrenderNumberListOn: arg1  arg1 select     id: 'number-list';     size: 3;     selected: number;     list: (Array with: 1 with: 2 with: 3);     callback: [:arg2 |  number := arg2 ]beCommand  self type: 'command'cookies  ^cookies ifNil: [ #() ]refreshAfter: arg1 location: arg2 message: arg3  self ifResetPossible: [ self response           contentType: WAMimeType textHtml;           refreshAfter: arg1 location: arg2 ].  self response nextPutAll: (WAHtmlCanvas builder           fullDocument: true;           render: [:arg4 |  arg4 heading: arg3.              arg4 paragraph: [ arg4 text: 'You are being redirected to '.                    arg4 anchor                       url: arg2;                       with: arg2 greaseString ] ])renderCssOn: arg1  arg1 textArea     rows: 20;     columns: 80;     value: presenter style;     callback: [:arg2 |  self compile: 'style ' , GRPlatform current newline , '	^ ' , arg2 printString ]date  ^date contentserrorAlreadyMapped  self error: 'Already mapped'testAttachmentWithFileName  self response attachmentWithFileName: 'foo.txt'.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Disposition: attachment; filename="foo.txt"' 'Content-Length: 0' '')testNastyEdgeCasesParsing  url := (WAUrl absolute: 'http://example.com/blue+light%20blue?blue%2Blight+blue') decodedWith: GRNullCodec new.  self assert: url path first = 'blue+light blue'.  self assert: (url queryFields includesKey: 'blue+light blue').  url := (WAUrl absolute: 'http://example.com/blue%2Fred%3Fand+green') decodedWith: GRNullCodec new.  self assert: url path first = 'blue/red?and+green'.  url := (WAUrl absolute: 'http://example.com/:@-._~!$&''()*+,=;:@-._~!$&''()*+,=:@-._~!$&''()*+,==?/?:@-._~!$''()*+,;=/?:@-._~!$''()*+,;==#/?:@-._~!$&''()*+,;=') decodedWith: GRNullCodec new.  self assert: url path first = ':@-._~!$&''()*+,='.  self assert: (url pathParameterAllAt: 1 key: ':@-._~!$&''()*+,' ifAbsent: [ 'fail' ]) = #(':@-._~!$&''()*+' '==').  self assert: (url queryFields at: '/?:@-._~!$''()* ,;') = '/?:@-._~!$''()* ,;=='.  self assert: url fragment = '/?:@-._~!$&''()*+,;='with: arg1  self onClick: 'window.open(this.href,' , self windowTitle printString , ',' , self featureString printString , ');return false'.  super with: arg1parseArray  | tmp1 |  self expectChar: $[.  tmp1 := self createArray.  (self matchChar: $]) ifTrue: [ ^tmp1 ].  [ stream atEnd ] whileFalse: [ tmp1 := self addValue: self parseValue to: tmp1.        (self matchChar: $]) ifTrue: [ ^tmp1 ].        self expectChar: $, ].  self error: 'end of array expected'isStopping  self subclassResponsibilitytestCopyEmpty  | tmp1 |  tmp1 := handler copy.  self deny: handler == tmp1.  self assert: handler filter == handler.  self assert: tmp1 filter == tmp1endIndex  ^self currentPage * self batchSize min: self items sizeencodeOn: arg1  values do: [:arg2 |  arg1 print: arg2 ] separatedBy: [ arg1 print: separator ]keys  ^Array streamContents: [:arg1 |  delegates do: [:arg2 |  arg1 nextPutAll: arg2 keys ] ]handleDefault: arg1 withKey: arg2  self handle: arg1 registering: self newSession at: arg2setUp  super setUp.  mutex := WAMutex newqueryFields  ^queryFields ifNil: [ queryFields := WARequestFields new ]audio  ^self brush: WAAudioTag newtestAddToPathWithLeadingAndTrailingSlash  url addToPath: '/files/WAStandardFiles/'.  self assert: url path size = 2.  self assert: url path first = 'files'.  self assert: url path second = 'WAStandardFiles'.  self assert: url greaseString = '/files/WAStandardFiles/'renderMonth  | tmp1 |  tmp1 := canvas select     id: self id;     list: (1 to: 12);     selected: month;     yourself.  self addMonthCallbackToBrush: tmp1.  tmp1 labels: [:arg1 |  Date nameOfMonth: arg1 ]scheme  ^scheme ifNil: [ 'http' ]isRoot  ^self parent isNilinitialize  super initialize.  self     name: 'Stop';     description: 'Stop the selected adaptor'image  ^SmalltalkImage currentinitialize  super initialize.  tasks := OrderedCollection new.  selection := WAValueHolder new.  tasks add: WADelegationTask newbidirectional  ^self tag: 'bdi'testInitialCount  | tmp1 |  self workAroundPharo3Bug.  tmp1 := GRPlatform current newReducedConflictCounter.  self assert: tmp1 value equals: 0.  tmp1 increment.  self assert: tmp1 value equals: 1radioButton  ^canvas radioButton group: selfpriority  ^-5hasLocalValueForAttribute: arg1  ^self configuration hasExpressionAt: arg1 keytestNext  self assert: consumer next = 'tweets'.  self assert: consumer next = 'kentbeck'.  self should: [ consumer next ] raise: ErrorradioButton  ^self brush: WARadioButtonTag newhandleFiltered: arg1  | tmp1 |  tmp1 := self exceptionHandler context: arg1.  tmp1 handleExceptionsDuring: [ WACurrentExceptionHandler use: tmp1 during: [ super handleFiltered: arg1 ] ]closeTag: arg1  indentLevel := indentLevel - 1.  indentCloseTags removeLast ifTrue: [ self indent ].  self nextPutAll: '</'.  html span     class: 'wa-tag';     with: arg1.  self nextPut: $>dispatch: arg1 to: arg2 key: arg3  self trackingStrategy addKey: arg3 toContext: arg1.  arg2 handle: arg1style  ^'.wacanvastabletest table {	border-collapse: collapse;	border:1px solid black;	margin:0px auto; /* center */}.wacanvastabletest caption {	margin:0px auto; /* center */}.wacanvastabletest caption {	font-weight: bold;	padding: 0.5em 0 1em 0;}.wacanvastabletest td, .wacanvastabletest th {	padding: 3px;	border:1px solid black;}'initialize  super initialize.  configuration := self defaultConfigurationinitializeRequestor: arg1  super initializeRequestor: arg1.  filter := self session filters detect: [:arg2 |  arg2 isKindOf: WATimingToolFilter ] ifNone: [ self session addFilter: WATimingToolFilter new ]date: arg1  date contents: arg1.  monthIndex contents: arg1 monthIndex.  year contents: arg1 yeartestCopy  | tmp1 tmp2 |  tmp1 := (WACookie key: 'meta' value: 'phor')     ports: #(80) asOrderedCollection;     yourself.  tmp2 := tmp1 copy.  tmp2 ports at: 1 put: 443.  self assert: tmp1 ports size = 1.  self assert: tmp1 ports first = 80.  self assert: tmp2 ports size = 1.  self assert: tmp2 ports first = 443tag  ^'fieldset'value: arg1  value := arg1handlerClass  ^WAForbiddenFileHandlerListingdocument: arg1  self document: arg1 mimeType: nilattributeAt: arg1  ^self attributes at: arg1initialize  super initialize.  closed := falsevalue  ^valuechildren  ^childrenBlock isNil ifTrue: [ super children ] ifFalse: [ super children , childrenBlock value ]callback: arg1  arg1 argumentCount > 0 ifTrue: [ GRInvalidArgumentCount signal: 'Submit buttons expect a niladic callback.' ].  self name: (self storeCallback: (WAActionCallback on: arg1))setUp  super setUp.  manager := WAServerManager new.  adaptor := WATestServerAdaptor manager: manager.  adaptor port: 12345.  adaptor running.  self assert: adaptor isRunning.  self assert: (manager adaptors includes: adaptor)clearSelection  dateSelectionStart := dateSelectionEnd := rowSelectionStart := rowSelectionEnd := nilrendererClass  ^WAHtmlCanvasrenderActionsForAttribute: arg1 on: arg2  arg2 tableData: [ | tmp1 |        tmp1 := false.        self inheritedValueAndSourceAt: arg1 key do: [:arg3 :arg4 |  tmp1 ifFalse: [ (self hasLocalValueForAttribute: arg1) ifTrue: [ arg2 anchor                             onClick: 'return submitForm(this)';                             title: 'revert to ' , arg3 printString , ', overriden from ' , arg4 name;                             callback: [ self clearAttribute: arg1 ];                             with: 'Revert' ] ifFalse: [ arg2 anchor                             onClick: 'return submitForm(this)';                             title: 'inherited from ' , arg4 name;                             callback: [ self overrideAttribute: arg1 ];                             with: 'Override'.                          (self isCollectionAttribute: arg1) ifTrue: [ arg2 text: ' '.                                arg2 anchor                                   onClick: 'return submitForm(this)';                                   callback: [ self modifyCollectionAttribute: arg1 ];                                   with: 'Modify' ] ].                    tmp1 := true ] ].        tmp1 ifFalse: [ (self hasLocalValueForAttribute: arg1) ifTrue: [ self canClear ifTrue: [ arg2 anchor                             onClick: 'return submitForm(this)';                             callback: [ self clearAttribute: arg1 ];                             with: 'Clear' ] ] ifFalse: [ arg1 default isNil ifTrue: [ arg2 span                             class: 'unspecified';                             with: '(unspecified)' ] ifFalse: [ arg2 anchor                             onClick: 'return submitForm(this)';                             title: 'inherited from attribute default';                             callback: [ self overrideAttribute: arg1 ];                             with: 'Override'.                          (self isCollectionAttribute: arg1) ifTrue: [ arg2 text: ' '.                                arg2 anchor                                   onClick: 'return submitForm(this)';                                   callback: [ self modifyCollectionAttribute: arg1 ];                                   with: 'Modify' ] ] ] ] ]encodeOn: arg1  self keysAndValuesDo: [:arg2 :arg3 |  arg3 == false ifFalse: [ arg1                 nextPut: Character space;                 nextPutAll: arg2.              arg3 == true ifFalse: [ arg1                       nextPutAll: '="';                       print: arg3;                       nextPut: $" ] ] ]asSpecCommand  ^super asSpecCommand     iconName: #delete;     yourselfdocument: arg1 during: arg2  | tmp1 |  tmp1 := document.  [ document := arg1.  arg2 value ] ensure: [ document := tmp1 ]parent: arg1  parent := arg1testSimpleCallCCWithPossibleArgument  | tmp1 tmp2 |  tmp1 := self callcc: [:arg1 |  tmp2 := arg1.        false ].  tmp1 ifFalse: [ tmp2 valueWithPossibleArguments: (Array with: true) ].  self assert: tmp1initialize  super initialize.  bufferedStream := GRPlatform current readWriteCharacterStream.  committed := false.  closed := falseobject: arg1  self object with: arg1updateUrl: arg1  stopping  status := #stoppingdecrease  count := count - 1renderingSelectorFor: arg1  ^('render' , arg1 capitalized , 'On:') asSymbolcontents: arg1  self document: arg1urlFor: arg1  ^self library urlForFile: arg1with: arg1  url isNil ifFalse: [ self attributes at: 'href' put: url ].  super with: arg1with: arg1  canvas nest: arg1.  closed := trueauthenticateWith: arg1 during: arg2  self filterWith: (WAAuthenticationFilter new           authenticator: arg1;           yourself) during: arg2rendererClass  ^WAHtmlCanvascreateCodec  ^GRCodec forEncoding: 'utf-8'renderContentOn: arg1  | tmp1 tmp2 |  arg1 form     onSubmit: (arg1 javascript return: false);     with: [ (tmp2 := arg1 textInput)           value: self serverUrl greaseString;           callback: [:arg2 |  tmp1 := WAUrl absolute: arg2 ].        self serverUrl isNil ifTrue: [ tmp2                 value: 'http://localhost:8080/';                 class: 'sampleValue';                 script: (arg1 jQuery this onFocus: (arg1 jQuery this                             value: '';                             removeClass: 'sampleValue';                             unbind: 'focus')) ].        arg1 button           bePush;           onClick: ((arg1 jQuery: #confirm) load                 html: '';                 serializeForm;                 html: [:arg3 |  self renderTryingUrl: tmp1 on: arg3 ]);           with: 'Test' ].  arg1 div id: 'confirm'testRemoveDecoration  root     addDecoration: decoration1;     addDecoration: decoration2.  self assert: (root removeDecoration: decoration2) = decoration2.  self assert: root decorations size = 1.  self assert: root decorations first = decoration1.  root addDecoration: decoration2.  self assert: (root removeDecoration: decoration1) = decoration1.  self assert: root decorations size = 1.  self assert: root decorations first = decoration2.  self assert: (root removeDecoration: decoration1) isNil.  self assert: root decorations size = 1.  self assert: root decorations first = decoration2.  self assert: (root removeDecoration: decoration2) = decoration2.  self assert: root decorations isEmpty.  self assert: (root removeDecoration: decoration2) isNiltag  ^'canvas'title: arg1  self attributes at: 'title' put: arg1renderSaveImageOn: arg1  arg1 anchor     callback: [ self saveImage ];     with: 'Save Image'documentOpened: arg1  renderPreviousOn: arg1  self isOnFirstPage ifFalse: [ arg1 anchor           callback: [ self previousPage ];           with: '<<' ] ifTrue: [ arg1 text: '<<' ].  arg1 spacetestDecorations  self assert: root decorations isEmpty.  root show: child1.  self assert: root decorations size = 1.  root addDecoration: decoration1.  self assert: root decorations size = 2onUpdateRoot: arg1  updateRootBlock := arg1day  ^dayrequestContext  ^WACurrentRequestContext valuebreak  self subclassResponsibilitybeNext  self relationship: 'next'emailInput  ^self brush: WAEmailInputTag newsessionsDo: arg1  self handlersDo: arg1visitCollectionAttribute: arg1  | tmp1 tmp2 |  tmp1 := self configuration currentCollectionAt: arg1 key.  tmp1 isEmpty ifTrue: [ ^self html text: '(none)' ].  tmp2 := (tmp1 size min: 10) max: 2.  self html select     disabled;     size: tmp2;     title: 'Current';     labels: [:arg2 |  arg2 value greaseString , ' [' , arg2 key greaseString , ']' ];     list: tmp1readonly: arg1  self attributes at: 'readonly' put: arg1sizeOfObject: arg1  ^arg1 sizeInMemoryisApplication  ^falserenderContentOn: arg1  self renderEmailsOn: arg1.  self renderFormOn: arg1label  ^'<canvas>'actionUrl: arg1  actionUrl := arg1properties  ^properties ifNil: [ properties := GRSmallDictionary2 new ]open: arg1  self open: arg1 onAnswer: [:arg2 |   ]charSet: arg1  charSet := arg1testParseInvalid  self invalidExamples do: [:arg1 |  self should: [ WAUrl absolute: arg1 ] raise: WAInvalidUrlSyntaxError ]defaultFileHandler  ^WADispatcher new register: WAFileHandler new at: 'files'assertLines: arg1  super assertLines: (arg1 reject: [:arg2 |  arg2 beginsWithSubCollection: 'Content-Length' ])testEncodedLatin1Url  self assert: (String with: Character space with: (Character codePoint: 233) with: (Character codePoint: 228)) urlEncodedGives: '%20%C3%A9%C3%A4'testCopyRegistry  | tmp1 tmp2 tmp3 tmp4 tmp5 |  (handler isKindOf: WAApplication) ifTrue: [ ^self ].  tmp1 := WARequestHandler new.  tmp2 := handler register: tmp1.  tmp3 := handler copy.  self assert: (handler cache at: tmp2 ifAbsent: [ nil ]) = tmp1.  tmp4 := WARequestHandler new.  tmp5 := handler register: tmp4.  self assert: (handler cache at: tmp5 ifAbsent: [ nil ]) = tmp4.  self assert: (tmp3 cache at: tmp5 ifAbsent: [ nil ]) isNil.  tmp3 clear.  self assert: (handler cache at: tmp2 ifAbsent: [ nil ]) = tmp1renderContentOn: arg1  arg1 div     class: 'tool';     with: self report.  self message isNil ifFalse: [ arg1 preformatted: self message ]store: arg1  | tmp1 |  tmp1 := nextKey greaseString.  nextKey := nextKey + 1.  self at: tmp1 put: arg1.  ^tmp1datetime: arg1  self attributeAt: 'datetime' put: arg1stylesheet  ^self link     beStylesheet;     beCss;     yourselfrefreshAfter: arg1 location: arg2  self headerAt: 'Refresh' put: arg1 asSeconds greaseString , '; ' , arg2 greaseStringtestAddFilter  | tmp1 tmp2 |  tmp1 := WARequestFilter new.  tmp2 := WARequestFilter new.  self assert: (handler addFilter: tmp1) = tmp1.  self assert: (handler addFilter: tmp2) = tmp2.  self assert: handler filters size = 2.  self assert: handler filters first = tmp1.  self assert: handler filters last = tmp2handleFiltered: arg1  (self shouldTerminate: arg1) ifTrue: [ self terminate: arg1 ] ifFalse: [ mutex critical: [ super handleFiltered: arg1 ] ]delegate  ^delegatecomponent  ^component ifNil: [ component := WAWelcomeGettingStarted new ]submitButton: arg1  ^self submitButton with: arg1startDate: arg1  startDate := arg1.  self updateDatesCachewithLineBreaks: arg1  self with: [ canvas withLineBreaks: arg1 ]ancestorsDo: arg1 seen: arg2  self parents reverseDo: [:arg3 |  (arg2 includes: arg3) ifFalse: [ arg1 value: arg3.              arg2 add: arg3.              arg3 ancestorsDo: arg1 seen: arg2 ] ]testBasicNesting  self assert: [:arg1 |  arg1 div ] gives: '<div></div>'.  self assert: [:arg1 |  arg1 div: 1 ] gives: '<div>1</div>'.  self assert: [:arg1 |  arg1 div: 'foo' ] gives: '<div>foo</div>'selection: arg1  selection := arg1tableColumnGroup: arg1  self tableColumnGroup with: arg1externalStream  ^externalStreamtitle  ^'Operating System'handler  ^handlergroup: arg1  self name: arg1 key.  group := arg1configuration: arg1  configuration := arg1rootClasses  ^(WAComponent allSubclasses select: [:arg1 |  arg1 canBeRoot ]) asSortedCollection: [:arg2 :arg3 |  arg2 name <= arg3 name ]handlePrefetch: arg1  arg1 respond: [:arg2 |  arg2 forbidden ]renderExplanationOn: arg1  arg1 paragraph: 'This tests whether url encoding works. Just click on "Run Test"'macromanString  ^self asString: #(134 98 143 114 115 116 114 148 150 103 142)priority  ^900selectorsToInclude  ^#(developmentCss)renderContentOn: arg1  self maxPages = 0 ifTrue: [ ^self ].  arg1 div     class: 'batch';     with: [ self renderPreviousOn: arg1.        self renderPagesOn: arg1.        self renderNextOn: arg1 ]renderResetOn: arg1  arg1 heading level2 with: 'Reset'.  arg1 paragraph: 'Clicking the button should not submit the form and reset the value in "Input"'.  arg1 button     beReset;     with: 'Reset'media: arg1  self attributeAt: 'media' put: arg1callback: arg1  value := false.  callback := arg1.  super callback: [ value := true ]maximumSize  ^maximumSizesecondValue: arg1  secondValue := arg1beReset  type := 'reset'testLoadScript  self assert: [:arg1 |  arg1 document addLoadScript: (WAStubJsObject on: 'console.log("loaded")') ] gives: '<html><head><title></title></head><body onload="onLoad()"><script type="text/javascript">function onLoad(){console.log("loaded");};</script></body></html>'testAddFilterFirst  | tmp1 tmp2 tmp3 |  tmp1 := WARequestFilter new.  tmp2 := WARequestFilter new.  tmp3 := WARequestFilter new.  self assert: (handler addFilterFirst: tmp1) = tmp1.  self assert: (handler addFilterFirst: tmp2) = tmp2.  self assert: (handler addFilterFirst: tmp3) = tmp3.  self assert: handler filters size = 3.  self assert: handler filters first = tmp3.  self assert: handler filters last = tmp1= arg1  ^major = arg1 major and: [ minor = arg1 minor ]style  ^'form {	padding: 2px;	margin: 0;}form th {	text-align: left;	padding-right: 2em;}form textarea {	width: 100%;	height: 100px;	border: 1px solid #aaa;}'renderHours  | tmp1 |  tmp1 := canvas textInput     id: self id;     value: (GRNumberPrinter new           padding: $0;           digits: 2;           print: hours).  self addHoursCallbackToBrush: tmp1.  tmp1     attributeAt: 'size' put: 2;     attributeAt: 'maxlength' put: 2states  ^Array with: selfrenderOptional  self renderListItem: nil labelled: optionalLabelclear  self subclassResponsibilitycontents: arg1  self shouldNotImplementscriptGeneratorClass  ^WADefaultScriptGeneratortitle  ^self dispatcher class description , ' at ' , self dispatcher hierarchyPathStringmodifyCollectionAttribute: arg1  self configuration at: arg1 key addAll: #() removeAll: #()stream  self flush.  ^externalStreamcloseTag  self document closeTag: self tagnewStrategy  ^WACookieOnlySessionTrackingStrategy newtestTakeServerParametersFromRequestHttps  | tmp1 |  tmp1 := WARequest new     setHeaders: (Dictionary new           at: 'host' put: 'www.seaside.st';           at: 'base' put: 'foo/bar';           yourself);     yourself.  url takeServerParametersFromRequest: tmp1.  self assert: url greaseString = 'http://www.seaside.st/foo/bar'at: arg1 put: arg2  ^dictionary at: arg1 put: arg2requestHeadersFor: arg1  self shouldNotImplementrootBlock  ^rootBlock ifNil: [ rootBlock := [:arg1 |   ] ]editorClass  ^WABulkReapingCacheAttributeEditorpresenter  ^self properties at: #presenter ifAbsent: [ nil ]renderContentOn: arg1  arg1 script: self drawFunction.  arg1 canvas     id: 'tutorial';     width: 150;     height: 150.  arg1 script: 'drawShape()'canSelect: arg1  ^self selectBlock notNil and: [ self canSelectBlock isNil or: [ self canSelectBlock value: arg1 ] ]renderAcceptLanguageFor: arg1 on: arg2  arg2 definitionTerm: 'Accept-Language:'.  self renderQualifiedValues: arg1 acceptLanguage on: arg2on: arg1 of: arg2  self value: (self labelForSelector: arg1 of: arg2).  self callback: (GRDelayedSend receiver: arg2 selector: arg1)codec  ^codecaccept: arg1  arg1 visitAttribute: selfinspectorSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   inkscape:export-ydpi="90.000000"   inkscape:export-xdpi="90.000000"   inkscape:export-filename="/home/steven/edit-find-48.png"   sodipodi:docname="edit-find.svg"   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/actions"   inkscape:version="0.46"   sodipodi:version="0.32"   id="svg249"   height="48.000000px"   width="48.000000px"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective113" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient5031"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       inkscape:collect="always"       id="linearGradient5060">      <stop         style="stop-color:black;stop-opacity:1;"         offset="0"         id="stop5062" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5064" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient5029"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       id="linearGradient5048">      <stop         style="stop-color:black;stop-opacity:0;"         offset="0"         id="stop5050" />      <stop         id="stop5056"         offset="0.5"         style="stop-color:black;stop-opacity:1;" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5052" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient5027"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <linearGradient       inkscape:collect="always"       id="linearGradient4542">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop4544" />      <stop         style="stop-color:#000000;stop-opacity:0;"         offset="1"         id="stop4546" />    </linearGradient>    <linearGradient       id="linearGradient15662">      <stop         id="stop15664"         offset="0.0000000"         style="stop-color:#ffffff;stop-opacity:1.0000000;" />      <stop         id="stop15666"         offset="1.0000000"         style="stop-color:#f8f8f8;stop-opacity:1.0000000;" />    </linearGradient>    <radialGradient       id="aigrd3"       cx="20.8921"       cy="64.5679"       r="5.257"       fx="20.8921"       fy="64.5679"       gradientUnits="userSpaceOnUse">      <stop         offset="0"         style="stop-color:#F0F0F0"         id="stop15573" />      <stop         offset="1.0000000"         style="stop-color:#9a9a9a;stop-opacity:1.0000000;"         id="stop15575" />    </radialGradient>    <radialGradient       id="aigrd2"       cx="20.8921"       cy="114.5684"       r="5.256"       fx="20.8921"       fy="114.5684"       gradientUnits="userSpaceOnUse">      <stop         offset="0"         style="stop-color:#F0F0F0"         id="stop15566" />      <stop         offset="1.0000000"         style="stop-color:#9a9a9a;stop-opacity:1.0000000;"         id="stop15568" />    </radialGradient>    <linearGradient       id="linearGradient269">      <stop         id="stop270"         offset="0.0000000"         style="stop-color:#a3a3a3;stop-opacity:1.0000000;" />      <stop         id="stop271"         offset="1.0000000"         style="stop-color:#4c4c4c;stop-opacity:1.0000000;" />    </linearGradient>    <linearGradient       id="linearGradient259">      <stop         id="stop260"         offset="0.0000000"         style="stop-color:#fafafa;stop-opacity:1.0000000;" />      <stop         id="stop261"         offset="1.0000000"         style="stop-color:#bbbbbb;stop-opacity:1.0000000;" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient269"       id="radialGradient15656"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.968273,0.000000,0.000000,1.032767,3.353553,0.646447)"       cx="8.8244190"       cy="3.7561285"       fx="8.8244190"       fy="3.7561285"       r="37.751713" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient259"       id="radialGradient15658"       gradientUnits="userSpaceOnUse"       gradientTransform="scale(0.960493,1.041132)"       cx="33.966679"       cy="35.736916"       fx="33.966679"       fy="35.736916"       r="86.708450" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient15662"       id="radialGradient15668"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(0.968273,0.000000,0.000000,1.032767,3.353553,0.646447)"       cx="8.1435566"       cy="7.2678967"       fx="8.1435566"       fy="7.2678967"       r="38.158695" />    <radialGradient       r="5.256"       fy="114.5684"       fx="20.8921"       cy="114.5684"       cx="20.8921"       gradientTransform="matrix(0.229703,0.000000,0.000000,0.229703,4.613529,3.979808)"       gradientUnits="userSpaceOnUse"       id="radialGradient2283"       xlink:href="#aigrd2"       inkscape:collect="always" />    <radialGradient       r="5.257"       fy="64.5679"       fx="20.8921"       cy="64.5679"       cx="20.8921"       gradientTransform="matrix(0.229703,0.000000,0.000000,0.229703,4.613529,3.979808)"       gradientUnits="userSpaceOnUse"       id="radialGradient2285"       xlink:href="#aigrd3"       inkscape:collect="always" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4542"       id="radialGradient4548"       cx="24.306795"       cy="42.07798"       fx="24.306795"       fy="42.07798"       r="15.821514"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.284916,0.000000,30.08928)"       gradientUnits="userSpaceOnUse" />    <linearGradient       id="linearGradient4440">      <stop         id="stop4442"         offset="0"         style="stop-color:#7d7d7d;stop-opacity:1;" />      <stop         style="stop-color:#b1b1b1;stop-opacity:1.0000000;"         offset="0.50000000"         id="stop4448" />      <stop         id="stop4444"         offset="1.0000000"         style="stop-color:#686868;stop-opacity:1.0000000;" />    </linearGradient>    <linearGradient       id="linearGradient4454">      <stop         id="stop4456"         offset="0.0000000"         style="stop-color:#729fcf;stop-opacity:0.20784314;" />      <stop         id="stop4458"         offset="1.0000000"         style="stop-color:#729fcf;stop-opacity:0.67619050;" />    </linearGradient>    <linearGradient       id="linearGradient4467">      <stop         id="stop4469"         offset="0"         style="stop-color:#ffffff;stop-opacity:1;" />      <stop         id="stop4471"         offset="1.0000000"         style="stop-color:#ffffff;stop-opacity:0.24761905;" />    </linearGradient>    <linearGradient       id="linearGradient4477"       inkscape:collect="always">      <stop         id="stop4479"         offset="0"         style="stop-color:#000000;stop-opacity:1;" />      <stop         id="stop4481"         offset="1"         style="stop-color:#000000;stop-opacity:0;" />    </linearGradient>    <linearGradient       id="linearGradient2366">      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="0"         id="stop2368" />      <stop         id="stop2374"         offset="0.50000000"         style="stop-color:#ffffff;stop-opacity:0.21904762;" />      <stop         style="stop-color:#ffffff;stop-opacity:1.0000000;"         offset="1.0000000"         id="stop2370" />    </linearGradient>    <linearGradient       id="linearGradient2846">      <stop         style="stop-color:#8a8a8a;stop-opacity:1.0000000;"         offset="0.0000000"         id="stop2848" />      <stop         style="stop-color:#484848;stop-opacity:1.0000000;"         offset="1.0000000"         id="stop2850" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4477"       id="radialGradient1527"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.237968,-8.821068e-16,28.93278)"       cx="24.130018"       cy="37.967922"       fx="24.130018"       fy="37.967922"       r="16.528622" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2846"       id="linearGradient1529"       gradientUnits="userSpaceOnUse"       x1="27.366341"       y1="26.580296"       x2="31.335964"       y2="30.557772" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4440"       id="linearGradient1531"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.334593,0.000000,0.000000,1.291292,-6.973842,-7.460658)"       x1="30.656250"       y1="34.000000"       x2="33.218750"       y2="31.062500" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2366"       id="linearGradient1533"       gradientUnits="userSpaceOnUse"       x1="18.292673"       y1="13.602121"       x2="17.500893"       y2="25.743469" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4454"       id="radialGradient1537"       gradientUnits="userSpaceOnUse"       cx="18.240929"       cy="21.817987"       fx="18.240929"       fy="21.817987"       r="8.3085051" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4467"       id="radialGradient1539"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.592963,-7.746900e-24,-5.714443e-24,2.252104,-25.05975,-18.94100)"       cx="15.414371"       cy="13.078408"       fx="15.414371"       fy="13.078408"       r="6.6562500" />  </defs>  <sodipodi:namedview     inkscape:window-y="30"     inkscape:window-x="418"     inkscape:window-height="818"     inkscape:window-width="1016"     inkscape:document-units="px"     inkscape:grid-bbox="true"     showgrid="true"     inkscape:current-layer="layer6"     inkscape:cy="14.980943"     inkscape:cx="25.938708"     inkscape:zoom="1"     inkscape:pageshadow="2"     inkscape:pageopacity="0.0"     borderopacity="0.25490196"     bordercolor="#666666"     pagecolor="#ffffff"     id="base"     inkscape:showpageshadow="false" />  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:title>Edit Find</dc:title>        <dc:subject>          <rdf:Bag>            <rdf:li>edit</rdf:li>            <rdf:li>find</rdf:li>            <rdf:li>locate</rdf:li>            <rdf:li>search</rdf:li>          </rdf:Bag>        </dc:subject>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />        <dc:creator>          <cc:Agent>            <dc:title>Steven Garrity</dc:title>          </cc:Agent>        </dc:creator>        <dc:source />        <dc:contributor>          <cc:Agent>            <dc:title>Jakub Steiner</dc:title>          </cc:Agent>        </dc:contributor>      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     inkscape:groupmode="layer"     id="layer6"     inkscape:label="Shadow">    <g       style="display:inline"       id="g5022"       transform="matrix(2.165152e-2,0,0,1.485743e-2,43.0076,42.68539)">      <rect         y="-150.69685"         x="-1559.2523"         height="478.35718"         width="1339.6335"         id="rect4173"         style="opacity:0.40206185;color:black;fill:url(#linearGradient5027);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <path         sodipodi:nodetypes="cccc"         id="path5058"         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "         style="opacity:0.40206185;color:black;fill:url(#radialGradient5029);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <path         style="opacity:0.40206185;color:black;fill:url(#radialGradient5031);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "         id="path5018"         sodipodi:nodetypes="cccc" />    </g>  </g>  <g     style="display:inline"     inkscape:groupmode="layer"     inkscape:label="Base"     id="layer1">    <rect       style="color:#000000;fill:url(#radialGradient15658);fill-opacity:1.0000000;fill-rule:nonzero;stroke:url(#radialGradient15656);stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"       id="rect15391"       width="34.875000"       height="40.920494"       x="6.6035528"       y="3.6464462"       ry="1.1490486" />    <rect       style="color:#000000;fill:none;fill-opacity:1.0000000;fill-rule:nonzero;stroke:url(#radialGradient15668);stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"       id="rect15660"       width="32.775887"       height="38.946384"       x="7.6660538"       y="4.5839462"       ry="0.14904857"       rx="0.14904857" />    <g       transform="translate(0.646447,-3.798933e-2)"       id="g2270">      <g         id="g1440"         style="fill:#ffffff;fill-opacity:1.0000000;fill-rule:nonzero;stroke:#000000;stroke-miterlimit:4.0000000"         transform="matrix(0.229703,0.000000,0.000000,0.229703,4.967081,4.244972)">        <radialGradient           id="radialGradient1442"           cx="20.892099"           cy="114.56840"           r="5.2560000"           fx="20.892099"           fy="114.56840"           gradientUnits="userSpaceOnUse">          <stop             offset="0"             style="stop-color:#F0F0F0"             id="stop1444" />          <stop             offset="1"             style="stop-color:#474747"             id="stop1446" />        </radialGradient>        <path           style="stroke:none"           d="M 23.428000,113.07000 C 23.428000,115.04300 21.828000,116.64200 19.855000,116.64200 C 17.881000,116.64200 16.282000,115.04200 16.282000,113.07000 C 16.282000,111.09600 17.882000,109.49700 19.855000,109.49700 C 21.828000,109.49700 23.428000,111.09700 23.428000,113.07000 z "           id="path1448" />        <radialGradient           id="radialGradient1450"           cx="20.892099"           cy="64.567902"           r="5.2570000"           fx="20.892099"           fy="64.567902"           gradientUnits="userSpaceOnUse">          <stop             offset="0"             style="stop-color:#F0F0F0"             id="stop1452" />          <stop             offset="1"             style="stop-color:#474747"             id="stop1454" />        </radialGradient>        <path           style="stroke:none"           d="M 23.428000,63.070000 C 23.428000,65.043000 21.828000,66.643000 19.855000,66.643000 C 17.881000,66.643000 16.282000,65.043000 16.282000,63.070000 C 16.282000,61.096000 17.882000,59.497000 19.855000,59.497000 C 21.828000,59.497000 23.428000,61.097000 23.428000,63.070000 z "           id="path1456" />      </g>      <path         style="fill:url(#radialGradient2283);fill-rule:nonzero;stroke:none;stroke-miterlimit:4.0000000"         d="M 9.9950109,29.952326 C 9.9950109,30.405530 9.6274861,30.772825 9.1742821,30.772825 C 8.7208483,30.772825 8.3535532,30.405301 8.3535532,29.952326 C 8.3535532,29.498892 8.7210780,29.131597 9.1742821,29.131597 C 9.6274861,29.131597 9.9950109,29.499122 9.9950109,29.952326 z "         id="path15570" />      <path         style="fill:url(#radialGradient2285);fill-rule:nonzero;stroke:none;stroke-miterlimit:4.0000000"         d="M 9.9950109,18.467176 C 9.9950109,18.920380 9.6274861,19.287905 9.1742821,19.287905 C 8.7208483,19.287905 8.3535532,18.920380 8.3535532,18.467176 C 8.3535532,18.013742 8.7210780,17.646447 9.1742821,17.646447 C 9.6274861,17.646447 9.9950109,18.013972 9.9950109,18.467176 z "         id="path15577" />    </g>    <path       style="fill:none;fill-opacity:0.75000000;fill-rule:evenodd;stroke:#000000;stroke-width:0.98855311;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4.0000000;stroke-opacity:0.017543854"       d="M 11.505723,5.4942766 L 11.505723,43.400869"       id="path15672"       sodipodi:nodetypes="cc" />    <path       style="fill:none;fill-opacity:0.75000000;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.0000000;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4.0000000;stroke-opacity:0.20467831"       d="M 12.500000,5.0205154 L 12.500000,43.038228"       id="path15674"       sodipodi:nodetypes="cc" />  </g>  <g     inkscape:groupmode="layer"     id="layer5"     inkscape:label="Magnifying Glass"     style="display:inline">    <g       transform="matrix(0.909091,0.000000,0.000000,1.000000,2.363628,0.000000)"       id="g2253">      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15686"         width="22.000004"         height="1.0000000"         x="15.000002"         y="9.0000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15688"         width="22.000004"         height="1.0000000"         x="15.000002"         y="11.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15690"         width="22.000004"         height="1.0000000"         x="15.000002"         y="13.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15692"         width="22.000004"         height="1.0000000"         x="15.000002"         y="15.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15694"         width="22.000004"         height="1.0000000"         x="15.000002"         y="17.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15696"         width="22.000004"         height="1.0000000"         x="15.000002"         y="19.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15698"         width="22.000004"         height="1.0000000"         x="15.000002"         y="21.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15700"         width="22.000004"         height="1.0000000"         x="15.000002"         y="23.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15732"         width="9.9000053"         height="1.0000000"         x="14.999992"         y="25.000000"         rx="0.068204239"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15736"         width="22.000004"         height="1.0000000"         x="14.999992"         y="29.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15738"         width="22.000004"         height="1.0000000"         x="14.999992"         y="31.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15740"         width="22.000004"         height="1.0000000"         x="14.999992"         y="33.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15742"         width="22.000004"         height="1.0000000"         x="14.999992"         y="35.000000"         rx="0.15156493"         ry="0.065390877" />      <rect         style="color:#000000;fill:#9b9b9b;fill-opacity:0.54970759;fill-rule:nonzero;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4.0000000;stroke-dashoffset:0.0000000;stroke-opacity:0.081871338;marker:none;marker-start:none;marker-mid:none;marker-end:none;visibility:visible;display:block;overflow:visible"         id="rect15744"         width="15.400014"         height="1.0000000"         x="14.999992"         y="37.000000"         rx="0.10609552"         ry="0.065390877" />    </g>    <g       id="g1772"       transform="matrix(0.665377,0.000000,0.000000,0.665377,15.98645,17.90835)">      <path         sodipodi:type="arc"         style="opacity:0.17112298;color:#000000;fill:url(#radialGradient1527);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"         id="path4475"         sodipodi:cx="24.130018"         sodipodi:cy="37.967922"         sodipodi:rx="16.528622"         sodipodi:ry="3.9332814"         d="M 40.658640 37.967922 A 16.528622 3.9332814 0 1 1  7.6013966,37.967922 A 16.528622 3.9332814 0 1 1  40.658640 37.967922 z"         transform="matrix(1.446431,0.000000,0.000000,1.519990,-10.97453,-17.75168)" />      <path         sodipodi:nodetypes="csscccscccscczzzz"         id="path2844"         d="M 18.627569,3.1435548 C 10.488439,3.1435548 3.8827682,9.7492259 3.8827682,17.888356 C 3.8827682,26.027486 10.488439,32.633158 18.627569,32.633158 C 22.107124,32.633158 25.178570,31.248765 27.701292,29.230511 C 27.495915,30.237392 27.623257,31.265879 28.457436,31.990436 L 39.421520,41.517846 C 40.654936,42.589175 42.508982,42.448806 43.580310,41.215389 C 44.651638,39.981971 44.511269,38.127927 43.277853,37.056599 L 32.313769,27.529188 C 31.642242,26.945909 30.820891,26.773219 30.007531,26.886466 C 31.994231,24.374044 33.372370,21.337663 33.372370,17.888356 C 33.372370,9.7492259 26.766699,3.1435548 18.627569,3.1435548 z M 18.551954,4.3697381 C 26.191413,4.3697381 31.843729,9.1586886 31.843729,17.661513 C 31.843729,26.336626 26.027039,30.953288 18.551954,30.953288 C 11.249005,30.953288 5.2601806,25.475196 5.2601806,17.661513 C 5.2601806,9.6774061 11.084819,4.3697380 18.551954,4.3697381 z "         style="opacity:1.0000000;color:#000000;fill:#dcdcdc;fill-opacity:1.0000000;fill-rule:evenodd;stroke:url(#linearGradient1529);stroke-width:3.0058157;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible" />      <path         style="opacity:1.0000000;color:#000000;fill:#dcdcdc;fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:1.0000004;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"         d="M 18.602905,3.0803551 C 10.437465,3.0803551 3.8104408,9.7073791 3.8104408,17.872819 C 3.8104408,26.038259 10.437465,32.665283 18.602905,32.665283 C 22.093708,32.665283 25.175082,31.276416 27.705960,29.251638 C 27.499919,30.261774 27.627672,31.293585 28.464547,32.020484 L 39.464073,41.578691 C 40.701476,42.653483 42.561515,42.512661 43.636306,41.275256 C 44.711097,40.037852 44.570274,38.177814 43.332871,37.103023 L 32.333346,27.544815 C 31.659648,26.959651 30.835642,26.786402 30.019653,26.900016 C 32.012775,24.379472 33.395369,21.333276 33.395369,17.872819 C 33.395369,9.7073791 26.768345,3.0803551 18.602905,3.0803551 z M 18.527046,6.2664243 C 24.808154,6.2664245 29.905864,11.364135 29.905864,17.645243 C 29.905864,23.926351 24.808154,29.024061 18.527046,29.024061 C 12.245938,29.024061 7.1482276,23.926351 7.1482276,17.645243 C 7.1482278,11.364135 12.245938,6.2664243 18.527046,6.2664243 z "         id="path4430" />      <path         style="opacity:1.0000000;color:#000000;fill:url(#linearGradient1531);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"         d="M 39.507004,41.577690 C 39.028332,39.304503 40.904334,36.766268 43.091057,36.789315 C 43.091057,36.789315 32.330690,27.531204 32.330690,27.531204 C 29.385899,27.474498 28.061188,29.803820 28.553876,32.131126 L 39.507004,41.577690 z "         id="path4438"         sodipodi:nodetypes="ccccc" />      <path         sodipodi:type="arc"         style="opacity:1.0000000;color:#000000;fill:none;fill-opacity:1.0000000;fill-rule:evenodd;stroke:url(#linearGradient1533);stroke-width:1.2064340;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"         id="path4450"         sodipodi:cx="17.500893"         sodipodi:cy="18.920233"         sodipodi:rx="11.048544"         sodipodi:ry="11.048544"         d="M 28.549437 18.920233 A 11.048544 11.048544 0 1 1  6.4523487,18.920233 A 11.048544 11.048544 0 1 1  28.549437 18.920233 z"         transform="matrix(1.245743,0.000000,0.000000,1.245743,-3.425346,-6.177033)" />      <rect         style="opacity:0.43315509;color:#000000;fill:none;fill-opacity:1.0000000;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.5029539;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"         id="rect4495"         width="19.048439"         height="4.4404783"         x="40.373337"         y="0.14086054"         rx="3.2112026"         ry="2.8373930"         transform="matrix(0.752986,0.658037,-0.648902,0.760872,0.000000,0.000000)" />      <path         sodipodi:type="arc"         style="color:#000000;fill:url(#radialGradient1537);fill-opacity:1.0000000;fill-rule:evenodd;stroke:#3063a3;stroke-width:1.0745695;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible"         id="path4452"         sodipodi:cx="17.589281"         sodipodi:cy="18.478292"         sodipodi:rx="8.3085051"         sodipodi:ry="8.3085051"         d="M 25.897786 18.478292 A 8.3085051 8.3085051 0 1 1  9.2807760,18.478292 A 8.3085051 8.3085051 0 1 1  25.897786 18.478292 z"         transform="matrix(1.398614,0.000000,0.000000,1.398614,-6.224338,-8.298958)" />      <path         style="opacity:0.83422458;color:#000000;fill:url(#radialGradient1539);fill-opacity:1.0000000;fill-rule:evenodd;stroke:none;stroke-width:1.0000000;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:10.000000;stroke-dasharray:none;stroke-dashoffset:0.0000000;stroke-opacity:1.0000000;visibility:visible;display:inline;overflow:visible"         d="M 18.156915,7.3966938 C 12.949325,7.3966938 8.7323681,11.613651 8.7323681,16.821241 C 8.7323681,18.325216 9.1526753,19.709014 9.7795400,20.971144 C 11.031920,21.432757 12.362297,21.746827 13.774307,21.746827 C 19.945262,21.746827 24.873589,16.885190 25.254413,10.809698 C 23.523449,8.7641668 21.044374,7.3966938 18.156915,7.3966938 z "         id="path4462" />    </g>  </g></svg>'renderFieldForSelector: arg1 on: arg2  | tmp1 |  tmp1 := self renderingSelectorFor: arg1.  (self respondsTo: tmp1) ifTrue: [ self perform: tmp1 with: arg2 ] ifFalse: [ self renderDefaultFieldForSelector: arg1 on: arg2 ]openTag: arg1 attributes: arg2 closed: arg3  self indent.  self nextPut: $<.  html span     class: 'wa-tag';     with: arg1.  self attributes: arg2.  arg3 ifTrue: [ self nextPut: $/ ].  self nextPut: $>.  arg3 ifFalse: [ indentLevel := indentLevel + 1 ].  indentCloseTags     removeLast;     addLast: true;     addLast: arg3testCreationWithNew  | tmp1 |  tmp1 := WAHttpVersion new.  self assert: tmp1 major = 1.  self assert: tmp1 minor = 1profilerSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   inkscape:export-ydpi="90.000000"   inkscape:export-xdpi="90.000000"   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"   width="48px"   height="48px"   id="svg11300"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/tigert/cvs/freedesktop.org/tango-icon-theme/scalable/actions"   sodipodi:docname="appointment-new.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective59" />    <linearGradient       inkscape:collect="always"       id="linearGradient5204">      <stop         style="stop-color:#c4a000;stop-opacity:1;"         offset="0"         id="stop5206" />      <stop         style="stop-color:#c4a000;stop-opacity:0;"         offset="1"         id="stop5208" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient5196">      <stop         style="stop-color:#c4a000;stop-opacity:1;"         offset="0"         id="stop5198" />      <stop         style="stop-color:#c4a000;stop-opacity:0;"         offset="1"         id="stop5200" />    </linearGradient>    <linearGradient       id="linearGradient12512">      <stop         style="stop-color:#ffffff;stop-opacity:1.0000000;"         offset="0.0000000"         id="stop12513" />      <stop         style="stop-color:#fff520;stop-opacity:0.89108908;"         offset="0.50000000"         id="stop12517" />      <stop         style="stop-color:#fff300;stop-opacity:0.0000000;"         offset="1.0000000"         id="stop12514" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient12512"       id="radialGradient278"       gradientUnits="userSpaceOnUse"       cx="55.000000"       cy="125.00000"       fx="55.000000"       fy="125.00000"       r="14.375000" />    <linearGradient       id="linearGradient10653">      <stop         style="stop-color:#f3f4ff;stop-opacity:1.0000000;"         offset="0.0000000"         id="stop10655" />      <stop         style="stop-color:#9193af;stop-opacity:1.0000000;"         offset="1.0000000"         id="stop10657" />    </linearGradient>    <linearGradient       id="linearGradient42174">      <stop         style="stop-color:#a0a0a0;stop-opacity:1.0000000;"         offset="0.0000000"         id="stop42176" />      <stop         style="stop-color:#ffffff;stop-opacity:1.0000000;"         offset="1.0000000"         id="stop42178" />    </linearGradient>    <linearGradient       id="linearGradient2145">      <stop         style="stop-color:#fffffd;stop-opacity:1.0000000;"         offset="0.0000000"         id="stop2147" />      <stop         style="stop-color:#cbcbc9;stop-opacity:1.0000000;"         offset="1.0000000"         id="stop2149" />    </linearGradient>    <linearGradient       id="linearGradient37935">      <stop         id="stop37937"         offset="0.0000000"         style="stop-color:#9497b3;stop-opacity:1.0000000;" />      <stop         id="stop37939"         offset="1.0000000"         style="stop-color:#4c4059;stop-opacity:1.0000000;" />    </linearGradient>    <linearGradient       id="linearGradient2152">      <stop         id="stop2154"         offset="0.0000000"         style="stop-color:#9aa29a;stop-opacity:1.0000000;" />      <stop         id="stop2156"         offset="1.0000000"         style="stop-color:#b5beb5;stop-opacity:1.0000000;" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient3816">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop3818" />      <stop         style="stop-color:#000000;stop-opacity:0;"         offset="1"         id="stop3820" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3816"       id="radialGradient3822"       cx="31.112698"       cy="19.008621"       fx="31.112698"       fy="19.008621"       r="8.6620579"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient2152"       id="linearGradient4307"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(3.123841,0.000000,0.000000,0.969691,-31.88758,-19.59492)"       x1="8.9156475"       y1="37.197018"       x2="9.8855033"       y2="52.090678" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient10653"       id="radialGradient4309"       gradientUnits="userSpaceOnUse"       cx="11.329200"       cy="10.583970"       fx="11.329200"       fy="10.583970"       r="15.532059" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient2145"       id="radialGradient4311"       gradientUnits="userSpaceOnUse"       cx="11.901996"       cy="10.045444"       fx="11.901996"       fy="10.045444"       r="29.292715" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient42174"       id="linearGradient4313"       gradientUnits="userSpaceOnUse"       x1="6.3422160"       y1="7.7893324"       x2="22.218424"       y2="25.884274" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5196"       id="radialGradient5202"       cx="23.375"       cy="10.972863"       fx="23.375"       fy="10.972863"       r="3.3478092"       gradientTransform="matrix(3.630420,1.654030e-15,-1.608743e-15,3.742066,-61.48607,-29.18618)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5204"       id="linearGradient5210"       x1="19.667364"       y1="4.2570662"       x2="20.329933"       y2="5.2845874"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient37935"       id="radialGradient5212"       gradientUnits="userSpaceOnUse"       cx="8.7468252"       cy="6.8283234"       fx="8.7468252"       fy="6.8283234"       r="29.889715" />  </defs>  <sodipodi:namedview     stroke="#c4a000"     fill="#babdb6"     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="0.25490196"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="11.313708"     inkscape:cx="13.2248"     inkscape:cy="25.106052"     inkscape:current-layer="layer1"     showgrid="false"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:showpageshadow="false"     inkscape:window-width="833"     inkscape:window-height="772"     inkscape:window-x="305"     inkscape:window-y="76" />  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:creator>          <cc:Agent>            <dc:title>Jakub Steiner</dc:title>          </cc:Agent>        </dc:creator>        <dc:source>http://jimmac.musichall.cz</dc:source>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />        <dc:title>New Appointment</dc:title>        <dc:subject>          <rdf:Bag>            <rdf:li>appointment</rdf:li>            <rdf:li>new</rdf:li>            <rdf:li>meeting</rdf:li>            <rdf:li>rvsp</rdf:li>          </rdf:Bag>        </dc:subject>      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     id="layer1"     inkscape:label="Layer 1"     inkscape:groupmode="layer">    <path       d="M 39.774755 19.008621 A 8.6620579 8.6620579 0 1 1  22.45064,19.008621 A 8.6620579 8.6620579 0 1 1  39.774755 19.008621 z"       sodipodi:ry="8.6620579"       sodipodi:rx="8.6620579"       sodipodi:cy="19.008621"       sodipodi:cx="31.112698"       id="path4318"       style="opacity:1;color:#000000;fill:url(#radialGradient3822);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc"       transform="matrix(2.563158,0.000000,0.000000,1.219602,-55.98414,14.04144)" />    <path       sodipodi:nodetypes="cccc"       id="path14341"       d="M 18.587591,1.403729 L 4.226755,18.096665 L 5.4854717,19.339844 L 18.587591,1.403729 z "       style="color:#000000;fill:url(#linearGradient4307);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="cccc"       id="path18921"       d="M 18.467176,1.3138035 L 5.6605716,19.072612 L 7.4900985,20.687913 L 18.467176,1.3138035 z "       style="fill:#fefefe;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1" />    <path       transform="matrix(1.431529,0.000000,0.000000,1.431529,0.569459,-1.654618)"       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"       sodipodi:ry="14.910714"       sodipodi:rx="14.910714"       sodipodi:cy="16.910715"       sodipodi:cx="16.25"       id="path27786"       style="fill:url(#radialGradient5212);fill-opacity:1;fill-rule:evenodd;stroke:#605773;stroke-width:0.69855404;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"       sodipodi:type="arc" />    <path       transform="matrix(1.163838,0.000000,0.000000,1.163838,4.824801,2.777556)"       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"       sodipodi:ry="14.910714"       sodipodi:rx="14.910714"       sodipodi:cy="16.910715"       sodipodi:cx="16.25"       id="path35549"       style="fill:url(#radialGradient4311);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient4313);stroke-width:0.71139598;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"       sodipodi:type="arc" />    <path       sodipodi:type="arc"       style="opacity:1;color:#000000;fill:url(#radialGradient5202);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient5210);stroke-width:0.56498736;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="path4120"       sodipodi:cx="23.375"       sodipodi:cy="11.875"       sodipodi:rx="8.5"       sodipodi:ry="8.5"       d="M 16.679382,6.6387137 A 8.5,8.5 0 0 1 23.332691,3.3751053 L 23.375,11.875 z"       transform="matrix(1.769951,0.000000,0.000000,1.769951,-17.02424,1.610741)"       sodipodi:start="3.8052902"       sodipodi:end="4.7074114" />    <path       transform="matrix(2.073295,0.000000,0.000000,2.073295,-7.310224,-13.13682)"       d="M 16.40625 17.28125 A 1.21875 1.21875 0 1 1  13.96875,17.28125 A 1.21875 1.21875 0 1 1  16.40625 17.28125 z"       sodipodi:ry="1.21875"       sodipodi:rx="1.21875"       sodipodi:cy="17.28125"       sodipodi:cx="15.1875"       id="path34778"       style="fill:#f3f3f3;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.48232403;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;stroke-dasharray:none"       sodipodi:type="arc" />    <path       id="path35559"       d="M 22.176614,20.718014 L 13.155702,13.140282"       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />    <path       id="path35561"       d="M 19.408614,29.776506 L 22.368655,25.283228"       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"       sodipodi:nodetypes="cc" />    <path       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,-12.40939)"       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"       sodipodi:ry="0.61871845"       sodipodi:rx="0.61871845"       sodipodi:cy="7.6932044"       sodipodi:cx="16.705399"       id="path35563"       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"       sodipodi:type="arc" />    <path       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,14.80922)"       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"       sodipodi:ry="0.61871845"       sodipodi:rx="0.61871845"       sodipodi:cy="7.6932044"       sodipodi:cx="16.705399"       id="path35565"       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"       sodipodi:type="arc" />    <path       transform="matrix(2.749493,0.000000,0.000000,2.749493,-35.91004,1.199890)"       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"       sodipodi:ry="0.61871845"       sodipodi:rx="0.61871845"       sodipodi:cy="7.6932044"       sodipodi:cx="16.705399"       id="path35567"       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"       sodipodi:type="arc" />    <path       transform="matrix(2.749493,0.000000,0.000000,2.749493,-8.691448,1.199890)"       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"       sodipodi:ry="0.61871845"       sodipodi:rx="0.61871845"       sodipodi:cy="7.6932044"       sodipodi:cx="16.705399"       id="path35569"       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"       sodipodi:type="arc" />    <path       sodipodi:type="arc"       style="fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#radialGradient4309);stroke-width:0.73656511;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"       id="path10651"       sodipodi:cx="16.25"       sodipodi:cy="16.910715"       sodipodi:rx="14.910714"       sodipodi:ry="14.910714"       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"       transform="matrix(1.357654,0.000000,0.000000,1.357654,1.769896,-0.493735)" />    <path       sodipodi:type="arc"       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"       id="path12511"       sodipodi:cx="55"       sodipodi:cy="125"       sodipodi:rx="14.375"       sodipodi:ry="14.375"       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"       transform="matrix(0.611127,0.000000,0.000000,0.611127,5.544052,-66.92818)"       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"       inkscape:export-xdpi="33.852203"       inkscape:export-ydpi="33.852203" />  </g></svg>'renderContentOn: arg1  self renderUploadOn: arg1.  self renderFilesOn: arg1testKeyFromQueryField  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp1 request uri addField: strategy keyField value: '4e232e46-003d2-04324-d3ac8fa8'.  tmp2 := strategy keyFromContext: tmp1.  self assert: tmp2 = '4e232e46-003d2-04324-d3ac8fa8'controls: arg1  self attributeAt: 'controls' put: arg1canSelectBlock: arg1  canSelectBlock := arg1states  ^Array with: selfinitializeFilters  super initializeFilters.  self addFilter: WASessionCookieProtectionFilter newrenderTryingUrl: arg1 on: arg2  | tmp1 |  tmp1 := arg1 copy addAllToPath: (WAAdmin defaultDispatcher url relativeTo: self requestContext handler url).  arg2 paragraph: 'Trying ' , tmp1 greaseString , ' ...'.  arg2 script: (arg2 jQuery ajax           script: [:arg3 |  arg3 << (arg3 jQuery: '#confirm') append: [:arg4 |  self renderSuccessUrl: arg1 on: arg4 ] ];           optionAt: 'url' put: tmp1;           yourself)children  ^Array with: self reportparameters  parameters isNil ifTrue: [ parameters := GRSmallDictionary2 new ].  ^parametersvalues  ^Array streamContents: [:arg1 |  delegates do: [:arg2 |  arg1 nextPutAll: arg2 values ] ]callback: arg1  arg1 argumentCount > 0 ifTrue: [ GRInvalidArgumentCount signal: 'Iframes expect a niladic callback.' ].  self url addField: (self storeCallback: (WAActionCallback on: arg1))initialize  super initialize.  selectedConfiguration := WAValueHolder newadd: arg1 label: arg2  components add: arg2 -> arg1cancelButton: arg1  ^self cancelButton with: arg1addMonthCallbackToBrush: arg1  self hasCallback ifFalse: [ ^self ].  arg1 callback: [:arg2 |  self month: arg2 ]heading  ^self brush: WAHeadingTag newattributeAt: arg1 ifAbsent: arg2  ^self attributes at: arg1 ifAbsent: arg2testNoKey  | tmp1 tmp2 |  registry := self createRegistry.  tmp2 := self createRequestContextWithFieldKey: nil cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDefault: tmp1terminateOwner  | tmp1 |  tmp1 := self owner.  tmp1 isNil ifFalse: [ GRPlatform current terminateProcess: tmp1 ]updateStates: arg1  super updateStates: arg1.  updateStatesBlock isNil ifFalse: [ updateStatesBlock value: arg1 ]priority  ^300testDecodedWith  | tmp1 tmp2 |  url := (WAUrl absolute: 'http://%c3%b9s%3aer:pa%3A%c3%9f@localhost:8080/foo/%C3%A4bc/d%c3%aaf?%c3%b5=st%c3%aegetc&%c3%b4#t%c3%a5rget') decodedWith: (GRCodec forEncoding: 'utf-8').  self assert: url scheme = 'http'.  self assert: url userinfo = (self asString: #(249 115 58 101 114 58 112 97 58 223)).  self assert: url user = (self asString: #(249 115 58 101 114)).  self assert: url password = (self asString: #(112 97 58 223)).  self assert: url host = 'localhost'.  self assert: url port = 8080.  tmp1 := url path asArray.  self assert: tmp1 size = 3.  tmp2 := Array with: 'foo' with: (self asString: #(228 98 99)) with: (self asString: #(100 234 102)).  tmp2 keysAndValuesDo: [:arg1 :arg2 |  self assert: (tmp1 at: arg1) = arg2 ].  self assert: url queryFields size = 2.  self assert: (url queryFields at: (self asString: #(245))) = (self asString: #(115 116 238 103 101 116 99)).  self assert: (url queryFields includesKey: (self asString: #(244))).  self assert: (url queryFields at: (self asString: #(244))) isNil.  self assert: url fragment = (self asString: #(116 229 114 103 101 116))renderNode: arg1 on: arg2  arg2 listItem: [ self renderNodeButton: arg1 on: arg2.        self renderNodeLabel: arg1 on: arg2.        self renderNodeChildren: arg1 on: arg2 ]verifyPassword: arg1 forUser: arg2  | tmp1 tmp2 |  tmp1 := self preferenceAt: #login.  tmp2 := self preferenceAt: #passwordHash.  tmp1 isNil ifTrue: [ self authConfigurationError: 'Login not defined. The default authentication method requires a WAAuthConfiguration' ].  tmp2 isNil ifTrue: [ self authConfigurationError: 'Password not defined. The default authentication method requires a WAAuthConfiguration' ].  ^arg2 isEmptyOrNil not and: [ arg1 isEmptyOrNil not and: [ tmp1 = arg2 and: [ tmp2 = (GRPlatform current secureHashFor: arg1) ] ] ]unregister  self class unregister: selfparseNumberFraction  | tmp1 tmp2 |  tmp1 := 0.  tmp2 := 1.0.  [ stream atEnd not and: [ stream peek isDigit ] ] whileTrue: [ tmp1 := 10 * tmp1 + (stream next greaseInteger - 48).        tmp2 := tmp2 * 10.0 ].  ^tmp1 / tmp2takeServerParametersFromRequest: arg1  scheme isNil ifTrue: [ self scheme: arg1 url scheme ].  host isNil ifTrue: [ arg1 headers at: 'host' ifPresent: [:arg2 |  self parseAuthority: arg2 from: 1 to: arg2 size + 1 ] ].  path isNil ifTrue: [ arg1 headers at: 'base' ifPresent: [:arg2 |  self parsePath: arg2 ] ]handleAnswer: arg1 continueWith: arg2  arg2 valuerenderContentOn: arg1  arg1 div     class: 'tool';     with: [ arg1 render: self table.        arg1 anchor           callback: [ self resetDeprecationWarnings ];           with: 'Reset deprecation warnings' ]renderContentOn: arg1  arg1 table     class: 'wa-config';     cellpadding: 0;     cellspacing: 0;     with: [ arg1 tableRow: [ arg1 tableData                 style: 'width: 100%';                 with: [ self renderHeadingOn: arg1 ].              arg1 tableData                 rowSpan: 2;                 with: [ self renderLogoOn: arg1 ] ].        arg1 tableRow: [ arg1 tableData: [ self renderTopBarOn: arg1 ] ] ].  arg1 div: [ self renderComponentOn: arg1 ]targetSelf  self target: '_self'sample: arg1  self sample with: arg1clear  ^mutex critical: [ cache clear ]override  self configuration takeValue: (self configuration at: attribute key) forAttribute: attributetestStatusAfterCommit  self response flush.  self should: [ self response forbidden ] raise: WAIllegalStateException.  self should: [ self response status: 404 message: 'Almost found' ] raise: WAIllegalStateExceptionaddMedia: arg1  self at: 'media' append: arg1 separator: ', 'initializeOn: arg1  self initialize.  mutex := WAMutex new.  cache := arg1actionBaseUrl  ^actionBaseUrldefault: arg1  value := arg1initializeWithMajor: arg1 minor: arg2  self initialize.  major := arg1.  minor := arg2endRowSelection  ^rowSelectionStart isNil ifFalse: [ rows at: (rowSelectionStart max: rowSelectionEnd) ]renderLabel: arg1 value: arg2 on: arg3  arg3 tableRow: [ self renderLabel: arg1 on: arg3.        self renderValue: arg2 on: arg3 ]testSimple  | tmp1 |  tmp1 := mutex critical: [ 1 ].  self assert: tmp1 = 1.  self assert: mutex owner isNiltestLinkElement  self assertRoot: [:arg1 |  arg1 stylesheet           addAural;           addTeletype;           title: 'aTilte';           url: 'http://example.com/style.css' ] gives: '<title></title><link rel="stylesheet" type="text/css" media="aural, tty" title="aTilte" href="http://example.com/style.css"/>'configurationComponent  ^WAFileHandlerEditor on: selfselectionChanged  block: arg1  block := arg1form  ^self brush: WAFormTag newauthentication  | tmp1 |  tmp1 := WAAuthenticationFilter new     authenticator: self;     yourself.  self session addFilter: tmp1.  child inform: 'Congratulations, you have been authenticated. The new filter should be visible in the list above. Clicking on "ok" should remove the filter. Using the back button and hitting refresh should show the filter again.' onAnswer: [ self session removeFilter: tmp1 ]initializeHandler: arg1 requestor: arg2  self initializeRequestor: arg2.  handler := arg1initialize  super initialize.  dictionary := Dictionary newrequestHandler: arg1  requestHandler := arg1date: arg1  second := arg1 dayOfMonth.  hour := arg1 monthIndex.  minute := arg1 yearinitialize  super initialize.  hasReceivedUnregistered := falsecharset: arg1  self attributeAt: 'charset' put: arg1testAsSelectorCapitalized  | tmp1 |  tmp1 := WATestingFiles default.  self assert: (tmp1 asSelector: 'COMMENTS.TXT') = #COMMENTSTxt.  self assert: (tmp1 asFilename: #COMMENTSTxt) = 'COMMENTS.txt'testValueWithoutAttributeWithIfAbsentBlock  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |  tmp1 := self basicSystemConfiguration.  tmp4 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp4 at: #a put: 1.  tmp5 := WAUserConfiguration new     addParent: tmp1;     yourself.  tmp5 at: #a put: 2.  tmp5 removeParent: tmp1.  tmp2 := WAUserConfiguration new     addParent: tmp4;     addParent: tmp5;     yourself.  tmp3 := WAUserConfiguration new     addParent: tmp5;     addParent: tmp4;     yourself.  self assert: (tmp1 at: #a) = #default.  self assert: (tmp4 at: #a) = 1.  tmp6 := false.  tmp5 at: #a ifAbsent: [ tmp6 := true ].  self assert: tmp6.  self assert: (tmp2 at: #a) = 1.  self assert: (tmp3 at: #a) = 1sessionId  self subclassResponsibilityaddValue: arg1 to: arg2  ^arg2 copyWith: arg1chooseFrom: arg1  ^self wait: [:arg2 |  self chooseFrom: arg1 onAnswer: arg2 ]anchor: arg1  self anchor with: arg1openBrush  canvas writeIfNotFirst: ', '.  self document openObjectdocument: arg1  self document: arg1 mimeType: nilrenderStartOn: arg1  arg1 form: [ arg1 text: 'Start VNC on display: '.        arg1 textInput           value: 0;           callback: [:arg2 |  self startOn: arg2 greaseInteger ].        arg1 submitButton text: 'Start' ]setStringBody: arg1 wrap: arg2  self body: (arg2 ifTrue: [ WAStringEmailBody string: arg1 lineLength: 80 ] ifFalse: [ WAStringEmailBody contentString: arg1 ])type  ^'password'link  ^self add: (WALinkElement root: self)handlerClass  ^WAExceptionHandlerautocomplete: arg1  self attributes at: 'autocomplete' append: arg1resourceUrl: arg1  self url: (root absoluteUrlForResource: arg1)renderNodeLabelLink: arg1 action: arg2 text: arg3 on: arg4  arg4 anchor     callback: arg2;     with: arg3secondPath: arg1  secondPath := arg1at: arg1 put: arg2  self subclassResponsibilitypriority  ^500request  ^requesttype  ^'datetime'callback: arg1  callbackBlock := arg1contentType  ^WAMimeType textHtmlrenderHeaderOn: arg1  contents  ^contentscreateActionContinuation  ^self actionPhaseContinuationClass snapshot: self statesaccumulate: arg1  count := count + 1.  size := size + (self sizeOfObject: arg1)testCacheForeverExpiryDate  | tmp1 tmp2 |  tmp1 := self response cacheForeverExpiryDate.  tmp2 := tmp1 - DateAndTime now.  self assert: tmp2 days > 7.  self assert: tmp2 days < 356sessionClasses  ^WASession withAllSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]renderContentOn: arg1  arg1 paragraph: 'The following two anchors should trigger flows with 5 steps each. The stack should neither grow nor shrink (in GemStone the stack for go buttons will grow and that is expected behavior). Backtracking and spawning of windows should properly work.'.  arg1 paragraph: [ arg1 anchor           callback: [ self goAnchors ];           with: 'go anchors'.        arg1 break.        arg1 anchor           callback: [ self goButtons ];           with: 'go buttons' ]chooseCheese  cheese := self chooseFrom: #('Greyerzer' 'Tilsiter' 'Sbrinz') caption: 'What''s your favorite Cheese?'.  cheese isNil ifTrue: [ self chooseCheese ]renderLogoOn: arg1  arg1 anchor     url: (WAUrl new           host: 'www.seaside.st';           yourself);     with: [ arg1 div class: 'smallLogo' ]requestAddressFor: arg1  self subclassResponsibilityhandleAnswer: arg1  ^falsedoIt  ^self evaluateexpectedLibraryContents  ^WATestingFiles default filenames detect: [:arg1 |  true ]icon: arg1  self attributeAt: 'icon' put: arg1initialize  super initialize.  self     name: 'Open';     description: 'Opoen localhost on the port of the adaptor.'createRenderContext  | tmp1 |  tmp1 := WARenderContext new.  tmp1 visitor: (WARenderingGuide client: tmp1 visitor).  ^tmp1states  ^Array with: selfremoveFromKeyTable: arg1  | tmp1 tmp2 tmp3 |  tmp1 := arg1 keyHash \\ keyTable size + 1.  tmp2 := keyTable at: tmp1.  tmp3 := nil.  [ arg1 == tmp2 ] whileFalse: [ tmp3 := tmp2.        tmp2 := tmp2 next ].  tmp3 isNil ifTrue: [ keyTable at: tmp1 put: tmp2 next ] ifFalse: [ tmp3 next: tmp2 next ]navigation  self url addField: '_n'hash  ^major hash bitXor: minor hashbutton  ^self brush: WAButtonTag newisSsl  ^self uri isSslspaceEntity  ^'&#160;'writeContentOn: arg1  committed := truesetUp  super setUp.  dispatcher := WADispatcher new.  handler := self newHandler.  dispatcher register: handler at: self handlerNametestCanvasHtml  self assert: [:arg1 |  arg1 html: '<' ] gives: '<'.  self assert: [:arg1 |  arg1 html: '>' ] gives: '>'.  self assert: [:arg1 |  arg1 html: '"' ] gives: '"'.  self assert: [:arg1 |  arg1 html: '&' ] gives: '&'.  self assert: [:arg1 |  arg1 html: '<div title="&amp;">' ] gives: '<div title="&amp;">'handleExpired: arg1  arg1 responseGenerator     expiredRegistryKey;     respondmaxPages  ^(self items size / self batchSize) ceilingrenderContentOn: arg1  self renderExplanationOn: arg1.  arg1 unorderedList: [ 1 to: 5000 do: [:arg2 |  arg1 listItem: [ arg1 anchor                       name: arg2;                       callback: [ self inform: arg2 onAnswer: [ self session jumpToAnchor: arg2 greaseString ] ];                       with: arg2 ] ] ]testCopyParent  | tmp1 tmp2 |  tmp1 := WADispatcher new.  handler setParent: tmp1.  tmp2 := handler copy.  self assert: handler parent == tmp1.  self assert: tmp2 parent isNilsize: arg1  self attributes at: 'size' put: arg1selectFirst  components notEmpty ifTrue: [ self select: components first key ]testUserinfo  url     host: 'seaside.st';     userinfo: 'foo:bar'.  self assert: url userinfo = 'foo:bar'.  self assert: url greaseString = 'http://foo%3Abar@seaside.st/'.  self assert: url user = 'foo:bar'.  self assert: url password isNil.  url     user: 'foo';     password: 'bar'.  self assert: url userinfo = 'foo:bar'.  self assert: url user = 'foo'.  self assert: url password = 'bar'testHandleDoesNotExist  | tmp1 |  self requestContextWithUrl: '/root/files/Cheeseburger/'.  tmp1 := self responseAfter: [ handler handle: self requestContext ].  self assertNotExisiting: tmp1.  self requestContextWithUrl: '/root/files/Cheeseburger'.  tmp1 := self responseAfter: [ handler handle: self requestContext ].  self assertNotExisiting: tmp1.  self requestContextWithUrl: '/root/files/WAStandardFiles/cheeseburger.jpeg'.  tmp1 := self responseAfter: [ handler handle: self requestContext ].  self assertNotExisiting: tmp1visitAll: arg1  arg1 do: [:arg2 |  self visit: arg2 ]states  ^Array with: selfscript  ^self brush: WAScriptTag newtitleFor: arg1  ^titleBlock isNil ifTrue: [ arg1 ] ifFalse: [ titleBlock value: arg1 ]performRendering: arg1  | tmp1 tmp2 tmp3 tmp4 |  self requestContext respond: [:arg2 |  tmp1 := canvas context copy.        tmp2 := WAHtmlRoot context: tmp1.        arg2 contentType: WAMimeType textHtml.        arg2 doNotCache.        self rootBlock value: tmp2.        tmp3 := self requestContext handler documentClass on: arg2 stream codec: self requestContext codec.        canvas context document: tmp3.        tmp3 open: tmp2.        tmp4 := canvas species context: canvas context.        tmp4           render: arg1;           flush.        tmp3 close ]target: arg1  self attributes at: 'target' put: arg1nextMonth  self monthIndex = 12 ifTrue: [ self           monthIndex: 1;           year: self year + 1 ] ifFalse: [ self monthIndex: self monthIndex + 1 ]renderUploadOn: arg1  arg1 form     multipart;     with: [ arg1 div: [ arg1 fileUpload multipleValuesCallback: [:arg2 |  files := arg2 ].              arg1 submitButton ] ]initializeWithSnapshot: arg1 renderContext: arg2 action: arg3  self initializeWithSnapshot: arg1 renderContext: arg2.  action := arg3onProgress: arg1  self document scriptGenerator event: 'progress' do: arg1 on: selfgo  self confirm: 'Raise an exception?' onAnswer: [:arg1 |  [ arg1 ifTrue: [ self error: 'foo' ] ] on: Error do: [:arg2 |  self inform: 'Caught: ' , arg2 description onAnswer: [  ] ] ]size  ^delegates inject: 0 into: [:arg1 :arg2 |  arg1 + arg2 size ]noHandlerFoundForKey: arg1 in: arg2 context: arg3  arg2 handleExpired: arg3testRfc2  | tmp1 |  tmp1 := WAAccept fromString: 'text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c'.  self assert: tmp1 size = 4.  self assert: tmp1 at: 1 main: 'text' sub: 'plain' quality: 0.5.  self assert: tmp1 at: 2 main: 'text' sub: 'html' quality: 1.0.  self assert: tmp1 at: 3 main: 'text' sub: 'x-dvi' quality: 0.8.  self assert: tmp1 at: 4 main: 'text' sub: 'x-c' quality: 1.0initialize  super initialize.  count := 0testScriptTag  self assert: [:arg1 |  arg1 script resourceUrl: 'track.js' ] gives: '<script src="' , self resourceBaseUrl , 'track.js" type="text/javascript"></script>'tag  ^'event-source'createCache  ^WAHashCache initialSize: 13 maximumSize: 0 maximumAbsoluteAge: 0 maximumRelativeAge: 0 overflowAction: WAHashCache signalErrorpostCopyForRenderContext: arg1  updateStates: arg1  super updateStates: arg1.  self showHalos ifTrue: [ self visiblePresentersDo: [:arg2 |  self haloFor: arg2 ] ].  arg1 register: halos.  halos do: [:arg2 |  arg2 updateStates: arg1 ]disabled  self disabled: truehttpOnly: arg1  httpOnly := arg1restoreValues  | tmp1 tmp2 |  tmp1 := values readStream.  [ tmp1 atEnd ] whileFalse: [ tmp2 := tmp1 next.        1 to: tmp2 class instSize do: [:arg1 |  tmp2 instVarAt: arg1 put: tmp1 next ].        1 to: tmp2 size do: [:arg1 |  tmp2 at: arg1 put: tmp1 next ] ].  ^tmp2setCachedProperties  | tmp1 |  tmp1 := self class propertiesCache at: group ifAbsent: [ nil ].  tmp1 isNil ifFalse: [ self properties: tmp1.        self showHelp: false ]testDeleteNetscapeCookie  | tmp1 tmp2 tmp3 |  self application preferenceAt: #serverPath put: '/en/private_kunden/wealth_management'.  tmp1 := WARequestCookie key: 'password' value: 'sex'.  self requestContextWithUrl: '/' cookies: (Array with: tmp1).  self requestContext response deleteCookie: tmp1.  tmp2 := self requestContext response cookies.  self assert: tmp2 size = 1.  tmp3 := tmp2 any.  self assert: (tmp3 isKindOf: WACookie).  self assert: tmp3 value = ''.  self assert: tmp3 path = self application url pathStringUnencodedtestByteArrayWithFilename  self createAndVerifyBinaryDocumentNamed: 'sample.png' hasAttachment: 'attachment; filename="sample.png"'items  ^itemscreateDocumentHandlerCache  ^WAUnidirectionalCache newlistItem  ^self tag: 'li'testSimplestCallCC  | tmp1 |  tmp1 := self callcc: [:arg1 |  arg1 value: true ].  self assert: tmp1strong: arg1  self strong with: arg1requestAddressFor: arg1  self shouldNotImplementrequestFieldsFor: arg1  self shouldNotImplementcurrentPage  ^currentPagechooseFrom: arg1 default: arg2 caption: arg3  ^self wait: [:arg4 |  self chooseFrom: arg1 default: arg2 caption: arg3 onAnswer: arg4 ]testQueryFields  url queryFields at: '1' put: nil.  self assert: url greaseString = '/?1'.  url queryFields at: '2' put: 'foo'.  self assert: url greaseString = '/?1&2=foo'.  url queryFields at: '3' put: 123.  self assert: url greaseString = '/?1&2=foo&3=123'.  url queryFields at: '4' put: 'foo bar&zork'.  self assert: url greaseString = '/?1&2=foo&3=123&4=foo%20bar%26zork'.  url queryFields at: '1' add: 'dupe'.  self assert: url greaseString = '/?1&2=foo&3=123&4=foo%20bar%26zork&1=dupe'title  ^'Welcome to Seaside ' , GRPlatform current seasideVersion greaseStringisExpanded: arg1  ^expanded includes: arg1configurationComponent  ^WAFileLibraryEditor new     library: self;     yourselfdatetime: arg1  datetime := arg1addScript: arg1  scripts ifNil: [ scripts := Set new ].  scripts add: arg1initialize  super initialize.  formatBlock := [:arg1 |  arg1 greaseString ].  sortBlock := [:arg2 :arg3 |  arg2 <= arg3 ].  valueBlock := [:arg4 |  nil ].  clickBlock := nil.  title := 'Untitled'.  hasTotal := falseurlForDocument: arg1  ^self urlForDocument: arg1 mimeType: nilupdateRoot: arg1  super updateRoot: arg1.  arg1 title: self exceptionDescription.  arg1 bodyAttributes addClass: 'walkback'.  WAToolFiles default updateRoot: arg1disabled: arg1  self attributes at: 'disabled' put: arg1testCanvasWithLineBreaksGemStoneIssue289  | tmp1 |  tmp1 := [:arg1 |  | tmp2 |  tmp2 := WriteStream on: String new.  tmp2     nextPut: $a;     nextPutAll: arg1;     nextPut: $b;     nextPutAll: arg1;     nextPut: $c.  self assert: [:arg2 |  arg2 withLineBreaks: tmp2 contents ] gives: 'a<br/>b<br/>c' ].  tmp1 value: (String with: Character cr).  tmp1 value: (String with: Character cr with: Character lf).  tmp1 value: (String with: Character lf)renderHeadingForRow: arg1 on: arg2  arg2 tableHeading     class: 'RowHeading';     with: arg1writeContentOn: arg1  arg1 nextPutAll: self contentsasString: arg1  ^String streamContents: [:arg2 |  arg1 do: [:arg3 |  arg2 nextPut: (Character codePoint: arg3) ] ]rows: arg1  rows := arg1renderTableOn: arg1  self renderInline: [:arg2 |  arg2 table: [ arg2 tableRow: [ arg2 tableData: 'data' ] ] ] key: #table on: arg1label  ^'Halos'renderToggleZoomOn: arg1  arg1 anchor     callback: [ self toggleZoom ];     with: self toggleZoomTextrenderContentOn: arg1  arg1 form: [ arg1 text: 'Name your component: '.        arg1 textInput on: #componentName of: self.        arg1 submitButton           text: 'Create';           callback: [ self answer: self componentName capitalized asSymbol ] ]rootClass  ^rootClass ifNil: [ rootClass := WARoot ]testGreaseString  | tmp1 |  tmp1 := WAHttpVersion major: 1 minor: 0.  self assert: tmp1 greaseString = 'HTTP/1.0'isActive  ^self handler notNilisCommitted  ^committedhandleExpired: arg1  arg1 responseGenerator     expiredRegistryKey;     respondheadingGroup: arg1  self headingGroup with: arg1defaultLimit  ^5priority  ^600closingConditionClass  ^WAClosingConditionalCommentname  ^self isRoot ifTrue: [ '' ] ifFalse: [ self parent nameOfHandler: self ]testFilenames  | tmp1 |  tmp1 := WATestingMetadataFileLibrary default filenames.  self assert: tmp1 size = 3.  self assert: (tmp1 includes: 'img/glyphicons-halflings.png').  self assert: (tmp1 includes: 'js/bootstrap.js').  self assert: (tmp1 includes: 'main.css')restartAll  adaptors do: [:arg1 |  arg1 restart ]register: arg1 at: arg2  super register: arg1 at: arg2.  arg1 key: arg2.  ^arg2frameCount  ^frames sizetestMapTag  self assert: [:arg1 |  arg1 map           callback: [:arg2 |   ];           with: [ arg1 image url: 'seaside.jpg' ] ] gives: '<a href="/?1="><img alt="" ismap src="seaside.jpg"/></a>'valueForRow: arg1  ^valueBlock value: arg1sortBlock: arg1  sortBlock := arg1axis: arg1  self attributes at: 'axis' put: arg1filenames  ^self fileSelectors collect: [:arg1 |  self asFilename: arg1 ]title  ^self component titletestHeadersAtIfAbsent  self assert: (self response headerAt: 'foo' ifAbsent: [ 'zork' ]) = 'zork'.  self response headerAt: 'foo' put: 'bar'.  self assert: (self response headerAt: 'foo' ifAbsent: [ 'zork' ]) = 'bar'country  ^countryrenderLabel: arg1 value: arg2 value: arg3 value: arg4 on: arg5  arg5 tableRow: [ self renderLabel: arg1 on: arg5.        self renderValue: arg2 on: arg5.        self renderValue: arg3 on: arg5.        self renderValue: arg4 on: arg5 ]notification: arg1  notification := arg1timeInput  ^self brush: WATimeInput newrenderExplanationOn: arg1  arg1 unorderedList: [ self renderFirefoxOn: arg1.        self renderSafariOn: arg1.        self renderOperaOn: arg1.        self renderRemoveOn: arg1 ]urlencoded: arg1  urlencoded := arg1renderContext  ^renderContextpopupCloseTest  self session presenter show: WAPopupCloseTestComponent newselector: arg1  valueBlock := [:arg2 |  arg2 perform: arg1 ]contentBase: arg1  self base url: arg1contents  ^contentsStream contentscurrentDisplay  ^self serverInstance displayNumber greaseStringresponseGenerator  ^(self handler isNil ifTrue: [ WAResponseGenerator ] ifFalse: [ self handler responseGenerator ]) on: selfsuperscript  ^self tag: 'sup'writeHttpOnlyOn: arg1  self httpOnly ifTrue: [ arg1 nextPutAll: '; HttpOnly' ]updateRoot: arg1  arg1 headElements: (arg1 headElements reject: [:arg2 |  arg2 isKindOf: WALinkElement ]).  super updateRoot: arg1before  super before.  self hasList ifTrue: [ self list do: [:arg1 |  self renderListItem: arg1 labelled: (self labelForOption: arg1) ] ]handleException: arg1  WARenderNotification signalencodeOn: arg1  arg1     nextPutAll: '<!--[';     nextPutAll: self condition;     nextPutAll: ']><!-->'nextPut: arg1  self stream nextPut: arg1testAsMIMEDocumentStringColon  | tmp1 |  tmp1 := 'hello Seaside' seasideMimeDocument.  tmp1 mimeType: 'text/x-weirdo' seasideMimeType.  self assert: tmp1 contentType = 'text/x-weirdo' seasideMimeType.  self assert: tmp1 content = 'hello Seaside'renderIsByteArray: arg1 on: arg2  arg1 isString ifTrue: [ arg2 strong: 'fail: raw contents of WAFile should be a ByteArray not a String' ]configuration  ^configurationsubject: arg1  subject := arg1columns: arg1  self attributes at: 'cols' put: arg1contextFor: arg1  ^WARequestContext request: (self requestFor: arg1) response: (self responseFor: arg1) codec: self codecpriority  ^10type  ^typeutf16leString  ^self asString: #(220 0 98 0 232 0 114 0 115 0 116 0 114 0 238 0 241 0 103 0 233 0)showHelp  ^self propertyAt: #showHelp ifAbsent: [ false ]renderAttribute: arg1 on: arg2  [ (arg1 isAdvanced not or: [ self displayAdvancedAttributes ]) ifTrue: [ arg2 tableRow: [ arg2 tableHeading: [ arg2 label                       title: arg1 comment;                       with: arg1 label ].              arg2 tableData: [ (self isCollectionAttribute: arg1) ifTrue: [ self renderCollectionFieldForAttribute: arg1 on: arg2 ] ifFalse: [ self renderFieldForAttribute: arg1 on: arg2 ] ] ] ] ] on: WAAttributeNotFound do: [:arg3 |  arg2 text: arg3 ]isFromCrawler: arg1  | tmp1 |  tmp1 := arg1 request userAgent.  ^tmp1 notNil and: [ self crawlerSubStrings anySatisfy: [:arg2 |  (tmp1 indexOfSubCollection: arg2) > 0 ] ]firstPath: arg1  firstPath := arg1isDelegation  ^falsedone  ^doneexecute  | tmp1 |  tmp1 := self handler parent.  tmp1 unregister: self handler.  self requestor configure: tmp1status: arg1 message: arg2  self committedCheck.  ^super status: arg1 message: arg2at: arg1 addAll: arg2  ^self at: arg1 addAll: arg2 removeAll: #()= arg1  ^self class = arg1 class and: [ self printString = arg1 printString ]renderKeyOn: arg1  arg1 render: keyinitializeWithKey: arg1  super initializeWithKey: arg1.  advanced := falsecharSet  ^self preferenceAt: #charSetfullDocument: arg1  fullDocument := arg1testCookiesDisabledMatchingHandlerAbsent  | tmp1 tmp2 |  registry := self createRegistry.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: '123'.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1initialize  super initialize.  Created := Created + 1document: arg1 mimeType: arg2  self document: arg1 mimeType: arg2 fileName: nilinitializeWindow: arg1  arg1     title: 'Seaside control panel';     initialExtent: 500 @ 400renderContentOn: arg1  self renderHeadingOn: arg1.  self renderToolsOn: arg1.  self renderExceptionOn: arg1.  self renderStackOn: arg1renderFieldForAttribute: arg1 on: arg2  (self configuration at: arg1 key) isNil ifTrue: [ self visitAttribute: arg1 on: arg2 ] ifFalse: [ (self hasLocalValueForAttribute: arg1) ifTrue: [ self visitAttribute: arg1 on: arg2 ] ifFalse: [ self renderInheritedAttribute: arg1 on: arg2 ] ].  self renderActionsForAttribute: arg1 on: arg2initialize  super initialize.  renderError := falsetestOrderedListTag  self assert: [:arg1 |  arg1 orderedList ] gives: '<ol></ol>'.  self assert: [:arg1 |  arg1 orderedList add: 1 ] gives: '<ol><li>1</li></ol>'.  self assert: [:arg1 |  arg1 orderedList addAll: #(1 2) ] gives: '<ol><li>1</li><li>2</li></ol>'.  self assert: [:arg1 |  arg1 orderedList list: #(1 2) ] gives: '<ol><li>1</li><li>2</li></ol>'.  self assert: [:arg1 |  arg1 orderedList           list: #(1 2);           with: [ arg1 listItem: 3 ] ] gives: '<ol><li>1</li><li>2</li><li>3</li></ol>'.  self assert: [:arg1 |  arg1 orderedList           add: 2;           labels: [:arg2 |  2 * arg2 ] ] gives: '<ol><li>4</li></ol>'.  self assert: [:arg1 |  arg1 orderedList           add: 2;           labels: [:arg2 |  2 * arg2 ];           with: [ arg1 listItem: 5 ] ] gives: '<ol><li>4</li><li>5</li></ol>'storeCallback: arg1  ^super storeCallback: (callback := arg1)children  ^Array with: component1 with: component2initialize  super initialize.  wasExecuted := falseincludesKey: arg1  ^self fields includesKey: arg1testEncodedUnicode  | tmp1 tmp2 tmp3 tmp4 |  tmp4 := String with: (Character codePoint: 233) with: (Character codePoint: 228).  self assert: tmp4 xmlEncodedGives: tmp4.  tmp1 := (Character codePoint: 12354) greaseString.  tmp2 := (Character codePoint: 12362) greaseString.  tmp3 := tmp1 , tmp2.  self assert: tmp1 xmlEncodedGives: tmp1.  self assert: tmp2 xmlEncodedGives: tmp2.  self assert: tmp3 xmlEncodedGives: tmp3nextKey  ^values size + 1object  ^self brush: WAObjectTag newasString: arg1  ^String streamContents: [:arg2 |  arg1 do: [:arg3 |  arg2 nextPut: (Character codePoint: arg3) ] ]selected: arg1  selected := arg1renderAddress: arg1 withHeader: arg2 on: arg3  arg3     nextPutAll: arg2;     nextPutAll: arg1 greaseString;     nextPut: Character craddLoadScriptFirst: arg1  ^loadScripts addFirst: arg1stats  ^String streamContents: [:arg1 |  self tally reportGCStatsOn: arg1 ]filepath  ^filepathtag  ^'a'children  ^Array with: tablelabel: arg1  self attributes at: 'label' put: arg1dispatcher  ^dispatcherrenderMoveActionsOn: arg1  self isWriteable ifTrue: [ arg1 anchor           title: 'Add to list';           onClick: 'return submitForm(this)';           callback: [ self add ];           with: [ arg1 html: '&rarr;' ].        arg1           break;           break.        arg1 anchor           title: 'Remove from list';           onClick: 'return submitForm(this)';           callback: [ self remove ];           with: [ arg1 html: '&larr;' ] ] ifFalse: [ arg1 space: 5 ]rootClass: arg1  self preferenceAt: #rootClass put: (GRPlatform current bindingOf: arg1)expectedStatus  ^200fileResourceOf: arg1  ^(self respondsTo: arg1) ifTrue: [ self perform: arg1 ] ifFalse: [ WAFileLibraryResource emptyInstance ]renderContentOn: arg1  arg1 anchor     callback: [ self answer: false ];     with: 'Fail validation'.  arg1 break.  arg1 anchor     callback: [ self answer: true ];     with: 'Suceed validation'shouldTerminate: arg1  ^(arg1 request fields includesKey: 'terminate') and: [ arg1 application preferenceAt: #sessionAllowTermination ]url: arg1  self attributeAt: 'src' put: arg1remove  self decoratedComponent removeDecoration: selfhandleKeyed: arg1 with: arg2 context: arg3  self dispatch: arg3 to: arg1 key: arg2scriptGeneratorClass  ^scriptGeneratorClass ifNil: [ scriptGeneratorClass := WADefaultScriptGenerator ]testContentsDecoded  file contents: #(83 101 97 115 105 100 101) asByteArray.  self should: [ file contentsDecoded ] raise: WAIllegalStateException.  file contentType: 'text/plain'.  self should: [ file contentsDecoded ] raise: WAIllegalStateException.  file contentType: 'text/plain; charset=iso-8859-1' seasideMimeType.  self assert: file contentsDecoded = 'Seaside'headers: arg1  self attributes at: 'headers' put: arg1testEqual  url     host: 'seaside.st';     addField: 'foo' value: 'bar'.  self assert: url = url.  self deny: url = WAUrl new.  self deny: url = url printString.  self deny: url = url withoutQuery.  self deny: url = (url withField: 'zork').  self deny: url = (url withField: 'zork' value: 'zonk')onPlay: arg1  self document scriptGenerator event: 'play' do: arg1 on: selfversion  ^versioninitializeWithCanvas: arg1  self initialize.  canvas := arg1renderMembersOn: arg1  | tmp1 tmp2 |  selected := nil.  tmp1 := self fieldsFor: self object.  tmp1 isEmpty ifTrue: [ ^self ].  tmp2 := arg1 radioGroup.  tmp2     callback: [:arg2 |  selected := arg2 ];     selected: selected.  arg1 table: [ tmp1 do: [:arg3 |  self renderRow: arg3 value named: arg3 key group: tmp2 on: arg1 ] ]verifyRequest: arg1  ^(self remoteAddressFromRequest: arg1) = self remoteAddressrenderNodeButtonLink: arg1 action: arg2 text: arg3 on: arg4  arg4 anchor     callback: arg2;     with: arg3demoTxtContent  ^'this is a string'encodeOn: arg1  arg1 nextPutAll: '<!--<![endif]-->'object: arg1  ^(self brush: WAJsonObjectBrush new) with: arg1dateAndTime  ^DateAndTime date: dateSelector date time: timeSelector timerenderActionsOn: arg1  arg1 paragraph: [ arg1 anchor           url: (self application url with: self class name);           with: 'New Session'.        arg1 break.        arg1 anchor           callback: [ self session unregister.              self redirect ];           with: 'Expire'.        arg1 break.        arg1 anchor           callback: [ WAExpirySession resetCounters ];           with: 'Reset Counters'.        arg1 break.        arg1 anchor           callback: [ GRPlatform current seasideGarbageCollect ];           with: 'Garbage Collect'.        arg1 break.        arg1 anchor           callback: [ self application clear.              GRPlatform current seasideGarbageCollect.              self redirect ];           with: 'Clear Cache'.        arg1 break.        arg1 anchor           callback: [ self application clear.              WAExpirySession resetCounters.              GRPlatform current seasideGarbageCollect.              self redirect ];           with: 'Reset All' ]testCookiesDisabledMismatchingWithUrlHandler  | tmp1 tmp2 tmp3 |  registry := self createRegistry.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: '123'.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDispatched: tmp1type: arg1  self attributes at: 'type' put: arg1testBlockEscape  | tmp1 |  tmp := 0.  tmp1 := [ tmp := tmp + 1.  tmp2 value ].  self callcc: [:arg1 |  tmp2 := arg1.        tmp1 value ].  tmp2 := [  ].  tmp1 value.  self assert: tmp = 2testCookiesDisabledNoFieldCookieHandlerAbsent  | tmp1 tmp2 |  registry := self createRegistry.  tmp2 := self createRequestContextWithFieldKey: nil cookieKey: '123'.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDefault: tmp1renderConfigurationOn: arg1  self handler configuration isNil ifFalse: [ arg1 render: configurationEditor ]children  ^Array with: self counterbuildReport  ^WATableReport new     rows: self items;     columns: (OrderedCollection new           add: (WAReportColumn new                 title: 'Start';                 selector: #start;                 cssClass: 'left';                 yourself);           add: (WAReportColumn new                 title: 'Duration';                 selector: #duration;                 cssClass: 'left';                 yourself);           add: (WAReportColumn new                 title: 'Request';                 valueBlock: [:arg1 |  arg1 request method , ' ' , arg1 request url greaseString ];                 clickBlock: [:arg1 |  self show: (WAInspector current on: arg1 request) ];                 yourself);           add: (WAReportColumn new                 sortBlock: nil;                 title: 'Commands';                 valueBlock: [:arg1 :arg2 |  self renderCommands: arg1 on: arg2 ];                 yourself);           yourself);     yourselfchooseFrom: arg1 default: arg2 caption: arg3 onAnswer: arg4  self call: (WAChoiceDialog new           addMessage: arg3;           options: arg1;           selection: arg2;           yourself) onAnswer: arg4newBrowserSessionID  ^WAKeyGenerator current keyOfLength: self browserSessionIDSizecrawlerUserAgents  ^#('Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' 'Googlebot/2.1 (+http://www.google.com/bot.html)' 'Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)' 'Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)' 'msnbot/2.1')encodeOn: arg1  self encodeSchemeAndAuthorityOn: arg1.  self encodePathOn: arg1.  (queryFields isNil or: [ queryFields isEmpty ]) ifFalse: [ arg1 xmlEncoder nextPut: $?.        self encodeQueryOn: arg1 ].  fragment isNil ifFalse: [ arg1 xmlEncoder nextPut: $#.        self encodeFragmentOn: arg1 ]states  ^Array with: showHalosrenderAcronymOn: arg1  arg1 heading     level2;     with: '<acronym>'.  arg1 paragraph: [ arg1 acronym           title: 'Federal Bureau of Investigation';           with: 'F.B.I.' ]contents: arg1  contents := arg1checked: arg1  self attributeAt: 'checked' put: arg1emptyPage  self selection: nil.  self editor homerenderContext  ^renderContextrenderComponentOn: arg1  arg1 render: componentassertNotFound: arg1  self assert: arg1 response status = WAResponse statusFound.  self assert: (arg1 response headerAt: 'Location') greaseString = '/1/2'abbreviated  ^self tag: 'abbr'hasList  ^list notNil and: [ list notEmpty ]exceptionClass: arg1  exceptionClass := arg1startAll  adaptors do: [:arg1 |  arg1 start ]requestor  ^requestorrenderWriteToDiskOn: arg1  arg1 anchor     class: 'large';     callback: [ self library deployFiles ];     title: 'Wite all the files to disk';     with: 'Write to disk'addPart: arg1  self parts add: arg1beToolbar  self type: 'toolbar'initialize  super initialize.  actionsSelector := #actionstestImgglyphiconshalflingsPng  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := WAFileHandler new.  tmp2 := WATestingMetadataFileLibrary default.  self requestContextWithUrl: '/i/dont/care/WATestingMetadataFileLibrary/img/glyphicons-halflings.png'.  requestContext consumer     next;     next;     next.  tmp3 := self responseAfter: [ tmp1 handle: self requestContext ].  self assert: tmp3 status = 200.  self assert: tmp3 contentType = WAMimeType imagePng.  tmp4 := WriteStream on: ByteArray new.  tmp3 writeContentOn: tmp4.  tmp5 := tmp4 contents.  self assert: tmp5 asByteArray = (tmp2 perform: #imgglyphiconshalflingsPng) contents valuewithUrls: arg1  | tmp1 tmp2 |  tmp1 := arg1 readStream.  [ tmp1 atEnd ] whileFalse: [ self text: (tmp1 greaseUpToAll: 'http://').        tmp1 atEnd ifFalse: [ tmp2 := 'http://' , (tmp1 upTo: Character space).              self anchor                 url: tmp2;                 with: tmp2.              self text: ' ' ] ]requestContext  ^requestContextstream  ^bufferedStreamisStopping  ^status = #stoppingcontents  | tmp1 |  tmp1 := WriteStream on: String new.  self response writeOn: tmp1.  ^tmp1 contentstestAsMIMEDocumentByteArray  | tmp1 tmp2 |  tmp1 := #(1 2 3 4) asByteArray seasideMimeDocument.  self assert: tmp1 contentType = WAMimeType applicationOctetStream.  tmp2 := tmp1 content.  self assert: tmp2 size = 4.  self assert: tmp2 class = ByteArray.  1 to: 4 do: [:arg1 |  self assert: (tmp2 at: arg1) = arg1 ]small: arg1  self small with: arg1initialize  super initialize.  closed := falserequest: arg1 default: arg2  ^self wait: [:arg3 |  self request: arg1 default: arg2 onAnswer: arg3 ]host: arg1  host := arg1 isNil ifFalse: [ arg1 greaseString asLowercase ]authenticationFailed  self status: WAResponse statusUnauthorizedat: arg1 ifAbsent: arg2  self subclassResponsibilitytestDefaultRoot  | tmp1 |  tmp1 := self defaultDispatcher.  self assert: tmp1 class == WADispatcher.  self assert: tmp1 isDispatcher.  self assert: tmp1 isRoot.  self deny: tmp1 isApplication.  self assert: tmp1 parent isNil.  self assert: tmp1 name = ''.  self assert: tmp1 url pathStringUnencoded = '/'application  ^handlers detect: [:arg1 |  arg1 isApplication ] ifNone: [ nil ]renderDocumentationStepOn: arg1  arg1 heading     level3;     with: 'Browse the documentation'.  arg1 unorderedList: [ arg1 listItem: [ arg1 text: 'The  '.              arg1 anchor                 url: 'http://book.seaside.st/';                 with: 'Seaside Book'.              arg1 text: ' will teach you all you need to know about Seaside and how to build killer web applications.' ].        arg1 listItem: [ arg1 text: 'The '.              arg1 anchor                 url: 'http://www.swa.hpi.uni-potsdam.de/seaside/tutorial';                 with: 'Seaside Tutorial'.              arg1 text: ' has 12 chapters and introduces a sample application to explain the main features of Seaside.' ] ]time  ^timespan  ^self tag: 'span'describeOn: arg1  (arg1 list: #trackingStrategy)     comment: 'How handlers should be tracked.';     options: [ Array with: WAQueryFieldHandlerTrackingStrategy new ];     default: WAQueryFieldHandlerTrackingStrategy newbasicStop  status := #stoppedcacheEntry  ^cacheEntrytestAsMIMEDocumentString  | tmp1 |  tmp1 := 'hello Seaside' seasideMimeDocument.  self assert: tmp1 contentType = WAMimeType textPlain.  self assert: tmp1 content = 'hello Seaside'expectedLibraryContents  ^'forbidden'listId: arg1  self attributeAt: 'list' put: arg1week  ^weekloadFactor  ^0.75clear  self configuration removeExpressionAt: attribute keycanHaveHalo  ^falserenderExplanationOn: arg1  arg1 paragraph: 'This tests whether url encoding works.'.  arg1 unorderedList: [ arg1 listItem: [ arg1 text: 'Go to the '.              arg1 anchor                 url: 'http://www.columbia.edu/kermit/utf8.html';                 with: 'UTF-8 Sampler'.              arg1 text: ' and select some "foreign" text.' ].        arg1 listItem: 'Copy and paste it into the urlencoded text field below and click the submit button.'.        arg1 listItem: 'The text should be displayed below "Input", "Parameter" and "Path" without any error.'.        arg1 listItem: 'The text may appear in the address bar of the browser.'.        arg1 listItem: 'Repeat this process. Make sure to pick at least every of these languages: German, Czech, Korean.' ]imageButton: arg1  ^self imageButton with: arg1acceptEncoding  ^WAAcceptEncoding fromString: (self headerAt: 'accept-encoding' ifAbsent: [ ^nil ])renderColumn: arg1 row: arg2 on: arg3  | tmp1 |  arg1 canRender ifTrue: [ arg3 tableData           class: arg1 cssClass;           with: [ arg1 renderValue: arg2 on: arg3 ].        ^self ].  tmp1 := arg1 textForRow: arg2.  tmp1 isEmpty ifTrue: [ tmp1 := ' ' ].  arg3 tableData     class: arg1 cssClass;     with: [ arg1 canChoose ifFalse: [ arg3 text: tmp1 ] ifTrue: [ arg3 anchor                 callback: [ self chooseRow: arg2 column: arg1 ];                 with: tmp1 ] ]renderContentOn: arg1  self renderNextOn: arg1initialize  super initialize.  task := WAFlowDelegationTask newrenderStartOn: arg1  arg1 label     for: arg1 nextId;     with: 'start:'.  arg1 space.  arg1 numberInput     value: start;     callback: [:arg2 |  [ start := arg2 greaseInteger ] on: Error do: [:arg3 |  nil ] ]section  ^self tag: 'section'visitUrlAttribute: arg1  self visitAttribute: arg1initializeWithInitialSize: arg1 maximumSize: arg2 maximumAbsoluteAge: arg3 maximumRelativeAge: arg4 overflowAction: arg5  super initializeWithInitialSize: arg1 maximumSize: arg2 maximumAbsoluteAge: arg3 maximumRelativeAge: arg4 overflowAction: arg5.  size := 0.  keyTable := Array new: arg1queryFieldKeyFromContext: arg1  ^arg1 request at: self keyField ifAbsent: [ nil ]size  ^dictionary sizekeyFromContext: arg1  | tmp1 |  tmp1 := self queryFieldKeyFromContext: arg1.  ^tmp1 isNil ifTrue: [ self sessionIdFromContext: arg1 ] ifFalse: [ tmp1 ]setUp  super setUp.  log := OrderedCollection new.  root := WAComponentStub new.  decoration1 := WADecorationStub new.  decoration2 := WADecorationStub new.  child1 := WAComponentStub new.  child2 := WAComponentStub new.  child3 := WAComponentStub new.  child4 := WAComponentStub newshowHelp: arg1  ^self propertyAt: #showHelp put: arg1selections  ^selectionstestCanStartWithUnavailablePort  | tmp1 |  tmp1 := WATestServerAdaptor manager: manager.  tmp1 port: adaptor port.  tmp1 starting.  self deny: (manager canStart: tmp1).  tmp1 running.  self deny: (manager canStart: tmp1).  tmp1 stopping.  self deny: (manager canStart: tmp1).  tmp1 stopped.  self deny: (manager canStart: tmp1)includesAdvanced: arg1  ^arg1 anySatisfy: [:arg2 |  arg2 isAdvanced ]addKey: arg1 toUrl: arg2  self cookieFromContext: self requestContext ifAbsent: [ self addQueryFieldWithValue: arg1 to: arg2 ]profile: arg1  start := DateAndTime now.  tally := MessageTally new.  tally reportOtherProcesses: false.  ^tally spyEvery: 1 on: arg1addFirst  self requestContext response addCookie: self firstCookie.  self resetFirstselected  ^current contents classcreationTime  ^creationTimefullDocument  ^fullDocumentsetUp  super setUp.  handler := self newHandlerdestroy  super destroy.  contentsStream := nilwithCallbackContinuationDo: arg1 resultBlock: arg2  | tmp1 |  tmp1 := WAActionCallback new.  tmp1 block: [ arg2 value: (GRPlatform current seasideSuspendFlowDo: arg1) ].  [ tmp1 evaluateWithArgument: nil ] on: WARenderNotification do: [:arg3 |   ]testKeyFromIpAddress  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := strategy keyFromContext: tmp1.  self assert: tmp2 = self sessionIddecoratedComponent  ^selfselectorsToInclude  ^#(mainCss)attributeEditor  ^WAClassBindingCollectionAttributeEditoropen: arg1  (root := arg1) openOn: selflessThan  self addToCondition: ' lt'queryString  ^String streamContents: [:arg1 |  | tmp1 |        tmp1 := GRPlatform current urlEncoderOn: arg1.        self queryFields associations do: [:arg2 |  tmp1 nextPutAll: arg2 key.              arg2 value notNil ifTrue: [ arg1 nextPut: $=.                    tmp1 nextPutAll: arg2 value greaseString ] ] separatedBy: [ arg1 nextPut: $& ] ]isStreamingResponse  ^falseprotocolForSelectedMethod  | tmp1 |  tmp1 := self selectedMessageName.  tmp1 isNil ifTrue: [ ^selectedMessageCategory ifNil: [ #'-- all --' ] ].  ^(self selectedClass >> tmp1 asSymbol) categoryrenderNativeBreakOn: arg1  self renderInline: [:arg2 |  arg2 html: '<br/>' ] factor: 1 / 50 key: #nativeBR on: arg1tooltip  ^'Object Inspector'resourceUrl  ^resourceUrltestNoCharSet  | tmp1 |  tmp1 := WAMimeType fromString: 'text/html'.  self assert: tmp1 charSet isNilattributeAt: arg1 ifPresent: arg2  ^self attributes at: arg1 ifPresent: arg2testAddKeyOfSessionToUrl  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := tmp1 request uri copy.  strategy addKey: 'The_Metaphor' toUrl: tmp2.  self assert: tmp2 greaseString = '/1/2?_s=The_Metaphor'renderInputOn: arg1  self renderInputFirstOn: arg1.  self renderInputSecondOn: arg1show: arg1 onAnswer: arg2  self editor show: arg1 onAnswer: arg2rowPeriod: arg1  rowPeriod := arg1testByteArraySeasideMimeDocumentType  | tmp1 tmp2 |  tmp2 := WAMimeType main: 'audio' sub: 'mpeg'.  tmp1 := #(1 2 3 4) asByteArray seasideMimeDocumentType: tmp2.  self assert: tmp1 mimeType = tmp2.  self assert: tmp1 contents = #(1 2 3 4) asByteArraychildren  ^childrenBlock isNil ifTrue: [ super children ] ifFalse: [ childrenBlock value ]crawlerSubStrings  ^#('bot' 'Bot' 'Yahoo! Slurp' 'Feedfetcher-Google')time: arg1  self time with: arg1height: arg1  features at: #height put: arg1printDuration: arg1  ^self durationPrinter print: arg1tableHeading: arg1  self tableHeading with: arg1openTag  self document openTag: self tag attributes: attributes closed: self isClosedoptionalLabel: arg1  optionalLabel := arg1time  ^self tally timeaccept: arg1  arg1 visitStringAttribute: selflog: arg1  log add: arg1addKey: arg1 toUrl: arg2  ^(self strategyFor: self requestContext) addKey: arg1 toUrl: arg2variable  ^self tag: 'var'number: arg1  ^self addAttribute: (WANumberAttribute key: arg1)currentTiming  ^startTime isNil ifTrue: [ 0 ] ifFalse: [ Time millisecondsSince: startTime ]renderVariableOn: arg1  arg1 heading     level2;     with: '<var>'.  arg1 paragraph: [ arg1 text: 'In the simplest case, the command for deleting a file in Unix is'.        arg1 break.        arg1 keyboard: 'rm'.        arg1 space.        arg1 variable: 'filename' ]initialize  super initialize.  adaptors := OrderedCollection newtag  ^'audio'write: arg1 asQuotedStringOn: arg2  arg2 nextPut: $".  arg1 do: [:arg3 |  arg3 = $" ifTrue: [ arg2 nextPutAll: '\"' ] ifFalse: [ arg2 nextPut: arg3 ] ].  arg2 nextPut: $"size  self subclassResponsibilityupdateUrlHandler  ^self dispatcherconfigureLibrary: arg1  self show: arg1 configurationComponentheight: arg1  self attributes at: 'height' put: arg1testArticle  self assert: [:arg1 |  arg1 article ] gives: '<article></article>'.  self assert: [:arg1 |  arg1 article: 'test' ] gives: '<article>test</article>'.  self assert: [:arg1 |  arg1 article with: [ arg1 text: 'test' ] ] gives: '<article>test</article>'multiSelect: arg1  ^self multiSelect with: arg1initializeCache  cache := self createCacheremoteAddress  ^remoteAddresslabel  ^'Configure'counter  ^counter ifNil: [ counter := WACounter new ]handleFiltered: arg1  | tmp1 |  tmp1 := WAProfilerItem request: arg1 request copy.  [ tmp1 profile: [ super handleFiltered: arg1 ] ] ensure: [ items := items copyWith: tmp1 ]contentType  ^self mimeTypedocument: arg1 mimeType: arg2  self document: arg1 mimeType: arg2 fileName: niladdKey: arg1 toUrl: arg2  self addQueryFieldWithValue: arg1 to: arg2testCrLf  | tmp1 tmp2 |  tmp1 := String with: Character cr with: Character lf.  tmp2 := 'value' , tmp1 , 'Location: www.bad.com' , tmp1 , tmp1.  self should: [ collection add: 'key' -> tmp2 ] raise: WAInvalidHeaderValueError.  self should: [ collection addAll: (Dictionary new                 add: 'key' -> tmp2;                 yourself) ] raise: WAInvalidHeaderValueError.  self should: [ collection at: 'key' add: tmp2 ] raise: WAInvalidHeaderValueError.  self should: [ collection at: 'key' put: tmp2 ] raise: WAInvalidHeaderValueError.  self should: [ collection at: 'key' ifAbsentPut: [ tmp2 ] ] raise: WAInvalidHeaderValueError.  self should: [ collection at: 'key' put: tmp2 ] raise: WAInvalidHeaderValueErrormax: arg1  self attributeAt: 'max' put: arg1renderContentOn: arg1  arg1 heading     level: 1;     with: (self object printStringLimitedTo: 50).  arg1 render: path.  arg1 form: [ self renderMembersOn: arg1.        self renderEditAreaOn: arg1 ]canSelectBlock: arg1  canSelectBlock := arg1owner: arg1  owner contents: arg1string: arg1  ^self addAttribute: (WAStringAttribute key: arg1)reset  objects := IdentityDictionary newextraPath: arg1  self url addToPath: arg1binary  contentsStream := GRPlatform current readWriteByteStreamtestReentrant  | tmp1 |  self assert: (self mark: [ 2 * (self callcc: [:arg1 |  tmp1 := arg1.                          2 ]) ]) = 4.  self assert: (self mark: [ tmp1 value: 3 ]) = 6.  self assert: (self mark: [ tmp1 value: 4 ]) = 8.  self assert: (self mark: [ tmp1 value: 5 ]) = 10with: arg1  self openTag.  super with: [ self before.        canvas render: arg1.        self after ].  self isClosed ifFalse: [ self closeTag ]accessKey: arg1  self attributes at: 'accesskey' put: arg1testDocumentMimeTypeFileName  self response document: 'foo;bar;zork' mimeType: 'text/csv' fileName: 'table.csv'.  self assertLines: #('HTTP/1.1 200 OK' 'Content-Disposition: attachment; filename="table.csv"' 'Content-Type: text/csv' 'Content-Length: 12' '' 'foo;bar;zork')isShared  ^trueprintOn: arg1  super printOn: arg1.  arg1 nextPut: $(.  arg1 nextPutAll: self greaseString.  arg1 nextPut: $)testAddPathParameter  url addAllToPath: #('seaside' 'files' 'WAStandardFiles' 'seaside.jpg').  url addField: 'redirectcounter' value: 1.  url addPathParameterAt: 2 key: 'old'.  url addPathParameterAt: 3 key: 'key1' value: 'value1'.  url addPathParameterAt: 3 key: 'key2' value: 'value2'.  url addPathParameterAt: 3 key: 'key1' value: 'value3'.  url addPathParameterAt: 4 key: 'jsessionid' value: 42.  self assert: (url pathParameterAt: 1 key: 'jsessionid' ifAbsent: [ 'foo' ]) = 'foo'.  self assert: (url pathParameterAllAt: 1 key: 'jsessionid' ifAbsent: [ 'foo' ]) = 'foo'.  self assert: (url pathParameterAllAt: 2 key: 'jsessionid' ifAbsent: [ 'bar' ]) = 'bar'.  self assert: (url pathParameterAt: 2 key: 'jsessionid' ifAbsent: [ 'bar' ]) = 'bar'.  self assert: (url pathParameterAt: 2 key: 'old' ifAbsent: [ 'bar' ]) isNil.  self assert: (url pathParameterAllAt: 2 key: 'old' ifAbsent: [ 'bar' ]) = (Array with: nil).  self assert: (url pathParameterAt: 3 key: 'jsessionid' ifAbsent: [ 'bar' ]) = 'bar'.  self assert: (url pathParameterAllAt: 3 key: 'jsessionid' ifAbsent: [ 'bar' ]) = 'bar'.  self assert: (url pathParameterAt: 3 key: 'key1' ifAbsent: [ 'bar' ]) = 'value1'.  self assert: (url pathParameterAllAt: 3 key: 'key1' ifAbsent: [ 'bar' ]) = (Array with: 'value1' with: 'value3').  self assert: (url pathParameterAt: 3 key: 'key2' ifAbsent: [ 'bar' ]) = 'value2'.  self assert: (url pathParameterAllAt: 3 key: 'key2' ifAbsent: [ 'bar' ]) = (Array with: 'value2').  self assert: (url pathParameterAllAt: 4 key: 'key1' ifAbsent: [ 'bar' ]) = 'bar'.  self assert: (url pathParameterAt: 4 key: 'key1' ifAbsent: [ 'bar' ]) = 'bar'.  self assert: (url pathParameterAt: 4 key: 'jsessionid' ifAbsent: [ 'bar' ]) = 42.  self assert: (url pathParameterAllAt: 4 key: 'jsessionid' ifAbsent: [ 'bar' ]) = (Array with: 42).  self assert: url greaseString = '/seaside/files;old/WAStandardFiles;key1=value1,value3;key2=value2/seaside.jpg;jsessionid=42?redirectcounter=1'authenticator  ^authenticator ifNil: [ self handler ]session  ^self requestContext sessionstartUp  addProjection  self addMedia: 'projection'isSupported  ^truerenderExceptionOn: arg1  | tmp1 |  tmp1 := self exception seasidePossibleCauses.  tmp1 isEmpty ifTrue: [ ^self ].  arg1 heading     level: 3;     with: 'Possible Causes'.  arg1 unorderedList list: tmp1options: arg1  options := arg1initialize  super initialize.  expanded := IdentitySet new.  self selectBlock: [:arg1 |  self answer: arg1 ].  self childrenBlock: [:arg1 |  Array new ].  self labelBlock: [:arg1 |  arg1 greaseString ]renderClassName: arg1 on: arg2  arg1 isNil ifTrue: [ ^self ].  arg2 paragraph: [ arg2 strong: 'Class: '.        arg2 text: arg1 class name ]keyField  ^'_s'heading: arg1  self heading with: arg1progress: arg1  self progress with: arg1realm: arg1  realm := arg1visitPresenter: arg1  super visitPresenter: arg1.  arg1 childrenDo: [:arg2 |  self visit: arg2 ]after  super after.  callback isNil ifTrue: [ ^self ].  canvas hiddenInput callback: [ callback value: value.        value := false ]closeThisPopupAndReloadOpener  ^self respond: [:arg1 |  arg1           contentType: WAMimeType textHtml;           nextPutAll: (WAHtmlCanvas builder                 fullDocument: true;                 rootBlock: [:arg2 |  arg2                       title: 'Seaside';                       beHtml5 ];                 render: [:arg3 |  arg3 script: 'window.close();window.opener.location=window.opener.location;' ]) ]assertLibrariesResponse: arg1  self assert: (arg1 contents indexOfSubCollection: self expectedLibrariesContents startingAt: 1) > 0cookieCheckUrlFor: arg1  ^arg1 request url copy     addField: self application trackingStrategy keyField value: self session key;     addField: 'cookiecheck';     yourselfisStarting  ^status = #startingtestRedirectTo  self response redirectTo: 'http://www.seaside.st/'.  self assertLines: #('HTTP/1.1 302 Found' 'Location: http://www.seaside.st/' 'Content-Length: 0' '')backgroundJpg  ^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 254 0 28 67 114 101 97 116 101 100 32 119 105 116 104 32 71 73 77 80 32 111 110 32 97 32 77 97 99 255 219 0 67 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 219 0 67 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 192 0 17 8 0 10 3 138 3 1 34 0 2 17 1 3 17 1 255 196 0 25 0 1 0 3 1 1 0 0 0 0 0 0 0 0 0 0 0 0 6 7 8 5 10 255 196 0 29 16 1 0 1 4 3 1 0 0 0 0 0 0 0 0 0 0 0 6 4 7 54 118 5 53 181 183 255 196 0 23 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 6 4 5 255 196 0 32 17 1 0 1 2 6 3 0 0 0 0 0 0 0 0 0 0 0 1 3 4 5 51 52 114 115 178 2 193 194 255 218 0 12 3 1 0 2 17 3 17 0 63 0 247 139 23 239 46 62 231 67 243 200 26 102 134 69 251 203 143 185 208 252 242 6 153 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 114 226 101 208 253 114 111 233 192 215 26 156 184 153 116 63 92 155 250 112 54 171 45 93 191 36 123 100 191 210 87 217 245 14 16 10 228 144 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 57 49 196 101 58 231 57 230 85 53 27 46 76 113 25 78 185 206 121 149 77 70 224 99 57 148 54 121 246 133 6 15 149 91 146 58 195 255 217) asByteArrayhierarchyPathString  ^String streamContents: [:arg1 |  arg1 nextPut: $/.        self hierarchyNames do: [:arg2 |  arg1 nextPutAll: arg2 ] separatedBy: [ arg1 nextPut: $/ ] ]beTop  self relationship: 'top'tag  ^'datalist'tag  ^'label'isRunning  self subclassResponsibilityrenderTasksOn: arg1  tasks do: [:arg2 |  arg1 div: [ arg1 div: arg2.              arg1 anchor                 callback: [ tasks remove: arg2 ];                 with: '(remove task)' ] ]localAttributesDo: arg1  onDrop: arg1  self document scriptGenerator event: 'drop' do: arg1 on: selftestNewDocumentNotHandler  | tmp1 tmp2 |  tmp1 := self createRequestContext.  tmp2 := tmp1 newDocument.  self assert: tmp2 notNilchildren  ^Array with: self componenttestAddKeyOfSessionToUrl  | tmp1 tmp2 |  tmp1 := self requestContext.  tmp2 := tmp1 request uri copy.  strategy addKey: 'The_Metaphor' toUrl: tmp2.  self assert: tmp2 greaseString = '/1/2;jsessionid=The_Metaphor'redirectToContinuation: arg1  self respond: [:arg2 |  arg2 redirectTo: arg1 registerForUrl ]decoratedComponent  ^nillabel  ^'Deprecated (' , filter notifications size printString , ')'renderTypeOn: arg1  arg1 label     for: arg1 nextId;     with: 'type:'.  arg1 space.  arg1 select     id: arg1 lastId;     list: self types;     selected: type;     labels: [:arg2 |  self typesDictionary at: arg2 ];     callback: [:arg3 |  type := arg3 ]visitDecoration: arg1  self visitPresenter: arg1testAsSelector  self assert: (WAFileLibrary asSelector: 'main.css') = #mainCss.  self assert: (WAFileLibrary asSelector: 'main.js') = #mainJs.  self assert: (WAFileLibrary asSelector: 'style-2.css') = #style2Css.  self assert: (WAFileLibrary asSelector: 'style_2.css') = #style2Css.  self assert: (WAFileLibrary asSelector: 'main') = #main.  self assert: (WAFileLibrary asSelector: 'main.') = #main.  self assert: (WAFileLibrary asSelector: ').find(') isNil.  self assert: (WAFileLibrary asSelector: '),10)') isNilrenderTextInputOn: arg1  self renderLabel: 'Text Input' input: [ arg1 textInput           value: textInput;           callback: [:arg2 |  textInput := arg2 ] ] output: textInput printString on: arg1children  ^Array with: inputElementsnextPut: arg1  | tmp1 tmp2 |  tmp1 := arg1 greaseInteger.  tmp2 := table at: tmp1 + 1.  tmp2 notNil ifTrue: [ stream nextPutAll: tmp2 ] ifFalse: [ stream nextPut: arg1 ]renderContentOn: arg1  counter renderOn: arg1.  arg1 paragraph: 'I am the Counter example using WASessionCookieProtectionFilter so you cannot copy/paste the url in another browser to hijack my session. See the class comment of WASessionCookieProtectionFilter for more information.'go  [ self chooseCheese.  self confirmCheese ] whileFalse.  self informCheesecreateRequest  ^WARequest newserverPort  ^self preferenceAt: #serverPortbreak  ^self brush: WABreakTag newlabel: arg1  label := arg1printOn: arg1  super printOn: arg1.  arg1 nextPut: $(.  key printOn: arg1.  arg1 nextPutAll: ' -> '.  value printOn: arg1.  arg1 nextPut: $)testForbidden  | tmp1 |  tmp1 := WAResponseGenerator on: self requestContext.  self requestContext response nextPutAll: 'oops'.  tmp1 forbidden.  self assertContents: 'Error: you are forbidden to access "/"'parseString  | tmp1 |  self expectChar: $".  tmp1 := WriteStream on: String new.  [ stream atEnd or: [ stream peek = $" ] ] whileFalse: [ tmp1 nextPut: self parseCharacter ].  ^self     expectChar: $";     createString: tmp1 contentsvalueForContext: arg1  arg1 at: self ifPresent: [:arg2 |  ^arg2 ].  self expressionAt: arg1 key ifPresent: [:arg3 |  ^arg1 at: self put: (arg3 determineValueWithContext: arg1 configuration: self) ].  (arg1 isAttributeLocalOn: self) ifTrue: [ ^arg1 at: self put: nil ].  ^arg1 at: self put: (self inheritedValueForContext: arg1)handle: arg1  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := String streamContents: [:arg2 |  arg1 consumer upToEnd do: [:arg3 |  arg2 nextPutAll: arg3 ] separatedBy: [ arg2 nextPutAll: GRPlatform current pathSeparator ] ].  tmp2 := self asSelector: tmp1.  (self fileSelectors includes: tmp2) ifFalse: [ ^self ].  tmp4 := self fileResourceOf: tmp2.  tmp3 := arg1 handler.  tmp3 useXSendfile ifTrue: [ arg1 respond: [:arg4 |  arg4                 cacheFor: tmp4 cacheDuration;                 headerAt: 'X-Sendfile' put: (self fullPathForFileName: tmp1 using: tmp3);                 contentType: tmp4 mimeType ] ] ifFalse: [ arg1 respond: [:arg4 |  arg4                 cacheFor: tmp4 cacheDuration;                 document: tmp4 contents value mimeType: tmp4 mimeType ] ]telephone: arg1  telephone := arg1tearDown  super tearDown.  adaptor stopped.  self assert: adaptor isStopped.  manager unregister: adaptor.  self deny: (manager adaptors includes: adaptor)pageExpired  self ifResetPossible: [ self response           doNotCache;           contentType: WAMimeType textHtml ].  self response nextPutAll: (WAHtmlCanvas builder           fullDocument: true;           rootBlock: [:arg1 |  arg1 title: 'Page Expired' ];           render: [:arg2 |  arg2 heading: 'Page Expired'.              arg2 paragraph: 'This page has expired. Please use the back-button to navigate to the last valid page.' ])testOnlyOne  | tmp1 tmp2 tmp3 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp3 := self requestContext.  tmp3 request setCookies: (Array with: tmp1).  tmp2 := strategy keyFromContext: tmp3.  self assert: tmp2 = 'cookie1'writeFootOn: arg1  arg1 closeTag: 'body'.  arg1 closeTag: 'html'vm  ^self image vmparagraph  ^self tag: 'p'testButton  self assert: [:arg1 |  arg1 button ] gives: '<button type="submit"></button>'.  self assert: [:arg1 |  arg1 button text: 'foo' ] gives: '<button type="submit">foo</button>'.  self assert: [:arg1 |  arg1 button with: 'foo' ] gives: '<button type="submit">foo</button>'.  self assert: [:arg1 |  arg1 button beSubmit ] gives: '<button type="submit"></button>'.  self assert: [:arg1 |  arg1 button bePush ] gives: '<button type="button"></button>'.  self assert: [:arg1 |  arg1 button beReset ] gives: '<button type="reset"></button>'handleFiltered: arg1  (self verifyRequest: arg1 request) ifTrue: [ super handleFiltered: arg1 ] ifFalse: [ arg1 responseGenerator           forbidden;           respond ]committedCheck  self isCommitted ifTrue: [ WAIllegalStateException signal ]writeHeadersOn: arg1  headers keysAndValuesDo: [:arg2 :arg3 |  arg1           nextPutAll: arg2;           nextPutAll: ': ';           nextPutAll: arg3 greaseString;           crlf ]renderEntityTableColumnGroupsOn: arg1  arg1 tableColumnGroup.  arg1 tableColumnGroup span: 3.  arg1 tableColumnGroup     span: 3;     align: 'center'renderDateTimeOn: arg1  arg1 heading     level3;     with: 'Form with #dateInput and #timeInput'.  arg1 form     defaultAction: [ message := 'Default action: ' , date greaseString , ' ' , time greaseString ];     with: [ arg1 div           id: #inputs;           with: [ arg1 dateInput                 callback: [:arg2 |  self date: arg2 ];                 with: self date.              arg1 space: 10.              arg1 timeInput                 withSeconds;                 on: #time of: self.              arg1 break.              arg1 text: message.              arg1 break.              arg1 submitButton callback: [ message := 'Button action: ' , date greaseString , ' ' , time greaseString ] ] ]onCopy: arg1  self document scriptGenerator event: 'copy' do: arg1 on: selfbeLeftToRight  self textDirection: 'LTR'testWrongKey  | tmp1 tmp2 tmp3 |  tmp1 := WARequestCookie key: strategy keyCookieName , '-not' value: 'cookie'.  tmp2 := self requestContext.  tmp2 request setCookies: (Array with: tmp1).  tmp3 := strategy keyFromContext: tmp2.  self assert: tmp3 isNilsetHtmlBody: arg1  self addPart: (WAHtmlEmailBody renderingBlock: arg1)tag  ^'style'children  ^OrderedCollection new     add: beginDate;     add: endDate;     add: beginTime;     add: endTime;     add: beginDAT;     add: endDAT;     yourselffileName  ^fileNameisWriteable  ^self isOverride or: [ self isModify ]componentName  ^componentNameisActive  ^self handler notNil and: [ self handler parent notNil ]basicForm: arg1  self basicForm with: arg1testAsMIMEDocument  self assert: document seasideMimeDocument == documentinitializeOn: arg1  self initialize.  stream := arg1renderUploadOn: arg1  arg1 form     multipart;     with: [ arg1 div: [ arg1 fileUpload callback: [:arg2 |  file := arg2 ].              arg1 submitButton text: 'Load' ] ]responseFrom: arg1  self shouldNotImplementvisitDelegation: arg1  self visitDecoration: arg1beRightToLeft  self textDirection: 'RTL'handleDefault: arg1  arg1 responseGenerator     notFound;     respondnext  ^next contentstest: arg1  test := arg1testCreation11  | tmp1 |  tmp1 := WAHttpVersion http11.  self assert: tmp1 major = 1.  self assert: tmp1 minor = 1onMouseMove: arg1  self document scriptGenerator event: 'mousemove' do: arg1 on: selfparseQuery: arg1 from: arg2 to: arg3  | tmp1 |  tmp1 := arg2.  [ tmp1 > 0 and: [ tmp1 < arg3 ] ] whileTrue: [ | tmp2 tmp3 |        tmp2 := arg1 indexOf: $= startingAt: tmp1.        tmp3 := arg1 indexOf: $& startingAt: tmp1.        tmp3 := tmp3 > 0 ifTrue: [ tmp3 min: arg3 ] ifFalse: [ arg3 ].        (tmp2 > 0 and: [ tmp2 < tmp3 ]) ifTrue: [ self addField: (self class decodePercentAndPlus: arg1 from: tmp1 to: tmp2) value: (self class decodePercentAndPlus: arg1 from: tmp2 + 1 to: tmp3) ] ifFalse: [ self addField: (self class decodePercentAndPlus: arg1 from: tmp1 to: tmp3) ].        tmp1 := tmp3 + 1 ]renderTableRowsOn: arg1  self rows do: [:arg2 |  arg2 = #- ifTrue: [ self renderSpacerRowOn: arg1 ] ifFalse: [ self renderRowForSelector: arg2 on: arg1 ] ]renderDownloadOn: arg1  arg1 heading     level2;     with: 'Loaded versions'.  arg1 unorderedList: [ self sortedWorkingCopies do: [:arg2 |  arg1 listItem: [ arg1 text: arg2 description.                    arg1 space.                    arg1 anchor                       callback: [ self newVersion: arg2 ];                       with: 'Save' ] ] ]at: arg1 ifPresent: arg2  ^self cachedValues at: arg1 ifPresent: arg2parent: arg1  parent := arg1openTag: arg1  self openTag: arg1 attributes: nil closed: falsevisitClassListAttribute: arg1  self visitListAttribute: arg1addFile: arg1  | tmp1 |  arg1 isNil ifTrue: [ ^self ].  tmp1 := (arg1 contentType isNil or: [ arg1 contentType isBinary or: [ arg1 contentType charSet isNil ] ]) ifTrue: [ arg1 rawContents ] ifFalse: [ GRPlatform current convertToSmalltalkNewlines: arg1 contentsDecoded ].  self class addFileNamed: arg1 fileName contents: tmp1responseForLibrary: arg1  context respond: [:arg2 |  arg2 contentType: WAMimeType textPlain.        arg1 fileSelectors do: [:arg3 |  arg2 stream                 nextPutAll: (arg1 asFilename: arg3);                 crlf ] ]initialize  super initialize.  self count: 0testArray  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := Array with: 1 with: 2 with: 3.  tmp2 := tmp1 snapshotCopy.  tmp1 at: 1 put: #a.  tmp3 := tmp1 snapshotCopy.  tmp1 at: 2 put: #b.  tmp4 := tmp1 snapshotCopy.  tmp1 restoreFromSnapshot: tmp2.  self assert: tmp1 equals: #(1 2 3).  tmp1 restoreFromSnapshot: tmp3.  self assert: tmp1 equals: #(a 2 3).  tmp1 restoreFromSnapshot: tmp4.  self assert: tmp1 equals: #(a b 3)testSlash  url host: 'seaside.st'.  self assert: (url           slash: true;           greaseString) = 'http://seaside.st/'.  self assert: (url           slash: false;           greaseString) = 'http://seaside.st/'.  url addToPath: 'foo'.  self assert: (url           slash: true;           greaseString) = 'http://seaside.st/foo/'.  self assert: (url           slash: false;           greaseString) = 'http://seaside.st/foo'options  ^options ifNil: [ self defaultOptions ]error: arg1  ^WAJsonSyntaxError signal: arg1beMetadata  self kind: 'metadata'isFileSelector: arg1  ^arg1 isUnary and: [ (self lastUpperCaseIndexIn: arg1) > 1 and: [ (self nonFileSelectors includes: arg1) not ] ]testRenderOnCustomStream  | tmp1 |  tmp1 := String streamContents: [:arg1 |  WAHtmlCanvas builder render: [:arg2 |  arg2 unorderedList: [ arg2 listItem: 'an item' ] ] on: arg1 ].  self assert: tmp1 = '<ul><li>an item</li></ul>'isExceptionFilter  ^falsepeekToEnd  ^Array withAll: pathresponse  ^responserenderContentOn: arg1  items isEmpty ifTrue: [ ^self ].  arg1 div     class: 'batch';     with: [ self renderPreviousOn: arg1.        self renderPagesOn: arg1.        self renderNextOn: arg1 ]height: arg1  self attributes at: 'height' put: arg1actions  ^self target perform: actionsSelectorrenderContentOn: arg1  self renderInstructionsOn: arg1.  arg1 form: [ arg1 div: [ self renderNumberListOn: arg1.              self renderLetterListOn: arg1.              arg1 submitButton ] ].  arg1 paragraph: 'This should always be a NUMBER: ' , number greaseString.  arg1 paragraph: 'This should always be a LETTER: ' , letter greaseString.  arg1 paragraph: [ | tmp1 |        tmp1 := arg1 actionUrl greaseString.        arg1 anchor           url: '#';           onClick: 'swapCallbacks("' , tmp1 , '","letter-list", "number-list")';           with: 'Try to break it' ]removeKey: arg1  ^mutex critical: [ cache removeKey: arg1 ]parent: arg1  parent := arg1scriptGeneratorClass  ^(self preferenceAt: #scriptGeneratorClass) valuenotifications  ^notificationsurlEncoder  ^urlEncoderrenderExplanationOn: arg1  arg1 paragraph: 'This test makes sure the server passes both GET and POST paramters to Seaside. Simply hit ''run test'' and ''success'' should be displayed. If ''fail'' is displayed or ''run test'' is displayed again then the test has failed.'priority  ^100sameSite  ^sameSitecontentType  ^WAMimeType textPlainrenderStatsOn: arg1  arg1 table: [ arg1 tableRow: [ arg1 tableHeading: 'Total session instances'.              arg1 tableData: WAExpirySession allInstances size ].        arg1 tableRow: [ arg1 tableHeading: 'Cached session instances for this Application'.              arg1 tableData: self application cache size ].        arg1 tableRow: [ arg1 tableHeading: 'Total component instances'.              arg1 tableData: self class allInstances size ].        arg1 tableRow: [ arg1 tableHeading: 'Sessions created'.              arg1 tableData: WAExpirySession created ].        arg1 tableRow: [ arg1 tableHeading: 'Sessions unregistered'.              arg1 tableData: WAExpirySession unregistered ] ]delegations  ^self decorations select: [:arg1 |  arg1 isDelegation ]testUnhandledException  [ self handlerClass handleExceptionsDuring: [ self unhandledExceptionClass signal ] context: self requestContext ] on: self unhandledExceptionClass do: [:arg1 |  ^self ].  self assert: falseassert: arg1 gives: arg2  | tmp1 |  tmp1 := String streamContents: [:arg3 |  | tmp2 tmp3 tmp4 |        tmp4 := WAHtmlDocument on: arg3.        tmp2 := WARenderContext new           actionUrl: WAUrl new;           document: tmp4;           yourself.        tmp3 := WAHtmlRoot context: tmp2.        arg1 value: tmp3.        tmp4 open: tmp3.        tmp4 close ].  self assert: tmp1 = ('<html><head><title></title>' , arg2 , '</head><body onload="onLoad()"><script type="text/javascript">function onLoad(){};</script></body></html>') description: 'Expected: ' , arg2 printString , ', Actual: ' , tmp1 printString resumable: truetestFromStringOldNetscape  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := WACookie fromString: 'Customer=WILE_E_COYOTE;                 Part_Number=Rocket_Launcher_0001;                 Shipping=FedEx' codec: GRNullCodec new.  self assert: tmp1 size = 3.  tmp2 := tmp1 detect: [:arg1 |  arg1 key = 'Customer' ].  self assert: tmp2 value = 'WILE_E_COYOTE'.  tmp3 := tmp1 detect: [:arg1 |  arg1 key = 'Part_Number' ].  self assert: tmp3 value = 'Rocket_Launcher_0001'.  tmp4 := tmp1 detect: [:arg1 |  arg1 key = 'Shipping' ].  self assert: tmp4 value = 'FedEx'testWith  | tmp1 |  tmp1 := url with: 'with'.  url addToPath: 'zork'.  url addField: 'zork'.  self assert: url printString = '/zork?zork'.  self assert: tmp1 printString = '/with'testAtPut  self assert: [:arg1 |  arg1 at: 'id' put: 'foo' ] gives: ' id="foo"'.  self assert: [:arg1 |  arg1 at: 'tabindex' put: 6 ] gives: ' tabindex="6"'.  self assert: [:arg1 |  arg1 at: 'checked' put: true ] gives: ' checked'.  self assert: [:arg1 |  arg1 at: 'readonly' put: false ] gives: ''.  self assert: [:arg1 |  arg1 at: 'disabled' put: nil ] gives: ''testFullDocument  | tmp1 |  tmp1 := WAHtmlCanvas builder     fullDocument: true;     render: [:arg1 |  arg1 unorderedList: [ arg1 listItem: 'an item' ] ].  self assert: tmp1 = '<html><head><title></title></head><body onload="onLoad()"><ul><li>an item</li></ul><script type="text/javascript">function onLoad(){};</script></body></html>'beDefault  self default: truepath  ^'/' , self registryNametime  ^timerenderParentSelectorOn: arg1  | tmp1 tmp2 |  tmp2 := self potentialParents.  arg1 label: 'Possible parents: '.  arg1 break.  tmp1 := WAValueHolder new.  arg1 select     list: tmp2;     class: 'fix';     labels: [:arg2 |  arg2 name ];     callback: [:arg3 |  tmp1 contents: arg3 ].  arg1 space.  arg1 anchor     class: 'large';     title: 'Add new parent configuration';     onClick: 'return submitForm(this)';     callback: [ self addParent: tmp1 contents ];     with: 'Add'parents  ^parentsopenUsingDirectRendering: arg1  | tmp1 |  tmp1 := self requestContext request at: '_debugAction' ifAbsent: [ nil ].  tmp1 = '_debug' ifTrue: [ ^super open: arg1 ].  tmp1 = '_proceed' ifTrue: [ ^self basicResume: arg1 ].  self requestContext response resetIfPossible ifTrue: [ | tmp2 tmp3 |        tmp2 := tmp1 = '_fullStack'.        tmp3 := WAWalkback current exception: arg1.        tmp2 ifTrue: [ tmp3 showFullStack ].        self requestContext respond: [:arg2 |  arg2                 contentType: self application contentType;                 nextPutAll: (WAHtmlCanvas builder                       fullDocument: true;                       rootBlock: [:arg3 |  tmp3 updateRoot: arg3 ];                       render: tmp3) ] ] ifFalse: [ super open: arg1 ]execute  self requestor show: (WADispatcherCopyPage new           handler: self handler;           yourself) onAnswer: [:arg1 |  arg1 isNil ifFalse: [ self requestor configure: arg1 ] ]command: arg1  self command with: arg1encodeOn: arg1  self encodeBeforeOn: arg1.  self isClosed ifTrue: [ ^self ].  self encodeChildrenOn: arg1.  self encodeAfterOn: arg1message: arg1  ^WAComponent new     addMessage: arg1;     yourselftype  ^'datetime-local'renderAnsweringToolsOn: arg1  arg1 anchor     callback: [ self debug ];     title: 'Open a debugger in your IDE and block until you hit "Proceed"';     with: 'Debug'.  self exception isResumable ifTrue: [ arg1 space.        arg1 anchor           callback: [ self proceed ];           with: 'Proceed' ].  self limit < self frameCount ifTrue: [ arg1 space.        arg1 anchor           callback: [ self showFullStack ];           with: 'Full Stack' ]initialRequest: arg1  super initialRequest: arg1.  self openHandler: self lookupHandlerrenderComponentOn: arg1  arg1 heading     level4;     with: component class headerForExampleBrowser.  arg1 div     class: 'component';     with: component.  hasAnswer ifTrue: [ arg1 div           class: 'answer';           with: answer printString ]renderOptionsOn: arg1  arg1 unorderedList     list: self options;     selected: self selection;     callback: [:arg2 |  self select: arg2 ];     labels: [:arg3 |  self labelForOption: arg3 ]newStrategy  ^WAQueryFieldHandlerTrackingStrategy newrequestUrlFor: arg1  self subclassResponsibilitytestHandlesReturnsBool  self assertHandles: WATestError new returnsSatisfying: [:arg1 |  #(true false) includes: arg1 ]unknownRequest  ^self startrequestCookiesFor: arg1  self subclassResponsibilitypathParameterAllAt: arg1 key: arg2 ifAbsent: arg3  ^self privatePathParameterMapAt: arg1 ifPresentDo: [:arg4 |  arg4 allAt: arg2 ifAbsent: arg3 ] ifAbsent: arg3renderBidirectionalOn: arg1  arg1 heading     level2;     with: '<bdi>'.  arg1 unorderedList: [ arg1 listItem: [ arg1 text: 'User '.              arg1 bidirectional: 'jcranmer'.              arg1 text: ' 12 posts.' ].        arg1 listItem: [ arg1 text: 'User '.              arg1 bidirectional: 'hober'.              arg1 text: ' 5 posts.' ] ]handler: arg1  handler := arg1tag: arg1 with: arg2  (self tag: arg1) with: arg2renderRowActions: arg1 named: arg2 on: arg3  withoutFragment  ^self copy     fragment: nil;     yourselfaccept: arg1  arg1 visitTask: selfsetUp  super setUp.  strategy := self newStrategyresponseFor: arg1  ^WABufferedResponse on: (self codec encoderFor: (GRPlatform current writeCharacterStreamOn: String new))initialize  super initialize.  showComment := false.  showInstance := truetestParseAbsolute  self absoluteExamples do: [:arg1 |  self assert: (WAUrl absolute: arg1) greaseString = arg1 description: arg1 resumable: true ]docType: arg1  docType := arg1testCompileString  | tmp1 tmp2 |  tmp1 := WATestingFiles default.  [ | tmp3 tmp4 tmp5 |  self deny: (tmp1 class selectors includes: #demoTxt).  tmp3 := 'this is a string'.  tmp2 := WAFile new     contentType: WAMimeType textPlain;     contents: tmp3;     fileName: 'demo.txt';     yourself.  tmp1 addFile: tmp2.  self assert: (tmp1 class selectors includes: #demoTxt).  tmp4 := tmp1 perform: #demoTxt.  self assert: tmp4 = tmp3.  tmp5 := tmp1 perform: #demoTxt.  self assert: tmp4 == tmp5 ] ensure: [ tmp1 removeFile: tmp2 fileName.        self deny: (tmp1 class selectors includes: #demoTxt) ]testSubmitButton  self assert: [:arg1 |  arg1 submitButton ] gives: '<input type="submit"/>'.  self assert: [:arg1 |  arg1 submitButton callback: [  ] ] gives: '<input name="1" type="submit"/>'.  self assert: [:arg1 |  self should: [ arg1 submitButton callback: [:arg2 |   ] ] raise: Error ] gives: '<input type="submit"/>'.  self assert: [:arg1 |  arg1 submitButton on: #value of: self ] gives: '<input value="Value" name="1" type="submit"/>'.  self assert: [:arg1 |  arg1 submitButton: 'foo' ] gives: '<input value="foo" type="submit"/>'.  self assert: [:arg1 |  arg1 submitButton text: 'bar' ] gives: '<input value="bar" type="submit"/>'.  self assert: [:arg1 |  arg1 submitButton with: 'zork' ] gives: '<input value="zork" type="submit"/>'defaultUrlCharset  ^'utf-8'shouldCall  ^self session notNil and: [ self requestContext request isPost ]value  self subclassResponsibilitykeys  ^byKey keysrenderContentOn: arg1  super renderContentOn: arg1.  arg1 heading     level2;     with: 'Actions'.  arg1 unorderedList: [ arg1 listItem: [ arg1 anchor                 callback: [ self image snapshot: true andQuit: false ];                 with: 'Save' ].        arg1 listItem: [ arg1 anchor                 callback: [ self image snapshot: true andQuit: true ];                 with: 'Save and Quit' ].        arg1 listItem: [ arg1 anchor                 callback: [ self image snapshot: false andQuit: true ];                 with: 'Quit Without Saving' ] ]cloneHandler  ^self copyserverProtocol  ^self preferenceAt: #serverProtocolstates  ^Array with: selfparents  ^parentsBlock isNil ifFalse: [ parentsBlock value ] ifTrue: [ #() ]rowSpan: arg1  self attributes at: 'rowspan' put: arg1changed: arg1  dependent isNil ifFalse: [ dependent update: arg1 ]url: arg1  self attributeAt: 'src' put: arg1testIsCommitted  super testIsCommitted.  self assert: self response isCommittedkey  ^key ifNil: [ key := canvas callbacks store: WADispatchCallback new ]serverClass  ^Smalltalk classNamed: #RFBServertestAtIfPresent  one at: 'foo' put: 1.  two at: 'bar' put: 2.  self assert: (merged at: 'foo' ifPresent: [:arg1 |  self assert: arg1 = 1.              true ]).  self assert: (merged at: 'bar' ifPresent: [:arg1 |  self assert: arg1 = 2.              true ]).  two at: 'foo' put: 3.  self assert: (merged at: 'foo' ifPresent: [:arg1 |  self assert: arg1 = 1.              true ]).  merged at: 'zork' ifPresent: [:arg1 |  self assert: false ]removeHeaderAt: arg1  self committedCheck.  ^super removeHeaderAt: arg1contentType: arg1  self responseHeaderName: 'Content-Type'.  self content: arg1renderEditMemoryParameterAt: arg1 named: arg2 on: arg3  | tmp1 |  tmp1 := SmalltalkImage current vm parameterAt: arg1.  self renderLabel: arg2 value: [ arg3 render: (self printMemory: tmp1).        self renderEditVMParameterAt: arg1 callback: [ self editMemoryVMParameterAt: arg1 named: arg2 ] on: arg3 ] on: arg3recipientsAddresses  ^Array streamContents: [:arg1 |  self to do: [:arg2 |  arg1 nextPut: arg2 address ].        self cc do: [:arg2 |  arg1 nextPut: arg2 address ].        self bcc do: [:arg2 |  arg1 nextPut: arg2 address ] ]<= arg1  ^self priority < arg1 priority or: [ self priority = arg1 priority and: [ self key asNumber <= arg1 key asNumber ] ]rootBlock: arg1  rootBlock := arg1adaptorClasses  ^(WAServerAdaptor allSubclasses reject: #isAbstract) sorted: #name ascendingtestCharCodingWithHandler  self assert: [:arg1 |  arg1 basicForm ] gives: '<form accept-charset="utf-16" method="post" action="/"></form>'testNonLatinWindowsPath  | tmp1 |  self shouldnt: [ tmp1 := (String with: (Character codePoint: 50976) with: (Character codePoint: 47532) with: (Character codePoint: 47484)) , '.txt' ] raise: Error.  file fileName: tmp1.  self assert: file fileName = tmp1.  file fileName: 'C:\important\' , tmp1.  self assert: file fileName = tmp1addCallback  self subclassResponsibilitylabelBlock: arg1  labelBlock := arg1video  ^self brush: WAVideoTag newhandleFiltered: arg1  equal  testCoreAttributesStyle  self assert: [:arg1 |  arg1 div style: 'left: 0' ] gives: '<div style="left: 0"></div>'.  self assert: [:arg1 |  arg1 div           style: 'left: 0';           style: 'top: 2' ] gives: '<div style="left: 0;top: 2"></div>'testEquality  | tmp1 tmp2 tmp3 |  tmp1 := WAHttpVersion major: 1 minor: 0.  tmp2 := WAHttpVersion major: 1 minor: 0.  tmp3 := WAHttpVersion major: 1 minor: 1.  self assert: tmp1 = tmp2.  self assert: tmp1 <= tmp2.  self assert: tmp1 >= tmp2.  self deny: tmp1 = tmp3kind: arg1  self attributeAt: 'kind' put: arg1accept: arg1  arg1 visitPresenter: selfnotFound  self status: WAResponse statusNotFoundnext  ^nextsetValueWithNewTime  ^value := Time hour: hours minute: (minutes min: 59) second: (seconds min: 59)writeOn: arg1  self writeStatusOn: arg1.  self writeHeadersOn: arg1.  self writeCookiesOn: arg1.  arg1 crlf.  self writeContentOn: arg1closeOn: arg1  self loadScripts isEmpty ifTrue: [ ^self ].  self writeScriptTag: [ self writeLoadScriptsOn: arg1 ] on: arg1mark: arg1  ^arg1 on: WAMarkerRequest do: [:arg2 |  arg2 resume: thisContext home ]firstValue  ^firstValuebefore  cc  ^ccsecondKey  ^secondKeyinitializeWithRoot: arg1  self initialize.  root := arg1setBody: arg1  body := arg1content: arg1  self attributeAt: 'content' put: arg1postCopy  | tmp1 |  super postCopy.  tmp1 := dictionary.  dictionary := GRPlatform current reducedConflictDictionary new.  tmp1 keysAndValuesDo: [:arg1 :arg2 |  dictionary at: arg1 put: arg2 copy ]beAlternate  self relationship: 'alternate'serverHostname: arg1  self preferenceAt: #serverHostname put: arg1priority  ^700at: arg1 put: arg2  ^self cachedValues at: arg1 put: arg2options  ^#()renderEntityTableHeadOn: arg1  arg1 tableHead: [ arg1 tableRow: [ #('Character' 'Entity' 'Decimal' 'Hex') do: [:arg2 |  arg1 tableHeading                       scope: 'col';                       rowSpan: 2;                       with: arg2 ].              arg1 tableHeading                 scope: 'colgroup';                 colSpan: 3;                 with: 'Rendering in Your Browser' ].        arg1 tableRow: [ #('Entity' 'Decimal' 'Hex') do: [:arg2 |  arg1 tableHeading                       scope: 'col';                       with: arg2 ] ] ]user  ^usernavigation: arg1  self navigation with: arg1featureString  ^String streamContents: [:arg1 |  features associations do: [:arg2 |  arg1                 nextPutAll: arg2 key;                 nextPut: $=.              arg1 nextPutAll: (arg2 value == true ifTrue: [ 'yes' ] ifFalse: [ arg2 value == false ifTrue: [ 'no' ] ifFalse: [ arg2 value greaseString ] ]) ] separatedBy: [ arg1 nextPut: $, ] ]fileSizeOf: arg1  self subclassResponsibilityhandler: arg1  handler := arg1.  maximumSize := arg1 configuration at: #maximumSize.  maximumRelativeAge := arg1 configuration at: #maximumRelativeAge.  maximumAbsoluteAge := arg1 configuration at: #maximumAbsoluteAge.  overflowAction := arg1 configuration at: #overflowActionexpunge  next isNil ifFalse: [ next previous: previous ].  previous isNil ifFalse: [ previous next: next ].  next := nil.  previous := nilgreaseString  ^self contentStringrenderFooterOn: arg1  | tmp1 |  tmp1 := SmalltalkImage current vm parameterAt: 3.  arg1 tableFoot     class: 'right';     with: [ self renderLabel: 'Total' value: (self printMemory: tmp1) on: arg1 ]copy  | tmp1 |  tmp1 := self class initialSize: keyTable size maximumSize: maximumSize maximumAbsoluteAge: maximumAbsoluteAge maximumRelativeAge: maximumRelativeAge overflowAction: overflowAction.  self keysAndValuesDo: [:arg1 :arg2 |  tmp1 at: arg1 put: arg2 ].  ^tmp1renderExplanationOn: arg1  arg1 paragraph: [ arg1 text: 'This is a functional test for WAValidationDecoration.'.        arg1 orderedList: [ arg1 listItem: 'Clicking on ''Start'' should take you to a new page with two links, "Fail validation" and "Suceed validation"'.              arg1 listItem: 'Clicking on "Fail validation" should display "Validation Failed!" above the two links'.              arg1 listItem: 'Clicking on "Suceed validation" should just display "Validation Suceeded!" and then take you back to this page' ] ]upTime  ^WAUpTimeTracker imageUpTimecodec  ^codectestFilenames  | tmp1 |  tmp1 := WATestingFiles default filenames.  self assert: tmp1 size = 2.  self assert: (tmp1 includes: 'sample.png').  self assert: (tmp1 includes: 'sample.js')initializeWithStream: arg1 codec: arg2  self initialize.  stream := arg1determineValueWithContext: arg1 configuration: arg2  ^self valueisClosed  ^children isEmptyOrNilstore: arg1  | tmp1 |  [ | tmp2 |  tmp2 := false.  tmp1 := WAKeyGenerator current keyOfLength: self keySize.  dictionary at: tmp1 ifAbsentPut: [ tmp2 := true.        arg1 ].  tmp2 ] whileFalse.  ^tmp1testForwardedFor  | tmp1 tmp2 |  tmp1 := WARequest method: 'GET' uri: '/foo?bar=1'.  tmp2 := Dictionary new.  tmp1 setHeaders: tmp2.  tmp2 at: 'forwarded' put: 'For="[2001:db8:cafe::17]:4711"'.  self assert: tmp1 forwardedFor equals: '"[2001:db8:cafe::17]:4711"'.  tmp2 at: 'forwarded' put: 'for=192.0.2.60;proto=http;by=203.0.113.43'.  self assert: tmp1 forwardedFor equals: '192.0.2.60'.  tmp2 at: 'forwarded' put: 'for=192.0.2.43, for=198.51.100.17'.  self assert: tmp1 forwardedFor equals: '192.0.2.43'visitDecoration: arg1  super visitDecoration: arg1.  (self shouldVisitNextPresenterOf: arg1) ifTrue: [ arg1 next accept: self ]computeDuration  | tmp1 |  tmp1 := (endDAT dateAndTime asDate - beginDAT dateAndTime asDate) days.  tmp1 isZero ifFalse: [ self inform: tmp1 greaseString , ' day(s)' onAnswer: [  ] ] ifTrue: [ self inform: (endDAT dateAndTime asTime subtractTime: beginDAT dateAndTime asTime) asSeconds greaseString , ' second(s)' onAnswer: [  ] ]basicPerformAction  ^action valueWithPossibleArguments: (Array with: renderContext)storeCallback: arg1  ^canvas callbacks store: arg1modeSelector  ^(self mode greaseString , ':visitor:') asSymbolinitialize  super initialize.  batcher := WAAlphabeticBatchedList new items: Collection allSubclassesinitializeWithKey: arg1  self initialize.  key := arg1.  attributeHolders := Set new.  attributeInheritors := Set new.  cachedValues := Dictionary newshowHalos  ^showHalos contentsrenderStackOn: arg1  arg1 heading     level: 3;     with: 'Stack Trace'.  arg1 orderedList: [ self frames do: [:arg2 |  arg1 listItem: [ self renderStackFrame: arg2 on: arg1 ] ] ]children  ^Array with: self taskExampleaddScreen  self addMedia: 'screen'selectedInherited  ^(selectionsCurrent select: [:arg1 |  arg1 key = #inherited ]) collect: [:arg2 |  arg2 value ]hasAdvancedAttributes  ^self propertyAt: #hasAdvanced ifAbsent: [ false ]urlOf: arg1 using: arg2  ^arg2 baseUrlForLibrary     addToPath: self className;     addToPath: (self asFilename: arg1);     yourselfvisitor: arg1  visitor := arg1onStalled: arg1  self document scriptGenerator event: 'stalled' do: arg1 on: selfcolorInput  ^self brush: WAColorInputTag newparameters: arg1  parameters := arg1savePng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 6 98 75 71 68 0 0 0 0 0 0 249 67 187 127 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 7 116 73 77 69 7 213 11 10 13 55 15 158 42 216 191 0 0 0 140 116 69 88 116 67 111 109 109 101 110 116 0 77 101 110 117 45 115 105 122 101 100 32 105 99 111 110 10 61 61 61 61 61 61 61 61 61 61 10 10 40 99 41 32 50 48 48 51 32 74 97 107 117 98 32 39 106 105 109 109 97 99 39 32 83 116 101 105 110 101 114 44 32 10 104 116 116 112 58 47 47 106 105 109 109 97 99 46 109 117 115 105 99 104 97 108 108 46 99 122 10 10 99 114 101 97 116 101 100 32 119 105 116 104 32 116 104 101 32 71 73 77 80 44 10 104 116 116 112 58 47 47 119 119 119 46 103 105 109 112 46 111 114 103 103 138 199 71 0 0 2 132 73 68 65 84 56 203 157 146 77 72 84 97 20 134 159 185 221 241 230 207 228 76 224 181 49 205 145 178 81 108 81 81 52 38 20 184 200 22 69 20 46 66 40 44 130 138 169 193 86 45 42 202 69 17 84 16 6 82 180 40 10 34 176 40 40 106 91 208 34 137 68 138 166 69 153 84 106 134 164 232 220 155 206 253 249 78 11 97 108 178 54 189 155 243 193 225 60 156 247 61 95 224 200 217 227 39 63 91 21 218 216 184 51 9 84 1 91 129 134 160 38 217 208 194 159 63 22 25 206 205 187 231 207 157 224 31 10 52 119 116 237 141 173 172 143 85 151 155 131 171 107 202 58 170 35 133 107 109 207 39 253 45 195 235 222 231 234 195 215 81 226 145 55 203 186 59 239 12 255 21 144 60 125 190 219 157 26 59 236 137 198 168 31 102 218 40 99 129 30 164 173 101 35 203 43 22 115 249 254 11 252 161 62 98 5 227 127 155 239 36 121 44 37 95 70 6 68 68 100 224 115 90 122 211 3 146 186 246 68 18 7 47 72 207 171 47 210 245 244 173 180 158 186 46 239 6 135 229 119 89 150 37 169 142 164 232 134 238 179 180 60 198 196 196 4 225 146 114 180 192 36 133 226 0 208 247 113 20 179 68 231 251 120 134 247 3 159 88 178 168 16 2 0 66 65 65 1 0 186 231 130 40 193 87 138 237 39 110 204 219 177 119 112 2 215 243 185 216 243 146 139 61 47 1 120 124 118 31 200 108 95 3 80 162 80 190 162 235 80 35 0 237 187 119 210 152 88 199 204 140 77 52 164 209 148 88 207 222 214 237 0 236 105 94 129 242 21 34 50 7 16 17 34 145 48 21 101 49 46 29 88 199 205 187 15 136 199 170 208 8 160 17 32 81 95 205 173 123 143 104 219 92 195 142 166 245 20 21 23 229 3 0 44 203 194 52 77 170 163 181 57 72 227 170 229 212 198 42 185 124 251 33 109 155 107 216 181 41 129 105 154 56 142 147 179 168 3 40 165 176 109 27 0 211 52 49 77 147 238 163 133 28 187 218 67 214 245 217 223 82 79 251 182 45 104 154 198 212 212 20 182 109 19 10 133 230 0 134 97 80 89 89 153 23 222 154 134 13 60 187 178 1 0 219 182 113 28 135 233 233 233 121 33 235 0 253 253 253 184 174 155 215 240 60 15 93 215 115 239 63 21 137 68 242 51 240 60 143 116 58 205 200 200 8 153 76 6 17 65 68 48 12 131 161 161 33 66 161 80 174 90 150 133 101 89 249 87 80 74 81 92 92 68 48 24 204 125 18 0 215 117 17 53 11 19 53 123 62 229 251 249 22 194 225 48 165 165 165 68 163 81 0 178 217 44 64 46 237 120 93 28 165 20 241 186 58 148 82 44 137 70 115 150 3 169 142 228 25 224 52 255 167 206 95 147 59 51 76 213 34 98 109 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytestMozilla  | tmp1 tmp2 tmp3 tmp4 |  tmp1 := WAAccept fromString: 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5'.  self assert: tmp1 size = 7.  self assert: tmp1 at: 1 main: 'text' sub: 'xml' quality: 1.0.  self assert: tmp1 at: 2 main: 'application' sub: 'xml' quality: 1.0.  self assert: tmp1 at: 3 main: 'application' sub: 'xhtml+xml' quality: 1.0.  self assert: tmp1 at: 4 main: 'text' sub: 'html' quality: 0.9.  self assert: tmp1 at: 5 main: 'text' sub: 'plain' quality: 0.8.  self assert: tmp1 at: 6 main: 'image' sub: 'png' quality: 1.0.  self assert: tmp1 at: 7 main: '*' sub: '*' quality: 0.5.  tmp3 := WAAcceptCharset fromString: 'ISO-8859-1,utf-8;q=0.7,*;q=0.7'.  self assert: tmp3 size = 3.  self assert: tmp3 at: 1 charset: 'ISO-8859-1' quality: 1.0.  self assert: tmp3 at: 2 charset: 'utf-8' quality: 0.7.  self assert: tmp3 at: 3 charset: '*' quality: 0.7.  tmp4 := WAAcceptEncoding fromString: 'gzip,deflate'.  self assert: tmp4 size = 2.  self assert: tmp4 at: 1 encoding: 'gzip' quality: 1.0.  self assert: tmp4 at: 2 encoding: 'deflate' quality: 1.0.  tmp2 := WAAcceptLanguage fromString: 'de-de,de;q=0.8,en-us;q=0.5,en;q=0.3'.  self assert: tmp2 size = 4.  self assert: tmp2 at: 1 language: 'de' country: 'de' quality: 1.0.  self assert: tmp2 at: 2 language: 'de' country: nil quality: 0.8.  self assert: tmp2 at: 3 language: 'en' country: 'us' quality: 0.5.  self assert: tmp2 at: 4 language: 'en' country: nil quality: 0.3currentList  ^configuration currentCollectionAt: attribute keyhandleAnswer: arg1  ^(super handleAnswer: arg1) or: [ (self validate: arg1) not ]showClass  self model indicateClassMessagesavailablePort  ^(manager adaptors collect: [:arg1 |  arg1 port ]) asSet max + 1dispatcher: arg1  dispatcher := arg1writeDomainQuoted: arg1 on: arg2  domain isNil ifTrue: [ ^self ].  arg2 nextPutAll: '; domain='.  self write: self domain quoted: arg1 on: arg2isAttributeLocalOn: arg1  ^attributeHolders includes: arg1register: arg1  | tmp1 |  tmp1 := self documentHandlers store: (arg1           setParent: self;           yourself).  ^self basicUrl     addField: self documentHandlerFieldName value: tmp1;     yourselfchildren  ^Array with: componentrenderContentOn: arg1  string notNil ifTrue: [ arg1 anchor name: string ].  arg1 paragraph: 'Whatever you submit below should be added to the URL both as a path element and a fragment (the part after #).'.  arg1 form: [ arg1 div: [ arg1 textInput on: #string of: self.              arg1 submitButton ] ]save  handleFiltered: arg1  | tmp1 |  tmp1 := arg1 request url copy.  tmp1 path removeFirst.  arg1 respond: [:arg2 |  arg2           movedPermanently;           location: tmp1 ]tag  ^'meter'userAgent  ^self headerAt: 'user-agent'runTest  values := self requestContext request fields allAt: self parameterName.  wasExecuted := truegrowCheck  size > (keyTable size * self loadFactor) ifTrue: [ | tmp1 tmp2 tmp3 |        tmp3 := WAHashTableSizes atLeast: keyTable size * 2.        tmp1 := Array new: tmp3.        tmp2 := Array new: tmp3.        keyTable do: [:arg1 |  | tmp4 tmp5 |              tmp5 := arg1.              [ tmp5 isNil ] whileFalse: [ | tmp6 tmp7 |                    tmp4 := tmp5 next.                    tmp6 := tmp5 keyHash \\ tmp3 + 1.                    tmp7 := tmp1 at: tmp6.                    tmp7 isNil ifTrue: [ tmp1 at: tmp6 put: tmp5 ] ifFalse: [ [ tmp7 next isNil ] whileFalse: [ tmp7 := tmp7 next ].                          tmp7 next: tmp5 ].                    tmp5 next: nil.                    tmp5 := tmp4 ] ].        keyTable := tmp1 ]go  self show: (WAComponent new           addMessage: '3 seconds';           addDecoration: (WADelayedAnswerDecoration new delay: 3);           yourself)initialize  super initialize.  next := WAValueHolder newbeSearch  self relationship: 'search'basicPerformAction  super basicPerformAction.  self renderContext callbacks handle: self requestContextlabel  ^'Allocator'contents  ^contentsselectorsToInclude  ^#()startHour  ^startHourrowsAndDatesDisplay: arg1  cellBlock := arg1selectedComponent  ^(components detect: [:arg1 |  arg1 key = self selection ] ifNone: [ ^nil ]) valuetestCollectionInheritance  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |  tmp1 := WAConfigurationMock new     description: [:arg1 |  arg1 collection: #a ];     yourself.  tmp2 := WAConfigurationMock new     description: [:arg1 |  (arg1 collection: #a) default: #(1 2) ];     yourself.  tmp3 := WAConfigurationMock new     description: [:arg1 |  arg1 at: #a addAll: #(3) removeAll: #(2) ];     parents: [ Array with: tmp2 ];     yourself.  tmp4 := WAConfigurationMock new     description: [:arg1 |  arg1 at: #a addAll: #(1 2 3 4) ];     parents: [ Array with: tmp3 ];     yourself.  tmp5 := WAUserConfiguration new     addParent: tmp4;     at: #a addAll: #(4 5) removeAll: #(1 8);     yourself.  tmp6 := WAConfigurationMock new     description: [:arg1 |  arg1 at: #a addAll: #(3 4) removeAll: #(2 3) ];     parents: [ Array with: tmp3 ];     yourself.  self assert: (tmp1 at: #a) = #().  self assert: (tmp2 at: #a) = #(1 2).  self assert: (tmp3 at: #a) = #(1 3).  self assert: (tmp4 at: #a) = #(1 2 3 4).  self assert: (tmp5 at: #a) = #(2 3 4 5).  self assert: (tmp6 at: #a) = #(1 3 4)inheritedValueAndSourceAt: arg1 do: arg2  self configuration ancestorsDo: [:arg3 |  arg3 expressionAt: arg1 ifPresent: [:arg4 |  ^arg2 value: (arg3 at: arg1) value: arg3 ] ]rules: arg1  self attributes at: 'rules' put: arg1figure: arg1  self figure with: arg1respond  self requestContext respondbeMicrosummary  self relationship: 'microsummary'isAdvanced  ^advancedtextArea  ^self brush: WATextAreaTag newtestIsVendorSpecifc  | tmp1 |  tmp1 := WAMimeType fromString: 'image/png'.  self deny: tmp1 isVendorSpecific.  tmp1 := WAMimeType fromString: 'image/vnd.microsoft.icon'.  self assert: tmp1 isVendorSpecific.  tmp1 := WAMimeType fromString: 'vnd.microsoft.icon/image'.  self deny: tmp1 isVendorSpecificdelegate: arg1  delegate := arg1shouldRedirect  | tmp1 |  tmp1 := self request.  ^(tmp1 isGet and: [ tmp1 fields includesKey: '_n' ]) notname: arg1  self attributes at: 'name' put: arg1div  ^self tag: 'div'renderKeyboardInputOn: arg1  arg1 heading     level2;     with: '<kbd>'.  arg1 paragraph: [ arg1 text: 'Finally, type '.        arg1 keyboard: 'logout'.        arg1 text: ' and press the return key.' ]upPng  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 15 8 6 0 0 0 237 115 79 47 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 4 103 65 77 65 0 0 177 143 11 252 97 5 0 0 0 9 112 72 89 115 0 0 14 195 0 0 14 195 1 199 111 168 100 0 0 0 24 116 69 88 116 83 111 102 116 119 97 114 101 0 80 97 105 110 116 46 78 69 84 32 118 51 46 51 54 169 231 226 37 0 0 2 9 73 68 65 84 56 79 173 211 221 75 83 113 24 7 112 255 26 47 202 11 9 188 82 111 194 110 130 46 204 11 69 68 29 70 148 13 221 92 230 222 148 249 178 148 169 225 134 76 12 179 55 41 76 194 23 166 50 75 113 153 43 53 20 135 66 101 10 130 160 168 165 109 59 59 111 59 251 246 123 57 243 46 72 233 129 7 126 23 207 239 115 190 60 231 156 140 140 255 81 83 11 91 33 95 96 39 238 120 253 3 246 87 164 135 190 195 246 226 43 30 60 219 68 253 224 6 44 79 34 168 123 188 6 83 255 42 106 253 43 48 246 46 193 53 248 41 78 239 177 231 63 124 187 173 249 130 7 56 111 155 188 33 141 1 244 201 23 233 219 157 243 96 128 125 104 11 23 169 170 246 89 14 216 94 126 99 247 101 53 9 137 180 40 171 136 139 42 162 162 130 83 65 198 207 152 136 195 147 4 246 143 4 236 29 198 176 179 31 101 243 149 238 25 29 32 11 163 165 104 26 148 100 146 65 9 69 133 32 113 232 119 66 197 175 184 132 163 40 129 78 69 28 28 39 216 124 121 243 52 7 232 182 105 37 9 160 82 132 180 76 32 145 64 2 77 67 160 24 77 36 168 56 137 41 56 142 74 108 190 172 105 146 3 244 85 49 32 149 98 64 26 146 201 89 162 16 65 40 228 254 216 132 214 249 70 6 209 42 117 78 112 192 50 176 126 6 80 36 13 165 211 72 4 114 133 172 112 206 89 96 13 214 192 60 106 100 243 37 246 49 14 212 246 125 225 0 105 77 79 194 16 210 162 42 195 58 107 130 227 189 25 79 35 126 244 175 121 113 247 141 1 149 3 165 40 170 31 230 64 77 239 50 3 104 165 116 68 211 147 120 22 219 96 24 41 134 37 80 141 190 213 30 120 87 60 48 141 85 227 106 91 46 242 27 110 114 192 232 251 124 6 252 237 112 195 127 13 61 75 29 240 132 91 112 189 187 0 145 221 117 20 214 233 9 186 158 135 195 119 30 45 128 126 89 183 58 230 96 112 191 67 69 107 144 108 57 192 22 85 226 24 71 65 103 62 218 23 155 209 242 193 137 43 247 179 80 104 30 6 189 247 207 255 98 158 43 7 57 182 108 100 155 47 227 210 189 76 30 157 212 31 13 179 147 141 54 160 254 127 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraynewDocumentHandler  ^WADocumentHandler document: 'WADocumentHandler document: document'callback: arg1  values := Dictionary new.  self name: (self storeCallback: (self callbackClass on: arg1 values: values))encodeAfterOn: arg1  arg1 closeTag: self tagexpressionAt: arg1 ifAbsent: arg2  ^expressions at: arg1 ifAbsent: arg2datetime  ^datetimetestPath  self assert: url greaseString = '/'.  url path add: 'aa'.  self assert: url greaseString = '/aa'.  url path add: 'bb'.  self assert: url greaseString = '/aa/bb'.  self assert: url path asArray = #('aa' 'bb')map: arg1  self map with: arg1renderContentOn: arg1  arg1 table: [ arg1 tableRow: [ arg1 tableData: [ self renderMouseButtonOn: arg1 ].              arg1 tableData: [ self renderToggleZoomOn: arg1 ].              arg1 tableData: [ self renderToggleUIProcessOn: arg1 ] ] ].  self renderMouseClickOn: arg1.  arg1 horizontalRuleinitialize  super initialize.  byKey := Dictionary new.  byValue := Dictionary newdocument  ^canvas documentrfc6265String  ^String streamContents: [:arg1 |  | tmp1 |        tmp1 := false.        self writeKeyValueQuoted: tmp1 on: arg1.        self writeExpiresOn: arg1.        self writeMaxAgeQuoted: tmp1 on: arg1.        self writeDomainQuoted: tmp1 on: arg1.        self writePathQuoted: tmp1 on: arg1.        self writeSecureOn: arg1.        self writeHttpOnlyOn: arg1.        self writeSameSiteOn: arg1 ]renderContentOn: arg1  self renderExplanationOn: arg1.  self renderValidationOn: arg1exceptionHandler: arg1  | tmp1 |  tmp1 := self filters detect: [:arg2 |  arg2 isExceptionFilter ] ifNone: [ self addFilter: WAExceptionFilter new ].  tmp1 configuration at: #exceptionHandler put: arg1initialize  super initialize.  counter := WACounter newtrack: arg1  self track with: arg1testQueryFieldOverridesCookie  | tmp1 tmp2 tmp3 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp3 := self requestContext.  tmp3 request setCookies: (Array with: tmp1).  tmp3 request uri addField: strategy keyField value: 'value1'.  tmp2 := strategy keyFromContext: tmp3.  self assert: tmp2 = 'value1'closeDocument: arg1  self fullDocument ifTrue: [ arg1 close ] ifFalse: [ (arg1 isKindOf: WAHtmlDocument) ifTrue: [ arg1 scriptGenerator closeOn: arg1 ] ]no  self answer: falsetestSeasideVersion  self assert: (self platform seasideVersion isKindOf: GRVersion)testParseEqual  self equalExamples do: [:arg1 |  self assert: (WAUrl absolute: arg1 first) = (WAUrl absolute: arg1 second) description: arg1 second resumable: true ]initializeWithSnapshot: arg1  self initialize.  states := arg1headerAt: arg1 append: arg2  self committedCheck.  ^super headerAt: arg1 append: arg2beStart  self relationship: 'start'cloneHandler  ^super cloneHandler     clear;     yourselfrenderAddToRemovalOn: arg1  arg1 anchor     title: 'Add selected inherited elements to the removal list';     onClick: 'return submitForm(this)';     callback: [ self addToRemovals ];     with: 'Remove inherited'.  arg1 space: 2.  arg1 anchor     title: 'Remove selected elements from the removal list';     onClick: 'return submitForm(this)';     callback: [ self removeFromRemovals ];     with: 'Undo Remove inherited'testKeyAtValue  1 to: 100 do: [:arg1 |  | tmp1 tmp2 |        tmp1 := false.        cache keyAtValue: arg1 greaseString ifAbsent: [ tmp1 := true ].        self assert: tmp1.        cache at: arg1 put: arg1 greaseString.        tmp2 := cache keyAtValue: arg1 greaseString ifAbsent: [ self assert: false ].        self assert: tmp2 = arg1 ]asSpecCommand  ^super asSpecCommand     iconName: #remove;     yourselfcreateRequest  ^WARequest method: 'GET' uri: '/tweets/kentbeck'with: arg1  super with: arg1.  value isNil ifTrue: [ value := Date today ].  day := value dayOfMonth.  month := value monthIndex.  year := value year.  self options do: [:arg2 |  self perform: ('render' , arg2 asLowercase capitalized) asSymbol ] separatedBy: [ canvas space ].  self addCallbackrenderConfigurationOn: arg1  arg1 table: [ attributes do: [:arg2 |  self renderAttribute: arg2 on: arg1 ] ]initialize  super initialize.  self     name: 'Set adaptor encoding';     description: 'Set the codec for an adaptor'class: arg1 if: arg2  arg2 ifTrue: [ self class: arg1 ]critical: arg1  | tmp1 |  tmp1 := Processor activeProcess.  ^self owner == tmp1 ifTrue: [ arg1 value ] ifFalse: [ semaphore critical: [ self owner: tmp1.              arg1 ensure: [ self owner: nil ] ] ]withUnregisteredHandlerDo: arg1  ^arg1 on: WAUnregisteredHandlerError do: [:arg2 |  self requestContext redirectTo: self application url ]rows: arg1  rows := arg1value: arg1  value := arg1