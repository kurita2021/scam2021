beSubtitles  self kind: 'subtitles'testParseRelative  self relativeExamples do: [:each |  self assert: (WAUrl absolute: each first relative: each second) greaseString = each last description: each last resumable: true ]initialize  super initialize.  self class: self allClasses firstcanChoose  ^clickBlock notNilrequestContextFor: aRequest  ^WARequestContext request: aRequest response: WABufferedResponseto  self subclassResponsibilityaccept: aVisitor  aVisitor visitIntegerAttribute: selfcontentType: aMimeType  self headerAt: 'Content-Type' put: aMimeTyperenderContentOn: html  self renderExplanationOn: html.  wasExecuted ifTrue: [ self renderExecutedOn: html ] ifFalse: [ self renderNotExecutedOn: html ]label  ^'Space (slow!)'visitPasswordAttribute: anAttribute  self html passwordInput callback: [:value |  self configuration takeValueFromString: value forAttribute: anAttribute ]document: aDocument  self document: aDocument mimeType: nilisClosed  ^falseeditor: aComponent  editor := aComponentexpiryString  ^GRPrinter cookieTimestamp print: expirydefinitionData: aBlock  self definitionData with: aBlockopeningConditionClass  ^WAOpeningRevealedConditionalCommentrenderFormOn: canvas  self renderInline: [:html |  html form: [ html button value: 'OK'.              html fileUpload.              html select                 list: #('a' 'b');                 labels: [:v |  v greaseString ].              html radioButton.              html textInput                 size: 20;                 value: ''.              html textArea                 rows: 3;                 columns: 17;                 value: ''.              html checkbox value: true.              html passwordInput value: 'pw' ] ] key: #form on: canvasprepareRoot: aComponent  (WAAllPresenterGuide client: (WAInitialRequestVisitor request: self requestContext request)) start: aComponent.  (WAVisiblePresenterGuide client: WATaskVisitor new) start: aComponentindicateInstanceMessages  showInstance := true.  showComment := false.  self clearMessageAndProtoclSelection.  self changed: #showonEnded: anObject  self document scriptGenerator event: 'ended' do: anObject on: selfopenHandler: aHandler  super openHandler: aHandler.  aHandler isNil ifFalse: [ self configure: aHandler ]initialize  super initialize.  number := 1.  letter := $Alabel  ^'Set Default'taskClasses  ^WATask allSubclasses select: [:each |  each subclasses isEmpty ]withoutQuery  ^self copy     queryFields: nil;     yourselfjavascriptOn: aStream  aStream nextPutAll: valuetestDefaultAction  self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.  self assert: [:html |  html form defaultAction: [  ] ] gives: '<form accept-charset="utf-8" method="post" action="/"><div><input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/></div></form>'.  self userAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'.  self assert: [:html |  html form defaultAction: [  ] ] gives: '<form accept-charset="utf-8" method="post" action="/"><div><input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/><input tabindex="-1" name="2" style="position: absolute; top: -100em" type="text"/></div></form>'filter  ^filter ifNil: [ filter := WAProfilerFilter new ]height: anInteger  self attributeAt: 'height' put: anIntegerstringForValue: aBinding  ^aBinding isNil ifFalse: [ aBinding value name greaseString ]testIncludesKey  one at: 'foo' put: 1.  two at: 'baz' put: 3.  two at: 'bar' put: 2.  two at: 'baz' put: 3.  self assert: (merged includesKey: 'foo').  self assert: (merged includesKey: 'bar').  self assert: (merged includesKey: 'baz').  self deny: (merged includesKey: 'zork')group  ^group ifNil: [ #general ]testName  | library |  library := WATestingMetadataFileLibrary default.  self assert: library name = 'WATestingMetadataFileLibrary'.  self assert: library name isString.  self deny: library name isSymbolprivateAt: aKey put: aValue  self checkValue: aValue.  ^super privateAt: aKey put: aValuebatchSize  ^batcher batchSizeoutput: aBlock  ^self output with: aBlockdivClass  ^self class namechildren  ^Array with: treepriority  ^800attribute: aKey with: aValue  aValue == false ifTrue: [ ^self ].  html space.  html span     class: 'wa-attribute-key';     with: aKey.  aValue == true ifTrue: [ ^self ].  self nextPut: $=.  html span     class: 'wa-attribute-value';     with: [ self nextPut: $".        (self knownRefs includes: aKey) ifTrue: [ html anchor                 url: aValue greaseString;                 with: [ self print: aValue ] ] ifFalse: [ (self knownEvents includes: aKey) ifTrue: [ html anchor                       onClick: aValue;                       with: [ self print: aValue ] ] ifFalse: [ aValue == true ifTrue: [ self nextPutAll: aKey ] ifFalse: [ self print: aValue ] ] ].        self nextPut: $" ]initialize  super initialize.  self level1jumpToAnchor: aString  jumpTo := aStringtree  ^String streamContents: [:stream |  self tally           maxTabs: SmallInteger maxVal;           maxClassNameSize: SmallInteger maxVal;           maxClassPlusSelectorSize: SmallInteger maxVal;           treePrintOn: stream tabs: OrderedCollection new thisTab: String new total: tally tally totalTime: tally time tallyExact: false orThreshold: 2 ]parseCharacterHex  | value |  value := self parseCharacterHexDigit.  3 timesRepeat: [ value := (value << 4) + self parseCharacterHexDigit ].  ^Character codePoint: valuesampleJs  ^'	function foo (a, b) {}'testMessage  self assert: self response message = 'OK'.  self response status: 404.  self assert: self response message = 'Not Found'.  self response status: 290.  self assert: self response message isNil.  self response status: 290 message: 'Seaside Rocks'.  self assert: self response message = 'Seaside Rocks'render: anObject  ^WARenderer builder     documentClass: WAHtmlDocument;     render: anObjectemail: anObject  email := anObjectmessageCategoryListIndex  ^self messageCategoryList indexOf: selectedMessageCategorystates  ^Array with: selfcanClear  ^group ~~ #authenticationresponseGenerators  ^WAResponseGenerator withAllSubclasses asSortedCollection: [:a :b |  a name <= b name ]testTargetBlank  self assert: [:html |  html anchor           callback: [  ];           targetBlank;           with: 'foo' ] gives: '<a target="_blank" href="/?1">foo</a>'labelForMonth: aNumber  ^Date nameOfMonth: aNumbercallback: aBlock  self name: (self storeCallback: (WAValueCallback on: aBlock))at: key ifPresent: aBlock  ^self fields at: key ifPresent: aBlockattributeAt: aKey ifAbsent: aBlock  ^self attributes at: aKey ifAbsent: aBlocktime: anObject  time := anObjectpassword  | authorization |  ^(authorization := self authorization) isNil ifFalse: [ authorization copyAfter: $: ]buttonCode  ^button = #red ifTrue: [ 4 ] ifFalse: [ button = #blue ifTrue: [ 2 ] ifFalse: [ 1 ] ]initialize  super initialize.  inputElements := WAInputElementContainer new.  ran := falsetestReadOnly  self should: [ merged at: 'foo' put: 1 ] raise: Error.  self should: [ merged at: 'foo' ifAbsentPut: [ 1 ] ] raise: Error.  self should: [ merged removeKey: 'foo' ] raise: ErrorresourceUrl  ^resourceUrllabel  ^'Html 5 Content Model'visitor  ^visitortitle  self subclassResponsibilityaddAllTo: aCollectionOfEmailAddress  aCollectionOfEmailAddress do: [:each |  self addTo: each ]priority  ^200withoutSeconds  withSeconds := falserenderContentOn: html  counters do: [:each |  html render: each ] separatedBy: [ html horizontalRule ]hasReceivedUnregistered  ^hasReceivedUnregisteredtestUrlGreaseNextPutAllStartingAt  self assert: 'ab' next: 1 startingAt: 1 encoder: self urlEncoderClass gives: 'a'.  self assert: 'a b' next: 1 startingAt: 1 encoder: self urlEncoderClass gives: 'a'.  self assert: 'a b' next: 2 startingAt: 1 encoder: self urlEncoderClass gives: 'a%20'.  self assert: 'a b' next: 1 startingAt: 2 encoder: self urlEncoderClass gives: '%20'.  self assert: 'a b' next: 2 startingAt: 2 encoder: self urlEncoderClass gives: '%20b'.  self assert: 'a  ' next: 2 startingAt: 2 encoder: self urlEncoderClass gives: '%20%20'.  self assert: 'ab b ' next: 3 startingAt: 2 encoder: self urlEncoderClass gives: 'b%20b'default: aBoolean  self attributeAt: 'default' put: aBooleanonMouseEnter: anObject  self document scriptGenerator event: 'mouseenter' do: anObject on: selftestCopy  | semaphore1 semaphore2 copy |  semaphore1 := GRPlatform current semaphoreClass new.  semaphore2 := GRPlatform current semaphoreClass new.  process := [ mutex critical: [ semaphore1 signal.        semaphore2 wait ] ] newProcess.  process resume.  semaphore1 wait.  copy := mutex copy.  self deny: copy == mutex.  self assert: copy species = mutex species.  self assert: copy owner isNil.  self assert: (copy critical: [ 1 ]) = 1level5  level := 5component: anObject  component := anObjectsubscript: aBlock  self subscript with: aBlockevent: aString do: anObject on: aBrush  aBrush attributes at: 'on' , aString append: anObject separator: ';'execute  self answer: self gochooseRow: row  ^clickBlock value: rowmonthsAndLengthsDo: aTwoArgumentBlock  | count last |  count := 0.  last := nil.  self datesDo: [:each |  count := count + 1.        last := each ] separatedBy: [ aTwoArgumentBlock value: last month value: count.        count := 0 ]label  ^'Html 5 Input'postCopy  super postCopy.  filter := filter copy.  self setFilter: (self filter copyTo: self).  configuration := configuration copy.  parent := nilvalue: aBlock  ^(self brush: WAJsonValueBrush new) with: aBlockpostCopyForRenderContext: aRenderContext  super postCopyForRenderContext: aRenderContext.  renderContext := aRenderContext.  visitor := visitor copyForRenderContext: aRenderContext> otherVersion  ^major > otherVersion major or: [ major = otherVersion major and: [ minor > otherVersion minor ] ]metaClassIndicated  ^showInstanceupToEnd  | elements |  elements := path.  path := #().  ^elementsvalue: anObject  self terminate: thisContext.  self restoreValues.  thisContext swapSender: values first.  ^anObjectrenderContentOn: html  html span: dateSelector.  html span: [ html strong: ' : ' ].  html span: timeSelectorinitializeFromContext: aContext  | context stream |  self initialize.  context := aContext.  stream := WriteStream on: (Array new: 200).  [ context notNil ] whileTrue: [ stream nextPut: context.        1 to: context class instSize do: [:index |  stream nextPut: (context instVarAt: index) ].        1 to: context size do: [:index |  stream nextPut: (context at: index) ].        context := context sender ].  values := stream contentsheaders  ^headersrenderCheckboxOn: html  self renderLabel: 'Checkbox' input: [ html label: [ html checkbox                 value: checkbox;                 callback: [:value |  checkbox := value ].              html text: 'Checked' ] ] output: checkbox printString on: htmladdPathParameterAt: anIndex key: aKey value: aValue  (self privatePathParameterMapAt: anIndex) at: aKey add: aValuerenderDefaultFieldForSelector: aSymbol on: html  html textInput on: aSymbol of: self modelvalue  ^valuerenderContentOn: html  html paragraph: 'Depending on the way the form is submitted the following actions should be triggered and logged:'.  html orderedList list: #('Default: Text, Default' 'Before: Text' 'Before Submit: Text, Before Submit' 'Before Cancel: Before Cancel' 'After: Text' 'After Submit: Text, After Submit' 'After Cancel: After Cancel').  html form     defaultAction: [ self append: 'Default' ];     with: [ html div: [ html submitButton text: 'Before'.              html submitButton                 callback: [ self append: 'Before Submit' ];                 text: 'Before Submit'.              html cancelButton                 callback: [ self append: 'Before Cancel' ];                 text: 'Before Cancel'.              html break.              html textInput                 value: 'Some Text';                 callback: [:value |  self append: 'Text: ' , value ].              html break.              html submitButton text: 'After'.              html submitButton                 callback: [ self append: 'After Submit' ];                 text: 'After Submit'.              html cancelButton                 callback: [ self append: 'After Cancel' ];                 text: 'After Cancel' ] ].  html preformatted: transcript contents.  transcript resettestNotFound  | generator |  generator := WAResponseGenerator on: self requestContext.  self requestContext response nextPutAll: 'oops'.  generator notFound.  self assertContents: '/ not found'items: aCollection  items := aCollectiontoggleZoom  zoom := zoom notnewCookie  | cookie baseUrl |  baseUrl := self handler url.  cookie := WACookie new     pathUnencoded: baseUrl pathStringUnencoded encoded: (baseUrl pathStringEncodedWith: self codec);     httpOnly: true;     yourself.  baseUrl host isNil ifFalse: [ cookie domain: baseUrl host ].  baseUrl scheme = 'https' ifTrue: [ cookie secure: true ].  (baseUrl port notNil and: [ baseUrl host notNil ]) ifTrue: [ cookie port: baseUrl port ].  ^cookiebeMultiple  self attributeAt: 'multiple' put: truepriority  ^700testNoKey  | response context |  registry := self createRegistryWithCookiesEnabled.  context := self createRequestContextWithFieldKey: nil cookieKey: nil.  response := self dispatch: context to: registry.  self assertCookieAddition: response.  self assert: ((registry cache at: response cookies first value ifAbsent: [ nil ]) isKindOf: WASession).  self assertDefault: responsedateTimeInput  ^self brush: WADateTimeInputTag newasFilename: aSelector  | dotIndex extension |  dotIndex := self lastUpperCaseIndexIn: aSelector.  dotIndex = 0 ifTrue: [ ^aSelector greaseString ].  extension := (aSelector last: aSelector size - dotIndex + 1) asLowercase.  ^(aSelector first: dotIndex - 1) , '.' , extensionencodeOn: aDocument  aDocument     nextPutAll: '<!--[';     nextPutAll: self condition;     nextPutAll: ']>'onSearch: aString  self attributes at: 'onsearch' append: aString separator: ';'altText: aString  self attributes at: 'alt' put: aStringnewStrategy  self subclassResponsibilityerrorKeyNotFound  ^niltestAnchor  self assert: [:html |  html anchor ] gives: '<a></a>'.  self assert: [:html |  html anchor           callback: [  ];           with: 'foo' ] gives: '<a href="/?1">foo</a>'.  self assert: [:html |  html anchor           callback: [  ];           with: 'foo'.        html anchor           callback: [  ];           with: 'bar' ] gives: '<a href="/?1">foo</a><a href="/?2">bar</a>'.  self assert: [:html |  html anchor           extraPath: 'zork';           callback: [  ];           with: 'foo' ] gives: '<a href="/zork?1">foo</a>'.  self assert: [:html |  html anchor           extraParameters: 'zork';           callback: [  ];           with: 'foo' ] gives: '<a href="/?zork&amp;1">foo</a>'renderMainContentOn: html  self renderHeadingOn: html.  html div     class: 'getting-started';     with: self componentonDragExit: anObject  self document scriptGenerator event: 'dragexit' do: anObject on: selfrenderValuesOn: html  | oldSpaceEnd youngSpaceEnd memoryEnd parameters |  parameters := SmalltalkImage current vm getParameters.  oldSpaceEnd := parameters first.  youngSpaceEnd := parameters second.  memoryEnd := parameters third.  self renderLabel: 'Old Space' value: (self printMemory: oldSpaceEnd) value: (self percent: oldSpaceEnd / memoryEnd) on: html.  self renderLabel: 'Young Space' value: (self printMemory: youngSpaceEnd - oldSpaceEnd) value: (self percent: (youngSpaceEnd - oldSpaceEnd) / memoryEnd) on: html.  self renderLabel: 'Used' value: (self printMemory: youngSpaceEnd) value: (self percent: youngSpaceEnd / memoryEnd) on: html.  self renderLabel: 'Free' value: (self printMemory: memoryEnd - youngSpaceEnd) value: (self percent: (memoryEnd - youngSpaceEnd) / memoryEnd) on: htmlfullPathForFileName: aString using: aFileHandler  ^String streamContents: [:stream |  | pathSeparator xSendfileBaseDirectory |        pathSeparator := GRPlatform current pathSeparator.        xSendfileBaseDirectory := aFileHandler xSendfileBaseDirectory.        stream nextPutAll: xSendfileBaseDirectory.        (xSendfileBaseDirectory endsWithSubCollection: pathSeparator) ifFalse: [ stream nextPutAll: pathSeparator ].        stream           nextPutAll: self name;           nextPutAll: pathSeparator;           nextPutAll: aString ]encodeChildrenOn: aDocument  children isEmptyOrNil ifTrue: [ ^self ].  children do: [:each |  aDocument nextPutAll: each greaseString ]storeConfigurationValues  handler configuration at: #maximumSize put: maximumSize.  handler configuration at: #maximumRelativeAge put: maximumRelativeAge.  handler configuration at: #maximumAbsoluteAge put: maximumAbsoluteAge.  handler configuration at: #overflowAction put: overflowActionlabelForYear: aNumber  ^aNumberaddMessage: aString  ^self addDecoration: (WAMessageDecoration new           message: aString;           yourself)list: aCollection  aCollection isNil ifFalse: [ self addAll: aCollection ]isCommitted  ^committeddefer  self attributes at: 'defer' put: truehour  ^hoursetPorts: aString  ports := OrderedCollection new: 1.  GRPlatform subStringsIn: aString splitBy: $, do: [:token |  ports add: token greaseInteger ]expiry  ^expiryoptions: aBlock  optionsBlock := aBlocktestChildComponentShouldNotBeSelfError  child1 onRender: [:html |  html text: '1' ].  child2 onRender: [:html |  html text: '2' ].  root onChildren: [ Array with: child1 with: child2 ].  self assertRenders: '12'.  root onChildren: [ Array with: child1 with: root ].  self should: [ self assertRenders: 'dont care only interested in the raised exception' ] raise: WAChildComponentShouldNotBeSelfError description: 'Testing WAPresenter  >> #childrenDo: with #children returning an array including self'call: aComponent onAnswer: aBlock  self == aComponent ifTrue: [ WAError signal: 'You can not call self. You''re probably missing a return somewhere' ].  self show: aComponent onAnswer: aBlock.  WARenderNotification signaltestDispatchCallback  | key key1 key2 |  key := registry store: WADispatchCallback new.  key1 := registry store: (WAValueCallback on: [:v |  log                 add: 1;                 add: v ]).  key2 := registry store: (WAValueCallback on: [:v |  log                 add: 2;                 add: v ]).  self shouldnt: [ self request: (WARequestFields new                 at: key put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: key put: '';                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: key put: key1;                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 '').  self shouldnt: [ self request: (WARequestFields new                 at: key put: key2;                 yourself) ] raise: WARenderNotification.  self assertLog: #(2 '').  self shouldnt: [ self request: (WARequestFields new                 at: key put: key2;                 at: key put: key2;                 yourself) ] raise: WARenderNotification.  self assertLog: #(2 '')location: aUrlOrString  self headerAt: 'Location' put: aUrlOrStringcdata: aString  self flush.  self document nextPutAll: '<![CDATA['.  self document nextPutAll: aString.  self document nextPutAll: ']]>'bodyFor: anError  ^WAStringEmailBody string: (String streamContents: [:stream |  anError signalerContext errorReportOn: stream ]) lineLength: 72parameter  | fieldValue request urlValue |  request := self requestContext request.  fieldValue := request at: 'input' ifAbsent: [ nil ].  urlValue := request url queryFields at: 'input' ifAbsent: [ nil ].  ^(urlValue = input and: [ fieldValue = input ]) ifTrue: [ fieldValue ] ifFalse: [ 'fail!' ]renderMessageOn: html  message isNil ifFalse: [ html strong: message ]label  ^label ifNil: [ label := 'OK' ]callback: aBlock  self name: (self storeCallback: (WAUploadCallback on: aBlock))accept: aVisitor  aVisitor visitClassBindingAttribute: selftypes  ^'1aAiI'valueFromString: aString  ^aString = 'true' ifTrue: [ true ] ifFalse: [ aString = 'false' ifTrue: [ false ] ifFalse: [ WAConfigurationError signal: 'Invalid value for boolean attribute' ] ]initializeWithRoot: aRoot  self initialize.  root := aRootwith: anObject  super with: anObject.  value isNil ifTrue: [ value := Time now ].  hours := value hour.  minutes := value minute.  seconds := value second.  self renderHours.  canvas     space;     text: ':';     space.  self renderMinutes.  withSeconds ifTrue: [ canvas           space;           text: ':';           space.        self renderSeconds ] ifFalse: [ seconds := 0 ].  self addCallbackrenderContentOn: html  html select     list: self months;     on: #month of: self;     labels: [:each |  self labelForMonth: each ].  html select     list: self days;     on: #day of: self;     labels: [:each |  self labelForDay: each ].  html select     list: self yearRange;     on: #year of: self;     labels: [:each |  self labelForYear: each ].  self dateIsValid ifFalse: [ self renderValidationErrorOn: html ]url: aUrlOrString  url := aUrlOrStringseasidePossibleCauses  ^#('A Component attempted to use #call: or a similar method while rendering. Calling and answering can only be done in a callback.')encodeFragmentOn: aDocument  aDocument urlEncoder nextPutAll: fragmentchildren  ^countersstring: aString  stream nextPut: $".  jsonEncoder nextPutAll: aString.  stream nextPut: $"renderDeprecatedOn: html  html heading: 'Deprecated'.  html paragraph: 'The link should cause a deprecated warning to appear in the toolbar. Clicking on the link should display a single action and a single render deprecation.'.  html anchor     callback: [ self raiseDeprecated ];     with: 'Raise deprecated'determineValueWithContext: aContext configuration: aConfiguration  self subclassResponsibilityinitializeOn: aDocument  self initialize.  document := aDocumentisEnabled: anObject  ^enabledBlock isNil or: [ enabledBlock value: anObject ]nextPutAll: aString  aString isByteString ifTrue: [ self nextPutAllFast: aString ] ifFalse: [ delegate nextPutAll: aString ]testCommaReturnsExceptionSet  | set |  set := self handlerClass , WATestError.  self assert: (set isKindOf: ExceptionSet).  self assert: (set handles: WATestError new).  set := self createHandler , WATestError.  self assert: (set isKindOf: ExceptionSet).  self assert: (set handles: WATestError new)library  ^librarykeysAndValuesDo: aBlock  delegates do: [:each |  each keysAndValuesDo: aBlock ]break  ^String with: Character cr with: Character lfconfiguration: anObject  configuration := anObjectscaledDecimal: aScaledDecimal  | converter |  converter := GRSignPrinter new , (GRNumberPrinter new precision: aScaledDecimal scale).  converter print: aScaledDecimal on: self document streamrenderTextAreaOn: html  self renderLabel: 'Text Area' input: [ html textArea           rows: 3;           columns: 17;           value: textArea;           callback: [:value |  textArea := value ] ] output: textArea printString on: htmlrows  ^#(css)secondValue  ^secondValuetoolbar: aBoolean  features at: #toolbar put: aBooleancallback: aBlock  callbackBlock := aBlockvalidateWith: aBlock  ^self addDecoration: (WAValidationDecoration new validateWith: aBlock)testEncodedUnicodeUrl  | hiraA hiraO hiraAO ea |  ea := String with: (Character codePoint: 233) with: (Character codePoint: 228).  self assert: ea urlEncodedGives: '%C3%A9%C3%A4'.  hiraA := (Character codePoint: 12354) greaseString.  hiraO := (Character codePoint: 12362) greaseString.  hiraAO := hiraA , hiraO.  self assert: hiraA urlEncodedGives: '%E3%81%82'.  self assert: hiraO urlEncodedGives: '%E3%81%8A'.  self assert: hiraAO urlEncodedGives: '%E3%81%82' , '%E3%81%8A'parseHostPort: aString from: start to: end  | colonIndex |  colonIndex := aString indexOf: $: startingAt: start.  (colonIndex > 0 and: [ colonIndex < end ]) ifTrue: [ start < colonIndex ifTrue: [ self host: (self class decodePercent: aString from: start to: colonIndex) ].        self port: (self parsePort: aString from: colonIndex + 1 to: end) ] ifFalse: [ start < end ifTrue: [ self host: (self class decodePercent: aString from: start to: end) ] ]testUrlFor  | context request response session url |  handler class == WARegistry ifFalse: [ ^self ].  request := self requestWithMethod: 'GET'.  request setCookies: (Array with: (WARequestCookie key: '_s' value: 'sessionid')).  response := WABufferedResponse new.  session := WASession new.  context := WARequestContext request: request response: response.  url := WACurrentRequestContext use: context during: [ handler register: session.        session url ].  self assert: (url queryFields includesKey: '_s').  request url addField: '_s' value: (url queryFields at: '_s').  [ handler handle: context ] on: WAResponseNotification do: [:notification |   ].  self assert: response status = 200.  self assert: response cookies isEmptyrenderModificationOn: html  html heading     level2;     with: '<ins>, <del>'.  html paragraph: [ html text: 'A Sheriff can employ '.        html deleted           title: 'Changed as a result of the SECURE bill.';           cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';           datetime: '1994-11-05T08:15:30-05:00';           with: 3.        html inserted           title: 'Changed as a result of the SECURE bill.';           cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';           datetime: '1994-11-05T08:15:30-05:00';           with: 5.        html text: ' deputies.' ]width: anInteger  self attributeAt: 'width' put: anIntegercharSet  | codecName handler |  codecName := self codec name.  codecName = GRNullCodec codecName ifFalse: [ ^codecName ].  handler := self handler.  self handler isNil ifFalse: [ ^handler charSet ].  ^nilmaxAge  ^maxAgewriteCookiesOn: aStream  cookies do: [:each |  aStream nextPutAll: 'Set-Cookie: '.        each writeOn: aStream.        aStream crlf ]initialize  super initialize.  self     name: 'Add adaptor';     description: 'Allows one to create a new adaptor.'renderContentOn: html  self renderFigureOn: html.  self renderMarkedOn: html.  self renderMeterOn: html.  self renderProgressOn: html.  self renderTimeOn: html.  self renderDetailsOn: html.  self renderMenuOn: html.  self renderHeadingGroupOn: html.  self renderBidirectionalOn: html.  self renderBidirectionalOverrideOn: html.  self renderOutputOn: html.  self renderTrackOn: htmlhandler  ^self handlers isEmpty ifFalse: [ self handlers first ]at: aKey ifAbsent: aBlock  delegates do: [:each |  each at: aKey ifPresent: [:value |  ^value ] ].  ^aBlock valueperformAction  [ super performAction ] ensure: [ self request isXmlHttpRequest ifTrue: [ self captureState ] ]numArgs  ^1title: aString  title := aStringisEnabledFor: aRequestContext  ^aRequestContext request isXmlHttpRequest notonFocus: anObject  self document scriptGenerator event: 'focus' do: anObject on: selfheaderAt: aKeyString putDate: aDateAndTime  ^self headerAt: aKeyString put: (GRPrinter httpDate print: aDateAndTime)open: aHtmlRoot on: aDocument  aHtmlRoot bodyAttributes at: 'onload' put: 'onLoad()'tag  ^'ul'formClass  ^Smalltalk classNamed: #FormkeyType: aString  self attributeAt: 'keytype' put: aStringrenderCogValuesOn: html  self renderLabel: 'Cog VM - Interpreter' value: (self vm getSystemAttribute: 1007) on: html.  self renderLabel: 'Cog VM - JIT' value: (self vm getSystemAttribute: 1008) on: html.  self renderLabel: 'Cog VM - Stack pages' value: (self vm parameterAt: 42) on: html.  self renderLabel: 'Cog VM - Desired stack pages' value: (self vm parameterAt: 43) on: html.  self renderLabel: 'Cog VM - ForceInterruptChecks since startup' value: (self vm parameterAt: 58) on: html.  self renderLabel: 'Cog VM - Stack page overflows since startup' value: (self vm parameterAt: 60) on: html.  self renderLabel: 'Cog VM - Stack page divorces since startup' value: (self vm parameterAt: 61) on: htmlfileHandlerListingClass  ^self preferenceAt: #fileHandlerListingClasswriteScriptTag: aBlock on: aDocument  | attributes |  attributes := WAHtmlAttributes new.  attributes at: 'type' put: 'text/javascript'.  aDocument openTag: 'script' attributes: attributes.  aBlock value.  aDocument closeTag: 'script'tableBodyCssClass  ^'left'modify  self configuration at: attribute key addAll: #() removeAll: #()valueFromString: aString  self subclassResponsibilityparentOfClass: aClass  | package tag |  package := aClass package.  tag := package classTagForClass: aClass.  ^((tag name = package name and: [ package classTags size <= 1 ]) or: [ tag isNil ]) ifTrue: [ package ] ifFalse: [ tag ]after  super after.  self isGet ifTrue: [ canvas div: [ canvas actionUrl queryFields keysAndValuesDo: [:k :v |  canvas hiddenInput                       name: k;                       value: v ] ] ]beChecked  self checked: truecharSet  ^self parameters at: 'charset' ifAbsent: [ nil ]beAdvanced  advanced := truehandleFiltered: aRequestContext  aRequestContext respond: [:response |  response           cacheForever;           document: self document ]renderValuesOn: html  self renderLabel: 'Operating System' value: (self image vm getSystemAttribute: 1001) on: html.  self renderLabel: 'Version' value: (self image vm getSystemAttribute: 1002) on: html.  self renderLabel: 'Processor Type' value: (self image vm getSystemAttribute: 1003) on: htmlpostFields  ^postFieldswith: anObject  anObject isNil ifFalse: [ self value: anObject greaseString ].  super with: nilhandlerJs  ^'function submitForm(element) {	var hidden = document.createElement("input");	hidden.name = /[?&](\d+)/.exec(element.href)[1];	hidden.type = "hidden"; hidden.value = "";	while (element && element.tagName != "FORM")		element = element.parentNode;	element.appendChild(hidden);	element.submit();	return false;}'createRequestContext  ^WARequestContext request: self createRequest response: self createResponse codec: self createCodecresponseForLibraries  | title contents |  title := 'Index of ' , handler url pathStringUnencoded.  contents := WAHtmlCanvas builder     fullDocument: true;     rootBlock: [:html |  html title: title ];     render: [:html |  html heading: title.        html unorderedList: [ handler libraries do: [:each |  html listItem: [ html anchor                             url: (each urlOf: '');                             with: each name ] ] ] ].  context respond: [:response |  response           contentType: WAMimeType textHtml;           nextPutAll: contents ]writeHeadersOn: aStream  self headerAt: 'Content-Length' put: contentsStream position.  super writeHeadersOn: aStreamaddKey: aString toUrl: aUrl  self subclassResponsibilityrenderExampleOn: html  self subclassResponsibilityassert: anArray at: anInteger charset: aString quality: aFloat  | value |  value := anArray at: anInteger.  self assert: (value isKindOf: WAQualifiedValue).  self assert: value quality = aFloat.  self assert: value value = aStringtype  ^'submit'with: anObject  anObject isNil ifFalse: [ value := anObject ].  closed := trueaddField: aKey  self addField: aKey value: nilrenderContentOn: html  html heading: self class description.  html form: [ html paragraph: [ html anchor                 callback: [ self previous ];                 with: [ html html: '&larr;' ].              html select                 list: classes;                 onChange: 'submit()';                 selected: self selected;                 labels: [:value |  value name ];                 callback: [:value |  self selected: value ].              html anchor                 callback: [ self next ];                 with: [ html html: '&rarr;' ].              html                 text: ' ';                 submitButton: 'Restart' ] ].  html horizontalRule.  html render: current contentsunregisterAt: aKey  ^self cache removeKey: aKeyinserted  ^self brush: (WAEditTag tag: 'ins')audio: aBlock  self audio with: aBlockrenderSslSessionIdFor: aRequest on: html  aRequest isSsl ifTrue: [ html definitionTerm: 'SSL Session Id:'.        html definitionData: aRequest sslSessionId ]allValuesCallbackClass  ^WAAllValuesCallbacksub  ^subvisitNumberAttribute: anAttribute  self html textInput     size: 5;     callback: [:value |  self configuration takeValueFromString: value forAttribute: anAttribute ];     value: (anAttribute stringForValue: (self configuration at: anAttribute key))testJavascript  self assertRoot: [:html |  html javascript add: 'true & false' ] gives: '<title></title><script type="text/javascript">true & false</script>'sortColumn  ^sortColumn contentsincrease  count := count + 1browserUserAgents  ^#('Mozilla/5.0 (X11; U; Linux i586; de; rv:5.0) Gecko/20100101 Firefox/5.0' 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; da-dk) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1' 'Opera/9.80 (X11; Linux x86_64; U; fr) Presto/2.9.168 Version/11.50' 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Ubuntu/11.04 Chromium/14.0.825.0 Chrome/14.0.825.0 Safari/535.1' 'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)' 'Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; Media Center PC 4.0; SLCC1; .NET CLR 3.0.04320)' 'Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)' 'Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)')charset: aString  self parameters at: 'charset' put: aStringfileSelectorsTo: aSuperClass  | selectors current |  selectors := Set new.  current := self class.  [ aSuperClass name = current name ] whileFalse: [ current selectors do: [:each |  (self isFileSelector: each) ifTrue: [ selectors add: each ] ].        current := current superclass ].  ^selectorscomponentCreator  ^componentCreator ifNil: [ componentCreator := WAWelcomeComponentCreator new ]renderMarkedOn: html  html heading     level2;     with: '<mark> (kitten)'.  html paragraph: [ html text: 'I also have some '.        html marked: 'kitten'.        html text: 's who are visiting me these days. They''re really cute. I think they like my garden!' ]numberInput  ^self brush: WANumberInputTag newquote: aBlock  self quote with: aBlockconvertKey: aString  ^aString , '.x'renderHeadingsOn: html  html tableRow: [ html tableHeading: 'Key'.        html tableHeading: 'Value'.        html tableHeading: 'Path'.        html tableHeading: 'Domain'.        html tableHeading: 'Ports'.        html tableHeading ]postCopy  super postCopy.  ports := ports copyfirstValue: aString  firstValue := aStringassertExpired: aResponse  self assert: registry cache size = registrySize.  self assert: aResponse status = 302.  self assert: (aResponse headers at: 'Location') greaseString = self pathselection  ^selectionrenderFiltersOn: html  html paragraph: 'Below a list of filters wrapping the current session:'.  html orderedList list: self session filtersvisitComponent: aComponent  self visitPresenter: aComponenttestOneOfMany  | cookie1 cookie2 cookie3 cookie4 actual context |  cookie1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  cookie2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')     path: '/';     yourself.  cookie3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')     path: '/1/2';     yourself.  cookie4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')     path: '/1/2/3';     yourself.  context := self requestContext.  context request setCookies: (Array with: cookie1 with: cookie2 with: cookie3 with: cookie4).  actual := strategy keyFromContext: context.  self assert: actual = 'cookie3'scriptGeneratorClass  ^WANullScriptGeneratoriframe  ^self brush: WAIframeTag newapplication  ^self requestContext applicationtestDeleteCookie  | cookie actual |  cookie := (WARequestCookie key: 'key' value: 'value')     pathUnencoded: '/highway/to/hell' encoded: '/highway/to/hell';     domain: 'hotel' yourself.  self response deleteCookie: cookie.  self assert: self response cookies size = 1.  actual := self response cookies first.  self assert: cookie ~~ actual.  self assert: actual domain = 'hotel'.  self assert: actual path = '/highway/to/hell'title  ^titleat: aKey put: anObject overwrite: aBoolean  | index keyHash entry |  self sweepIncrementally.  self growCheck.  keyHash := aKey hash.  index := keyHash \\ keyTable size + 1.  entry := self findEntryOrNilWithKey: aKey hash: keyHash index: index.  entry isNil ifTrue: [ | cacheEntry byAccessEntry byCreationEntry |        (maximumSize > 0 and: [ size = maximumSize ]) ifTrue: [ self performOverflowAction ].        cacheEntry := WACacheKeyEntry key: aKey value: anObject.        byCreationEntry := WACacheListEntry entry: cacheEntry.        byAccessEntry := WACacheListEntry entry: cacheEntry.        cacheEntry byAccessListEntry: byAccessEntry.        cacheEntry byCreationListEntry: byCreationEntry.        self addToAccessEnd: byAccessEntry.        self addToCreationEnd: byCreationEntry.        self insertKeyEntry: cacheEntry.        size := size + 1 ] ifFalse: [ | byAccessListEntry byCreationListEntry |        aBoolean ifFalse: [ ^false ].        byAccessListEntry := entry byAccessListEntry.        byCreationListEntry := entry byCreationListEntry.        self expunge: byAccessListEntry.        self addToAccessEnd: byAccessListEntry.        self expunge: byCreationListEntry.        self addToCreationEnd: byCreationListEntry.        self cacheEntryRemoved: entry value.        entry value: anObject ].  ^trueat: aSymbol put: anObject  self addExpression: ((WAValueExpression key: aSymbol)           value: anObject;           yourself)openTag  self attributes at: 'multiple' put: true.  super openTagaddAll  self addMedia: 'all'xSendfileBaseDirectory  ^self preferenceAt: #xSendfileBaseDirectoryrenderRequestBodyOn: html  html hiddenInput callback: [ self readRequestBody ].  html strong: 'Request Body:'.  ran ifTrue: [ html text: (hasBody ifTrue: [ 'Success' ] ifFalse: [ 'Fail' ]) ] ifFalse: [ html text: 'Not Run' ].  html breakprintMemory: anInteger  ^GRPrinter binaryFileSize print: anIntegerdateInput  ^self brush: WADateInput newrenderLabel: aLabelString value: aFirstObject value: aSecondObject on: html  html tableRow: [ self renderLabel: aLabelString on: html.        self renderValue: aFirstObject on: html.        self renderValue: aSecondObject on: html ]root  ^rootdecodedWith: aCodec  | url |  url := self copy.  self user isNil ifFalse: [ url user: (aCodec url decode: self user) ].  self password isNil ifFalse: [ url password: (aCodec url decode: self password) ].  self path isEmpty ifFalse: [ url path: (self path collect: [:each |  aCodec url decode: each ]) ].  url queryFields: nil.  self queryFields keysAndValuesDo: [:key :value |  url addField: (aCodec url decode: key) value: (value isNil ifFalse: [ aCodec url decode: value ]) ].  self fragment isNil ifFalse: [ url fragment: (aCodec url decode: self fragment) ].  ^urlstep: anInteger  self attributeAt: 'step' put: anIntegerupdateUrl: aUrl  removeDecoration: aDecoration  | previous current |  previous := nil.  current := self decoration.  [ current = self ] whileFalse: [ current = aDecoration ifTrue: [ previous isNil ifTrue: [ self decoration: current next ] ifFalse: [ previous setNext: current next ].              ^aDecoration setNext: nil ].        previous := current.        current := current next ].  ^niltest  ^testallPages  ^'ABCDEFGHIJKLMNOPQRSTUVWXYZ'renderAbbreviatedOn: html  html heading     level2;     with: '<abbr>'.  html paragraph: [ html abbreviated           title: 'World Wide Web';           with: 'WWW' ]testInternalErrorWithMessage  | context |  context := self createRequestContext.  [ self handlerClass internalError: (WATestError new           messageText: 'test';           yourself) context: context ] on: WAResponseNotification do: [:n |  self assert: (context response isKindOf: WAResponse).        self assert: context response status = 500.        ^self ].  self assert: falsesortedWorkingCopies  ^MCWorkingCopy allManagers asSortedCollection: [:a :b |  a packageName <= b packageName ]removeKey: aKey  | keyHash index entry |  self sweepIncrementally.  keyHash := aKey hash.  index := keyHash \\ keyTable size + 1.  entry := self findEntryOrNilWithKey: aKey hash: keyHash index: index.  ^entry isNil ifTrue: [ self errorKeyNotFound ] ifFalse: [ self removeCacheEntry: entry ]testFormWithoutMimeType  | handler |  self formClassExists ifFalse: [ ^self ].  handler := WADocumentHandler document: self sampleForm mimeType: nil fileName: nil.  self assert: handler document contents isEmptyOrNil notcontinuationClasses  ^WAApplicationConfiguration instance continuationClassessampleComponentRenderMethod  ^'renderContentOn: html	html image url: ''http://www.seaside.st/styles/logo-plain.png''.	html paragraph: ''Hello World from Seaside.''.	html paragraph: [ 		html text: ''To learn more about Seaside components follow the link to the book: ''.		html anchor			url: ''http://book.seaside.st/book/fundamentals/rendering-components'';			with: ''Dynamic Web Development with Seaside''.		html text: ''.'' ]'addToAccessEnd: aCacheListEntry  | currentLast |  currentLast := byAccessEnd.  currentLast isNil ifFalse: [ currentLast next: aCacheListEntry.        aCacheListEntry previous: currentLast ].  aCacheListEntry initializeTime.  byAccessEnd := aCacheListEntry.  byAccessStart isNil ifTrue: [ byAccessStart := aCacheListEntry ]renderChildOn: html  self showHalos ifTrue: [ html context addHaloVisitor: (WAHaloVisitor decoration: self context: html context).        html context enableHalos ].  self renderNextOn: html.  html context disableHalosrequest  ^self requestContext requestbutton: anObject  ^self button with: anObjectscript  ^'function swapCallbacks(url, list1id, list2id) {	list1 = document.getElementById(list1id);	list2 = document.getElementById(list2id);		document.location = url		+ "&" + list1.name + "=" + list2.options[2].value		+ "&" + list2.name + "=" + list1.options[2].value;}		'popupAnchor  ^self brush: WAPopupAnchorTag newsortColumn: anObject  isReversed := anObject = self sortColumn and: [ isReversed not ].  sortColumn contents: anObjectauthorization  | authorization |  authorization := self headerAt: 'authorization'.  ^authorization isNil ifFalse: [ self decodeAuthorization: authorization ]initialize  super initialize.  report := WATableReport new     rows: WAComponent allSubclasses asArray;     columns: (OrderedCollection new           add: (WAReportColumn selector: #fullName title: 'Name' onClick: [:each |  self inform: each description onAnswer: [  ] ]);           add: ((WAReportColumn selector: #canBeRoot title: 'Can Be Root') sortBlock: [:a :b |  a ]);           add: (WAReportColumn renderBlock: [:each :html |  html emphasis: each description ] title: 'Description');           yourself);     rowColors: #(lightblue lightyellow);     rowPeriod: 1;     yourselfrenderEntityTableOn: html  html table     summary: 'This table gives the character entity reference, ' , 'decimal character reference, and hexadecimal character ' , 'reference for 8-bit Latin-1 characters, as well as the ' , 'rendering of each in your browser.';     with: [ html tableCaption: 'HTML 4.0 entities'.        self renderEntityTableColumnGroupsOn: html.        self renderEntityTableHeadOn: html.        self renderEntityTableFootOn: html.        self renderEntityTableBodyOn: html ]shouldVisitNextPresenterOf: aDecoration  ^truerenderCurrencyTableHeadOn: html  html tableHead     title: 'Table header';     with: [ html tableRow: [ html tableHeading: 'Currency'.              html tableHeading: 'Rate' ] ]spaceEntity  self subclassResponsibilityrenderQualifiedValue: aQualifiedValue on: html  html listItem: [ | quality |        html render: aQualifiedValue value.        quality := aQualifiedValue quality.        quality = Float infinity ifTrue: [ html superscript: [ html html: '&infin;' ] ] ifFalse: [ html superscript: quality ] ]do: aBlock  root add: (self openingConditionClass condition: condition).  aBlock value.  root add: self closingConditionClass newonSuspend: anObject  self document scriptGenerator event: 'suspend' do: anObject on: selflabel  ^'Html 5 Elements'createHandlers  | handler |  handler := WARequestHandler new.  handler preferenceAt: #charSet put: 'utf-16'.  ^Array with: handlerinitialize  super initialize.  self value: 0.  self multiplier: 1propertyAt: aSymbol ifAbsent: absentBlock  ^properties at: aSymbol ifAbsent: absentBlockrenderBidirectionalOverrideOn: html  html heading     level2;     with: '<bdo>'.  html unorderedList: [ html listItem: [ html text: 'User '.              html bidirectionalOverride                 direction: 'rtl';                 with: 'jcranmer'.              html text: ' 12 posts.' ].        html listItem: [ html text: 'User '.              html bidirectionalOverride                 direction: 'ltr';                 with: 'hober'.              html text: ' 5 posts.' ] ]evaluateWithFieldValues: anOrderedCollection  self evaluateWithArgument: (anOrderedCollection collect: [:each |  self valueForField: each ])selectorsToInclude  ^#(faviconIco handlerCss handlerJs windowCss toolCss)selected  ^navigation selectedComponentverticalAlign: aString  self attributes at: 'valign' put: aStringtestCoreAttributesId  self assert: [:html |  html div id: 'foo' ] gives: '<div id="foo"></div>'.  self assert: [:html |  html div           id: 'foo';           id: 'bar' ] gives: '<div id="bar"></div>'.  self assert: [:html |  self assert: (html div                 id: 'foo';                 id) = 'foo' ] gives: '<div id="foo"></div>'.  self assert: [:html |  self assert: html div id isNil ] gives: '<div></div>'isClosed  ^truerenderSafariOn: html  html listItem: 'On Safari the path is not supposed to work. But if you look under Preferences -> Security -> Show Cookies the cookie should be saved with the correct path.'greaseString  ^String streamContents: [:stream |  self encodeOn: stream usingQuotes: true ]selector: aSymbol  selector := aSymbol.  self component: (class perform: selector)parent  ^parent ifNil: [ ^self ]initialize  super initialize.  mutex := WAMutex newreadRequestBody  ran := true.  hasBody := self requestContext request rawBody notNilrenderContentOn: html  html anchor     callback: [ self requestContext closeThisPopup ];     with: 'Close me'.  html break.  html anchor     callback: [ self requestContext closeThisPopupAndReloadOpener ];     with: 'Close me and reload opener'visitNumberAttribute: anAttribute  self visitAttribute: anAttributetestSettingPathWithTrailingSlash  | cookie |  cookie := WACookie new     key: 'name';     value: 'homer';     path: '/springfield/';     yourself.  self assert: cookie path equals: '/springfield'.  self assert: cookie pathUnencoded equals: '/springfield'.  self assert: cookie pathEncoded equals: '/springfield'actionPhaseContinuationClasses  ^self continuationClasses select: [:each |  each isRenderLoopContinuation and: [ each isActionContinuation ] ]testStringWithoutFilename  self createAndVerifyTextDocumentNamed: nil hasAttachment: nilserverUrl  ^self class serverUrlparsePathParameters: aString at: anIndex from: start to: end  | parameterStart |  parameterStart := start.  [ parameterStart > 0 and: [ parameterStart < end ] ] whileTrue: [ | nameEnd parameterEnd |        nameEnd := aString indexOf: $= startingAt: parameterStart.        parameterEnd := aString indexOf: $; startingAt: parameterStart.        parameterEnd := parameterEnd > 0 ifTrue: [ parameterEnd min: end ] ifFalse: [ end ].        (nameEnd > 0 and: [ nameEnd < end ]) ifTrue: [ | parameterName valueStart |              parameterName := self class decodePercent: aString from: parameterStart to: nameEnd.              valueStart := nameEnd + 1.              [ valueStart > 0 and: [ valueStart < parameterEnd ] ] whileTrue: [ | valueEnd |                    valueEnd := aString indexOf: $, startingAt: valueStart + 1.                    valueEnd := valueEnd > 0 ifTrue: [ valueEnd min: parameterEnd ] ifFalse: [ parameterEnd ].                    self addPathParameterAt: anIndex key: parameterName value: (self class decodePercent: aString from: valueStart to: valueEnd).                    valueStart := valueEnd + 1 ] ] ifFalse: [ self addPathParameterAt: anIndex key: (self class decodePercent: aString from: parameterStart to: parameterEnd) ].        parameterStart := parameterEnd + 1 ]destroy  self document destroy.  document := niltestRemoveFromOldParent  | parent parent2 |  parent := WADispatcher new.  parent register: handler at: 'crepe'.  self assert: handler parent == parent.  self assert: (parent handlers includes: handler).  parent2 := WADispatcher new.  parent2 register: handler at: 'suzette'.  self assert: handler parent == parent2.  self assert: (parent2 handlers includes: handler).  self deny: (parent handlers includes: handler)resourceBaseUrl  ^self preferenceAt: #resourceBaseUrlcontentString  ^contentStringcreateCodec  ^GRNullCodec newrenderContentOn: html  html div     class: self cssClass;     with: self root classNamedebugUrl  ^self urlForDebugAction: '_debug'isClosed  ^truerenderContentOn: html  html heading: 'VNC Server'.  self isServerRunning ifTrue: [ self renderStopOn: html ] ifFalse: [ self renderStartOn: html ].  html heading: 'UI Process'.  self uiProcess isSuspended ifFalse: [ self renderSuspendOn: html ] ifTrue: [ self renderResumeOn: html ]uri  ^uriautofocus  self attributeAt: 'autofocus' put: truedefaultConfiguration  ^WAUserConfiguration new     addParent: WAExceptionFilterConfiguration instance;     yourselfisHttp10  ^major = 1 and: [ minor = 0 ]priority  ^0initialize  super initialize.  transcript := WriteStream on: String newtestComprehension  testContentType  self assert: handler contentType = ('text/html' seasideMimeType                 charset: 'utf-16';                 yourself)renderMaximumSizeOn: html  html tableRow: [ html tableHeading: [ html label: 'Maximum Size' ].        html tableData: [ html textInput                 size: 5;                 on: #maximumSize of: self ] ].  html tableRow: [ html tableData           colSpan: 2;           with: 'Number of sessions supported. When this limit is reached the overflow action is run. 0 for no maximum size. Has to be positive.' ]renderListItem: anObject labelled: labelString  canvas option     value: (self valueFor: anObject);     selected: (self isSelected: anObject);     with: labelStringprintOn: aStream  super printOn: aStream.  aStream     nextPut: $(;     nextPutAll: self key greaseString;     nextPut: $)renderAnchorsOn: canvas  self renderInline: [:html |  html unorderedList: [ html listItem: [ html anchor                       name: 'name';                       callback: [  ];                       with: 'Anchor' ] ] ] factor: 1 key: #anchor on: canvasexpiredRegistryKey  | url |  self request isXmlHttpRequest ifTrue: [ ^self forbidden ].  url := self requestContext registry url.  url addAllToPath: self requestContext consumer upToEnd.  self request fields keysAndValuesDo: [:key :value |  (url isSeasideField: key) ifFalse: [ url addField: key value: value ] ].  self redirectTo: urlrenderMonthNavigationOn: html  | tab |  tab := #(12 1 2 3 4 5 6 7 8 9 10 11 12 1).  html span     class: 'calendarPrevious';     with: [ html anchor           callback: [ self previousMonth ];           with: ((self monthNames at: (tab at: self monthIndex)) first: 3) ].  html space.  html span     class: 'calendarNext';     with: [ html anchor           callback: [ self nextMonth ];           with: ((self monthNames at: (tab at: self monthIndex + 2)) first: 3) ]expectedMimeType  ^WAMimeType textPlainstyleeditorSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   inkscape:export-ydpi="90.000000"   inkscape:export-xdpi="90.000000"   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"   width="48px"   height="48px"   id="svg11300"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/apps"   sodipodi:docname="preferences-desktop-theme.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective135" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient5031"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       inkscape:collect="always"       id="linearGradient5060">      <stop         style="stop-color:black;stop-opacity:1;"         offset="0"         id="stop5062" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5064" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient5029"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       id="linearGradient5048">      <stop         style="stop-color:black;stop-opacity:0;"         offset="0"         id="stop5050" />      <stop         id="stop5056"         offset="0.5"         style="stop-color:black;stop-opacity:1;" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5052" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient5027"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <linearGradient       id="linearGradient4649">      <stop         id="stop4651"         offset="0"         style="stop-color:#80837d;stop-opacity:1;" />      <stop         id="stop4653"         offset="1"         style="stop-color:#4c4d4a;stop-opacity:1;" />    </linearGradient>    <linearGradient       id="linearGradient4639">      <stop         style="stop-color:#555753;stop-opacity:1;"         offset="0"         id="stop4641" />      <stop         style="stop-color:#7c7f79;stop-opacity:1;"         offset="1"         id="stop4643" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient4633">      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="0"         id="stop4635" />      <stop         style="stop-color:#ffffff;stop-opacity:0;"         offset="1"         id="stop4637" />    </linearGradient>    <linearGradient       id="linearGradient4596">      <stop         style="stop-color:#75507b;stop-opacity:1;"         offset="0"         id="stop4598" />      <stop         style="stop-color:#543958;stop-opacity:1;"         offset="1"         id="stop4600" />    </linearGradient>    <linearGradient       id="linearGradient4586">      <stop         style="stop-color:#204a87;stop-opacity:1;"         offset="0"         id="stop4588" />      <stop         style="stop-color:#142e55;stop-opacity:1;"         offset="1"         id="stop4590" />    </linearGradient>    <linearGradient       id="linearGradient3697">      <stop         style="stop-color:#c8d5e6;stop-opacity:1;"         offset="0"         id="stop3699" />      <stop         style="stop-color:#427ebf;stop-opacity:1;"         offset="1"         id="stop3701" />    </linearGradient>    <linearGradient       id="linearGradient3689">      <stop         id="stop3691"         offset="0"         style="stop-color:#5079ad;stop-opacity:1;" />      <stop         id="stop3693"         offset="1"         style="stop-color:#729fcf" />    </linearGradient>    <linearGradient       id="linearGradient3568">      <stop         style="stop-color:#d6d6d6;stop-opacity:1;"         offset="0"         id="stop3570" />      <stop         style="stop-color:#f0f0f0;stop-opacity:1;"         offset="1"         id="stop3572" />    </linearGradient>    <linearGradient       id="linearGradient3560">      <stop         style="stop-color:#f0f0f0;stop-opacity:1;"         offset="0"         id="stop3562" />      <stop         style="stop-color:#c9c9c9;stop-opacity:1;"         offset="1"         id="stop3564" />    </linearGradient>    <linearGradient       id="linearGradient3550">      <stop         id="stop3552"         offset="0"         style="stop-color:#8b8b8b;stop-opacity:1;" />      <stop         id="stop3554"         offset="1"         style="stop-color:#a9a9a9;stop-opacity:1;" />    </linearGradient>    <linearGradient       id="linearGradient3536">      <stop         style="stop-color:#b0b0b0;stop-opacity:1;"         offset="0"         id="stop3538" />      <stop         style="stop-color:#757575;stop-opacity:1;"         offset="1"         id="stop3540" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient3528">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop3530" />      <stop         style="stop-color:#000000;stop-opacity:0;"         offset="1"         id="stop3532" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient3518">      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="0"         id="stop3520" />      <stop         style="stop-color:#ffffff;stop-opacity:0;"         offset="1"         id="stop3522" />    </linearGradient>    <linearGradient       id="linearGradient3508">      <stop         style="stop-color:#b0b0b0;stop-opacity:1;"         offset="0"         id="stop3510" />      <stop         style="stop-color:#939393;stop-opacity:1;"         offset="1"         id="stop3512" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3508"       id="linearGradient3514"       x1="16.940231"       y1="27.853085"       x2="16.940231"       y2="24.135145"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-2.121319,3.005205)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3524"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-2.121319,3.005205)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3528"       id="radialGradient3534"       cx="17.014757"       cy="39.249554"       fx="17.014757"       fy="39.249554"       r="9.5017471"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.502326,-2.992397e-15,19.53350)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3536"       id="radialGradient3542"       cx="18.163805"       cy="22.531874"       fx="18.163805"       fy="22.531874"       r="2.8422911"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.860061,0.000000,3.253760)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3550"       id="radialGradient3548"       cx="17.097467"       cy="19.777185"       fx="17.097467"       fy="19.777185"       r="4.5473714"       gradientTransform="matrix(1.208333,0.000000,0.000000,0.636493,-5.683292,8.681835)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3560"       id="radialGradient3566"       cx="12.91097"       cy="13.001998"       fx="12.91097"       fy="13.001998"       r="7.4889511"       gradientTransform="matrix(1.802725,2.307502e-23,-2.636931e-23,1.503342,-12.48525,-2.659143)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3568"       id="linearGradient3574"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-2.121319,3.005205)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3550"       id="radialGradient3610"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.208333,0.000000,0.000000,0.636493,-5.683292,8.681835)"       cx="17.097467"       cy="19.777185"       fx="17.097467"       fy="19.777185"       r="4.5473714" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3560"       id="radialGradient3612"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.802725,2.307502e-23,-2.636931e-23,1.503342,-12.48525,-2.659143)"       cx="12.91097"       cy="13.001998"       fx="12.91097"       fy="13.001998"       r="7.4889511" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3616"       gradientUnits="userSpaceOnUse"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844"       gradientTransform="translate(-2.121319,3.005205)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3568"       id="linearGradient3620"       gradientUnits="userSpaceOnUse"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281"       gradientTransform="translate(-2.121319,3.005205)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3528"       id="radialGradient3661"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.502326,5.762756e-15,19.53350)"       cx="17.014757"       cy="39.249554"       fx="17.014757"       fy="39.249554"       r="9.5017471" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3568"       id="linearGradient3663"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3508"       id="linearGradient3665"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="16.940231"       y1="27.853085"       x2="16.940231"       y2="24.135145" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3667"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3536"       id="radialGradient3669"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.860061,0.000000,3.253760)"       cx="18.163805"       cy="22.531874"       fx="18.163805"       fy="22.531874"       r="2.8422911" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3560"       id="radialGradient3671"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.802725,2.307502e-23,-2.636931e-23,1.503342,5.634344,-15.57903)"       cx="12.91097"       cy="13.001998"       fx="12.91097"       fy="13.001998"       r="7.4889511" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3550"       id="radialGradient3673"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.208333,0.000000,0.000000,0.636493,12.43635,-4.238032)"       cx="17.097467"       cy="19.777185"       fx="17.097467"       fy="19.777185"       r="4.5473714" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3528"       id="radialGradient3675"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.502326,5.762756e-15,19.53350)"       cx="17.014757"       cy="39.249554"       fx="17.014757"       fy="39.249554"       r="9.5017471" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3689"       id="linearGradient3677"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3681"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3697"       id="radialGradient3705"       cx="27.8486"       cy="4.607163"       fx="27.8486"       fy="4.607163"       r="7.4889512"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.833928,2.121324,0.655729)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4586"       id="radialGradient4594"       cx="30.974438"       cy="12.172572"       fx="30.974438"       fy="12.172572"       r="4.890574"       gradientTransform="matrix(2.132075,-4.734158e-15,2.267378e-15,1.021136,-32.94404,-3.689447)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4596"       id="radialGradient4602"       cx="18.163805"       cy="22.429104"       fx="18.163805"       fy="22.429104"       r="2.8422911"       gradientTransform="matrix(1.870990,-2.499894e-15,2.150062e-15,1.609166,-15.82050,-13.54799)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4633"       id="linearGradient4619"       x1="31.643028"       y1="13.616933"       x2="31.643028"       y2="9.6384754"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(2.121324,-0.883885)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4633"       id="linearGradient4621"       x1="31.643028"       y1="13.616933"       x2="31.643028"       y2="9.6384754"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(2.121324,-0.883885)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4639"       id="linearGradient4645"       x1="15.335379"       y1="28.377787"       x2="15.335379"       y2="34.388195"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4649"       id="radialGradient4647"       cx="18.163805"       cy="22.223564"       fx="18.163805"       fy="22.223564"       r="2.8422911"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.860061,0.000000,3.253760)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient6715"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6717"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6719"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />  </defs>  <sodipodi:namedview     stroke="#2e3436"     fill="#555753"     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="0.25490196"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="1"     inkscape:cx="-124.63746"     inkscape:cy="8.081426"     inkscape:current-layer="layer2"     showgrid="false"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:showpageshadow="false"     inkscape:window-width="872"     inkscape:window-height="703"     inkscape:window-x="234"     inkscape:window-y="145" />  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:creator>          <cc:Agent>            <dc:title>Jakub Steiner</dc:title>          </cc:Agent>        </dc:creator>        <dc:source>http://jimmac.musichall.cz</dc:source>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />        <dc:title>Themes</dc:title>        <dc:subject>          <rdf:Bag>            <rdf:li>skin</rdf:li>            <rdf:li>color</rdf:li>            <rdf:li>theme</rdf:li>            <rdf:li>customize</rdf:li>            <rdf:li>flavor</rdf:li>          </rdf:Bag>        </dc:subject>      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     inkscape:groupmode="layer"     id="layer2"     inkscape:label="blue shirt">    <g       transform="matrix(1.518738e-2,0,0,2.086758e-2,45.6332,27.4036)"       id="g6707">      <rect         style="opacity:0.40206185;color:black;fill:url(#linearGradient6715);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect6709"         width="1339.6335"         height="478.35718"         x="-1559.2523"         y="-150.69685" />      <path         style="opacity:0.40206185;color:black;fill:url(#radialGradient6717);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "         id="path6711"         sodipodi:nodetypes="cccc" />      <path         sodipodi:nodetypes="cccc"         id="path6713"         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "         style="opacity:0.40206185;color:black;fill:url(#radialGradient6719);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    </g>    <path       style="color:#000000;fill:url(#linearGradient3663);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 31.205998,5.2048743 L 34.908493,5.2048743 C 39.19495,5.2048743 44.455603,6.5223903 44.455603,7.0610293 L 44.455603,29.688444 C 44.455603,30.227083 44.018726,30.660716 43.476057,30.660716 L 22.638435,30.660716 C 22.095767,30.660716 21.658889,30.227083 21.658889,29.688444 L 21.658889,7.0610293 C 21.658889,6.5223903 26.830568,5.2048743 31.205998,5.2048743 z "       id="path3627"       sodipodi:nodetypes="ccccccccc" />    <path       sodipodi:nodetypes="ccccccc"       id="path3629"       d="M 31.363447,6.0663853 L 34.751056,6.0663853 C 38.672963,6.0663853 43.486213,7.5879023 43.486213,7.5879023 L 43.486213,29.657422 C 43.486213,29.657422 22.628291,29.657422 22.628291,29.657422 L 22.628291,7.5879023 C 22.628291,7.5879023 27.360135,6.0663853 31.363447,6.0663853 z "       style="opacity:0.61988304;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#linearGradient3665);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.410797,10.508173 L 30.405594,17.314076 L 30.405594,29.600057 L 33.587574,32.428484 L 36.50439,29.600057 L 36.50439,17.1373 L 33.410797,10.508173 z "       id="path3631" />    <path       id="path3633"       d="M 33.422901,13.510439 L 31.417678,17.921699 L 31.417678,28.969769 L 33.551254,31.023416 L 35.492301,28.969769 L 35.492301,17.793346 L 33.422901,13.510439 z "       style="opacity:0.46783627;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3667);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:type="arc"       style="opacity:1;color:#000000;fill:url(#radialGradient3669);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="path3635"       sodipodi:cx="18.163805"       sodipodi:cy="23.251263"       sodipodi:rx="2.3422911"       sodipodi:ry="1.9445436"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       transform="translate(15.11444,-11.15211)" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient3671);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.057245,10.331398 L 28.019109,14.132097 C 28.019109,14.132097 26.162954,8.5652093 26.162954,6.0887583 C 26.162955,3.6138843 27.48878,2.6416133 28.902993,2.6416133 C 28.902993,2.6416133 37.299886,2.6416133 37.299886,2.6416133 C 38.256463,2.6416133 39.929439,3.0393603 40.128313,5.9119823 C 40.327187,8.7846031 38.095381,14.132097 38.095381,14.132097 L 33.057245,10.331398 z "       id="path3637"       sodipodi:nodetypes="cczcczcc" />    <path       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 29.915116,5.0280943 C 29.915116,5.0280943 28.099472,5.5160723 28.41988,6.6872173 C 28.740287,7.8583633 31.196747,9.7126756 31.196747,9.7126756 L 35.789258,9.7126756 C 35.789258,9.7126756 37.898608,8.1511493 38.138915,6.9800043 C 38.379221,5.8088583 36.750481,5.0280943 36.750481,5.0280943 L 29.915116,5.0280943 z "       id="path3639"       sodipodi:nodetypes="csccscc" />    <path       sodipodi:nodetypes="csccscc"       id="path3641"       d="M 29.73834,4.0558263 C 29.73834,4.0558263 27.922696,4.5438043 28.243104,5.7149493 C 28.563511,6.8860953 31.019971,8.7404084 31.019971,8.7404084 L 35.612482,8.7404084 C 35.612482,8.7404084 37.721832,7.1788813 37.962139,6.0077363 C 38.202445,4.8365903 36.573705,4.0558263 36.573705,4.0558263 L 29.73834,4.0558263 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3673);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="ccccccccc"       id="path3645"       d="M 31.205998,5.2048743 L 34.908493,5.2048743 C 39.19495,5.2048743 44.455603,6.5223903 44.455603,7.0610293 L 44.455603,29.688444 C 44.455603,30.227083 44.018726,30.660716 43.476057,30.660716 L 22.638435,30.660716 C 22.095767,30.660716 21.658889,30.227083 21.658889,29.688444 L 21.658889,7.0610293 C 21.658889,6.5223903 26.830568,5.2048743 31.205998,5.2048743 z "       style="color:#000000;fill:url(#linearGradient3677);fill-opacity:1;fill-rule:evenodd;stroke:#3465a4;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:0.26315792;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 31.363447,6.0663853 L 34.751056,6.0663853 C 38.672963,6.0663853 43.486213,7.5879023 43.486213,7.5879023 L 43.486213,29.657422 C 43.486213,29.657422 22.628291,29.657422 22.628291,29.657422 L 22.628291,7.5879023 C 22.628291,7.5879023 27.360135,6.0663853 31.363447,6.0663853 z "       id="path3647"       sodipodi:nodetypes="ccccccc" />    <path       id="path3649"       d="M 33.410797,10.508173 C 33.410797,10.508173 30.405594,15.439076 30.405594,17.314076 L 30.405594,29.600057 L 33.587574,32.428484 L 36.50439,29.600057 L 36.50439,17.1373 C 36.50439,15.3873 33.410797,10.508173 33.410797,10.508173 z "       style="opacity:1;color:#000000;fill:#75507b;fill-opacity:1;fill-rule:evenodd;stroke:#5c3566;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:nodetypes="ccccccc"       style="opacity:0.25146197;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3681);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.422901,13.510439 L 31.417678,17.921699 L 31.417678,28.969769 L 33.551254,31.023416 L 35.492301,28.969769 L 35.492301,17.793346 L 33.422901,13.510439 z "       id="path3651" />    <path       transform="translate(15.11444,-11.15211)"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       sodipodi:ry="1.9445436"       sodipodi:rx="2.3422911"       sodipodi:cy="23.251263"       sodipodi:cx="18.163805"       id="path3653"       style="opacity:1;color:#000000;fill:url(#radialGradient4602);fill-opacity:1;fill-rule:evenodd;stroke:#5c3566;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc" />    <path       sodipodi:nodetypes="cczcczcc"       id="path3655"       d="M 33.057245,10.331398 L 28.019109,14.132097 C 28.019109,14.132097 26.162954,8.5652093 26.162954,6.0887583 C 26.162955,3.6138843 27.48878,2.6416133 28.902993,2.6416133 C 28.902993,2.6416133 37.299886,2.6416133 37.299886,2.6416133 C 38.256463,2.6416133 39.929439,3.0393603 40.128313,5.9119823 C 40.327187,8.7846031 38.095381,14.132097 38.095381,14.132097 L 33.057245,10.331398 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3705);fill-opacity:1;fill-rule:evenodd;stroke:#3465a4;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="csccscc"       id="path3657"       d="M 29.915116,5.0280943 C 29.915116,5.0280943 28.099472,5.5160723 28.41988,6.6872173 C 28.740287,7.8583633 30.696747,9.7126756 31.196747,9.7126756 L 35.789258,9.7126756 C 36.539258,9.6501756 37.898608,8.1511493 38.138915,6.9800043 C 38.379221,5.8088583 36.750481,5.0280943 36.750481,5.0280943 L 29.915116,5.0280943 z "       style="opacity:0.33333333;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient4594);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 29.73834,4.0558263 C 29.23834,4.0558263 27.922696,4.5438043 28.243104,5.7149493 C 28.563511,6.8860953 30.142741,8.7404084 31.019971,8.7404084 L 35.612482,8.7404084 C 36.302817,8.7404084 37.721832,7.1788813 37.962139,6.0077363 C 38.202445,4.8365903 37.073705,4.0558263 36.573705,4.0558263 L 29.73834,4.0558263 z "       id="path3659"       sodipodi:nodetypes="csccscc" />    <path       style="opacity:0.28654971;color:#000000;fill:url(#linearGradient4619);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.145635,9.6836496 L 37.830218,13.219183 L 39.067654,9.7720386 L 37.565053,12.246911 L 33.145635,9.6836496 z "       id="path4609" />    <path       id="path4611"       d="M 32.792081,9.8604263 L 28.372663,13.219183 L 26.870062,6.5900599 L 28.902993,11.981746 L 32.792081,9.8604263 z "       style="opacity:0.28654971;color:#000000;fill:url(#linearGradient4621);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccc" />  </g>  <g     id="layer1"     inkscape:label="grey shirt"     inkscape:groupmode="layer">    <path       style="color:#000000;fill:url(#linearGradient3574);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 13.086385,18.12474 L 16.78888,18.12474 C 21.075337,18.12474 26.33599,19.442256 26.33599,19.980895 L 26.33599,42.608311 C 26.33599,43.14695 25.899113,43.580583 25.356444,43.580583 L 4.5188213,43.580583 C 3.9761532,43.580583 3.5392748,43.14695 3.5392748,42.608311 L 3.5392748,19.980895 C 3.5392748,19.442256 8.7109537,18.12474 13.086385,18.12474 z "       id="rect2564"       sodipodi:nodetypes="ccccccccc" />    <path       sodipodi:nodetypes="ccccccc"       id="path3576"       d="M 13.243834,18.986251 L 16.631443,18.986251 C 20.55335,18.986251 25.3666,20.507768 25.3666,20.507768 L 25.3666,42.577289 C 25.3666,42.577289 4.5086772,42.577289 4.5086772,42.577289 L 4.5086772,20.507768 C 4.5086772,20.507768 9.2405207,18.986251 13.243834,18.986251 z "       style="opacity:0.61988304;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <g       id="g5022"       transform="matrix(1.518738e-2,0,0,2.086758e-2,28.3832,40.0286)">      <rect         y="-150.69685"         x="-1559.2523"         height="478.35718"         width="1339.6335"         id="rect4173"         style="opacity:0.40206185;color:black;fill:url(#linearGradient5027);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <path         sodipodi:nodetypes="cccc"         id="path5058"         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "         style="opacity:0.40206185;color:black;fill:url(#radialGradient5029);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <path         style="opacity:0.40206185;color:black;fill:url(#radialGradient5031);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "         id="path5018"         sodipodi:nodetypes="cccc" />    </g>    <path       style="opacity:1;color:#000000;fill:url(#linearGradient3514);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 15.291184,23.42804 L 12.285981,30.233943 L 12.285981,42.519924 L 15.467961,45.348351 L 18.384777,42.519924 L 18.384777,30.057167 L 15.291184,23.42804 z "       id="path3446" />    <path       id="path3516"       d="M 15.303288,26.430306 L 13.298065,30.841566 L 13.298065,41.889636 L 15.431641,43.943283 L 17.372688,41.889636 L 17.372688,30.713213 L 15.303288,26.430306 z "       style="opacity:0.46783627;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3524);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:type="arc"       style="opacity:1;color:#000000;fill:url(#radialGradient3542);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="path3444"       sodipodi:cx="18.163805"       sodipodi:cy="23.251263"       sodipodi:rx="2.3422911"       sodipodi:ry="1.9445436"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       transform="translate(-3.005208,1.767768)" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient3566);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 14.937632,23.251265 L 9.8994947,27.051964 C 9.8994947,27.051964 8.0433397,21.485075 8.0433397,19.008624 C 8.0433407,16.53375 9.3691657,15.561479 10.78338,15.561479 C 10.78338,15.561479 19.180273,15.561479 19.180273,15.561479 C 20.13685,15.561479 21.809826,15.959226 22.0087,18.831848 C 22.207574,21.704469 19.975768,27.051964 19.975768,27.051964 L 14.937632,23.251265 z "       id="path3440"       sodipodi:nodetypes="cczcczcc" />    <path       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 11.795503,17.94796 C 11.795503,17.94796 9.9798577,18.435938 10.300266,19.607083 C 10.620674,20.778229 13.077134,22.632542 13.077134,22.632542 L 17.669645,22.632542 C 17.669645,22.632542 19.778995,21.071015 20.019302,19.89987 C 20.259608,18.728724 18.630868,17.94796 18.630868,17.94796 L 11.795503,17.94796 z "       id="path3442"       sodipodi:nodetypes="csccscc" />    <path       sodipodi:nodetypes="csccscc"       id="path3556"       d="M 11.618727,16.975692 C 11.618727,16.975692 9.8030817,17.46367 10.12349,18.634815 C 10.443897,19.805961 12.900358,21.660274 12.900358,21.660274 L 17.492869,21.660274 C 17.492869,21.660274 19.602219,20.098747 19.842526,18.927602 C 20.082832,17.756456 18.454092,16.975692 18.454092,16.975692 L 11.618727,16.975692 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3548);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="ccccccccc"       id="path3580"       d="M 13.086385,18.12474 L 16.78888,18.12474 C 21.075337,18.12474 26.33599,19.442256 26.33599,19.980895 L 26.33599,42.608311 C 26.33599,43.14695 25.899113,43.580583 25.356444,43.580583 L 4.5188213,43.580583 C 3.9761532,43.580583 3.5392748,43.14695 3.5392748,42.608311 L 3.5392748,19.980895 C 3.5392748,19.442256 8.7109537,18.12474 13.086385,18.12474 z "       style="color:#000000;fill:url(#linearGradient3620);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:0.61988304;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 13.243834,18.986251 L 16.631443,18.986251 C 20.55335,18.986251 25.3666,20.507768 25.3666,20.507768 L 25.3666,42.577289 C 25.3666,42.577289 4.5086772,42.577289 4.5086772,42.577289 L 4.5086772,20.507768 C 4.5086772,20.507768 9.2405207,18.986251 13.243834,18.986251 z "       id="path3582"       sodipodi:nodetypes="ccccccc" />    <path       id="path3584"       d="M 15.291184,23.42804 C 15.291184,23.42804 12.285981,27.845821 12.285981,30.233943 L 12.285981,42.519924 L 15.467961,45.348351 L 18.384777,42.519924 L 18.384777,30.057167 C 18.384777,28.057167 15.291184,23.42804 15.291184,23.42804 z "       style="opacity:1;color:#000000;fill:url(#linearGradient4645);fill-opacity:1.0;fill-rule:evenodd;stroke:#2e3436;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:nodetypes="ccccccc"       style="opacity:0.46783627;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3616);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 15.303288,26.430306 L 13.298065,30.841566 L 13.298065,41.889636 L 15.431641,43.943283 L 17.372688,41.889636 L 17.372688,30.713213 L 15.303288,26.430306 z "       id="path3586" />    <path       transform="translate(-3.005208,1.767768)"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       sodipodi:ry="1.9445436"       sodipodi:rx="2.3422911"       sodipodi:cy="23.251263"       sodipodi:cx="18.163805"       id="path3588"       style="opacity:1;color:#000000;fill:url(#radialGradient4647);fill-opacity:1.0;fill-rule:evenodd;stroke:#2e3436;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc" />    <path       sodipodi:nodetypes="cczcczcc"       id="path3590"       d="M 14.937632,23.251265 L 9.8994947,27.051964 C 9.8994947,27.051964 8.0433397,21.485075 8.0433397,19.008624 C 8.0433407,16.53375 9.3691657,15.561479 10.78338,15.561479 C 10.78338,15.561479 19.180273,15.561479 19.180273,15.561479 C 20.13685,15.561479 21.809826,15.959226 22.0087,18.831848 C 22.207574,21.704469 19.975768,27.051964 19.975768,27.051964 L 14.937632,23.251265 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3612);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="csccscc"       id="path3592"       d="M 11.795503,17.94796 C 11.795503,17.94796 9.9798577,18.435938 10.300266,19.607083 C 10.620674,20.778229 12.007307,22.632542 13.077134,22.632542 L 17.669645,22.632542 C 18.546875,22.632542 19.778995,21.071015 20.019302,19.89987 C 20.259608,18.728724 18.630868,17.94796 18.630868,17.94796 L 11.795503,17.94796 z "       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient3610);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 11.618727,16.975692 C 11.618727,16.975692 9.8030817,17.46367 10.12349,18.634815 C 10.443897,19.805961 11.775358,21.660274 12.900358,21.660274 L 17.492869,21.660274 C 18.242869,21.660274 19.602219,20.098747 19.842526,18.927602 C 20.082832,17.756456 18.454092,16.975692 18.454092,16.975692 L 11.618727,16.975692 z "       id="path3594"       sodipodi:nodetypes="csccscc" />    <path       style="opacity:0.61988304;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 14.937632,22.720934 L 19.622215,26.256468 L 20.859651,22.809323 L 19.35705,25.284196 L 14.937632,22.720934 z "       id="path4604" />    <path       id="path4607"       d="M 14.584078,22.897711 L 10.164659,26.256468 L 8.6620577,19.627343 L 10.69499,25.019031 L 14.584078,22.897711 z "       style="opacity:0.61988304;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccc" />  </g></svg>'assertCookieAddition: aResponse  | cookie |  self assert: aResponse cookies size = 1.  cookie := aResponse cookies first.  self assert: cookie path = self path.  self assert: cookie key = self cookieKey.  self assert: cookie discardreset  imageBootTime := DateAndTime nowrequestContextWithUrl: aUrlOrString  self requestContextWithUrl: aUrlOrString cookies: Array newaccept: aVisitor  aVisitor visitListAttribute: selfchildrenBlock  ^childrenBlocktype  ^'date'renderContentOn: html  self renderDownloadOn: html.  self renderLoadFromFileOn: html.  self renderLoadFromUrlOn: html.  self renderSaveImageOn: htmlstore: anObject  self subclassResponsibilityhandlerCss  ^'/* html */body, input, textarea, select {	line-height: 1.5;	font-size: 14px;	color: #2a2a2a;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}select.fix {	width:340px;}input, textarea, select {	margin-right: 0.5em;}input.text, textarea {	width: 200px;}/* headings */h1, h2, h3, h4, h5, h6 {	color: #01598d;	margin-bottom: 1ex;	font-weight: normal;}h1 {	margin-top: 4px;}h2,h3,h4 {	margin:2px 0px;}h2 {	margin-bottom:0.5em;}table {	border: 0;	border-collapse: collapse;}td, th {	padding: 3px 1em 3px 0;}label {	font-weight:bold;	padding: 2px 4px 2px 0px;}th {	text-align: left;}a {	color: #008aff;	text-decoration: none;}a.selected {	font-weight:bold;}a.wa-action, .groupContent a  {		background:#eee;		padding:3px 6px 3px 6px;		border:1px solid #888;		white-space:nowrap;		width:120px;		-moz-border-radius: 5px;		-webkit-border-radius: 5px;		border-radius: 5px;}.groupContent a {	font-size:10px;padding:2px 5px 2px 5px;}.groupContent a.large {	font-size:100%;}a.wa-action:hover, .groupContent a:hover {	background:#fff;}/* special */.smallLogo {	background: url(smallLogo.png) no-repeat;	padding:4px;	margin-left:6px;	width:100px;	height:54px;}table.wa-config {	width:100%;	padding:0;}table.wa-config td {	padding:0px;}.wa-config .topbar {	background:#ccc;	height:22px;	padding:4px 2px 4px 3px}.wa-config .header {	background:#01598d;	color: #fff;	padding:4px;	font-size:120%;}div.help {	padding:8px;	white-space:pre;}.handler-name {	font-family: monospace;}h1.selection-title  {	background-color:#EEEEEE;	font-size:large;	font-weight:bold;	margin-top:0;	padding-top:4px;	padding-bottom:4px;	padding-left:4px;	width:100%;}.group {	margin-bottom:6px;	width: 100%;}.groupTitle {	height:20px;	font-size:1.2em;	background:#eee;	color:#01598d;	padding-left:3px;}.groupTitle .action {	float:right;	padding-right:4px;	white-space:nowrap;}.groupContent {	padding-left:4px;	margin-top:6px;	margin-bottom: 4px;}/* special */h1.logo a { 	width: 200px;	height: 106px;	outline: none;	display: block;	text-indent: -100em;	background: url(logo.png) no-repeat;}h1.title a {	color: #01598d; }span.unspecified {	color: #ff7000;}a.download, a.download:hover {	background: url(save.png) no-repeat;	background-position: 0 50%;	padding-left: 18px;	border:0px}a.help {background: url(help.png) no-repeat;	padding-left:16px;	border:0px}a.up {background: url(up.png) no-repeat;	padding-left:16px;	border:0px}a.down {background: url(down.png) no-repeat;	padding-left:16px;	border:0px}a.plus {background: url(plus.png) no-repeat;	padding-left:16px;	border:0px}a.minus {background: url(minus.png) no-repeat;	padding-left:16px;	border:0px}	/* walkback */.walkback th {	text-align: right;}.walkback ol li {	list-style: square;}'initialize  super initialize.  component := WATrailTestComponent new.  trail := WATrail on: componentcreateNull  ^nilrequestContextWithUrl: aUrlOrString cookies: aCollection  | handlers |  handlers := self requestContext handlers.  self requestContext initializeWithRequest: ((WARequest method: 'GET' uri: aUrlOrString)           setCookies: aCollection asArray;           yourself) response: WABufferedResponse new codec: self createCodec.  self requestContext handlers addAll: handlersancestors  | set |  set := IdentitySet new.  self ancestorsDo: [:each |   ] seen: set.  ^sethandleDefault: anException  ^self debugAndResume: anExceptionpriority  ^300expireIn: aDuration  self expiry: DateAndTime now + aDuration.  self maxAge: aDuration asSecondsrequestVersionFor: aNativeRequest  self subclassResponsibilitytestAddToPathWithTrailingSlashOnly  url addToPath: 'files/WAStandardFiles/'.  self assert: url path size = 2.  self assert: url path first = 'files'.  self assert: url path second = 'WAStandardFiles'.  self assert: url greaseString = '/files/WAStandardFiles/'style: aString  self style with: aStringvalueForField: anObject  ^(anObject isKindOf: WAFile) ifTrue: [ anObject ]parsePath: aString absolute: absolute from: start to: end  | p index elementStart |  absolute ifTrue: [ path := nil.        pathParameters := nil ].  p := self path.  index := p size.  elementStart := start.  [ elementStart < end and: [ (aString at: elementStart) = $/ ] ] whileTrue: [ elementStart := elementStart + 1 ].  [ elementStart > 0 and: [ elementStart < end ] ] whileTrue: [ | elementEnd elementSize |        elementEnd := aString indexOf: $/ startingAt: elementStart + 1.        (elementEnd > 0 and: [ elementEnd < end ]) ifFalse: [ elementEnd := end ].        elementSize := elementEnd - elementStart.        elementSize > 0 ifTrue: [ (elementSize = 1 and: [ (aString at: elementStart) = $. ]) ifFalse: [ (elementSize = 2 and: [ (aString at: elementStart) = $. and: [ (aString at: elementStart + 1) = $. ] ]) ifTrue: [ index := index - 1.                          p isEmpty ifFalse: [ p removeLast ] ] ifFalse: [ | semiColonIndex |                          index := index + 1.                          semiColonIndex := aString indexOf: $; startingAt: elementStart.                          (semiColonIndex > 0 and: [ semiColonIndex < elementEnd ]) ifTrue: [ p addLast: (self class decodePercent: aString from: elementStart to: semiColonIndex).                                self parsePathParameters: aString at: index from: semiColonIndex + 1 to: elementEnd ] ifFalse: [ p addLast: (self class decodePercent: aString from: elementStart to: elementEnd) ] ] ] ].        elementStart := elementEnd + 1.        [ elementStart < end and: [ (aString at: elementStart) = $/ ] ] whileTrue: [ elementStart := elementStart + 1 ] ].  slash := end - start > 0 and: [ (aString at: end - 1) = $/ ]position: aPoint  self     left: aPoint x;     top: aPoint ypathUnencodedOn: aStream  path isNil ifFalse: [ path do: [:each |  aStream nextPut: $/.              aStream nextPutAll: each ] ].  (path isNil or: [ path isEmpty or: [ slash ] ]) ifTrue: [ aStream nextPut: $/ ]title  ^'Memory'testSymbolRendering  self assert: [:html |  html div           id: #aSymbol;           with: #aSecondSymbol ] gives: '<div id="aSymbol">aSecondSymbol</div>'.  self assert: [:html |  html div: [ html text: #aSecondSymbol ] ] gives: '<div>aSecondSymbol</div>'.  self assert: [:html |  html div: [ html render: #aSecondSymbol ] ] gives: '<div>aSecondSymbol</div>'charset: aString  self attributes at: 'charset' put: aStringdefaultDispatcher  ^WAAdmin defaultDispatcherupdateRoot: anHtmlRoot  super updateRoot: anHtmlRoot.  self selected notNil ifTrue: [ anHtmlRoot title: self selected title ]initialize  super initialize.  instances := IdentityDictionary new.  formatter := GRPrinter binaryFileSize.  self session traverseWithMemory: self seen: (IdentitySet with: self with: self session with: self application).  table := self buildTablerequest  ^self requestContext requeststatus  ^statusinitialize  super initialize.  self resetrenderContentOn: html  | url anchor |  self renderExplanationOn: html.  url := self requestContext request url.  anchor := html anchor.  anchor url rawAddToPath: self testPath.  anchor     callback: [ self runTest ];     with: 'Run Test'callcc: aBlock  ^WAContinuation currentDo: aBlockrestore  objects keysAndValuesDo: [:key :value |  key restoreFromSnapshot: value ]password  ^passwordendYear: anInteger  endYear := anIntegerisOnLastPage  ^self validPages last = self currentPagetestSize  self assert: merged size = 0.  one at: 'foo' put: 1.  self assert: merged size = 1.  two at: 'foo' put: 2.  self assert: merged size = 2.  two at: 'bar' put: 4.  self assert: merged size = 3renderContentOn: html  html unorderedList     list: self items;     labels: self labelBlock;     callback: [:value |  self answer: value ]bcc  ^bccpostCopy  super postCopy.  dictionary := dictionary copycompile: aString  GRPlatform current compile: aString into: presenter class classified: #renderingopen: aComponent onAnswer: aBlock  | component |  component := self requestor decoratedComponent.  component removeDecoration: self requestor.  super open: aComponent onAnswer: [:value |  component addDecoration: self requestor.        aBlock value: value ]superscript: aBlock  self superscript with: aBlockrenderExampleOn: html  html paragraph: 'The counter is an example of a very simple Seaside component. It increments and decrements a number by clicking on a link. Test the example below by clicking on the "++" and "--" links:'.  html div     class: #seasideExample;     with: counter.  html paragraph: [ html           text: 'This application is coded in two short methods. It is implemented in class ';           code: 'WACounter';           text: ', a subclass of ';           code: 'WAComponent' ].  html paragraph: 'The first method initializes the counter to 0:'.  self renderInitializeCodeOn: html.  html paragraph: 'The second method generates the output and assigns the actions to the anchors (links) which update the current value.'.  self renderRenderContentOnCodeOn: htmlcurrentSegment  ^stack isEmpty ifFalse: [ stack last value ]time  ^timeassertRoot: aBlock gives: aString  | html |  html := self builder     fullDocument: true;     rootBlock: aBlock;     render: [:canvas |   ].  self assert: html = ('<html><head><title></title>' , aString , '</head><body onload="onLoad()"><script type="text/javascript">function onLoad(){};</script></body></html>')writeElementsOn: aDocument  aDocument     openTag: 'title';     nextPutAll: title;     closeTag: 'title'.  headElements do: [:each |  aDocument print: each ]tempNamesAndValuesIn: aContext do: aTwoArgumentBlock  (((SystemVersion current asString includesSubstring: 'Pharo') and: [ SystemVersion current major >= 8 ]) or: [ (SystemVersion current asString includesSubstring: 'Squeak') and: [ SystemVersion current majorVersionNumber >= 5 ] ]) ifTrue: [ aContext tempNames doWithIndex: [:each :index |  aTwoArgumentBlock value: each value: (aContext namedTempAt: index) ] ]renderSelectionOn: html  keysAndValuesDo: aTwoArgumentBlock  self sweepIncrementally.  keyTable do: [:each |  | cacheEntry |        cacheEntry := each.        [ cacheEntry isNil ] whileFalse: [ aTwoArgumentBlock value: cacheEntry key value: cacheEntry value.              cacheEntry := cacheEntry next ] ]proceedUrl  ^self urlForDebugAction: '_proceed'fileSelectors  self subclassResponsibilitydescribeOn: config  describeBlock isNil ifFalse: [ describeBlock value: config ]renderContentOn: html  html span     class: self cssClass;     with: [ html span           title: 'Callback Time';           with: filter previousTiming.        html text: '/'.        html span           title: 'Render Time';           with: filter currentTiming.        html text: ' ms' ]testFieldSetTag  self assert: [:html |  html fieldSet: 'foo' ] gives: '<fieldset>foo</fieldset>'.  self assert: [:html |  html fieldSet           legend: 'bar';           with: 'zork' ] gives: '<fieldset><legend>bar</legend>zork</fieldset>'sessionClass: aClass  ^self preferenceAt: #sessionClass put: (GRPlatform current bindingOf: aClass)addRequestHandler  | newHandler |  (name isNil or: [ name isEmpty ]) ifTrue: [ ^self inform: 'You must enter a path-name.' onAnswer: [  ] ].  newHandler := WAAdmin register: type at: name in: self dispatcher.  newHandler isApplication ifTrue: [ WAAdmin configureNewApplication: newHandler ].  self answer: newHandlertestCookiesDisabledNoKey  | response context |  registry := self createRegistry.  context := self createRequestContextWithFieldKey: nil cookieKey: nil.  response := self dispatch: context to: registry.  self assertNoCookies: response.  self assertDefault: responseisDispatcher  ^falseaddHaloVisitor: aHaloVisitor  ^aHaloVisitor     visitor: self;     yourselfhandleDefault: aRequestContext  self defaultName isNil ifTrue: [ aRequestContext responseGenerator           forbidden;           respond ] ifFalse: [ self handleFiltered: aRequestContext named: self defaultName ]testFormWithMimeTypeGif  | handler |  self formClassExists ifFalse: [ ^self ].  handler := WADocumentHandler document: self sampleForm mimeType: WAMimeType imageGif fileName: nil.  self assert: (handler document contents beginsWithSubCollection: #(16r47 16r49 16r46 16r38) asByteArray)buildGroups  groups := OrderedCollection new.  groups add: (WAAncestryAttributeEditor new           configuration: configuration;           group: #inheritedConfiguration;           parent: self;           yourself).  groups addAll: (self groupedAttributes collect: [:association |  WAConfigAttributeEditor new                 configuration: configuration;                 attributes: association value;                 group: association key;                 parent: self;                 hasAdvancedAttributes: (self includesAdvanced: association value);                 yourself ])testTargetParent  self assert: [:html |  html anchor           callback: [  ];           targetParent;           with: 'foo' ] gives: '<a target="_parent" href="/?1">foo</a>'searchInput  ^self brush: WASearchInputTag newsessions  | collection |  collection := OrderedCollection new.  self sessionsDo: [:session |  collection add: session ].  ^collectionrenderContentOn: html  html div     class: 'calendar';     with: [ html div           class: 'calendarCaption';           with: [ self renderMonthHeadingOn: html ].        html table: [ html tableRow                 class: 'calendarTitle';                 with: [ self weekDays do: [:each |  html tableData: each ] ].              self weeksDo: [:week |  self renderRowForWeek: week on: html ] ].        self renderMonthNavigationOn: html.        html           space;           space.        self renderYearNavigationOn: html ]testRelativeTo  | first second relativePath |  first := WAUrl absolute: 'http://www.seaside.st/news'.  second := WAUrl absolute: 'http://www.seaside.st/news/2008/April'.  relativePath := first relativeTo: second.  self assert: relativePath size = 2.  self assert: relativePath first = '2008'.  self assert: relativePath second = 'April'removeConfiguration: aConfiguration  | myApplication authFilter |  (aConfiguration isKindOf: WAAuthConfiguration) ifTrue: [ myApplication := self myApplication.        authFilter := myApplication filters detect: [:each |  each isKindOf: WAAuthenticationFilter ] ifNone: [ nil ].        authFilter isNil ifFalse: [ myApplication preferenceAt: #login put: nil.              myApplication preferenceAt: #passwordHash put: nil.              myApplication removeFilter: authFilter ] ].  self configuration removeParent: aConfiguration.  self parent buildGroupsattributeAt: aSymbol  ^self attributeAt: aSymbol ifAbsent: [ WAAttributeNotFound signalWithKey: aSymbol ]newHandler  ^WADocumentHandler document: 'body { background-color: #ffffff }' mimeType: WAMimeType textCss fileName: 'sample.css'haloFor: aPresenter  ^halos at: aPresenter ifAbsentPut: [ aPresenter haloClass on: aPresenter ]datetimelocal: anObject  datetimelocal := anObjectparts  ^parts ifNil: [ parts := Set new ]cancel  dialog ifTrue: [ self answer: nil ]document: aDocument mimeType: mimeType fileName: fileName  self url: (canvas context urlForDocument: aDocument mimeType: mimeType fileName: fileName).  mimeType isNil ifFalse: [ self type: mimeType ]execute  self open: (WAPluggableTool on: self application configurationComponent)printOn: aStream  | document codec |  codec := [ self requestContext codec ] on: WARequestContextNotFound do: [:e |  GRNullCodec new ].  document := WAUnescapedDocument on: aStream codec: codec.  self encodeOn: documentfilepath: anObject  filepath := anObjecthandlerAtAll: aCollectionOfStrings  ^aCollectionOfStrings inject: self into: [:handler :element |  handler handlerAt: element ]selected: anObject  selected := anObjectvisitPresenter: aPresenter  aPresenter initialRequest: self requesttestSettingRootPath  | cookie |  cookie := WACookie new     key: 'name';     value: 'homer';     path: '/';     yourself.  self assert: cookie path equals: '/'.  self assert: cookie pathUnencoded equals: '/'.  self assert: cookie pathEncoded equals: '/'renderLineBreaksOn: canvas  self renderInline: [:html |  html withLineBreaks: 'a			b			c' ] key: #lineBreak on: canvaskeyGenerator  ^self brush: WAKeyGeneratorTag newtestMainJs  | handler response |  handler := WAFileHandler new.  self requestContextWithUrl: '/i/dont/care/main.js'.  self requestContext consumer     next;     next;     next.  response := self responseAfter: [ handler handle: self requestContext ].  self assert: response status = 404clear  self keysAndValuesDo: [:key :value |  self cacheEntryRemoved: value ].  size := 0.  keyTable atAllPut: nil.  byAccessStart := nil.  byAccessEnd := nil.  byCreationStart := nil.  byCreationEnd := nilmonth: anObject  month := anObject<= otherStatusItem  ^self priority < otherStatusItem priority or: [ self priority = otherStatusItem priority and: [ self label <= otherStatusItem label ] ]exchangeRates  ^#(#('EUR' 1.70) #('USD' 1.30) #('DKK' 23.36) #('SEK' 19.32))imgglyphiconshalflingsPngContent  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 1 213 0 0 0 133 8 3 0 0 0 58 158 146 134 0 0 0 132 80 76 84 69 255 255 255 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 132 103 176 84 0 0 0 43 116 82 78 83 0 207 15 239 159 191 47 95 223 31 175 63 127 77 143 79 128 111 9 246 216 171 75 168 162 72 27 30 201 243 117 195 147 249 213 237 39 144 192 42 122 199 189 204 142 115 190 0 0 16 0 73 68 65 84 120 94 237 157 137 114 164 56 151 133 175 214 5 104 178 243 95 102 221 247 229 188 255 251 77 24 112 43 204 185 74 96 112 185 171 106 116 42 42 211 113 144 111 10 125 72 41 225 27 66 126 30 117 89 7 192 45 134 193 111 50 74 193 199 108 176 243 198 33 187 97 148 79 209 112 197 183 1 8 86 190 99 113 251 176 207 74 2 72 146 150 0 178 226 168 82 133 136 96 229 102 176 201 236 27 236 141 40 176 15 154 176 200 87 231 229 213 81 6 184 89 38 135 161 8 41 226 65 94 219 15 0 16 232 156 171 200 47 100 203 230 22 213 175 113 88 214 239 218 199 27 43 98 141 151 70 251 156 244 173 129 0 2 99 79 83 181 33 112 97 84 85 172 74 212 213 119 31 131 142 112 73 100 116 59 30 173 171 195 102 0 88 94 28 215 100 166 147 124 229 171 77 14 193 47 139 32 76 85 24 210 230 138 238 183 169 90 179 107 33 15 24 107 13 224 91 237 115 202 23 3 35 192 242 118 142 170 91 175 110 39 47 21 221 2 47 106 244 195 51 202 199 160 3 210 2 119 95 9 95 175 14 47 85 79 84 61 137 83 94 81 179 111 200 111 82 197 59 85 124 42 85 134 186 227 103 0 152 229 133 218 7 160 246 105 182 91 130 89 193 25 164 115 84 3 22 133 102 103 173 88 21 168 130 113 125 219 129 120 63 169 93 225 13 171 177 30 82 53 161 106 146 42 73 14 239 114 137 252 72 254 205 190 122 93 12 213 88 178 200 149 188 126 40 181 79 203 15 136 43 184 136 65 69 186 167 106 1 83 74 0 236 190 232 175 219 191 205 136 64 20 22 68 161 234 90 84 23 172 11 84 72 85 66 213 71 72 197 108 182 137 59 63 63 23 186 155 95 181 240 118 215 250 234 253 239 213 56 216 10 149 176 146 235 136 222 129 239 100 147 203 103 168 142 1 40 11 219 16 95 83 21 64 206 82 29 214 30 28 145 137 170 88 99 172 120 128 198 11 125 200 152 23 123 22 246 147 60 200 223 72 145 87 199 77 136 174 91 35 112 116 48 165 66 213 168 82 251 0 212 62 205 118 203 142 248 190 164 26 43 213 241 255 78 53 142 31 143 61 224 198 165 163 77 187 194 94 188 183 214 123 241 160 115 215 103 99 113 241 31 194 254 35 60 200 103 170 199 125 181 220 159 45 13 84 125 26 129 15 218 135 124 30 129 87 222 129 145 234 35 112 176 150 70 224 75 84 61 53 164 7 140 225 233 149 23 15 120 15 120 241 116 246 42 84 153 129 12 120 221 119 228 143 235 116 122 252 218 239 85 174 62 207 150 218 237 115 236 167 119 152 1 233 128 42 205 150 174 83 125 228 197 84 190 201 146 1 242 228 8 43 54 249 198 76 131 148 49 201 19 238 156 111 103 108 154 237 151 126 175 114 245 121 101 211 110 159 99 223 32 196 101 96 53 13 164 237 149 205 117 170 14 139 57 135 33 182 214 67 174 48 84 29 171 10 53 230 248 246 106 30 167 252 92 227 231 175 93 175 114 245 249 46 196 113 251 176 95 195 195 57 190 112 152 42 223 133 104 83 109 156 139 161 245 37 97 37 84 45 149 172 158 223 74 218 198 83 62 170 112 202 191 79 149 239 42 177 174 183 15 251 41 184 60 36 145 211 84 101 140 194 114 88 229 228 142 202 75 168 93 197 254 160 237 214 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 149 228 167 83 151 135 103 179 157 242 147 66 118 33 145 109 129 105 2 172 26 170 29 231 172 255 192 166 71 187 188 122 215 220 107 229 135 100 205 171 204 75 74 189 154 228 180 210 16 194 144 228 243 196 88 184 158 16 136 0 2 217 124 15 192 55 168 146 223 252 203 145 164 149 106 58 160 202 113 206 249 51 54 249 107 113 28 116 31 56 71 213 146 185 10 50 78 83 20 17 207 185 232 192 231 229 163 23 78 101 216 200 189 164 234 107 91 49 213 234 243 95 121 233 0 30 15 144 205 84 57 78 219 231 228 70 228 75 113 28 112 206 175 197 136 106 148 81 163 234 0 228 96 40 254 84 68 202 164 52 68 92 45 205 47 45 191 236 186 9 54 126 130 151 84 61 86 121 149 42 249 9 65 4 74 70 70 193 166 210 164 202 113 176 196 33 127 158 201 47 239 212 12 98 51 67 132 125 15 64 216 183 228 11 4 162 102 181 45 5 53 170 106 215 158 222 41 36 26 180 39 64 222 128 139 226 99 20 209 124 247 240 153 251 42 228 160 175 122 64 199 90 43 172 228 175 10 231 175 62 1 140 35 128 231 41 170 156 7 91 253 17 24 247 254 243 189 126 30 79 138 99 162 26 135 68 254 113 95 117 120 151 59 69 53 123 217 228 51 15 240 5 41 161 176 47 243 82 121 246 167 33 34 146 95 233 232 84 61 208 192 138 77 90 254 42 148 252 213 12 32 70 0 153 71 102 0 70 180 56 168 113 170 111 51 144 237 206 31 222 97 62 17 148 56 211 62 78 118 162 202 145 255 186 175 162 234 20 213 218 233 70 40 148 18 144 52 122 163 19 81 253 125 55 6 253 192 84 91 244 218 126 94 105 96 223 62 177 94 67 81 207 70 227 56 6 48 75 28 142 79 237 143 247 147 27 1 165 252 92 203 115 246 244 25 190 149 229 37 170 116 21 215 53 128 253 84 170 85 168 105 58 55 169 30 231 175 206 248 77 179 158 141 198 113 34 150 151 64 241 1 138 15 44 92 71 0 160 242 121 172 229 185 158 131 176 168 252 245 190 106 195 163 60 40 91 111 109 213 173 129 239 143 192 115 107 4 62 166 42 34 7 84 143 103 39 25 64 222 222 26 173 194 113 166 137 226 240 44 170 198 153 182 197 35 149 183 92 31 174 103 13 228 171 127 167 175 146 136 234 249 217 146 107 204 150 178 58 91 170 117 188 75 149 87 18 116 143 32 108 41 200 15 37 204 56 226 214 202 6 85 184 19 71 0 87 253 91 223 171 170 166 74 117 250 148 149 141 211 86 54 84 207 187 84 245 85 191 175 84 1 175 211 184 117 23 2 85 184 19 71 224 200 255 204 190 42 149 234 183 187 11 241 50 252 56 94 164 218 206 95 117 117 132 4 220 49 85 142 195 254 49 85 46 127 124 39 209 75 26 184 60 227 227 149 205 239 67 85 195 34 24 71 45 161 121 235 170 63 187 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 240 38 223 244 189 182 243 233 166 179 127 13 240 148 49 112 164 9 81 175 16 102 81 148 148 12 26 47 114 180 61 200 79 77 213 87 172 236 51 86 227 226 106 156 166 234 40 245 240 72 89 161 55 2 227 195 232 217 214 79 202 119 152 49 95 163 218 38 141 230 161 114 105 79 153 82 125 206 149 81 184 80 43 147 218 159 139 32 129 177 86 159 176 98 211 105 170 113 181 83 163 34 194 122 56 56 81 207 211 194 136 162 25 35 149 22 49 227 250 75 163 169 54 185 119 168 202 37 170 242 25 84 219 65 118 137 77 65 29 132 171 239 253 61 170 207 213 30 168 3 111 98 130 131 55 72 13 170 78 20 5 88 166 90 27 71 11 245 29 9 186 125 72 213 127 44 231 49 85 170 47 210 129 25 235 117 170 192 176 218 1 160 226 198 0 191 82 19 23 196 39 6 13 69 244 213 39 74 247 168 162 170 229 131 70 223 207 26 129 155 159 251 138 170 199 62 72 22 177 33 202 139 44 111 223 192 122 157 106 94 141 204 84 83 41 73 57 203 103 150 2 20 189 221 71 61 93 240 107 168 242 129 251 35 240 124 68 117 214 169 122 128 251 170 53 112 22 114 21 235 117 170 237 179 55 5 40 134 169 102 63 142 6 147 130 162 60 213 45 5 19 188 252 160 35 240 130 231 101 1 15 224 12 213 154 122 141 87 155 133 250 223 137 234 136 69 89 69 49 19 109 50 111 246 213 211 179 165 114 103 4 230 190 202 184 177 210 154 79 142 192 118 42 15 212 248 158 161 86 255 202 8 108 136 17 83 61 30 129 189 89 155 108 212 80 36 4 33 25 60 46 81 77 64 186 79 85 62 103 4 150 54 213 75 179 165 152 129 0 212 80 158 160 86 255 194 108 201 172 27 212 183 186 133 62 91 34 170 118 109 241 1 158 169 150 228 48 8 9 136 151 168 2 192 143 63 7 62 236 61 158 160 86 191 185 178 249 104 111 143 217 177 134 169 110 119 33 180 140 204 176 104 247 153 101 75 92 143 180 64 210 167 75 79 192 242 160 60 55 122 229 92 127 184 181 83 237 103 207 129 245 56 109 228 199 84 249 14 82 245 147 63 55 32 109 211 24 107 206 222 133 208 53 109 185 245 0 28 85 219 132 192 80 141 122 63 210 83 175 228 221 169 191 150 170 124 29 213 207 147 149 31 67 220 87 89 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 182 200 109 13 242 93 169 203 26 23 149 141 110 95 236 162 193 26 241 144 182 236 67 238 202 123 185 160 46 91 12 165 239 249 230 227 84 157 254 72 82 131 204 230 35 3 128 17 107 48 146 31 164 232 229 93 148 137 98 249 70 62 250 82 171 134 203 135 90 126 30 229 19 100 236 242 210 246 11 64 135 200 61 120 154 100 227 249 160 126 199 196 26 83 140 161 140 129 48 13 64 82 118 167 90 65 237 52 1 152 245 45 184 141 181 214 27 187 243 221 83 4 79 46 159 188 139 226 97 24 42 224 85 170 214 160 225 242 161 150 15 12 165 249 36 244 211 57 49 48 118 123 145 134 79 161 200 165 173 2 201 111 37 57 24 187 43 102 202 46 64 64 16 145 1 65 217 241 78 203 219 30 213 253 211 51 166 237 178 177 138 159 60 48 88 242 213 126 233 87 84 158 169 46 245 111 184 124 168 229 3 112 211 125 170 48 118 125 17 221 39 126 236 242 182 158 236 235 84 97 236 193 175 99 225 49 1 202 238 148 90 222 118 94 76 103 169 117 249 170 219 124 75 9 230 171 63 71 134 106 7 172 7 49 208 39 44 245 23 197 85 15 85 95 161 100 198 219 84 97 108 165 161 248 76 149 93 126 162 58 67 61 192 170 67 21 135 176 80 52 202 254 171 74 22 96 194 176 184 19 81 221 160 50 213 9 38 0 222 238 252 25 110 160 122 27 252 38 67 189 0 0 68 117 249 144 173 190 74 201 219 187 84 97 42 13 197 167 80 213 101 168 28 136 161 50 214 54 84 25 128 48 133 125 132 188 81 165 12 148 224 39 133 181 0 239 80 13 249 190 136 184 68 229 163 91 234 157 78 101 166 136 156 205 206 226 64 58 165 124 151 42 87 147 235 115 124 2 166 113 21 251 93 21 105 188 244 12 149 243 114 81 90 35 112 248 136 99 90 169 130 169 46 185 217 6 228 191 169 72 34 63 58 120 73 148 112 180 30 132 151 159 187 175 178 174 247 85 91 204 10 149 53 211 136 250 106 182 228 76 113 13 170 83 226 73 30 80 105 145 31 103 42 79 179 165 159 253 123 21 85 215 191 87 159 166 152 10 149 127 61 136 156 91 217 12 240 161 246 96 154 3 79 200 55 124 90 217 124 163 57 240 243 251 153 3 163 234 250 28 216 212 37 13 41 58 100 43 39 239 66 108 61 213 69 90 127 110 122 220 241 105 181 243 181 235 213 144 191 108 189 202 186 190 94 45 48 79 43 45 197 92 25 29 238 199 91 188 3 124 227 94 17 242 227 134 79 105 203 183 239 45 217 111 121 111 201 190 184 183 68 252 200 37 93 191 183 100 139 252 120 234 178 103 237 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 46 206 239 253 122 159 5 124 102 61 239 171 228 216 202 62 188 42 223 250 165 56 203 109 113 126 140 177 191 179 95 101 1 50 233 201 155 23 252 219 50 53 202 93 170 177 65 53 58 204 247 226 219 34 128 148 21 139 225 244 152 35 223 1 238 74 121 152 112 62 190 88 15 192 61 164 249 52 223 43 126 226 248 34 197 52 241 149 86 82 136 63 67 149 227 48 60 21 149 143 14 46 222 162 106 141 139 64 116 75 47 217 182 156 163 140 149 132 77 236 27 235 189 53 122 249 172 197 121 136 68 242 249 115 55 121 151 128 167 75 156 89 243 70 175 245 164 107 221 143 142 227 203 195 65 26 170 87 19 37 170 167 35 170 28 135 181 192 243 90 36 130 122 149 106 113 107 111 115 69 68 66 165 58 72 213 234 3 236 111 25 191 214 105 229 141 77 28 199 200 51 138 57 25 95 44 146 0 242 116 244 116 251 8 239 17 35 6 206 142 179 222 178 191 54 98 194 192 61 79 26 170 59 251 115 146 71 57 77 117 124 174 113 88 243 2 79 165 26 239 142 240 209 213 92 20 7 212 141 124 171 218 254 54 24 121 246 205 24 172 68 71 62 144 71 11 176 47 34 80 159 110 63 142 252 204 98 247 158 225 226 242 222 127 22 3 79 254 214 51 118 126 49 71 123 154 153 162 127 85 152 147 84 39 87 227 144 230 40 154 244 124 216 131 156 88 178 171 159 43 61 39 85 109 255 157 42 251 101 185 96 216 7 30 226 161 249 34 216 251 27 78 162 154 43 85 183 243 159 0 140 37 127 133 74 229 113 68 21 185 129 239 28 108 223 140 19 231 147 179 226 251 84 235 8 140 208 24 33 131 62 2 83 121 99 37 186 243 113 244 207 21 139 135 0 163 111 143 192 97 231 47 73 228 66 126 90 160 238 253 120 220 87 163 74 245 228 192 60 82 28 158 229 238 252 27 84 121 4 206 81 62 121 182 100 70 71 229 155 241 183 106 53 102 75 233 202 108 201 122 43 236 3 46 10 249 98 253 235 239 85 111 85 155 205 135 154 9 57 32 207 227 72 113 120 150 203 179 226 207 154 45 125 213 202 6 184 188 178 73 247 87 54 72 228 47 74 175 230 192 233 124 243 206 218 156 8 147 30 7 32 168 250 172 248 254 202 230 255 233 93 136 216 94 175 198 43 205 107 192 129 166 70 28 0 241 228 172 248 254 93 8 61 191 247 235 125 78 230 253 150 241 9 52 29 56 69 53 230 114 50 14 207 114 121 86 172 83 253 174 212 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 101 159 242 93 171 231 3 255 197 31 255 234 111 68 254 246 47 255 245 175 69 211 56 5 16 84 51 201 69 13 176 194 10 161 153 193 201 38 234 171 46 47 103 244 235 175 191 214 183 111 168 8 124 193 62 201 173 188 220 63 255 211 223 253 253 243 31 254 248 143 255 206 17 108 50 0 6 162 58 99 20 69 227 16 194 48 234 254 63 255 139 176 18 240 16 69 5 192 65 206 0 107 183 159 165 171 229 221 239 65 149 210 236 172 163 170 144 127 102 135 162 115 121 185 127 250 183 63 252 25 248 143 63 252 39 117 143 152 1 96 240 68 213 225 33 129 182 200 28 176 104 176 170 63 23 171 157 143 179 162 232 136 42 231 98 198 133 162 81 203 227 44 85 235 109 187 195 120 79 174 175 241 149 171 41 220 122 238 107 123 55 49 202 76 89 217 38 138 250 203 47 203 27 55 58 114 74 116 33 141 128 151 193 240 80 80 7 3 246 31 179 177 212 229 67 192 124 51 57 0 0 92 89 161 194 31 82 101 241 230 203 220 97 182 55 114 55 172 122 254 214 116 255 121 170 106 213 125 125 147 176 246 115 71 121 185 149 42 159 142 123 202 4 4 101 128 156 135 93 173 3 6 100 0 240 8 154 111 231 125 156 8 148 162 102 14 88 0 246 244 8 28 157 25 29 92 20 248 51 173 85 243 168 24 106 123 151 94 15 192 236 186 209 96 149 166 159 241 174 199 41 122 200 47 145 179 231 55 15 94 86 156 176 22 0 242 57 170 14 166 140 153 46 186 199 36 0 133 153 96 44 202 0 160 24 76 236 255 73 196 208 117 48 1 83 101 77 205 123 146 170 148 21 170 120 185 70 245 194 230 203 121 127 100 172 81 1 61 187 175 156 163 154 18 170 156 74 181 189 211 110 6 128 231 147 127 245 151 223 180 239 74 38 6 165 122 198 11 76 222 251 111 116 130 31 241 246 182 163 42 193 255 23 38 89 253 170 132 108 1 155 145 168 239 105 27 37 162 254 211 18 189 198 114 131 42 195 59 198 221 162 26 41 75 248 53 213 44 25 85 211 37 170 148 175 123 76 117 116 201 41 197 5 200 8 15 122 158 124 192 100 3 16 236 180 31 129 253 155 63 138 255 232 91 135 81 134 65 70 56 187 103 52 0 24 118 88 81 165 65 53 46 10 6 123 145 170 62 208 30 143 29 76 149 167 75 195 57 170 105 68 21 202 165 17 152 243 117 143 71 224 128 198 6 251 192 32 84 222 110 3 236 147 103 75 161 24 200 180 243 103 12 34 41 137 12 187 105 158 115 15 1 32 15 231 206 244 213 181 91 111 169 216 230 196 202 38 0 126 140 30 24 90 147 162 83 211 40 224 245 68 213 77 231 168 202 128 42 127 105 182 196 43 27 166 202 148 178 186 229 245 0 96 140 92 5 59 32 207 115 230 149 141 7 240 223 101 23 104 132 43 107 173 139 195 248 33 126 145 8 32 74 25 46 175 108 60 109 199 203 74 216 148 14 22 48 188 228 97 74 190 181 168 140 24 207 81 45 168 194 120 101 101 195 121 185 199 84 141 41 34 49 10 169 100 36 241 20 231 213 93 136 255 193 179 236 124 131 42 26 243 104 93 78 125 85 213 174 5 42 84 117 12 10 114 75 168 88 189 104 152 236 57 170 115 187 29 248 130 57 202 179 61 166 106 95 61 104 14 38 201 121 205 136 116 41 87 113 94 116 142 18 243 245 123 75 158 246 6 86 101 103 7 184 217 202 183 18 214 255 231 168 58 84 165 139 119 12 255 23 182 213 135 236 191 94 152 103 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytestIssue655  | accept |  accept := WAAccept fromString: 'text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2'.  self assert: accept size = 5.  self assert: accept at: 1 main: 'text' sub: 'html' quality: 1.0.  self assert: accept at: 2 main: 'image' sub: 'gif' quality: 1.0.  self assert: accept at: 3 main: 'image' sub: 'jpeg' quality: 1.0.  self assert: accept at: 4 main: '*' sub: '*' quality: 0.2.  self assert: accept at: 5 main: '*' sub: '*' quality: 0.2internalError: anException  self makePlainTextAndPerform: #internalError.  self response     nextPutAll: 'Internal Error: ';     nextPutAll: (anException messageText ifNil: [ String new ])hiddenInput  ^self brush: WAHiddenInputTag newwasSuccessful  ^values notNil and: [ values isCollection and: [ values isString not and: [ values size = 2 and: [ (values includes: self firstParameterValue) and: [ values includes: self secondParameterValue ] ] ] ] ]renderTimeSelectorsOn: html  html heading     level3;     with: 'Times'.  html form     id: #timeForm;     with: [ html table: [ html tableRow                 class: 'from';                 with: [ html                       tableData: 'From';                       tableData: beginTime ].              html tableRow                 class: 'to';                 with: [ html                       tableData: 'To';                       tableData: endTime ] ].        html div: [ html submitButton                 callback: [ self inform: (endTime time subtractTime: beginTime time) asSeconds greaseString , ' second(s)' onAnswer: [  ] ];                 text: 'Compute duration' ] ]renderEditVMParameterAt: anInteger callback: aBlock on: html  html space.  html render: $[.  html anchor     title: 'edit';     callback: aBlock;     with: $e.  html render: $]paddedMinutes  ^(GRMappedPrinter block: [:time |  time minutes ] next: (GRNumberPrinter new           padding: $0;           digits: 2)) , ' min 'visitPainter: aPainter  renderContentOn: html  html heading     level: 1;     with: self trailName.  html anchor     callback: [ self show: (self class new                 count: count + 1;                 yourself) ];     with: 'Call'.  html space.  html anchor     callback: [ self answer ];     with: 'Answer'style  ^'h1 {margin:0;padding:0;font-size:1.5em}	div.bench {padding-left:4px;position:relative;line-height:36px;width:320px;border: 1px solid #ccc;overflow:hidden;float:left;margin-bottom:2px}	div.result {margin:6px;color:#008aff;font-size:200%;font-weight:bold}	span.iteration {margin-left:6px}	div.rect {position:relative;border: 1px solid #ccc;;height:12px}	.spi{float:left;padding-left:4px;padding-top:2px}	'renderHeadingOn: html  html heading     class: 'logo';     with: [ html anchor           url: (WAUrl new                 host: 'www.seaside.st';                 yourself);           with: 'Seaside' ].  html heading     class: 'title';     with: [ html anchor           url: self dispatcher url;           with: self title ]testDefaultCallback  | keyValue keySave keyDefault |  keyValue := registry store: (WAValueCallback on: [:v |  log add: v ]).  keySave := registry store: (WAActionCallback on: [ log add: 'save' ]).  keyDefault := registry store: (WADefaultActionCallback on: [ log add: 'default' ]).  self should: [ self request: (WARequestFields new                 at: keyValue put: 'a';                 at: keySave put: nil;                 at: keyDefault put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #('a' 'save').  self should: [ self request: (WARequestFields new                 at: keyDefault put: nil;                 at: keySave put: nil;                 at: keyValue put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #('b' 'save').  self should: [ self request: (WARequestFields new                 at: keyValue put: 'a';                 at: keyDefault put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #('a' 'default').  self should: [ self request: (WARequestFields new                 at: keyDefault put: nil;                 at: keyValue put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #('b' 'default')updateStates: aSnapshot  self filters do: [:each |  each updateStates: aSnapshot ].  aSnapshot register: filtercancelButton  ^self brush: WACancelButtonTag newdefault: aCollection  super default: (Array withAll: aCollection)preferenceAt: aSymbol ifAbsent: aBlock  ^self configuration at: aSymbol ifAbsent: aBlocktestAsMIMEDocumentStreamColon  | document |  document := 'monkey' readStream seasideMimeDocument.  document mimeType: 'text/html'.  self assert: document contentType = WAMimeType textHtml.  self assert: document content = 'monkey'addToCreationEnd: aCacheListEntry  | currentLast |  currentLast := byCreationEnd.  currentLast isNil ifFalse: [ currentLast next: aCacheListEntry.        aCacheListEntry previous: currentLast ].  byCreationEnd := aCacheListEntry.  byCreationStart isNil ifTrue: [ byCreationStart := aCacheListEntry ]testMatchingHandlerPresent  | response context key |  registry := self createRegistryWithCookiesEnabled.  key := self registerNewHandler.  context := self createRequestContextWithFieldKey: key cookieKey: key.  response := self dispatch: context to: registry.  self assertNoCookies: response.  self assertDispatched: responsecontentsDecodedUsing: aCharSetName  ^(GRCodec forEncoding: aCharSetName) decode: self rawContentstype: aString  self attributeAt: 'type' put: aStringnumberOfSessions  | count |  count := 0.  WASession allSubInstancesDo: [:each |  count := count + 1 ].  ^countsessionId  ^self remoteAddresslocalAttributesDo: aBlock  self subclassResponsibilitycreateCodec  ^GRCodec forEncoding: 'iso-8859-1'nextPage  self isOnLastPage ifFalse: [ currentPage := self validPages after: currentPage ]renderSubItemsOn: html  keyHash  ^keyHashraiseDeprecated  self greaseDeprecatedApi: 'WAExceptionFunctionalTest>>#raiseDeprecated' details: 'Test action phase deprecation.'.  self inform: [:html |  self greaseDeprecatedApi: 'WAExceptionFunctionalTest>>#raiseDeprecated' details: 'Test render phase deprecation.'.        html paragraph: 'To be displayed' ] onAnswer: [  ]renderHeadingSpacerOn: html  html tableData: ''at: aSymbol put: anObject  ^self takeValue: anObject forAttribute: (self attributeAt: aSymbol)serverInstance  ^self serverClass servernextPut: aCharacter  self subclassResponsibilitystore: anObject  ^mutex critical: [ cache store: anObject ]deleted: aBlock  self deleted with: aBlockmessage: aString  message := aStringdocumentOf: aSelector  ^self perform: aSelectorhost  ^hostsetContext: aRenderContext  context := aRenderContextcreateHandlers  ^Array with: self newApplicationmimeType  ^mimeTypedefaultConfiguration  ^super defaultConfiguration     removeParent: WARequestHandlingConfiguration instance;     addParent: WARegistryConfiguration instance;     yourselfisActive  ^self handler notNil and: [ self handler parent notNil ]keyFor: aRequestHandler ifAbsent: absentBlock  ^aRequestHandler keychoose: anAssociation  | newStack |  newStack := WriteStream on: Array new.  stack do: [:ea |  newStack nextPut: ea.        ea == anAssociation ifTrue: [ stack := newStack contents.              ^self ] ]encodePathParametersAt: anIndex on: aDocument  self privatePathParameterMapAt: anIndex ifPresentDo: [:parameters |  parameters keysAndAllValuesDo: [:key :values |  aDocument nextPut: $;.              aDocument urlEncoder nextPutAll: key.              (values size = 1 and: [ values first isNil ]) ifFalse: [ aDocument nextPut: $=.                    values do: [:value |  aDocument urlEncoder nextPutAll: value greaseString ] separatedBy: [ aDocument nextPut: $, ] ] ] ] ifAbsent: [  ]presenter: aPresenter  presenter := aPresenterchooseFrom: aCollection caption: aString  ^self wait: [:cc |  self chooseFrom: aCollection caption: aString onAnswer: cc ]testUpdateRoot  | htmlRoot guide |  htmlRoot := WAHtmlRoot new.  root onUpdateRoot: [:each |  self assert: each = htmlRoot.        self log: 'root' ].  child1 onUpdateRoot: [:each |  self assert: each = htmlRoot.        self log: 'child1' ].  child2 onUpdateRoot: [:each |  self assert: each = htmlRoot.        self log: 'child2' ].  child3 onUpdateRoot: [:each |  self assert: each = htmlRoot.        self log: 'child3' ].  decoration1 onUpdateRoot: [:each |  self assert: each = htmlRoot.        self log: 'decoration1' ].  decoration2 onUpdateRoot: [:each |  self assert: each = htmlRoot.        self log: 'decoration2' ].  guide := WAVisiblePresenterGuide client: (WAUpdateRootVisitor root: htmlRoot).  guide start: root.  self assertLog: #('root').  root onChildren: [ Array with: child1 with: child2 ].  guide start: root.  self assertLog: #('root' 'child1' 'child2').  root     addDecoration: decoration1;     addDecoration: decoration2.  guide start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').  child2 show: child3.  guide start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3')headerAt: aString forResponse: aResponse  ^aResponse headerAt: aStringcallbackValue: anObject  ^self valuesAt: values size + 1 put: anObjectrenderNodeButton: aNode on: html  | isExpanded |  html span     class: 'button';     with: [ (self hasChildren: aNode) ifTrue: [ isExpanded := self isExpanded: aNode.              self renderNodeButtonLink: aNode action: (GRDelayedSend receiver: self selector: (isExpanded ifTrue: [ #collapse: ] ifFalse: [ #expand: ]) argument: aNode) text: (isExpanded ifTrue: [ '-' ] ifFalse: [ '+' ]) on: html ] ]renderValue: anObject on: html  html tableData     align: 'right';     with: anObjectparents  ^Array with: WARequestHandlingConfiguration instancestyle  ^nilnest: aBlock  first := true.  super nest: aBlock.  first := falsevalue: anObject  group isNil ifTrue: [ ^super value: anObject ].  group hasSelection ifTrue: [ self selected: (group isSelected: anObject) ].  group hasCallback ifTrue: [ super value: (group callbackValue: anObject) ]keyField  ^'jsessionid'condition  ^conditionkeyFromContext: aRequestContext  ^self queryFieldKeyFromContext: aRequestContextpushAll: aCollection during: aBlock  ^aCollection isEmpty ifTrue: [ aBlock value ] ifFalse: [ self requestContext push: aCollection first during: [ self pushAll: aCollection allButFirst during: aBlock ] ]childrenDo: aBlock  children isNil ifFalse: [ children do: aBlock ]actionUrlForContinuation: aContinuation  ^self actionUrlForKey: (continuations store: (aContinuation                 setParent: self;                 yourself))renderRenderContentsOnCodeOn: html  html preformatted     class: #codeSample;     with: [ html span           class: #patternKeyword;           with: 'renderContentOn: '.        html span           class: #patternArg;           with: 'html'.        html break.        html span           class: #instanceVar;           with: '    counters'.        html break.        html text: '        do: [ '.        html span           class: #blockArg;           with: ':each'.        html text: ' | '.        html span           class: #receiver;           with: 'html'.        html text: ' render: '.        html span           class: #patternArg;           with: 'each'.        html text: ' ]'.        html break.        html text: '         separatedBy: [ '.        html span           class: #receiver;           with: 'html'.        html text: ' horizontalRule ]' ]username: aString  username := self sanitize: aStringdefer  self attributeAt: 'defer' put: trueonPause: anObject  self document scriptGenerator event: 'pause' do: anObject on: selfnext  ^next contentskeyboard: aBlock  self keyboard with: aBlocktestPort  url     host: 'seaside.st';     port: 8080.  self assert: url port = 8080.  self assert: url greaseString = 'http://seaside.st:8080/'root  ^rootopenTag: aString attributes: anAttributes  self openTag: aString attributes: anAttributes closed: falseaddMedia: aString  self attributes addMedia: aStringtestHasExpressionAt  | root user child |  root := self basicSystemConfiguration.  user := WAUserConfiguration new     addParent: root;     yourself.  self deny: (user hasExpressionAt: #a).  user at: #a put: 2.  self assert: (user hasExpressionAt: #a).  child := WAUserConfiguration new     addParent: user;     yourself.  self deny: (child hasExpressionAt: #a)orderedList: aBlock  self orderedList with: aBlockcountry: aString  country := aStringvisitCollectionAttribute: anAttribute  self visitListAttribute: anAttributetestBodyDecoded  | request headers |  request := WARequest method: 'POST' uri: '/foo?bar=1'.  request setBody: ((GRCodec forEncoding: 'utf-8') encode: 'baz=2&bar=3&foo=é').  self should: [ request bodyDecoded ] raise: WAIllegalStateException.  headers := Dictionary new.  headers at: 'content-type' put: (WAMimeType formUrlencoded           charset: 'utf-8';           yourself) greaseString.  request setHeaders: headers.  self assert: request bodyDecoded equals: 'baz=2&bar=3&foo=é'.  request setBody: nil.  self assert: request bodyDecoded equals: nilrows  ^#()next  ^nexttestExclusion  | value semaphore1 semaphore2 semaphore3 semaphore4 |  value := nil.  semaphore1 := GRPlatform current semaphoreClass new.  semaphore2 := GRPlatform current semaphoreClass new.  semaphore3 := GRPlatform current semaphoreClass new.  semaphore4 := GRPlatform current semaphoreClass new.  process := [ mutex critical: [ semaphore1 signal.        semaphore2 wait.        value := 1 ] ] newProcess.  process2 := [ semaphore3 signal.  mutex critical: [ semaphore3 signal.        semaphore4 wait.        value := 2.        semaphore3 signal ] ] newProcess.  process resume.  semaphore1 wait.  process2 resume.  semaphore3 wait.  self assert: mutex owner == process.  self assert: value isNil.  semaphore2 signal.  semaphore3 wait.  self assert: mutex owner == process2.  self assert: value = 1.  semaphore4 signal.  semaphore3 wait.  self assert: mutex owner isNil.  self assert: value = 2body  ^bodyrenderContentOn: html  html form     id: 'myform';     with: [ html table: [ self renderUsernameOn: html.              self renderPasswordOn: html.              self renderFeedbackOn: html ].        html div: [ self renderButtonOn: html ] ]close: aHtmlRoot on: aDocument  self writeScriptTag: [ aDocument nextPutAll: 'function onLoad(){'.        self writeLoadScriptsOn: aDocument.        aDocument nextPutAll: '};' ] on: aDocumentscope: aString  self attributes at: 'scope' put: aStringattribute: anObject  attribute := anObjecttestConversion  | converted |  url     host: 'example.com';     addToPath: 'foo';     addToPath: 'bar'.  converted := 'http://example.com/foo/bar' seasideUrl.  self assert: (converted isKindOf: WAUrl).  self assert: url = convertedwait: aBlock  ^GRPlatform current seasideSuspendFlowDo: [:cc |  aBlock value: cc ]values: aBlock  valueBlock := aBlockinitializeWithInitialSize: aSizeInteger maximumSize: aMaximumSizeInteger maximumAbsoluteAge: aMaximumAbsoluteAge maximumRelativeAge: aMaximumRelativeAge overflowAction: aOverflowActionSymbol  super initializeWithInitialSize: aSizeInteger maximumSize: aMaximumSizeInteger maximumAbsoluteAge: aMaximumAbsoluteAge maximumRelativeAge: aMaximumRelativeAge overflowAction: aOverflowActionSymbol.  dictionary := GRPlatform current reducedConflictDictionary newtype  ^'tel'block: aBlock  block := aBlocktestMismatchingWithNoHandlers  | response context |  registry := self createRegistryWithCookiesEnabled.  context := self createRequestContextWithFieldKey: '123' cookieKey: '456'.  response := self dispatch: context to: registry.  self assertNoCookies: response.  self assertExpired: responsekeyFromContext: aRequestContext  | key |  key := self pathParameterKeyFromContext: aRequestContext.  ^key isNil ifTrue: [ (self cookieFromContext: aRequestContext ifAbsent: [ ^nil ]) value ] ifFalse: [ key ]refreshAfter: aDuration location: aUrl message: aString  self ifResetPossible: [ | mimeType |        mimeType := WAMimeType textPlain.        mimeType charSet: self request charSet.        self response           contentType: mimeType;           refreshAfter: aDuration location: aUrl message: aString , (String with: Character cr) , 'You are being redirected to ' , aUrl greaseString ]columns  ^#(systemCategory class messageCategory message)label  ^'Image'tableFoot  ^self tag: 'tfoot'cookieKey  ^self fieldNamename  ^self class nametestUrlFor  | context request response documentHandler url |  handler class == WARegistry ifFalse: [ ^self ].  request := self requestWithMethod: 'GET'.  request setCookies: (Array with: (WARequestCookie key: '_s' value: 'sessionid')).  response := WABufferedResponse new.  documentHandler := WADocumentHandler document: 'ESUG 2015'.  context := WARequestContext request: request response: response.  url := WACurrentRequestContext use: context during: [ handler           register: documentHandler;           urlFor: documentHandler ].  self assert: (url queryFields includesKey: '_s').  request url addField: '_s' value: (url queryFields at: '_s').  [ handler handle: context ] on: WAResponseNotification do: [:notification |   ].  self assert: response status = 200.  self assert: response cookies isEmptypriority  ^60handleFiltered: aRequestContext  self isClosed ifFalse: [ super handleFiltered: aRequestContext ] ifTrue: [ aRequestContext responseGenerator           pageExpired;           respond ]renderValidationErrorOn: html  html span     class: 'error';     with: 'invalid date'writeIfNotFirst: aString  first ifFalse: [ self document nextPutAll: aString ]beCanonical  self relationship: 'canonical'startOn: aNumber  self resume.  self serverClass start: aNumberstyle  ^'.chooser {	background-color: #eee;	padding: 5px;}.chooser form,.chooser form div {	display: inline;}.chooser form select {	margin-right: 5px;}.component {	padding: 5px;}.answer {	background-color: #eee;	padding: 5px;}'datalist: aBlock  self datalist with: aBlockrenderRow: anObject named: aString group: aRadioGroup on: html  | radioButton |  html tableRow: [ html tableHeading: [ radioButton := aRadioGroup radioButton                 ensureId;                 value: aString;                 yourself.              html label                 for: radioButton id;                 with: [ (self isPrimitiveType: anObject) ifTrue: [ html text: aString ] ifFalse: [ html anchor                             callback: [ self chooseObject: anObject named: aString ];                             with: aString ] ] ].        html tableData: (anObject printStringLimitedTo: 100) ]