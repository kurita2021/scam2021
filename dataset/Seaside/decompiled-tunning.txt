beSubtitles  self kind: 'subtitles'testParseRelative  self relativeExamples do: [:arg1 |  self assert: (WAUrl absolute: arg1 first relative: arg1 second) greaseString = arg1 last description: arg1 last resumable: true ]initialize  super initialize.  self class: self allClasses firstcanChoose  ^clickBlock notNilrequestContextFor: arg1  ^WARequestContext request: arg1 response: WABufferedResponseto  self subclassResponsibilityaccept: arg1  arg1 visitIntegerAttribute: selfcontentType: arg1  self headerAt: 'Content-Type' put: arg1renderContentOn: arg1  self renderExplanationOn: arg1.  wasExecuted ifTrue: [ self renderExecutedOn: arg1 ] ifFalse: [ self renderNotExecutedOn: arg1 ]label  ^'Space (slow!)'visitPasswordAttribute: arg1  self html passwordInput callback: [:arg2 |  self configuration takeValueFromString: arg2 forAttribute: arg1 ]document: arg1  self document: arg1 mimeType: nilisClosed  ^falseeditor: arg1  editor := arg1expiryString  ^GRPrinter cookieTimestamp print: expirydefinitionData: arg1  self definitionData with: arg1openingConditionClass  ^WAOpeningRevealedConditionalCommentrenderFormOn: arg1  self renderInline: [:arg2 |  arg2 form: [ arg2 button value: 'OK'.              arg2 fileUpload.              arg2 select                 list: #('a' 'b');                 labels: [:arg3 |  arg3 greaseString ].              arg2 radioButton.              arg2 textInput                 size: 20;                 value: ''.              arg2 textArea                 rows: 3;                 columns: 17;                 value: ''.              arg2 checkbox value: true.              arg2 passwordInput value: 'pw' ] ] key: #form on: arg1prepareRoot: arg1  (WAAllPresenterGuide client: (WAInitialRequestVisitor request: self requestContext request)) start: arg1.  (WAVisiblePresenterGuide client: WATaskVisitor new) start: arg1indicateInstanceMessages  showInstance := true.  showComment := false.  self clearMessageAndProtoclSelection.  self changed: #showonEnded: arg1  self document scriptGenerator event: 'ended' do: arg1 on: selfopenHandler: arg1  super openHandler: arg1.  arg1 isNil ifFalse: [ self configure: arg1 ]initialize  super initialize.  number := 1.  letter := $Alabel  ^'Set Default'taskClasses  ^WATask allSubclasses select: [:arg1 |  arg1 subclasses isEmpty ]withoutQuery  ^self copy     queryFields: nil;     yourselfjavascriptOn: arg1  arg1 nextPutAll: valuetestDefaultAction  self userAgent: 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3'.  self assert: [:arg1 |  arg1 form defaultAction: [  ] ] gives: '<form accept-charset="utf-8" method="post" action="/"><div><input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/></div></form>'.  self userAgent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)'.  self assert: [:arg1 |  arg1 form defaultAction: [  ] ] gives: '<form accept-charset="utf-8" method="post" action="/"><div><input tabindex="-1" value="Default" name="1" style="position: absolute; top: -100em" type="submit"/><input tabindex="-1" name="2" style="position: absolute; top: -100em" type="text"/></div></form>'filter  ^filter ifNil: [ filter := WAProfilerFilter new ]height: arg1  self attributeAt: 'height' put: arg1stringForValue: arg1  ^arg1 isNil ifFalse: [ arg1 value name greaseString ]testIncludesKey  one at: 'foo' put: 1.  two at: 'baz' put: 3.  two at: 'bar' put: 2.  two at: 'baz' put: 3.  self assert: (merged includesKey: 'foo').  self assert: (merged includesKey: 'bar').  self assert: (merged includesKey: 'baz').  self deny: (merged includesKey: 'zork')group  ^group ifNil: [ #general ]testName  | tmp1 |  tmp1 := WATestingMetadataFileLibrary default.  self assert: tmp1 name = 'WATestingMetadataFileLibrary'.  self assert: tmp1 name isString.  self deny: tmp1 name isSymbolprivateAt: arg1 put: arg2  self checkValue: arg2.  ^super privateAt: arg1 put: arg2batchSize  ^batcher batchSizeoutput: arg1  ^self output with: arg1divClass  ^self class namechildren  ^Array with: treepriority  ^800attribute: arg1 with: arg2  arg2 == false ifTrue: [ ^self ].  html space.  html span     class: 'wa-attribute-key';     with: arg1.  arg2 == true ifTrue: [ ^self ].  self nextPut: $=.  html span     class: 'wa-attribute-value';     with: [ self nextPut: $".        (self knownRefs includes: arg1) ifTrue: [ html anchor                 url: arg2 greaseString;                 with: [ self print: arg2 ] ] ifFalse: [ (self knownEvents includes: arg1) ifTrue: [ html anchor                       onClick: arg2;                       with: [ self print: arg2 ] ] ifFalse: [ arg2 == true ifTrue: [ self nextPutAll: arg1 ] ifFalse: [ self print: arg2 ] ] ].        self nextPut: $" ]initialize  super initialize.  self level1jumpToAnchor: arg1  jumpTo := arg1tree  ^String streamContents: [:arg1 |  self tally           maxTabs: SmallInteger maxVal;           maxClassNameSize: SmallInteger maxVal;           maxClassPlusSelectorSize: SmallInteger maxVal;           treePrintOn: arg1 tabs: OrderedCollection new thisTab: String new total: tally tally totalTime: tally time tallyExact: false orThreshold: 2 ]parseCharacterHex  | tmp1 |  tmp1 := self parseCharacterHexDigit.  3 timesRepeat: [ tmp1 := (tmp1 << 4) + self parseCharacterHexDigit ].  ^Character codePoint: tmp1sampleJs  ^'	function foo (a, b) {}'testMessage  self assert: self response message = 'OK'.  self response status: 404.  self assert: self response message = 'Not Found'.  self response status: 290.  self assert: self response message isNil.  self response status: 290 message: 'Seaside Rocks'.  self assert: self response message = 'Seaside Rocks'render: arg1  ^WARenderer builder     documentClass: WAHtmlDocument;     render: arg1email: arg1  email := arg1messageCategoryListIndex  ^self messageCategoryList indexOf: selectedMessageCategorystates  ^Array with: selfcanClear  ^group ~~ #authenticationresponseGenerators  ^WAResponseGenerator withAllSubclasses asSortedCollection: [:arg1 :arg2 |  arg1 name <= arg2 name ]testTargetBlank  self assert: [:arg1 |  arg1 anchor           callback: [  ];           targetBlank;           with: 'foo' ] gives: '<a target="_blank" href="/?1">foo</a>'labelForMonth: arg1  ^Date nameOfMonth: arg1callback: arg1  self name: (self storeCallback: (WAValueCallback on: arg1))at: arg1 ifPresent: arg2  ^self fields at: arg1 ifPresent: arg2attributeAt: arg1 ifAbsent: arg2  ^self attributes at: arg1 ifAbsent: arg2time: arg1  time := arg1password  | tmp1 |  ^(tmp1 := self authorization) isNil ifFalse: [ tmp1 copyAfter: $: ]buttonCode  ^button = #red ifTrue: [ 4 ] ifFalse: [ button = #blue ifTrue: [ 2 ] ifFalse: [ 1 ] ]initialize  super initialize.  inputElements := WAInputElementContainer new.  ran := falsetestReadOnly  self should: [ merged at: 'foo' put: 1 ] raise: Error.  self should: [ merged at: 'foo' ifAbsentPut: [ 1 ] ] raise: Error.  self should: [ merged removeKey: 'foo' ] raise: ErrorresourceUrl  ^resourceUrllabel  ^'Html 5 Content Model'visitor  ^visitortitle  self subclassResponsibilityaddAllTo: arg1  arg1 do: [:arg2 |  self addTo: arg2 ]priority  ^200withoutSeconds  withSeconds := falserenderContentOn: arg1  counters do: [:arg2 |  arg1 render: arg2 ] separatedBy: [ arg1 horizontalRule ]hasReceivedUnregistered  ^hasReceivedUnregisteredtestUrlGreaseNextPutAllStartingAt  self assert: 'ab' next: 1 startingAt: 1 encoder: self urlEncoderClass gives: 'a'.  self assert: 'a b' next: 1 startingAt: 1 encoder: self urlEncoderClass gives: 'a'.  self assert: 'a b' next: 2 startingAt: 1 encoder: self urlEncoderClass gives: 'a%20'.  self assert: 'a b' next: 1 startingAt: 2 encoder: self urlEncoderClass gives: '%20'.  self assert: 'a b' next: 2 startingAt: 2 encoder: self urlEncoderClass gives: '%20b'.  self assert: 'a  ' next: 2 startingAt: 2 encoder: self urlEncoderClass gives: '%20%20'.  self assert: 'ab b ' next: 3 startingAt: 2 encoder: self urlEncoderClass gives: 'b%20b'default: arg1  self attributeAt: 'default' put: arg1onMouseEnter: arg1  self document scriptGenerator event: 'mouseenter' do: arg1 on: selftestCopy  | tmp1 tmp2 tmp3 |  tmp1 := GRPlatform current semaphoreClass new.  tmp2 := GRPlatform current semaphoreClass new.  process := [ mutex critical: [ tmp1 signal.        tmp2 wait ] ] newProcess.  process resume.  tmp1 wait.  tmp3 := mutex copy.  self deny: tmp3 == mutex.  self assert: tmp3 species = mutex species.  self assert: tmp3 owner isNil.  self assert: (tmp3 critical: [ 1 ]) = 1level5  level := 5component: arg1  component := arg1subscript: arg1  self subscript with: arg1event: arg1 do: arg2 on: arg3  arg3 attributes at: 'on' , arg1 append: arg2 separator: ';'execute  self answer: self gochooseRow: arg1  ^clickBlock value: arg1monthsAndLengthsDo: arg1  | tmp1 tmp2 |  tmp1 := 0.  tmp2 := nil.  self datesDo: [:arg2 |  tmp1 := tmp1 + 1.        tmp2 := arg2 ] separatedBy: [ arg1 value: tmp2 month value: tmp1.        tmp1 := 0 ]label  ^'Html 5 Input'postCopy  super postCopy.  filter := filter copy.  self setFilter: (self filter copyTo: self).  configuration := configuration copy.  parent := nilvalue: arg1  ^(self brush: WAJsonValueBrush new) with: arg1postCopyForRenderContext: arg1  super postCopyForRenderContext: arg1.  renderContext := arg1.  visitor := visitor copyForRenderContext: arg1> arg1  ^major > arg1 major or: [ major = arg1 major and: [ minor > arg1 minor ] ]metaClassIndicated  ^showInstanceupToEnd  | tmp1 |  tmp1 := path.  path := #().  ^tmp1value: arg1  self terminate: thisContext.  self restoreValues.  thisContext swapSender: values first.  ^arg1renderContentOn: arg1  arg1 span: dateSelector.  arg1 span: [ arg1 strong: ' : ' ].  arg1 span: timeSelectorinitializeFromContext: arg1  | tmp1 tmp2 |  self initialize.  tmp1 := arg1.  tmp2 := WriteStream on: (Array new: 200).  [ tmp1 notNil ] whileTrue: [ tmp2 nextPut: tmp1.        1 to: tmp1 class instSize do: [:arg2 |  tmp2 nextPut: (tmp1 instVarAt: arg2) ].        1 to: tmp1 size do: [:arg2 |  tmp2 nextPut: (tmp1 at: arg2) ].        tmp1 := tmp1 sender ].  values := tmp2 contentsheaders  ^headersrenderCheckboxOn: arg1  self renderLabel: 'Checkbox' input: [ arg1 label: [ arg1 checkbox                 value: checkbox;                 callback: [:arg2 |  checkbox := arg2 ].              arg1 text: 'Checked' ] ] output: checkbox printString on: arg1addPathParameterAt: arg1 key: arg2 value: arg3  (self privatePathParameterMapAt: arg1) at: arg2 add: arg3renderDefaultFieldForSelector: arg1 on: arg2  arg2 textInput on: arg1 of: self modelvalue  ^valuerenderContentOn: arg1  arg1 paragraph: 'Depending on the way the form is submitted the following actions should be triggered and logged:'.  arg1 orderedList list: #('Default: Text, Default' 'Before: Text' 'Before Submit: Text, Before Submit' 'Before Cancel: Before Cancel' 'After: Text' 'After Submit: Text, After Submit' 'After Cancel: After Cancel').  arg1 form     defaultAction: [ self append: 'Default' ];     with: [ arg1 div: [ arg1 submitButton text: 'Before'.              arg1 submitButton                 callback: [ self append: 'Before Submit' ];                 text: 'Before Submit'.              arg1 cancelButton                 callback: [ self append: 'Before Cancel' ];                 text: 'Before Cancel'.              arg1 break.              arg1 textInput                 value: 'Some Text';                 callback: [:arg2 |  self append: 'Text: ' , arg2 ].              arg1 break.              arg1 submitButton text: 'After'.              arg1 submitButton                 callback: [ self append: 'After Submit' ];                 text: 'After Submit'.              arg1 cancelButton                 callback: [ self append: 'After Cancel' ];                 text: 'After Cancel' ] ].  arg1 preformatted: transcript contents.  transcript resettestNotFound  | tmp1 |  tmp1 := WAResponseGenerator on: self requestContext.  self requestContext response nextPutAll: 'oops'.  tmp1 notFound.  self assertContents: '/ not found'items: arg1  items := arg1toggleZoom  zoom := zoom notnewCookie  | tmp1 tmp2 |  tmp2 := self handler url.  tmp1 := WACookie new     pathUnencoded: tmp2 pathStringUnencoded encoded: (tmp2 pathStringEncodedWith: self codec);     httpOnly: true;     yourself.  tmp2 host isNil ifFalse: [ tmp1 domain: tmp2 host ].  tmp2 scheme = 'https' ifTrue: [ tmp1 secure: true ].  (tmp2 port notNil and: [ tmp2 host notNil ]) ifTrue: [ tmp1 port: tmp2 port ].  ^tmp1beMultiple  self attributeAt: 'multiple' put: truepriority  ^700testNoKey  | tmp1 tmp2 |  registry := self createRegistryWithCookiesEnabled.  tmp2 := self createRequestContextWithFieldKey: nil cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertCookieAddition: tmp1.  self assert: ((registry cache at: tmp1 cookies first value ifAbsent: [ nil ]) isKindOf: WASession).  self assertDefault: tmp1dateTimeInput  ^self brush: WADateTimeInputTag newasFilename: arg1  | tmp1 tmp2 |  tmp1 := self lastUpperCaseIndexIn: arg1.  tmp1 = 0 ifTrue: [ ^arg1 greaseString ].  tmp2 := (arg1 last: arg1 size - tmp1 + 1) asLowercase.  ^(arg1 first: tmp1 - 1) , '.' , tmp2encodeOn: arg1  arg1     nextPutAll: '<!--[';     nextPutAll: self condition;     nextPutAll: ']>'onSearch: arg1  self attributes at: 'onsearch' append: arg1 separator: ';'altText: arg1  self attributes at: 'alt' put: arg1newStrategy  self subclassResponsibilityerrorKeyNotFound  ^niltestAnchor  self assert: [:arg1 |  arg1 anchor ] gives: '<a></a>'.  self assert: [:arg1 |  arg1 anchor           callback: [  ];           with: 'foo' ] gives: '<a href="/?1">foo</a>'.  self assert: [:arg1 |  arg1 anchor           callback: [  ];           with: 'foo'.        arg1 anchor           callback: [  ];           with: 'bar' ] gives: '<a href="/?1">foo</a><a href="/?2">bar</a>'.  self assert: [:arg1 |  arg1 anchor           extraPath: 'zork';           callback: [  ];           with: 'foo' ] gives: '<a href="/zork?1">foo</a>'.  self assert: [:arg1 |  arg1 anchor           extraParameters: 'zork';           callback: [  ];           with: 'foo' ] gives: '<a href="/?zork&amp;1">foo</a>'renderMainContentOn: arg1  self renderHeadingOn: arg1.  arg1 div     class: 'getting-started';     with: self componentonDragExit: arg1  self document scriptGenerator event: 'dragexit' do: arg1 on: selfrenderValuesOn: arg1  | tmp1 tmp2 tmp3 tmp4 |  tmp4 := SmalltalkImage current vm getParameters.  tmp1 := tmp4 first.  tmp2 := tmp4 second.  tmp3 := tmp4 third.  self renderLabel: 'Old Space' value: (self printMemory: tmp1) value: (self percent: tmp1 / tmp3) on: arg1.  self renderLabel: 'Young Space' value: (self printMemory: tmp2 - tmp1) value: (self percent: (tmp2 - tmp1) / tmp3) on: arg1.  self renderLabel: 'Used' value: (self printMemory: tmp2) value: (self percent: tmp2 / tmp3) on: arg1.  self renderLabel: 'Free' value: (self printMemory: tmp3 - tmp2) value: (self percent: (tmp3 - tmp2) / tmp3) on: arg1fullPathForFileName: arg1 using: arg2  ^String streamContents: [:arg3 |  | tmp1 tmp2 |        tmp1 := GRPlatform current pathSeparator.        tmp2 := arg2 xSendfileBaseDirectory.        arg3 nextPutAll: tmp2.        (tmp2 endsWithSubCollection: tmp1) ifFalse: [ arg3 nextPutAll: tmp1 ].        arg3           nextPutAll: self name;           nextPutAll: tmp1;           nextPutAll: arg1 ]encodeChildrenOn: arg1  children isEmptyOrNil ifTrue: [ ^self ].  children do: [:arg2 |  arg1 nextPutAll: arg2 greaseString ]storeConfigurationValues  handler configuration at: #maximumSize put: maximumSize.  handler configuration at: #maximumRelativeAge put: maximumRelativeAge.  handler configuration at: #maximumAbsoluteAge put: maximumAbsoluteAge.  handler configuration at: #overflowAction put: overflowActionlabelForYear: arg1  ^arg1addMessage: arg1  ^self addDecoration: (WAMessageDecoration new           message: arg1;           yourself)list: arg1  arg1 isNil ifFalse: [ self addAll: arg1 ]isCommitted  ^committeddefer  self attributes at: 'defer' put: truehour  ^hoursetPorts: arg1  ports := OrderedCollection new: 1.  GRPlatform subStringsIn: arg1 splitBy: $, do: [:arg2 |  ports add: arg2 greaseInteger ]expiry  ^expiryoptions: arg1  optionsBlock := arg1testChildComponentShouldNotBeSelfError  child1 onRender: [:arg1 |  arg1 text: '1' ].  child2 onRender: [:arg1 |  arg1 text: '2' ].  root onChildren: [ Array with: child1 with: child2 ].  self assertRenders: '12'.  root onChildren: [ Array with: child1 with: root ].  self should: [ self assertRenders: 'dont care only interested in the raised exception' ] raise: WAChildComponentShouldNotBeSelfError description: 'Testing WAPresenter  >> #childrenDo: with #children returning an array including self'call: arg1 onAnswer: arg2  self == arg1 ifTrue: [ WAError signal: 'You can not call self. You''re probably missing a return somewhere' ].  self show: arg1 onAnswer: arg2.  WARenderNotification signaltestDispatchCallback  | tmp1 tmp2 tmp3 |  tmp1 := registry store: WADispatchCallback new.  tmp2 := registry store: (WAValueCallback on: [:arg1 |  log                 add: 1;                 add: arg1 ]).  tmp3 := registry store: (WAValueCallback on: [:arg1 |  log                 add: 2;                 add: arg1 ]).  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: '';                 yourself) ] raise: WARenderNotification.  self assertLog: #().  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: tmp2;                 yourself) ] raise: WARenderNotification.  self assertLog: #(1 '').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: tmp3;                 yourself) ] raise: WARenderNotification.  self assertLog: #(2 '').  self shouldnt: [ self request: (WARequestFields new                 at: tmp1 put: tmp3;                 at: tmp1 put: tmp3;                 yourself) ] raise: WARenderNotification.  self assertLog: #(2 '')location: arg1  self headerAt: 'Location' put: arg1cdata: arg1  self flush.  self document nextPutAll: '<![CDATA['.  self document nextPutAll: arg1.  self document nextPutAll: ']]>'bodyFor: arg1  ^WAStringEmailBody string: (String streamContents: [:arg2 |  arg1 signalerContext errorReportOn: arg2 ]) lineLength: 72parameter  | tmp1 tmp2 tmp3 |  tmp2 := self requestContext request.  tmp1 := tmp2 at: 'input' ifAbsent: [ nil ].  tmp3 := tmp2 url queryFields at: 'input' ifAbsent: [ nil ].  ^(tmp3 = input and: [ tmp1 = input ]) ifTrue: [ tmp1 ] ifFalse: [ 'fail!' ]renderMessageOn: arg1  message isNil ifFalse: [ arg1 strong: message ]label  ^label ifNil: [ label := 'OK' ]callback: arg1  self name: (self storeCallback: (WAUploadCallback on: arg1))accept: arg1  arg1 visitClassBindingAttribute: selftypes  ^'1aAiI'valueFromString: arg1  ^arg1 = 'true' ifTrue: [ true ] ifFalse: [ arg1 = 'false' ifTrue: [ false ] ifFalse: [ WAConfigurationError signal: 'Invalid value for boolean attribute' ] ]initializeWithRoot: arg1  self initialize.  root := arg1with: arg1  super with: arg1.  value isNil ifTrue: [ value := Time now ].  hours := value hour.  minutes := value minute.  seconds := value second.  self renderHours.  canvas     space;     text: ':';     space.  self renderMinutes.  withSeconds ifTrue: [ canvas           space;           text: ':';           space.        self renderSeconds ] ifFalse: [ seconds := 0 ].  self addCallbackrenderContentOn: arg1  arg1 select     list: self months;     on: #month of: self;     labels: [:arg2 |  self labelForMonth: arg2 ].  arg1 select     list: self days;     on: #day of: self;     labels: [:arg2 |  self labelForDay: arg2 ].  arg1 select     list: self yearRange;     on: #year of: self;     labels: [:arg2 |  self labelForYear: arg2 ].  self dateIsValid ifFalse: [ self renderValidationErrorOn: arg1 ]url: arg1  url := arg1seasidePossibleCauses  ^#('A Component attempted to use #call: or a similar method while rendering. Calling and answering can only be done in a callback.')encodeFragmentOn: arg1  arg1 urlEncoder nextPutAll: fragmentchildren  ^countersstring: arg1  stream nextPut: $".  jsonEncoder nextPutAll: arg1.  stream nextPut: $"renderDeprecatedOn: arg1  arg1 heading: 'Deprecated'.  arg1 paragraph: 'The link should cause a deprecated warning to appear in the toolbar. Clicking on the link should display a single action and a single render deprecation.'.  arg1 anchor     callback: [ self raiseDeprecated ];     with: 'Raise deprecated'determineValueWithContext: arg1 configuration: arg2  self subclassResponsibilityinitializeOn: arg1  self initialize.  document := arg1isEnabled: arg1  ^enabledBlock isNil or: [ enabledBlock value: arg1 ]nextPutAll: arg1  arg1 isByteString ifTrue: [ self nextPutAllFast: arg1 ] ifFalse: [ delegate nextPutAll: arg1 ]testCommaReturnsExceptionSet  | tmp1 |  tmp1 := self handlerClass , WATestError.  self assert: (tmp1 isKindOf: ExceptionSet).  self assert: (tmp1 handles: WATestError new).  tmp1 := self createHandler , WATestError.  self assert: (tmp1 isKindOf: ExceptionSet).  self assert: (tmp1 handles: WATestError new)library  ^librarykeysAndValuesDo: arg1  delegates do: [:arg2 |  arg2 keysAndValuesDo: arg1 ]break  ^String with: Character cr with: Character lfconfiguration: arg1  configuration := arg1scaledDecimal: arg1  | tmp1 |  tmp1 := GRSignPrinter new , (GRNumberPrinter new precision: arg1 scale).  tmp1 print: arg1 on: self document streamrenderTextAreaOn: arg1  self renderLabel: 'Text Area' input: [ arg1 textArea           rows: 3;           columns: 17;           value: textArea;           callback: [:arg2 |  textArea := arg2 ] ] output: textArea printString on: arg1rows  ^#(css)secondValue  ^secondValuetoolbar: arg1  features at: #toolbar put: arg1callback: arg1  callbackBlock := arg1validateWith: arg1  ^self addDecoration: (WAValidationDecoration new validateWith: arg1)testEncodedUnicodeUrl  | tmp1 tmp2 tmp3 tmp4 |  tmp4 := String with: (Character codePoint: 233) with: (Character codePoint: 228).  self assert: tmp4 urlEncodedGives: '%C3%A9%C3%A4'.  tmp1 := (Character codePoint: 12354) greaseString.  tmp2 := (Character codePoint: 12362) greaseString.  tmp3 := tmp1 , tmp2.  self assert: tmp1 urlEncodedGives: '%E3%81%82'.  self assert: tmp2 urlEncodedGives: '%E3%81%8A'.  self assert: tmp3 urlEncodedGives: '%E3%81%82' , '%E3%81%8A'parseHostPort: arg1 from: arg2 to: arg3  | tmp1 |  tmp1 := arg1 indexOf: $: startingAt: arg2.  (tmp1 > 0 and: [ tmp1 < arg3 ]) ifTrue: [ arg2 < tmp1 ifTrue: [ self host: (self class decodePercent: arg1 from: arg2 to: tmp1) ].        self port: (self parsePort: arg1 from: tmp1 + 1 to: arg3) ] ifFalse: [ arg2 < arg3 ifTrue: [ self host: (self class decodePercent: arg1 from: arg2 to: arg3) ] ]testUrlFor  | tmp1 tmp2 tmp3 tmp4 tmp5 |  handler class == WARegistry ifFalse: [ ^self ].  tmp2 := self requestWithMethod: 'GET'.  tmp2 setCookies: (Array with: (WARequestCookie key: '_s' value: 'sessionid')).  tmp3 := WABufferedResponse new.  tmp4 := WASession new.  tmp1 := WARequestContext request: tmp2 response: tmp3.  tmp5 := WACurrentRequestContext use: tmp1 during: [ handler register: tmp4.        tmp4 url ].  self assert: (tmp5 queryFields includesKey: '_s').  tmp2 url addField: '_s' value: (tmp5 queryFields at: '_s').  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp3 status = 200.  self assert: tmp3 cookies isEmptyrenderModificationOn: arg1  arg1 heading     level2;     with: '<ins>, <del>'.  arg1 paragraph: [ arg1 text: 'A Sheriff can employ '.        arg1 deleted           title: 'Changed as a result of the SECURE bill.';           cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';           datetime: '1994-11-05T08:15:30-05:00';           with: 3.        arg1 inserted           title: 'Changed as a result of the SECURE bill.';           cite: 'http://www.w3.org/TR/html401/struct/text.html#edef-del';           datetime: '1994-11-05T08:15:30-05:00';           with: 5.        arg1 text: ' deputies.' ]width: arg1  self attributeAt: 'width' put: arg1charSet  | tmp1 tmp2 |  tmp1 := self codec name.  tmp1 = GRNullCodec codecName ifFalse: [ ^tmp1 ].  tmp2 := self handler.  self handler isNil ifFalse: [ ^tmp2 charSet ].  ^nilmaxAge  ^maxAgewriteCookiesOn: arg1  cookies do: [:arg2 |  arg1 nextPutAll: 'Set-Cookie: '.        arg2 writeOn: arg1.        arg1 crlf ]initialize  super initialize.  self     name: 'Add adaptor';     description: 'Allows one to create a new adaptor.'renderContentOn: arg1  self renderFigureOn: arg1.  self renderMarkedOn: arg1.  self renderMeterOn: arg1.  self renderProgressOn: arg1.  self renderTimeOn: arg1.  self renderDetailsOn: arg1.  self renderMenuOn: arg1.  self renderHeadingGroupOn: arg1.  self renderBidirectionalOn: arg1.  self renderBidirectionalOverrideOn: arg1.  self renderOutputOn: arg1.  self renderTrackOn: arg1handler  ^self handlers isEmpty ifFalse: [ self handlers first ]at: arg1 ifAbsent: arg2  delegates do: [:arg3 |  arg3 at: arg1 ifPresent: [:arg4 |  ^arg4 ] ].  ^arg2 valueperformAction  [ super performAction ] ensure: [ self request isXmlHttpRequest ifTrue: [ self captureState ] ]numArgs  ^1title: arg1  title := arg1isEnabledFor: arg1  ^arg1 request isXmlHttpRequest notonFocus: arg1  self document scriptGenerator event: 'focus' do: arg1 on: selfheaderAt: arg1 putDate: arg2  ^self headerAt: arg1 put: (GRPrinter httpDate print: arg2)open: arg1 on: arg2  arg1 bodyAttributes at: 'onload' put: 'onLoad()'tag  ^'ul'formClass  ^Smalltalk classNamed: #FormkeyType: arg1  self attributeAt: 'keytype' put: arg1renderCogValuesOn: arg1  self renderLabel: 'Cog VM - Interpreter' value: (self vm getSystemAttribute: 1007) on: arg1.  self renderLabel: 'Cog VM - JIT' value: (self vm getSystemAttribute: 1008) on: arg1.  self renderLabel: 'Cog VM - Stack pages' value: (self vm parameterAt: 42) on: arg1.  self renderLabel: 'Cog VM - Desired stack pages' value: (self vm parameterAt: 43) on: arg1.  self renderLabel: 'Cog VM - ForceInterruptChecks since startup' value: (self vm parameterAt: 58) on: arg1.  self renderLabel: 'Cog VM - Stack page overflows since startup' value: (self vm parameterAt: 60) on: arg1.  self renderLabel: 'Cog VM - Stack page divorces since startup' value: (self vm parameterAt: 61) on: arg1fileHandlerListingClass  ^self preferenceAt: #fileHandlerListingClasswriteScriptTag: arg1 on: arg2  | tmp1 |  tmp1 := WAHtmlAttributes new.  tmp1 at: 'type' put: 'text/javascript'.  arg2 openTag: 'script' attributes: tmp1.  arg1 value.  arg2 closeTag: 'script'tableBodyCssClass  ^'left'modify  self configuration at: attribute key addAll: #() removeAll: #()valueFromString: arg1  self subclassResponsibilityparentOfClass: arg1  | tmp1 tmp2 |  tmp1 := arg1 package.  tmp2 := tmp1 classTagForClass: arg1.  ^((tmp2 name = tmp1 name and: [ tmp1 classTags size <= 1 ]) or: [ tmp2 isNil ]) ifTrue: [ tmp1 ] ifFalse: [ tmp2 ]after  super after.  self isGet ifTrue: [ canvas div: [ canvas actionUrl queryFields keysAndValuesDo: [:arg1 :arg2 |  canvas hiddenInput                       name: arg1;                       value: arg2 ] ] ]beChecked  self checked: truecharSet  ^self parameters at: 'charset' ifAbsent: [ nil ]beAdvanced  advanced := truehandleFiltered: arg1  arg1 respond: [:arg2 |  arg2           cacheForever;           document: self document ]renderValuesOn: arg1  self renderLabel: 'Operating System' value: (self image vm getSystemAttribute: 1001) on: arg1.  self renderLabel: 'Version' value: (self image vm getSystemAttribute: 1002) on: arg1.  self renderLabel: 'Processor Type' value: (self image vm getSystemAttribute: 1003) on: arg1postFields  ^postFieldswith: arg1  arg1 isNil ifFalse: [ self value: arg1 greaseString ].  super with: nilhandlerJs  ^'function submitForm(element) {	var hidden = document.createElement("input");	hidden.name = /[?&](\d+)/.exec(element.href)[1];	hidden.type = "hidden"; hidden.value = "";	while (element && element.tagName != "FORM")		element = element.parentNode;	element.appendChild(hidden);	element.submit();	return false;}'createRequestContext  ^WARequestContext request: self createRequest response: self createResponse codec: self createCodecresponseForLibraries  | tmp1 tmp2 |  tmp1 := 'Index of ' , handler url pathStringUnencoded.  tmp2 := WAHtmlCanvas builder     fullDocument: true;     rootBlock: [:arg1 |  arg1 title: tmp1 ];     render: [:arg1 |  arg1 heading: tmp1.        arg1 unorderedList: [ handler libraries do: [:arg2 |  arg1 listItem: [ arg1 anchor                             url: (arg2 urlOf: '');                             with: arg2 name ] ] ] ].  context respond: [:arg3 |  arg3           contentType: WAMimeType textHtml;           nextPutAll: tmp2 ]writeHeadersOn: arg1  self headerAt: 'Content-Length' put: contentsStream position.  super writeHeadersOn: arg1addKey: arg1 toUrl: arg2  self subclassResponsibilityrenderExampleOn: arg1  self subclassResponsibilityassert: arg1 at: arg2 charset: arg3 quality: arg4  | tmp1 |  tmp1 := arg1 at: arg2.  self assert: (tmp1 isKindOf: WAQualifiedValue).  self assert: tmp1 quality = arg4.  self assert: tmp1 value = arg3type  ^'submit'with: arg1  arg1 isNil ifFalse: [ value := arg1 ].  closed := trueaddField: arg1  self addField: arg1 value: nilrenderContentOn: arg1  arg1 heading: self class description.  arg1 form: [ arg1 paragraph: [ arg1 anchor                 callback: [ self previous ];                 with: [ arg1 html: '&larr;' ].              arg1 select                 list: classes;                 onChange: 'submit()';                 selected: self selected;                 labels: [:arg2 |  arg2 name ];                 callback: [:arg2 |  self selected: arg2 ].              arg1 anchor                 callback: [ self next ];                 with: [ arg1 html: '&rarr;' ].              arg1                 text: ' ';                 submitButton: 'Restart' ] ].  arg1 horizontalRule.  arg1 render: current contentsunregisterAt: arg1  ^self cache removeKey: arg1inserted  ^self brush: (WAEditTag tag: 'ins')audio: arg1  self audio with: arg1renderSslSessionIdFor: arg1 on: arg2  arg1 isSsl ifTrue: [ arg2 definitionTerm: 'SSL Session Id:'.        arg2 definitionData: arg1 sslSessionId ]allValuesCallbackClass  ^WAAllValuesCallbacksub  ^subvisitNumberAttribute: arg1  self html textInput     size: 5;     callback: [:arg2 |  self configuration takeValueFromString: arg2 forAttribute: arg1 ];     value: (arg1 stringForValue: (self configuration at: arg1 key))testJavascript  self assertRoot: [:arg1 |  arg1 javascript add: 'true & false' ] gives: '<title></title><script type="text/javascript">true & false</script>'sortColumn  ^sortColumn contentsincrease  count := count + 1browserUserAgents  ^#('Mozilla/5.0 (X11; U; Linux i586; de; rv:5.0) Gecko/20100101 Firefox/5.0' 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; da-dk) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1' 'Opera/9.80 (X11; Linux x86_64; U; fr) Presto/2.9.168 Version/11.50' 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.1 (KHTML, like Gecko) Ubuntu/11.04 Chromium/14.0.825.0 Chrome/14.0.825.0 Safari/535.1' 'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)' 'Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; Media Center PC 4.0; SLCC1; .NET CLR 3.0.04320)' 'Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)' 'Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)')charset: arg1  self parameters at: 'charset' put: arg1fileSelectorsTo: arg1  | tmp1 tmp2 |  tmp1 := Set new.  tmp2 := self class.  [ arg1 name = tmp2 name ] whileFalse: [ tmp2 selectors do: [:arg2 |  (self isFileSelector: arg2) ifTrue: [ tmp1 add: arg2 ] ].        tmp2 := tmp2 superclass ].  ^tmp1componentCreator  ^componentCreator ifNil: [ componentCreator := WAWelcomeComponentCreator new ]renderMarkedOn: arg1  arg1 heading     level2;     with: '<mark> (kitten)'.  arg1 paragraph: [ arg1 text: 'I also have some '.        arg1 marked: 'kitten'.        arg1 text: 's who are visiting me these days. They''re really cute. I think they like my garden!' ]numberInput  ^self brush: WANumberInputTag newquote: arg1  self quote with: arg1convertKey: arg1  ^arg1 , '.x'renderHeadingsOn: arg1  arg1 tableRow: [ arg1 tableHeading: 'Key'.        arg1 tableHeading: 'Value'.        arg1 tableHeading: 'Path'.        arg1 tableHeading: 'Domain'.        arg1 tableHeading: 'Ports'.        arg1 tableHeading ]postCopy  super postCopy.  ports := ports copyfirstValue: arg1  firstValue := arg1assertExpired: arg1  self assert: registry cache size = registrySize.  self assert: arg1 status = 302.  self assert: (arg1 headers at: 'Location') greaseString = self pathselection  ^selectionrenderFiltersOn: arg1  arg1 paragraph: 'Below a list of filters wrapping the current session:'.  arg1 orderedList list: self session filtersvisitComponent: arg1  self visitPresenter: arg1testOneOfMany  | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |  tmp1 := WARequestCookie key: strategy keyCookieName value: 'cookie1'.  tmp2 := (WARequestCookie key: strategy keyCookieName value: 'cookie2')     path: '/';     yourself.  tmp3 := (WARequestCookie key: strategy keyCookieName value: 'cookie3')     path: '/1/2';     yourself.  tmp4 := (WARequestCookie key: strategy keyCookieName value: 'cookie4')     path: '/1/2/3';     yourself.  tmp6 := self requestContext.  tmp6 request setCookies: (Array with: tmp1 with: tmp2 with: tmp3 with: tmp4).  tmp5 := strategy keyFromContext: tmp6.  self assert: tmp5 = 'cookie3'scriptGeneratorClass  ^WANullScriptGeneratoriframe  ^self brush: WAIframeTag newapplication  ^self requestContext applicationtestDeleteCookie  | tmp1 tmp2 |  tmp1 := (WARequestCookie key: 'key' value: 'value')     pathUnencoded: '/highway/to/hell' encoded: '/highway/to/hell';     domain: 'hotel' yourself.  self response deleteCookie: tmp1.  self assert: self response cookies size = 1.  tmp2 := self response cookies first.  self assert: tmp1 ~~ tmp2.  self assert: tmp2 domain = 'hotel'.  self assert: tmp2 path = '/highway/to/hell'title  ^titleat: arg1 put: arg2 overwrite: arg3  | tmp1 tmp2 tmp3 |  self sweepIncrementally.  self growCheck.  tmp2 := arg1 hash.  tmp1 := tmp2 \\ keyTable size + 1.  tmp3 := self findEntryOrNilWithKey: arg1 hash: tmp2 index: tmp1.  tmp3 isNil ifTrue: [ | tmp4 tmp5 tmp6 |        (maximumSize > 0 and: [ size = maximumSize ]) ifTrue: [ self performOverflowAction ].        tmp4 := WACacheKeyEntry key: arg1 value: arg2.        tmp6 := WACacheListEntry entry: tmp4.        tmp5 := WACacheListEntry entry: tmp4.        tmp4 byAccessListEntry: tmp5.        tmp4 byCreationListEntry: tmp6.        self addToAccessEnd: tmp5.        self addToCreationEnd: tmp6.        self insertKeyEntry: tmp4.        size := size + 1 ] ifFalse: [ | tmp7 tmp8 |        arg3 ifFalse: [ ^false ].        tmp7 := tmp3 byAccessListEntry.        tmp8 := tmp3 byCreationListEntry.        self expunge: tmp7.        self addToAccessEnd: tmp7.        self expunge: tmp8.        self addToCreationEnd: tmp8.        self cacheEntryRemoved: tmp3 value.        tmp3 value: arg2 ].  ^trueat: arg1 put: arg2  self addExpression: ((WAValueExpression key: arg1)           value: arg2;           yourself)openTag  self attributes at: 'multiple' put: true.  super openTagaddAll  self addMedia: 'all'xSendfileBaseDirectory  ^self preferenceAt: #xSendfileBaseDirectoryrenderRequestBodyOn: arg1  arg1 hiddenInput callback: [ self readRequestBody ].  arg1 strong: 'Request Body:'.  ran ifTrue: [ arg1 text: (hasBody ifTrue: [ 'Success' ] ifFalse: [ 'Fail' ]) ] ifFalse: [ arg1 text: 'Not Run' ].  arg1 breakprintMemory: arg1  ^GRPrinter binaryFileSize print: arg1dateInput  ^self brush: WADateInput newrenderLabel: arg1 value: arg2 value: arg3 on: arg4  arg4 tableRow: [ self renderLabel: arg1 on: arg4.        self renderValue: arg2 on: arg4.        self renderValue: arg3 on: arg4 ]root  ^rootdecodedWith: arg1  | tmp1 |  tmp1 := self copy.  self user isNil ifFalse: [ tmp1 user: (arg1 url decode: self user) ].  self password isNil ifFalse: [ tmp1 password: (arg1 url decode: self password) ].  self path isEmpty ifFalse: [ tmp1 path: (self path collect: [:arg2 |  arg1 url decode: arg2 ]) ].  tmp1 queryFields: nil.  self queryFields keysAndValuesDo: [:arg3 :arg4 |  tmp1 addField: (arg1 url decode: arg3) value: (arg4 isNil ifFalse: [ arg1 url decode: arg4 ]) ].  self fragment isNil ifFalse: [ tmp1 fragment: (arg1 url decode: self fragment) ].  ^tmp1step: arg1  self attributeAt: 'step' put: arg1updateUrl: arg1  removeDecoration: arg1  | tmp1 tmp2 |  tmp1 := nil.  tmp2 := self decoration.  [ tmp2 = self ] whileFalse: [ tmp2 = arg1 ifTrue: [ tmp1 isNil ifTrue: [ self decoration: tmp2 next ] ifFalse: [ tmp1 setNext: tmp2 next ].              ^arg1 setNext: nil ].        tmp1 := tmp2.        tmp2 := tmp2 next ].  ^niltest  ^testallPages  ^'ABCDEFGHIJKLMNOPQRSTUVWXYZ'renderAbbreviatedOn: arg1  arg1 heading     level2;     with: '<abbr>'.  arg1 paragraph: [ arg1 abbreviated           title: 'World Wide Web';           with: 'WWW' ]testInternalErrorWithMessage  | tmp1 |  tmp1 := self createRequestContext.  [ self handlerClass internalError: (WATestError new           messageText: 'test';           yourself) context: tmp1 ] on: WAResponseNotification do: [:arg1 |  self assert: (tmp1 response isKindOf: WAResponse).        self assert: tmp1 response status = 500.        ^self ].  self assert: falsesortedWorkingCopies  ^MCWorkingCopy allManagers asSortedCollection: [:arg1 :arg2 |  arg1 packageName <= arg2 packageName ]removeKey: arg1  | tmp1 tmp2 tmp3 |  self sweepIncrementally.  tmp1 := arg1 hash.  tmp2 := tmp1 \\ keyTable size + 1.  tmp3 := self findEntryOrNilWithKey: arg1 hash: tmp1 index: tmp2.  ^tmp3 isNil ifTrue: [ self errorKeyNotFound ] ifFalse: [ self removeCacheEntry: tmp3 ]testFormWithoutMimeType  | tmp1 |  self formClassExists ifFalse: [ ^self ].  tmp1 := WADocumentHandler document: self sampleForm mimeType: nil fileName: nil.  self assert: tmp1 document contents isEmptyOrNil notcontinuationClasses  ^WAApplicationConfiguration instance continuationClassessampleComponentRenderMethod  ^'renderContentOn: html	html image url: ''http://www.seaside.st/styles/logo-plain.png''.	html paragraph: ''Hello World from Seaside.''.	html paragraph: [ 		html text: ''To learn more about Seaside components follow the link to the book: ''.		html anchor			url: ''http://book.seaside.st/book/fundamentals/rendering-components'';			with: ''Dynamic Web Development with Seaside''.		html text: ''.'' ]'addToAccessEnd: arg1  | tmp1 |  tmp1 := byAccessEnd.  tmp1 isNil ifFalse: [ tmp1 next: arg1.        arg1 previous: tmp1 ].  arg1 initializeTime.  byAccessEnd := arg1.  byAccessStart isNil ifTrue: [ byAccessStart := arg1 ]renderChildOn: arg1  self showHalos ifTrue: [ arg1 context addHaloVisitor: (WAHaloVisitor decoration: self context: arg1 context).        arg1 context enableHalos ].  self renderNextOn: arg1.  arg1 context disableHalosrequest  ^self requestContext requestbutton: arg1  ^self button with: arg1script  ^'function swapCallbacks(url, list1id, list2id) {	list1 = document.getElementById(list1id);	list2 = document.getElementById(list2id);		document.location = url		+ "&" + list1.name + "=" + list2.options[2].value		+ "&" + list2.name + "=" + list1.options[2].value;}		'popupAnchor  ^self brush: WAPopupAnchorTag newsortColumn: arg1  isReversed := arg1 = self sortColumn and: [ isReversed not ].  sortColumn contents: arg1authorization  | tmp1 |  tmp1 := self headerAt: 'authorization'.  ^tmp1 isNil ifFalse: [ self decodeAuthorization: tmp1 ]initialize  super initialize.  report := WATableReport new     rows: WAComponent allSubclasses asArray;     columns: (OrderedCollection new           add: (WAReportColumn selector: #fullName title: 'Name' onClick: [:arg1 |  self inform: arg1 description onAnswer: [  ] ]);           add: ((WAReportColumn selector: #canBeRoot title: 'Can Be Root') sortBlock: [:arg2 :arg3 |  arg2 ]);           add: (WAReportColumn renderBlock: [:arg1 :arg4 |  arg4 emphasis: arg1 description ] title: 'Description');           yourself);     rowColors: #(lightblue lightyellow);     rowPeriod: 1;     yourselfrenderEntityTableOn: arg1  arg1 table     summary: 'This table gives the character entity reference, ' , 'decimal character reference, and hexadecimal character ' , 'reference for 8-bit Latin-1 characters, as well as the ' , 'rendering of each in your browser.';     with: [ arg1 tableCaption: 'HTML 4.0 entities'.        self renderEntityTableColumnGroupsOn: arg1.        self renderEntityTableHeadOn: arg1.        self renderEntityTableFootOn: arg1.        self renderEntityTableBodyOn: arg1 ]shouldVisitNextPresenterOf: arg1  ^truerenderCurrencyTableHeadOn: arg1  arg1 tableHead     title: 'Table header';     with: [ arg1 tableRow: [ arg1 tableHeading: 'Currency'.              arg1 tableHeading: 'Rate' ] ]spaceEntity  self subclassResponsibilityrenderQualifiedValue: arg1 on: arg2  arg2 listItem: [ | tmp1 |        arg2 render: arg1 value.        tmp1 := arg1 quality.        tmp1 = Float infinity ifTrue: [ arg2 superscript: [ arg2 html: '&infin;' ] ] ifFalse: [ arg2 superscript: tmp1 ] ]do: arg1  root add: (self openingConditionClass condition: condition).  arg1 value.  root add: self closingConditionClass newonSuspend: arg1  self document scriptGenerator event: 'suspend' do: arg1 on: selflabel  ^'Html 5 Elements'createHandlers  | tmp1 |  tmp1 := WARequestHandler new.  tmp1 preferenceAt: #charSet put: 'utf-16'.  ^Array with: tmp1initialize  super initialize.  self value: 0.  self multiplier: 1propertyAt: arg1 ifAbsent: arg2  ^properties at: arg1 ifAbsent: arg2renderBidirectionalOverrideOn: arg1  arg1 heading     level2;     with: '<bdo>'.  arg1 unorderedList: [ arg1 listItem: [ arg1 text: 'User '.              arg1 bidirectionalOverride                 direction: 'rtl';                 with: 'jcranmer'.              arg1 text: ' 12 posts.' ].        arg1 listItem: [ arg1 text: 'User '.              arg1 bidirectionalOverride                 direction: 'ltr';                 with: 'hober'.              arg1 text: ' 5 posts.' ] ]evaluateWithFieldValues: arg1  self evaluateWithArgument: (arg1 collect: [:arg2 |  self valueForField: arg2 ])selectorsToInclude  ^#(faviconIco handlerCss handlerJs windowCss toolCss)selected  ^navigation selectedComponentverticalAlign: arg1  self attributes at: 'valign' put: arg1testCoreAttributesId  self assert: [:arg1 |  arg1 div id: 'foo' ] gives: '<div id="foo"></div>'.  self assert: [:arg1 |  arg1 div           id: 'foo';           id: 'bar' ] gives: '<div id="bar"></div>'.  self assert: [:arg1 |  self assert: (arg1 div                 id: 'foo';                 id) = 'foo' ] gives: '<div id="foo"></div>'.  self assert: [:arg1 |  self assert: arg1 div id isNil ] gives: '<div></div>'isClosed  ^truerenderSafariOn: arg1  arg1 listItem: 'On Safari the path is not supposed to work. But if you look under Preferences -> Security -> Show Cookies the cookie should be saved with the correct path.'greaseString  ^String streamContents: [:arg1 |  self encodeOn: arg1 usingQuotes: true ]selector: arg1  selector := arg1.  self component: (class perform: selector)parent  ^parent ifNil: [ ^self ]initialize  super initialize.  mutex := WAMutex newreadRequestBody  ran := true.  hasBody := self requestContext request rawBody notNilrenderContentOn: arg1  arg1 anchor     callback: [ self requestContext closeThisPopup ];     with: 'Close me'.  arg1 break.  arg1 anchor     callback: [ self requestContext closeThisPopupAndReloadOpener ];     with: 'Close me and reload opener'visitNumberAttribute: arg1  self visitAttribute: arg1testSettingPathWithTrailingSlash  | tmp1 |  tmp1 := WACookie new     key: 'name';     value: 'homer';     path: '/springfield/';     yourself.  self assert: tmp1 path equals: '/springfield'.  self assert: tmp1 pathUnencoded equals: '/springfield'.  self assert: tmp1 pathEncoded equals: '/springfield'actionPhaseContinuationClasses  ^self continuationClasses select: [:arg1 |  arg1 isRenderLoopContinuation and: [ arg1 isActionContinuation ] ]testStringWithoutFilename  self createAndVerifyTextDocumentNamed: nil hasAttachment: nilserverUrl  ^self class serverUrlparsePathParameters: arg1 at: arg2 from: arg3 to: arg4  | tmp1 |  tmp1 := arg3.  [ tmp1 > 0 and: [ tmp1 < arg4 ] ] whileTrue: [ | tmp2 tmp3 |        tmp2 := arg1 indexOf: $= startingAt: tmp1.        tmp3 := arg1 indexOf: $; startingAt: tmp1.        tmp3 := tmp3 > 0 ifTrue: [ tmp3 min: arg4 ] ifFalse: [ arg4 ].        (tmp2 > 0 and: [ tmp2 < arg4 ]) ifTrue: [ | tmp4 tmp5 |              tmp4 := self class decodePercent: arg1 from: tmp1 to: tmp2.              tmp5 := tmp2 + 1.              [ tmp5 > 0 and: [ tmp5 < tmp3 ] ] whileTrue: [ | tmp6 |                    tmp6 := arg1 indexOf: $, startingAt: tmp5 + 1.                    tmp6 := tmp6 > 0 ifTrue: [ tmp6 min: tmp3 ] ifFalse: [ tmp3 ].                    self addPathParameterAt: arg2 key: tmp4 value: (self class decodePercent: arg1 from: tmp5 to: tmp6).                    tmp5 := tmp6 + 1 ] ] ifFalse: [ self addPathParameterAt: arg2 key: (self class decodePercent: arg1 from: tmp1 to: tmp3) ].        tmp1 := tmp3 + 1 ]destroy  self document destroy.  document := niltestRemoveFromOldParent  | tmp1 tmp2 |  tmp1 := WADispatcher new.  tmp1 register: handler at: 'crepe'.  self assert: handler parent == tmp1.  self assert: (tmp1 handlers includes: handler).  tmp2 := WADispatcher new.  tmp2 register: handler at: 'suzette'.  self assert: handler parent == tmp2.  self assert: (tmp2 handlers includes: handler).  self deny: (tmp1 handlers includes: handler)resourceBaseUrl  ^self preferenceAt: #resourceBaseUrlcontentString  ^contentStringcreateCodec  ^GRNullCodec newrenderContentOn: arg1  arg1 div     class: self cssClass;     with: self root classNamedebugUrl  ^self urlForDebugAction: '_debug'isClosed  ^truerenderContentOn: arg1  arg1 heading: 'VNC Server'.  self isServerRunning ifTrue: [ self renderStopOn: arg1 ] ifFalse: [ self renderStartOn: arg1 ].  arg1 heading: 'UI Process'.  self uiProcess isSuspended ifFalse: [ self renderSuspendOn: arg1 ] ifTrue: [ self renderResumeOn: arg1 ]uri  ^uriautofocus  self attributeAt: 'autofocus' put: truedefaultConfiguration  ^WAUserConfiguration new     addParent: WAExceptionFilterConfiguration instance;     yourselfisHttp10  ^major = 1 and: [ minor = 0 ]priority  ^0initialize  super initialize.  transcript := WriteStream on: String newtestComprehension  testContentType  self assert: handler contentType = ('text/html' seasideMimeType                 charset: 'utf-16';                 yourself)renderMaximumSizeOn: arg1  arg1 tableRow: [ arg1 tableHeading: [ arg1 label: 'Maximum Size' ].        arg1 tableData: [ arg1 textInput                 size: 5;                 on: #maximumSize of: self ] ].  arg1 tableRow: [ arg1 tableData           colSpan: 2;           with: 'Number of sessions supported. When this limit is reached the overflow action is run. 0 for no maximum size. Has to be positive.' ]renderListItem: arg1 labelled: arg2  canvas option     value: (self valueFor: arg1);     selected: (self isSelected: arg1);     with: arg2printOn: arg1  super printOn: arg1.  arg1     nextPut: $(;     nextPutAll: self key greaseString;     nextPut: $)renderAnchorsOn: arg1  self renderInline: [:arg2 |  arg2 unorderedList: [ arg2 listItem: [ arg2 anchor                       name: 'name';                       callback: [  ];                       with: 'Anchor' ] ] ] factor: 1 key: #anchor on: arg1expiredRegistryKey  | tmp1 |  self request isXmlHttpRequest ifTrue: [ ^self forbidden ].  tmp1 := self requestContext registry url.  tmp1 addAllToPath: self requestContext consumer upToEnd.  self request fields keysAndValuesDo: [:arg1 :arg2 |  (tmp1 isSeasideField: arg1) ifFalse: [ tmp1 addField: arg1 value: arg2 ] ].  self redirectTo: tmp1renderMonthNavigationOn: arg1  | tmp1 |  tmp1 := #(12 1 2 3 4 5 6 7 8 9 10 11 12 1).  arg1 span     class: 'calendarPrevious';     with: [ arg1 anchor           callback: [ self previousMonth ];           with: ((self monthNames at: (tmp1 at: self monthIndex)) first: 3) ].  arg1 space.  arg1 span     class: 'calendarNext';     with: [ arg1 anchor           callback: [ self nextMonth ];           with: ((self monthNames at: (tmp1 at: self monthIndex + 2)) first: 3) ]expectedMimeType  ^WAMimeType textPlainstyleeditorSvg  ^'<?xml version="1.0" encoding="UTF-8" standalone="no"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc="http://purl.org/dc/elements/1.1/"   xmlns:cc="http://creativecommons.org/ns#"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns="http://www.w3.org/2000/svg"   xmlns:xlink="http://www.w3.org/1999/xlink"   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"   inkscape:export-ydpi="90.000000"   inkscape:export-xdpi="90.000000"   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"   width="48px"   height="48px"   id="svg11300"   sodipodi:version="0.32"   inkscape:version="0.46"   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/apps"   sodipodi:docname="preferences-desktop-theme.svg"   inkscape:output_extension="org.inkscape.output.svg.inkscape">  <defs     id="defs3">    <inkscape:perspective       sodipodi:type="inkscape:persp3d"       inkscape:vp_x="0 : 24 : 1"       inkscape:vp_y="0 : 1000 : 0"       inkscape:vp_z="48 : 24 : 1"       inkscape:persp3d-origin="24 : 16 : 1"       id="perspective135" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient5031"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       inkscape:collect="always"       id="linearGradient5060">      <stop         style="stop-color:black;stop-opacity:1;"         offset="0"         id="stop5062" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5064" />    </linearGradient>    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient5029"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <linearGradient       id="linearGradient5048">      <stop         style="stop-color:black;stop-opacity:0;"         offset="0"         id="stop5050" />      <stop         id="stop5056"         offset="0.5"         style="stop-color:black;stop-opacity:1;" />      <stop         style="stop-color:black;stop-opacity:0;"         offset="1"         id="stop5052" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient5027"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <linearGradient       id="linearGradient4649">      <stop         id="stop4651"         offset="0"         style="stop-color:#80837d;stop-opacity:1;" />      <stop         id="stop4653"         offset="1"         style="stop-color:#4c4d4a;stop-opacity:1;" />    </linearGradient>    <linearGradient       id="linearGradient4639">      <stop         style="stop-color:#555753;stop-opacity:1;"         offset="0"         id="stop4641" />      <stop         style="stop-color:#7c7f79;stop-opacity:1;"         offset="1"         id="stop4643" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient4633">      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="0"         id="stop4635" />      <stop         style="stop-color:#ffffff;stop-opacity:0;"         offset="1"         id="stop4637" />    </linearGradient>    <linearGradient       id="linearGradient4596">      <stop         style="stop-color:#75507b;stop-opacity:1;"         offset="0"         id="stop4598" />      <stop         style="stop-color:#543958;stop-opacity:1;"         offset="1"         id="stop4600" />    </linearGradient>    <linearGradient       id="linearGradient4586">      <stop         style="stop-color:#204a87;stop-opacity:1;"         offset="0"         id="stop4588" />      <stop         style="stop-color:#142e55;stop-opacity:1;"         offset="1"         id="stop4590" />    </linearGradient>    <linearGradient       id="linearGradient3697">      <stop         style="stop-color:#c8d5e6;stop-opacity:1;"         offset="0"         id="stop3699" />      <stop         style="stop-color:#427ebf;stop-opacity:1;"         offset="1"         id="stop3701" />    </linearGradient>    <linearGradient       id="linearGradient3689">      <stop         id="stop3691"         offset="0"         style="stop-color:#5079ad;stop-opacity:1;" />      <stop         id="stop3693"         offset="1"         style="stop-color:#729fcf" />    </linearGradient>    <linearGradient       id="linearGradient3568">      <stop         style="stop-color:#d6d6d6;stop-opacity:1;"         offset="0"         id="stop3570" />      <stop         style="stop-color:#f0f0f0;stop-opacity:1;"         offset="1"         id="stop3572" />    </linearGradient>    <linearGradient       id="linearGradient3560">      <stop         style="stop-color:#f0f0f0;stop-opacity:1;"         offset="0"         id="stop3562" />      <stop         style="stop-color:#c9c9c9;stop-opacity:1;"         offset="1"         id="stop3564" />    </linearGradient>    <linearGradient       id="linearGradient3550">      <stop         id="stop3552"         offset="0"         style="stop-color:#8b8b8b;stop-opacity:1;" />      <stop         id="stop3554"         offset="1"         style="stop-color:#a9a9a9;stop-opacity:1;" />    </linearGradient>    <linearGradient       id="linearGradient3536">      <stop         style="stop-color:#b0b0b0;stop-opacity:1;"         offset="0"         id="stop3538" />      <stop         style="stop-color:#757575;stop-opacity:1;"         offset="1"         id="stop3540" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient3528">      <stop         style="stop-color:#000000;stop-opacity:1;"         offset="0"         id="stop3530" />      <stop         style="stop-color:#000000;stop-opacity:0;"         offset="1"         id="stop3532" />    </linearGradient>    <linearGradient       inkscape:collect="always"       id="linearGradient3518">      <stop         style="stop-color:#ffffff;stop-opacity:1;"         offset="0"         id="stop3520" />      <stop         style="stop-color:#ffffff;stop-opacity:0;"         offset="1"         id="stop3522" />    </linearGradient>    <linearGradient       id="linearGradient3508">      <stop         style="stop-color:#b0b0b0;stop-opacity:1;"         offset="0"         id="stop3510" />      <stop         style="stop-color:#939393;stop-opacity:1;"         offset="1"         id="stop3512" />    </linearGradient>    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3508"       id="linearGradient3514"       x1="16.940231"       y1="27.853085"       x2="16.940231"       y2="24.135145"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-2.121319,3.005205)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3524"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-2.121319,3.005205)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3528"       id="radialGradient3534"       cx="17.014757"       cy="39.249554"       fx="17.014757"       fy="39.249554"       r="9.5017471"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.502326,-2.992397e-15,19.53350)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3536"       id="radialGradient3542"       cx="18.163805"       cy="22.531874"       fx="18.163805"       fy="22.531874"       r="2.8422911"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.860061,0.000000,3.253760)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3550"       id="radialGradient3548"       cx="17.097467"       cy="19.777185"       fx="17.097467"       fy="19.777185"       r="4.5473714"       gradientTransform="matrix(1.208333,0.000000,0.000000,0.636493,-5.683292,8.681835)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3560"       id="radialGradient3566"       cx="12.91097"       cy="13.001998"       fx="12.91097"       fy="13.001998"       r="7.4889511"       gradientTransform="matrix(1.802725,2.307502e-23,-2.636931e-23,1.503342,-12.48525,-2.659143)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3568"       id="linearGradient3574"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(-2.121319,3.005205)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3550"       id="radialGradient3610"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.208333,0.000000,0.000000,0.636493,-5.683292,8.681835)"       cx="17.097467"       cy="19.777185"       fx="17.097467"       fy="19.777185"       r="4.5473714" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3560"       id="radialGradient3612"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.802725,2.307502e-23,-2.636931e-23,1.503342,-12.48525,-2.659143)"       cx="12.91097"       cy="13.001998"       fx="12.91097"       fy="13.001998"       r="7.4889511" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3616"       gradientUnits="userSpaceOnUse"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844"       gradientTransform="translate(-2.121319,3.005205)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3568"       id="linearGradient3620"       gradientUnits="userSpaceOnUse"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281"       gradientTransform="translate(-2.121319,3.005205)" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3528"       id="radialGradient3661"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.502326,5.762756e-15,19.53350)"       cx="17.014757"       cy="39.249554"       fx="17.014757"       fy="39.249554"       r="9.5017471" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3568"       id="linearGradient3663"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3508"       id="linearGradient3665"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="16.940231"       y1="27.853085"       x2="16.940231"       y2="24.135145" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3667"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3536"       id="radialGradient3669"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.860061,0.000000,3.253760)"       cx="18.163805"       cy="22.531874"       fx="18.163805"       fy="22.531874"       r="2.8422911" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3560"       id="radialGradient3671"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.802725,2.307502e-23,-2.636931e-23,1.503342,5.634344,-15.57903)"       cx="12.91097"       cy="13.001998"       fx="12.91097"       fy="13.001998"       r="7.4889511" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3550"       id="radialGradient3673"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.208333,0.000000,0.000000,0.636493,12.43635,-4.238032)"       cx="17.097467"       cy="19.777185"       fx="17.097467"       fy="19.777185"       r="4.5473714" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3528"       id="radialGradient3675"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.502326,5.762756e-15,19.53350)"       cx="17.014757"       cy="39.249554"       fx="17.014757"       fy="39.249554"       r="9.5017471" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3689"       id="linearGradient3677"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="14.883313"       y1="27.847456"       x2="13.400961"       y2="20.069281" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient3518"       id="linearGradient3681"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(15.99833,-9.914664)"       x1="17.456696"       y1="37.661667"       x2="17.456696"       y2="27.231844" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient3697"       id="radialGradient3705"       cx="27.8486"       cy="4.607163"       fx="27.8486"       fy="4.607163"       r="7.4889512"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.833928,2.121324,0.655729)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4586"       id="radialGradient4594"       cx="30.974438"       cy="12.172572"       fx="30.974438"       fy="12.172572"       r="4.890574"       gradientTransform="matrix(2.132075,-4.734158e-15,2.267378e-15,1.021136,-32.94404,-3.689447)"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4596"       id="radialGradient4602"       cx="18.163805"       cy="22.429104"       fx="18.163805"       fy="22.429104"       r="2.8422911"       gradientTransform="matrix(1.870990,-2.499894e-15,2.150062e-15,1.609166,-15.82050,-13.54799)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4633"       id="linearGradient4619"       x1="31.643028"       y1="13.616933"       x2="31.643028"       y2="9.6384754"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(2.121324,-0.883885)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4633"       id="linearGradient4621"       x1="31.643028"       y1="13.616933"       x2="31.643028"       y2="9.6384754"       gradientUnits="userSpaceOnUse"       gradientTransform="translate(2.121324,-0.883885)" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient4639"       id="linearGradient4645"       x1="15.335379"       y1="28.377787"       x2="15.335379"       y2="34.388195"       gradientUnits="userSpaceOnUse" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient4649"       id="radialGradient4647"       cx="18.163805"       cy="22.223564"       fx="18.163805"       fy="22.223564"       r="2.8422911"       gradientTransform="matrix(1.000000,0.000000,0.000000,0.860061,0.000000,3.253760)"       gradientUnits="userSpaceOnUse" />    <linearGradient       inkscape:collect="always"       xlink:href="#linearGradient5048"       id="linearGradient6715"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"       x1="302.85715"       y1="366.64789"       x2="302.85715"       y2="609.50507" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6717"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />    <radialGradient       inkscape:collect="always"       xlink:href="#linearGradient5060"       id="radialGradient6719"       gradientUnits="userSpaceOnUse"       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"       cx="605.71429"       cy="486.64789"       fx="605.71429"       fy="486.64789"       r="117.14286" />  </defs>  <sodipodi:namedview     stroke="#2e3436"     fill="#555753"     id="base"     pagecolor="#ffffff"     bordercolor="#666666"     borderopacity="0.25490196"     inkscape:pageopacity="0.0"     inkscape:pageshadow="2"     inkscape:zoom="1"     inkscape:cx="-124.63746"     inkscape:cy="8.081426"     inkscape:current-layer="layer2"     showgrid="false"     inkscape:grid-bbox="true"     inkscape:document-units="px"     inkscape:showpageshadow="false"     inkscape:window-width="872"     inkscape:window-height="703"     inkscape:window-x="234"     inkscape:window-y="145" />  <metadata     id="metadata4">    <rdf:RDF>      <cc:Work         rdf:about="">        <dc:format>image/svg+xml</dc:format>        <dc:type           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />        <dc:creator>          <cc:Agent>            <dc:title>Jakub Steiner</dc:title>          </cc:Agent>        </dc:creator>        <dc:source>http://jimmac.musichall.cz</dc:source>        <cc:license           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />        <dc:title>Themes</dc:title>        <dc:subject>          <rdf:Bag>            <rdf:li>skin</rdf:li>            <rdf:li>color</rdf:li>            <rdf:li>theme</rdf:li>            <rdf:li>customize</rdf:li>            <rdf:li>flavor</rdf:li>          </rdf:Bag>        </dc:subject>      </cc:Work>      <cc:License         rdf:about="http://creativecommons.org/licenses/publicdomain/">        <cc:permits           rdf:resource="http://creativecommons.org/ns#Reproduction" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#Distribution" />        <cc:permits           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />      </cc:License>    </rdf:RDF>  </metadata>  <g     inkscape:groupmode="layer"     id="layer2"     inkscape:label="blue shirt">    <g       transform="matrix(1.518738e-2,0,0,2.086758e-2,45.6332,27.4036)"       id="g6707">      <rect         style="opacity:0.40206185;color:black;fill:url(#linearGradient6715);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         id="rect6709"         width="1339.6335"         height="478.35718"         x="-1559.2523"         y="-150.69685" />      <path         style="opacity:0.40206185;color:black;fill:url(#radialGradient6717);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "         id="path6711"         sodipodi:nodetypes="cccc" />      <path         sodipodi:nodetypes="cccc"         id="path6713"         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "         style="opacity:0.40206185;color:black;fill:url(#radialGradient6719);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    </g>    <path       style="color:#000000;fill:url(#linearGradient3663);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 31.205998,5.2048743 L 34.908493,5.2048743 C 39.19495,5.2048743 44.455603,6.5223903 44.455603,7.0610293 L 44.455603,29.688444 C 44.455603,30.227083 44.018726,30.660716 43.476057,30.660716 L 22.638435,30.660716 C 22.095767,30.660716 21.658889,30.227083 21.658889,29.688444 L 21.658889,7.0610293 C 21.658889,6.5223903 26.830568,5.2048743 31.205998,5.2048743 z "       id="path3627"       sodipodi:nodetypes="ccccccccc" />    <path       sodipodi:nodetypes="ccccccc"       id="path3629"       d="M 31.363447,6.0663853 L 34.751056,6.0663853 C 38.672963,6.0663853 43.486213,7.5879023 43.486213,7.5879023 L 43.486213,29.657422 C 43.486213,29.657422 22.628291,29.657422 22.628291,29.657422 L 22.628291,7.5879023 C 22.628291,7.5879023 27.360135,6.0663853 31.363447,6.0663853 z "       style="opacity:0.61988304;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#linearGradient3665);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.410797,10.508173 L 30.405594,17.314076 L 30.405594,29.600057 L 33.587574,32.428484 L 36.50439,29.600057 L 36.50439,17.1373 L 33.410797,10.508173 z "       id="path3631" />    <path       id="path3633"       d="M 33.422901,13.510439 L 31.417678,17.921699 L 31.417678,28.969769 L 33.551254,31.023416 L 35.492301,28.969769 L 35.492301,17.793346 L 33.422901,13.510439 z "       style="opacity:0.46783627;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3667);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:type="arc"       style="opacity:1;color:#000000;fill:url(#radialGradient3669);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="path3635"       sodipodi:cx="18.163805"       sodipodi:cy="23.251263"       sodipodi:rx="2.3422911"       sodipodi:ry="1.9445436"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       transform="translate(15.11444,-11.15211)" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient3671);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.057245,10.331398 L 28.019109,14.132097 C 28.019109,14.132097 26.162954,8.5652093 26.162954,6.0887583 C 26.162955,3.6138843 27.48878,2.6416133 28.902993,2.6416133 C 28.902993,2.6416133 37.299886,2.6416133 37.299886,2.6416133 C 38.256463,2.6416133 39.929439,3.0393603 40.128313,5.9119823 C 40.327187,8.7846031 38.095381,14.132097 38.095381,14.132097 L 33.057245,10.331398 z "       id="path3637"       sodipodi:nodetypes="cczcczcc" />    <path       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 29.915116,5.0280943 C 29.915116,5.0280943 28.099472,5.5160723 28.41988,6.6872173 C 28.740287,7.8583633 31.196747,9.7126756 31.196747,9.7126756 L 35.789258,9.7126756 C 35.789258,9.7126756 37.898608,8.1511493 38.138915,6.9800043 C 38.379221,5.8088583 36.750481,5.0280943 36.750481,5.0280943 L 29.915116,5.0280943 z "       id="path3639"       sodipodi:nodetypes="csccscc" />    <path       sodipodi:nodetypes="csccscc"       id="path3641"       d="M 29.73834,4.0558263 C 29.73834,4.0558263 27.922696,4.5438043 28.243104,5.7149493 C 28.563511,6.8860953 31.019971,8.7404084 31.019971,8.7404084 L 35.612482,8.7404084 C 35.612482,8.7404084 37.721832,7.1788813 37.962139,6.0077363 C 38.202445,4.8365903 36.573705,4.0558263 36.573705,4.0558263 L 29.73834,4.0558263 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3673);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="ccccccccc"       id="path3645"       d="M 31.205998,5.2048743 L 34.908493,5.2048743 C 39.19495,5.2048743 44.455603,6.5223903 44.455603,7.0610293 L 44.455603,29.688444 C 44.455603,30.227083 44.018726,30.660716 43.476057,30.660716 L 22.638435,30.660716 C 22.095767,30.660716 21.658889,30.227083 21.658889,29.688444 L 21.658889,7.0610293 C 21.658889,6.5223903 26.830568,5.2048743 31.205998,5.2048743 z "       style="color:#000000;fill:url(#linearGradient3677);fill-opacity:1;fill-rule:evenodd;stroke:#3465a4;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:0.26315792;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 31.363447,6.0663853 L 34.751056,6.0663853 C 38.672963,6.0663853 43.486213,7.5879023 43.486213,7.5879023 L 43.486213,29.657422 C 43.486213,29.657422 22.628291,29.657422 22.628291,29.657422 L 22.628291,7.5879023 C 22.628291,7.5879023 27.360135,6.0663853 31.363447,6.0663853 z "       id="path3647"       sodipodi:nodetypes="ccccccc" />    <path       id="path3649"       d="M 33.410797,10.508173 C 33.410797,10.508173 30.405594,15.439076 30.405594,17.314076 L 30.405594,29.600057 L 33.587574,32.428484 L 36.50439,29.600057 L 36.50439,17.1373 C 36.50439,15.3873 33.410797,10.508173 33.410797,10.508173 z "       style="opacity:1;color:#000000;fill:#75507b;fill-opacity:1;fill-rule:evenodd;stroke:#5c3566;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:nodetypes="ccccccc"       style="opacity:0.25146197;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3681);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.422901,13.510439 L 31.417678,17.921699 L 31.417678,28.969769 L 33.551254,31.023416 L 35.492301,28.969769 L 35.492301,17.793346 L 33.422901,13.510439 z "       id="path3651" />    <path       transform="translate(15.11444,-11.15211)"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       sodipodi:ry="1.9445436"       sodipodi:rx="2.3422911"       sodipodi:cy="23.251263"       sodipodi:cx="18.163805"       id="path3653"       style="opacity:1;color:#000000;fill:url(#radialGradient4602);fill-opacity:1;fill-rule:evenodd;stroke:#5c3566;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc" />    <path       sodipodi:nodetypes="cczcczcc"       id="path3655"       d="M 33.057245,10.331398 L 28.019109,14.132097 C 28.019109,14.132097 26.162954,8.5652093 26.162954,6.0887583 C 26.162955,3.6138843 27.48878,2.6416133 28.902993,2.6416133 C 28.902993,2.6416133 37.299886,2.6416133 37.299886,2.6416133 C 38.256463,2.6416133 39.929439,3.0393603 40.128313,5.9119823 C 40.327187,8.7846031 38.095381,14.132097 38.095381,14.132097 L 33.057245,10.331398 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3705);fill-opacity:1;fill-rule:evenodd;stroke:#3465a4;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="csccscc"       id="path3657"       d="M 29.915116,5.0280943 C 29.915116,5.0280943 28.099472,5.5160723 28.41988,6.6872173 C 28.740287,7.8583633 30.696747,9.7126756 31.196747,9.7126756 L 35.789258,9.7126756 C 36.539258,9.6501756 37.898608,8.1511493 38.138915,6.9800043 C 38.379221,5.8088583 36.750481,5.0280943 36.750481,5.0280943 L 29.915116,5.0280943 z "       style="opacity:0.33333333;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient4594);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 29.73834,4.0558263 C 29.23834,4.0558263 27.922696,4.5438043 28.243104,5.7149493 C 28.563511,6.8860953 30.142741,8.7404084 31.019971,8.7404084 L 35.612482,8.7404084 C 36.302817,8.7404084 37.721832,7.1788813 37.962139,6.0077363 C 38.202445,4.8365903 37.073705,4.0558263 36.573705,4.0558263 L 29.73834,4.0558263 z "       id="path3659"       sodipodi:nodetypes="csccscc" />    <path       style="opacity:0.28654971;color:#000000;fill:url(#linearGradient4619);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 33.145635,9.6836496 L 37.830218,13.219183 L 39.067654,9.7720386 L 37.565053,12.246911 L 33.145635,9.6836496 z "       id="path4609" />    <path       id="path4611"       d="M 32.792081,9.8604263 L 28.372663,13.219183 L 26.870062,6.5900599 L 28.902993,11.981746 L 32.792081,9.8604263 z "       style="opacity:0.28654971;color:#000000;fill:url(#linearGradient4621);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccc" />  </g>  <g     id="layer1"     inkscape:label="grey shirt"     inkscape:groupmode="layer">    <path       style="color:#000000;fill:url(#linearGradient3574);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 13.086385,18.12474 L 16.78888,18.12474 C 21.075337,18.12474 26.33599,19.442256 26.33599,19.980895 L 26.33599,42.608311 C 26.33599,43.14695 25.899113,43.580583 25.356444,43.580583 L 4.5188213,43.580583 C 3.9761532,43.580583 3.5392748,43.14695 3.5392748,42.608311 L 3.5392748,19.980895 C 3.5392748,19.442256 8.7109537,18.12474 13.086385,18.12474 z "       id="rect2564"       sodipodi:nodetypes="ccccccccc" />    <path       sodipodi:nodetypes="ccccccc"       id="path3576"       d="M 13.243834,18.986251 L 16.631443,18.986251 C 20.55335,18.986251 25.3666,20.507768 25.3666,20.507768 L 25.3666,42.577289 C 25.3666,42.577289 4.5086772,42.577289 4.5086772,42.577289 L 4.5086772,20.507768 C 4.5086772,20.507768 9.2405207,18.986251 13.243834,18.986251 z "       style="opacity:0.61988304;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <g       id="g5022"       transform="matrix(1.518738e-2,0,0,2.086758e-2,28.3832,40.0286)">      <rect         y="-150.69685"         x="-1559.2523"         height="478.35718"         width="1339.6335"         id="rect4173"         style="opacity:0.40206185;color:black;fill:url(#linearGradient5027);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <path         sodipodi:nodetypes="cccc"         id="path5058"         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "         style="opacity:0.40206185;color:black;fill:url(#radialGradient5029);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />      <path         style="opacity:0.40206185;color:black;fill:url(#radialGradient5031);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "         id="path5018"         sodipodi:nodetypes="cccc" />    </g>    <path       style="opacity:1;color:#000000;fill:url(#linearGradient3514);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 15.291184,23.42804 L 12.285981,30.233943 L 12.285981,42.519924 L 15.467961,45.348351 L 18.384777,42.519924 L 18.384777,30.057167 L 15.291184,23.42804 z "       id="path3446" />    <path       id="path3516"       d="M 15.303288,26.430306 L 13.298065,30.841566 L 13.298065,41.889636 L 15.431641,43.943283 L 17.372688,41.889636 L 17.372688,30.713213 L 15.303288,26.430306 z "       style="opacity:0.46783627;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3524);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:type="arc"       style="opacity:1;color:#000000;fill:url(#radialGradient3542);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       id="path3444"       sodipodi:cx="18.163805"       sodipodi:cy="23.251263"       sodipodi:rx="2.3422911"       sodipodi:ry="1.9445436"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       transform="translate(-3.005208,1.767768)" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient3566);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 14.937632,23.251265 L 9.8994947,27.051964 C 9.8994947,27.051964 8.0433397,21.485075 8.0433397,19.008624 C 8.0433407,16.53375 9.3691657,15.561479 10.78338,15.561479 C 10.78338,15.561479 19.180273,15.561479 19.180273,15.561479 C 20.13685,15.561479 21.809826,15.959226 22.0087,18.831848 C 22.207574,21.704469 19.975768,27.051964 19.975768,27.051964 L 14.937632,23.251265 z "       id="path3440"       sodipodi:nodetypes="cczcczcc" />    <path       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 11.795503,17.94796 C 11.795503,17.94796 9.9798577,18.435938 10.300266,19.607083 C 10.620674,20.778229 13.077134,22.632542 13.077134,22.632542 L 17.669645,22.632542 C 17.669645,22.632542 19.778995,21.071015 20.019302,19.89987 C 20.259608,18.728724 18.630868,17.94796 18.630868,17.94796 L 11.795503,17.94796 z "       id="path3442"       sodipodi:nodetypes="csccscc" />    <path       sodipodi:nodetypes="csccscc"       id="path3556"       d="M 11.618727,16.975692 C 11.618727,16.975692 9.8030817,17.46367 10.12349,18.634815 C 10.443897,19.805961 12.900358,21.660274 12.900358,21.660274 L 17.492869,21.660274 C 17.492869,21.660274 19.602219,20.098747 19.842526,18.927602 C 20.082832,17.756456 18.454092,16.975692 18.454092,16.975692 L 11.618727,16.975692 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3548);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="ccccccccc"       id="path3580"       d="M 13.086385,18.12474 L 16.78888,18.12474 C 21.075337,18.12474 26.33599,19.442256 26.33599,19.980895 L 26.33599,42.608311 C 26.33599,43.14695 25.899113,43.580583 25.356444,43.580583 L 4.5188213,43.580583 C 3.9761532,43.580583 3.5392748,43.14695 3.5392748,42.608311 L 3.5392748,19.980895 C 3.5392748,19.442256 8.7109537,18.12474 13.086385,18.12474 z "       style="color:#000000;fill:url(#linearGradient3620);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1.00000012;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:0.61988304;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 13.243834,18.986251 L 16.631443,18.986251 C 20.55335,18.986251 25.3666,20.507768 25.3666,20.507768 L 25.3666,42.577289 C 25.3666,42.577289 4.5086772,42.577289 4.5086772,42.577289 L 4.5086772,20.507768 C 4.5086772,20.507768 9.2405207,18.986251 13.243834,18.986251 z "       id="path3582"       sodipodi:nodetypes="ccccccc" />    <path       id="path3584"       d="M 15.291184,23.42804 C 15.291184,23.42804 12.285981,27.845821 12.285981,30.233943 L 12.285981,42.519924 L 15.467961,45.348351 L 18.384777,42.519924 L 18.384777,30.057167 C 18.384777,28.057167 15.291184,23.42804 15.291184,23.42804 z "       style="opacity:1;color:#000000;fill:url(#linearGradient4645);fill-opacity:1.0;fill-rule:evenodd;stroke:#2e3436;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccccc" />    <path       sodipodi:nodetypes="ccccccc"       style="opacity:0.46783627;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3616);stroke-width:0.99999976;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 15.303288,26.430306 L 13.298065,30.841566 L 13.298065,41.889636 L 15.431641,43.943283 L 17.372688,41.889636 L 17.372688,30.713213 L 15.303288,26.430306 z "       id="path3586" />    <path       transform="translate(-3.005208,1.767768)"       d="M 20.506096 23.251263 A 2.3422911 1.9445436 0 1 1  15.821514,23.251263 A 2.3422911 1.9445436 0 1 1  20.506096 23.251263 z"       sodipodi:ry="1.9445436"       sodipodi:rx="2.3422911"       sodipodi:cy="23.251263"       sodipodi:cx="18.163805"       id="path3588"       style="opacity:1;color:#000000;fill:url(#radialGradient4647);fill-opacity:1.0;fill-rule:evenodd;stroke:#2e3436;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:type="arc" />    <path       sodipodi:nodetypes="cczcczcc"       id="path3590"       d="M 14.937632,23.251265 L 9.8994947,27.051964 C 9.8994947,27.051964 8.0433397,21.485075 8.0433397,19.008624 C 8.0433407,16.53375 9.3691657,15.561479 10.78338,15.561479 C 10.78338,15.561479 19.180273,15.561479 19.180273,15.561479 C 20.13685,15.561479 21.809826,15.959226 22.0087,18.831848 C 22.207574,21.704469 19.975768,27.051964 19.975768,27.051964 L 14.937632,23.251265 z "       style="opacity:1;color:#000000;fill:url(#radialGradient3612);fill-opacity:1;fill-rule:evenodd;stroke:#949494;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       sodipodi:nodetypes="csccscc"       id="path3592"       d="M 11.795503,17.94796 C 11.795503,17.94796 9.9798577,18.435938 10.300266,19.607083 C 10.620674,20.778229 12.007307,22.632542 13.077134,22.632542 L 17.669645,22.632542 C 18.546875,22.632542 19.778995,21.071015 20.019302,19.89987 C 20.259608,18.728724 18.630868,17.94796 18.630868,17.94796 L 11.795503,17.94796 z "       style="opacity:1;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />    <path       style="opacity:1;color:#000000;fill:url(#radialGradient3610);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 11.618727,16.975692 C 11.618727,16.975692 9.8030817,17.46367 10.12349,18.634815 C 10.443897,19.805961 11.775358,21.660274 12.900358,21.660274 L 17.492869,21.660274 C 18.242869,21.660274 19.602219,20.098747 19.842526,18.927602 C 20.082832,17.756456 18.454092,16.975692 18.454092,16.975692 L 11.618727,16.975692 z "       id="path3594"       sodipodi:nodetypes="csccscc" />    <path       style="opacity:0.61988304;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       d="M 14.937632,22.720934 L 19.622215,26.256468 L 20.859651,22.809323 L 19.35705,25.284196 L 14.937632,22.720934 z "       id="path4604" />    <path       id="path4607"       d="M 14.584078,22.897711 L 10.164659,26.256468 L 8.6620577,19.627343 L 10.69499,25.019031 L 14.584078,22.897711 z "       style="opacity:0.61988304;color:#000000;fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"       sodipodi:nodetypes="ccccc" />  </g></svg>'assertCookieAddition: arg1  | tmp1 |  self assert: arg1 cookies size = 1.  tmp1 := arg1 cookies first.  self assert: tmp1 path = self path.  self assert: tmp1 key = self cookieKey.  self assert: tmp1 discardreset  imageBootTime := DateAndTime nowrequestContextWithUrl: arg1  self requestContextWithUrl: arg1 cookies: Array newaccept: arg1  arg1 visitListAttribute: selfchildrenBlock  ^childrenBlocktype  ^'date'renderContentOn: arg1  self renderDownloadOn: arg1.  self renderLoadFromFileOn: arg1.  self renderLoadFromUrlOn: arg1.  self renderSaveImageOn: arg1store: arg1  self subclassResponsibilityhandlerCss  ^'/* html */body, input, textarea, select {	line-height: 1.5;	font-size: 14px;	color: #2a2a2a;	font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;}select.fix {	width:340px;}input, textarea, select {	margin-right: 0.5em;}input.text, textarea {	width: 200px;}/* headings */h1, h2, h3, h4, h5, h6 {	color: #01598d;	margin-bottom: 1ex;	font-weight: normal;}h1 {	margin-top: 4px;}h2,h3,h4 {	margin:2px 0px;}h2 {	margin-bottom:0.5em;}table {	border: 0;	border-collapse: collapse;}td, th {	padding: 3px 1em 3px 0;}label {	font-weight:bold;	padding: 2px 4px 2px 0px;}th {	text-align: left;}a {	color: #008aff;	text-decoration: none;}a.selected {	font-weight:bold;}a.wa-action, .groupContent a  {		background:#eee;		padding:3px 6px 3px 6px;		border:1px solid #888;		white-space:nowrap;		width:120px;		-moz-border-radius: 5px;		-webkit-border-radius: 5px;		border-radius: 5px;}.groupContent a {	font-size:10px;padding:2px 5px 2px 5px;}.groupContent a.large {	font-size:100%;}a.wa-action:hover, .groupContent a:hover {	background:#fff;}/* special */.smallLogo {	background: url(smallLogo.png) no-repeat;	padding:4px;	margin-left:6px;	width:100px;	height:54px;}table.wa-config {	width:100%;	padding:0;}table.wa-config td {	padding:0px;}.wa-config .topbar {	background:#ccc;	height:22px;	padding:4px 2px 4px 3px}.wa-config .header {	background:#01598d;	color: #fff;	padding:4px;	font-size:120%;}div.help {	padding:8px;	white-space:pre;}.handler-name {	font-family: monospace;}h1.selection-title  {	background-color:#EEEEEE;	font-size:large;	font-weight:bold;	margin-top:0;	padding-top:4px;	padding-bottom:4px;	padding-left:4px;	width:100%;}.group {	margin-bottom:6px;	width: 100%;}.groupTitle {	height:20px;	font-size:1.2em;	background:#eee;	color:#01598d;	padding-left:3px;}.groupTitle .action {	float:right;	padding-right:4px;	white-space:nowrap;}.groupContent {	padding-left:4px;	margin-top:6px;	margin-bottom: 4px;}/* special */h1.logo a { 	width: 200px;	height: 106px;	outline: none;	display: block;	text-indent: -100em;	background: url(logo.png) no-repeat;}h1.title a {	color: #01598d; }span.unspecified {	color: #ff7000;}a.download, a.download:hover {	background: url(save.png) no-repeat;	background-position: 0 50%;	padding-left: 18px;	border:0px}a.help {background: url(help.png) no-repeat;	padding-left:16px;	border:0px}a.up {background: url(up.png) no-repeat;	padding-left:16px;	border:0px}a.down {background: url(down.png) no-repeat;	padding-left:16px;	border:0px}a.plus {background: url(plus.png) no-repeat;	padding-left:16px;	border:0px}a.minus {background: url(minus.png) no-repeat;	padding-left:16px;	border:0px}	/* walkback */.walkback th {	text-align: right;}.walkback ol li {	list-style: square;}'initialize  super initialize.  component := WATrailTestComponent new.  trail := WATrail on: componentcreateNull  ^nilrequestContextWithUrl: arg1 cookies: arg2  | tmp1 |  tmp1 := self requestContext handlers.  self requestContext initializeWithRequest: ((WARequest method: 'GET' uri: arg1)           setCookies: arg2 asArray;           yourself) response: WABufferedResponse new codec: self createCodec.  self requestContext handlers addAll: tmp1ancestors  | tmp1 |  tmp1 := IdentitySet new.  self ancestorsDo: [:arg1 |   ] seen: tmp1.  ^tmp1handleDefault: arg1  ^self debugAndResume: arg1priority  ^300expireIn: arg1  self expiry: DateAndTime now + arg1.  self maxAge: arg1 asSecondsrequestVersionFor: arg1  self subclassResponsibilitytestAddToPathWithTrailingSlashOnly  url addToPath: 'files/WAStandardFiles/'.  self assert: url path size = 2.  self assert: url path first = 'files'.  self assert: url path second = 'WAStandardFiles'.  self assert: url greaseString = '/files/WAStandardFiles/'style: arg1  self style with: arg1valueForField: arg1  ^(arg1 isKindOf: WAFile) ifTrue: [ arg1 ]parsePath: arg1 absolute: arg2 from: arg3 to: arg4  | tmp1 tmp2 tmp3 |  arg2 ifTrue: [ path := nil.        pathParameters := nil ].  tmp1 := self path.  tmp2 := tmp1 size.  tmp3 := arg3.  [ tmp3 < arg4 and: [ (arg1 at: tmp3) = $/ ] ] whileTrue: [ tmp3 := tmp3 + 1 ].  [ tmp3 > 0 and: [ tmp3 < arg4 ] ] whileTrue: [ | tmp4 tmp5 |        tmp4 := arg1 indexOf: $/ startingAt: tmp3 + 1.        (tmp4 > 0 and: [ tmp4 < arg4 ]) ifFalse: [ tmp4 := arg4 ].        tmp5 := tmp4 - tmp3.        tmp5 > 0 ifTrue: [ (tmp5 = 1 and: [ (arg1 at: tmp3) = $. ]) ifFalse: [ (tmp5 = 2 and: [ (arg1 at: tmp3) = $. and: [ (arg1 at: tmp3 + 1) = $. ] ]) ifTrue: [ tmp2 := tmp2 - 1.                          tmp1 isEmpty ifFalse: [ tmp1 removeLast ] ] ifFalse: [ | tmp6 |                          tmp2 := tmp2 + 1.                          tmp6 := arg1 indexOf: $; startingAt: tmp3.                          (tmp6 > 0 and: [ tmp6 < tmp4 ]) ifTrue: [ tmp1 addLast: (self class decodePercent: arg1 from: tmp3 to: tmp6).                                self parsePathParameters: arg1 at: tmp2 from: tmp6 + 1 to: tmp4 ] ifFalse: [ tmp1 addLast: (self class decodePercent: arg1 from: tmp3 to: tmp4) ] ] ] ].        tmp3 := tmp4 + 1.        [ tmp3 < arg4 and: [ (arg1 at: tmp3) = $/ ] ] whileTrue: [ tmp3 := tmp3 + 1 ] ].  slash := arg4 - arg3 > 0 and: [ (arg1 at: arg4 - 1) = $/ ]position: arg1  self     left: arg1 x;     top: arg1 ypathUnencodedOn: arg1  path isNil ifFalse: [ path do: [:arg2 |  arg1 nextPut: $/.              arg1 nextPutAll: arg2 ] ].  (path isNil or: [ path isEmpty or: [ slash ] ]) ifTrue: [ arg1 nextPut: $/ ]title  ^'Memory'testSymbolRendering  self assert: [:arg1 |  arg1 div           id: #aSymbol;           with: #aSecondSymbol ] gives: '<div id="aSymbol">aSecondSymbol</div>'.  self assert: [:arg1 |  arg1 div: [ arg1 text: #aSecondSymbol ] ] gives: '<div>aSecondSymbol</div>'.  self assert: [:arg1 |  arg1 div: [ arg1 render: #aSecondSymbol ] ] gives: '<div>aSecondSymbol</div>'charset: arg1  self attributes at: 'charset' put: arg1defaultDispatcher  ^WAAdmin defaultDispatcherupdateRoot: arg1  super updateRoot: arg1.  self selected notNil ifTrue: [ arg1 title: self selected title ]initialize  super initialize.  instances := IdentityDictionary new.  formatter := GRPrinter binaryFileSize.  self session traverseWithMemory: self seen: (IdentitySet with: self with: self session with: self application).  table := self buildTablerequest  ^self requestContext requeststatus  ^statusinitialize  super initialize.  self resetrenderContentOn: arg1  | tmp1 tmp2 |  self renderExplanationOn: arg1.  tmp1 := self requestContext request url.  tmp2 := arg1 anchor.  tmp2 url rawAddToPath: self testPath.  tmp2     callback: [ self runTest ];     with: 'Run Test'callcc: arg1  ^WAContinuation currentDo: arg1restore  objects keysAndValuesDo: [:arg1 :arg2 |  arg1 restoreFromSnapshot: arg2 ]password  ^passwordendYear: arg1  endYear := arg1isOnLastPage  ^self validPages last = self currentPagetestSize  self assert: merged size = 0.  one at: 'foo' put: 1.  self assert: merged size = 1.  two at: 'foo' put: 2.  self assert: merged size = 2.  two at: 'bar' put: 4.  self assert: merged size = 3renderContentOn: arg1  arg1 unorderedList     list: self items;     labels: self labelBlock;     callback: [:arg2 |  self answer: arg2 ]bcc  ^bccpostCopy  super postCopy.  dictionary := dictionary copycompile: arg1  GRPlatform current compile: arg1 into: presenter class classified: #renderingopen: arg1 onAnswer: arg2  | tmp1 |  tmp1 := self requestor decoratedComponent.  tmp1 removeDecoration: self requestor.  super open: arg1 onAnswer: [:arg3 |  tmp1 addDecoration: self requestor.        arg2 value: arg3 ]superscript: arg1  self superscript with: arg1renderExampleOn: arg1  arg1 paragraph: 'The counter is an example of a very simple Seaside component. It increments and decrements a number by clicking on a link. Test the example below by clicking on the "++" and "--" links:'.  arg1 div     class: #seasideExample;     with: counter.  arg1 paragraph: [ arg1           text: 'This application is coded in two short methods. It is implemented in class ';           code: 'WACounter';           text: ', a subclass of ';           code: 'WAComponent' ].  arg1 paragraph: 'The first method initializes the counter to 0:'.  self renderInitializeCodeOn: arg1.  arg1 paragraph: 'The second method generates the output and assigns the actions to the anchors (links) which update the current value.'.  self renderRenderContentOnCodeOn: arg1currentSegment  ^stack isEmpty ifFalse: [ stack last value ]time  ^timeassertRoot: arg1 gives: arg2  | tmp1 |  tmp1 := self builder     fullDocument: true;     rootBlock: arg1;     render: [:arg3 |   ].  self assert: tmp1 = ('<html><head><title></title>' , arg2 , '</head><body onload="onLoad()"><script type="text/javascript">function onLoad(){};</script></body></html>')writeElementsOn: arg1  arg1     openTag: 'title';     nextPutAll: title;     closeTag: 'title'.  headElements do: [:arg2 |  arg1 print: arg2 ]tempNamesAndValuesIn: arg1 do: arg2  (((SystemVersion current asString includesSubstring: 'Pharo') and: [ SystemVersion current major >= 8 ]) or: [ (SystemVersion current asString includesSubstring: 'Squeak') and: [ SystemVersion current majorVersionNumber >= 5 ] ]) ifTrue: [ arg1 tempNames doWithIndex: [:arg3 :arg4 |  arg2 value: arg3 value: (arg1 namedTempAt: arg4) ] ]renderSelectionOn: arg1  keysAndValuesDo: arg1  self sweepIncrementally.  keyTable do: [:arg2 |  | tmp1 |        tmp1 := arg2.        [ tmp1 isNil ] whileFalse: [ arg1 value: tmp1 key value: tmp1 value.              tmp1 := tmp1 next ] ]proceedUrl  ^self urlForDebugAction: '_proceed'fileSelectors  self subclassResponsibilitydescribeOn: arg1  describeBlock isNil ifFalse: [ describeBlock value: arg1 ]renderContentOn: arg1  arg1 span     class: self cssClass;     with: [ arg1 span           title: 'Callback Time';           with: filter previousTiming.        arg1 text: '/'.        arg1 span           title: 'Render Time';           with: filter currentTiming.        arg1 text: ' ms' ]testFieldSetTag  self assert: [:arg1 |  arg1 fieldSet: 'foo' ] gives: '<fieldset>foo</fieldset>'.  self assert: [:arg1 |  arg1 fieldSet           legend: 'bar';           with: 'zork' ] gives: '<fieldset><legend>bar</legend>zork</fieldset>'sessionClass: arg1  ^self preferenceAt: #sessionClass put: (GRPlatform current bindingOf: arg1)addRequestHandler  | tmp1 |  (name isNil or: [ name isEmpty ]) ifTrue: [ ^self inform: 'You must enter a path-name.' onAnswer: [  ] ].  tmp1 := WAAdmin register: type at: name in: self dispatcher.  tmp1 isApplication ifTrue: [ WAAdmin configureNewApplication: tmp1 ].  self answer: tmp1testCookiesDisabledNoKey  | tmp1 tmp2 |  registry := self createRegistry.  tmp2 := self createRequestContextWithFieldKey: nil cookieKey: nil.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDefault: tmp1isDispatcher  ^falseaddHaloVisitor: arg1  ^arg1     visitor: self;     yourselfhandleDefault: arg1  self defaultName isNil ifTrue: [ arg1 responseGenerator           forbidden;           respond ] ifFalse: [ self handleFiltered: arg1 named: self defaultName ]testFormWithMimeTypeGif  | tmp1 |  self formClassExists ifFalse: [ ^self ].  tmp1 := WADocumentHandler document: self sampleForm mimeType: WAMimeType imageGif fileName: nil.  self assert: (tmp1 document contents beginsWithSubCollection: #(16r47 16r49 16r46 16r38) asByteArray)buildGroups  groups := OrderedCollection new.  groups add: (WAAncestryAttributeEditor new           configuration: configuration;           group: #inheritedConfiguration;           parent: self;           yourself).  groups addAll: (self groupedAttributes collect: [:arg1 |  WAConfigAttributeEditor new                 configuration: configuration;                 attributes: arg1 value;                 group: arg1 key;                 parent: self;                 hasAdvancedAttributes: (self includesAdvanced: arg1 value);                 yourself ])testTargetParent  self assert: [:arg1 |  arg1 anchor           callback: [  ];           targetParent;           with: 'foo' ] gives: '<a target="_parent" href="/?1">foo</a>'searchInput  ^self brush: WASearchInputTag newsessions  | tmp1 |  tmp1 := OrderedCollection new.  self sessionsDo: [:arg1 |  tmp1 add: arg1 ].  ^tmp1renderContentOn: arg1  arg1 div     class: 'calendar';     with: [ arg1 div           class: 'calendarCaption';           with: [ self renderMonthHeadingOn: arg1 ].        arg1 table: [ arg1 tableRow                 class: 'calendarTitle';                 with: [ self weekDays do: [:arg2 |  arg1 tableData: arg2 ] ].              self weeksDo: [:arg3 |  self renderRowForWeek: arg3 on: arg1 ] ].        self renderMonthNavigationOn: arg1.        arg1           space;           space.        self renderYearNavigationOn: arg1 ]testRelativeTo  | tmp1 tmp2 tmp3 |  tmp1 := WAUrl absolute: 'http://www.seaside.st/news'.  tmp2 := WAUrl absolute: 'http://www.seaside.st/news/2008/April'.  tmp3 := tmp1 relativeTo: tmp2.  self assert: tmp3 size = 2.  self assert: tmp3 first = '2008'.  self assert: tmp3 second = 'April'removeConfiguration: arg1  | tmp1 tmp2 |  (arg1 isKindOf: WAAuthConfiguration) ifTrue: [ tmp1 := self myApplication.        tmp2 := tmp1 filters detect: [:arg2 |  arg2 isKindOf: WAAuthenticationFilter ] ifNone: [ nil ].        tmp2 isNil ifFalse: [ tmp1 preferenceAt: #login put: nil.              tmp1 preferenceAt: #passwordHash put: nil.              tmp1 removeFilter: tmp2 ] ].  self configuration removeParent: arg1.  self parent buildGroupsattributeAt: arg1  ^self attributeAt: arg1 ifAbsent: [ WAAttributeNotFound signalWithKey: arg1 ]newHandler  ^WADocumentHandler document: 'body { background-color: #ffffff }' mimeType: WAMimeType textCss fileName: 'sample.css'haloFor: arg1  ^halos at: arg1 ifAbsentPut: [ arg1 haloClass on: arg1 ]datetimelocal: arg1  datetimelocal := arg1parts  ^parts ifNil: [ parts := Set new ]cancel  dialog ifTrue: [ self answer: nil ]document: arg1 mimeType: arg2 fileName: arg3  self url: (canvas context urlForDocument: arg1 mimeType: arg2 fileName: arg3).  arg2 isNil ifFalse: [ self type: arg2 ]execute  self open: (WAPluggableTool on: self application configurationComponent)printOn: arg1  | tmp1 tmp2 |  tmp2 := [ self requestContext codec ] on: WARequestContextNotFound do: [:arg2 |  GRNullCodec new ].  tmp1 := WAUnescapedDocument on: arg1 codec: tmp2.  self encodeOn: tmp1filepath: arg1  filepath := arg1handlerAtAll: arg1  ^arg1 inject: self into: [:arg2 :arg3 |  arg2 handlerAt: arg3 ]selected: arg1  selected := arg1visitPresenter: arg1  arg1 initialRequest: self requesttestSettingRootPath  | tmp1 |  tmp1 := WACookie new     key: 'name';     value: 'homer';     path: '/';     yourself.  self assert: tmp1 path equals: '/'.  self assert: tmp1 pathUnencoded equals: '/'.  self assert: tmp1 pathEncoded equals: '/'renderLineBreaksOn: arg1  self renderInline: [:arg2 |  arg2 withLineBreaks: 'a			b			c' ] key: #lineBreak on: arg1keyGenerator  ^self brush: WAKeyGeneratorTag newtestMainJs  | tmp1 tmp2 |  tmp1 := WAFileHandler new.  self requestContextWithUrl: '/i/dont/care/main.js'.  self requestContext consumer     next;     next;     next.  tmp2 := self responseAfter: [ tmp1 handle: self requestContext ].  self assert: tmp2 status = 404clear  self keysAndValuesDo: [:arg1 :arg2 |  self cacheEntryRemoved: arg2 ].  size := 0.  keyTable atAllPut: nil.  byAccessStart := nil.  byAccessEnd := nil.  byCreationStart := nil.  byCreationEnd := nilmonth: arg1  month := arg1<= arg1  ^self priority < arg1 priority or: [ self priority = arg1 priority and: [ self label <= arg1 label ] ]exchangeRates  ^#(#('EUR' 1.70) #('USD' 1.30) #('DKK' 23.36) #('SEK' 19.32))imgglyphiconshalflingsPngContent  ^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 1 213 0 0 0 133 8 3 0 0 0 58 158 146 134 0 0 0 132 80 76 84 69 255 255 255 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 132 103 176 84 0 0 0 43 116 82 78 83 0 207 15 239 159 191 47 95 223 31 175 63 127 77 143 79 128 111 9 246 216 171 75 168 162 72 27 30 201 243 117 195 147 249 213 237 39 144 192 42 122 199 189 204 142 115 190 0 0 16 0 73 68 65 84 120 94 237 157 137 114 164 56 151 133 175 214 5 104 178 243 95 102 221 247 229 188 255 251 77 24 112 43 204 185 74 96 112 185 171 106 116 42 42 211 113 144 111 10 125 72 41 225 27 66 126 30 117 89 7 192 45 134 193 111 50 74 193 199 108 176 243 198 33 187 97 148 79 209 112 197 183 1 8 86 190 99 113 251 176 207 74 2 72 146 150 0 178 226 168 82 133 136 96 229 102 176 201 236 27 236 141 40 176 15 154 176 200 87 231 229 213 81 6 184 89 38 135 161 8 41 226 65 94 219 15 0 16 232 156 171 200 47 100 203 230 22 213 175 113 88 214 239 218 199 27 43 98 141 151 70 251 156 244 173 129 0 2 99 79 83 181 33 112 97 84 85 172 74 212 213 119 31 131 142 112 73 100 116 59 30 173 171 195 102 0 88 94 28 215 100 166 147 124 229 171 77 14 193 47 139 32 76 85 24 210 230 138 238 183 169 90 179 107 33 15 24 107 13 224 91 237 115 202 23 3 35 192 242 118 142 170 91 175 110 39 47 21 221 2 47 106 244 195 51 202 199 160 3 210 2 119 95 9 95 175 14 47 85 79 84 61 137 83 94 81 179 111 200 111 82 197 59 85 124 42 85 134 186 227 103 0 152 229 133 218 7 160 246 105 182 91 130 89 193 25 164 115 84 3 22 133 102 103 173 88 21 168 130 113 125 219 129 120 63 169 93 225 13 171 177 30 82 53 161 106 146 42 73 14 239 114 137 252 72 254 205 190 122 93 12 213 88 178 200 149 188 126 40 181 79 203 15 136 43 184 136 65 69 186 167 106 1 83 74 0 236 190 232 175 219 191 205 136 64 20 22 68 161 234 90 84 23 172 11 84 72 85 66 213 71 72 197 108 182 137 59 63 63 23 186 155 95 181 240 118 215 250 234 253 239 213 56 216 10 149 176 146 235 136 222 129 239 100 147 203 103 168 142 1 40 11 219 16 95 83 21 64 206 82 29 214 30 28 145 137 170 88 99 172 120 128 198 11 125 200 152 23 123 22 246 147 60 200 223 72 145 87 199 77 136 174 91 35 112 116 48 165 66 213 168 82 251 0 212 62 205 118 203 142 248 190 164 26 43 213 241 255 78 53 142 31 143 61 224 198 165 163 77 187 194 94 188 183 214 123 241 160 115 215 103 99 113 241 31 194 254 35 60 200 103 170 199 125 181 220 159 45 13 84 125 26 129 15 218 135 124 30 129 87 222 129 145 234 35 112 176 150 70 224 75 84 61 53 164 7 140 225 233 149 23 15 120 15 120 241 116 246 42 84 153 129 12 120 221 119 228 143 235 116 122 252 218 239 85 174 62 207 150 218 237 115 236 167 119 152 1 233 128 42 205 150 174 83 125 228 197 84 190 201 146 1 242 228 8 43 54 249 198 76 131 148 49 201 19 238 156 111 103 108 154 237 151 126 175 114 245 121 101 211 110 159 99 223 32 196 101 96 53 13 164 237 149 205 117 170 14 139 57 135 33 182 214 67 174 48 84 29 171 10 53 230 248 246 106 30 167 252 92 227 231 175 93 175 114 245 249 46 196 113 251 176 95 195 195 57 190 112 152 42 223 133 104 83 109 156 139 161 245 37 97 37 84 45 149 172 158 223 74 218 198 83 62 170 112 202 191 79 149 239 42 177 174 183 15 251 41 184 60 36 145 211 84 101 140 194 114 88 229 228 142 202 75 168 93 197 254 160 237 214 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 149 228 167 83 151 135 103 179 157 242 147 66 118 33 145 109 129 105 2 172 26 170 29 231 172 255 192 166 71 187 188 122 215 220 107 229 135 100 205 171 204 75 74 189 154 228 180 210 16 194 144 228 243 196 88 184 158 16 136 0 2 217 124 15 192 55 168 146 223 252 203 145 164 149 106 58 160 202 113 206 249 51 54 249 107 113 28 116 31 56 71 213 146 185 10 50 78 83 20 17 207 185 232 192 231 229 163 23 78 101 216 200 189 164 234 107 91 49 213 234 243 95 121 233 0 30 15 144 205 84 57 78 219 231 228 70 228 75 113 28 112 206 175 197 136 106 148 81 163 234 0 228 96 40 254 84 68 202 164 52 68 92 45 205 47 45 191 236 186 9 54 126 130 151 84 61 86 121 149 42 249 9 65 4 74 70 70 193 166 210 164 202 113 176 196 33 127 158 201 47 239 212 12 98 51 67 132 125 15 64 216 183 228 11 4 162 102 181 45 5 53 170 106 215 158 222 41 36 26 180 39 64 222 128 139 226 99 20 209 124 247 240 153 251 42 228 160 175 122 64 199 90 43 172 228 175 10 231 175 62 1 140 35 128 231 41 170 156 7 91 253 17 24 247 254 243 189 126 30 79 138 99 162 26 135 68 254 113 95 117 120 151 59 69 53 123 217 228 51 15 240 5 41 161 176 47 243 82 121 246 167 33 34 146 95 233 232 84 61 208 192 138 77 90 254 42 148 252 213 12 32 70 0 153 71 102 0 70 180 56 168 113 170 111 51 144 237 206 31 222 97 62 17 148 56 211 62 78 118 162 202 145 255 186 175 162 234 20 213 218 233 70 40 148 18 144 52 122 163 19 81 253 125 55 6 253 192 84 91 244 218 126 94 105 96 223 62 177 94 67 81 207 70 227 56 6 48 75 28 142 79 237 143 247 147 27 1 165 252 92 203 115 246 244 25 190 149 229 37 170 116 21 215 53 128 253 84 170 85 168 105 58 55 169 30 231 175 206 248 77 179 158 141 198 113 34 150 151 64 241 1 138 15 44 92 71 0 160 242 121 172 229 185 158 131 176 168 252 245 190 106 195 163 60 40 91 111 109 213 173 129 239 143 192 115 107 4 62 166 42 34 7 84 143 103 39 25 64 222 222 26 173 194 113 166 137 226 240 44 170 198 153 182 197 35 149 183 92 31 174 103 13 228 171 127 167 175 146 136 234 249 217 146 107 204 150 178 58 91 170 117 188 75 149 87 18 116 143 32 108 41 200 15 37 204 56 226 214 202 6 85 184 19 71 0 87 253 91 223 171 170 166 74 117 250 148 149 141 211 86 54 84 207 187 84 245 85 191 175 84 1 175 211 184 117 23 2 85 184 19 71 224 200 255 204 190 42 149 234 183 187 11 241 50 252 56 94 164 218 206 95 117 117 132 4 220 49 85 142 195 254 49 85 46 127 124 39 209 75 26 184 60 227 227 149 205 239 67 85 195 34 24 71 45 161 121 235 170 63 187 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 240 38 223 244 189 182 243 233 166 179 127 13 240 148 49 112 164 9 81 175 16 102 81 148 148 12 26 47 114 180 61 200 79 77 213 87 172 236 51 86 227 226 106 156 166 234 40 245 240 72 89 161 55 2 227 195 232 217 214 79 202 119 152 49 95 163 218 38 141 230 161 114 105 79 153 82 125 206 149 81 184 80 43 147 218 159 139 32 129 177 86 159 176 98 211 105 170 113 181 83 163 34 194 122 56 56 81 207 211 194 136 162 25 35 149 22 49 227 250 75 163 169 54 185 119 168 202 37 170 242 25 84 219 65 118 137 77 65 29 132 171 239 253 61 170 207 213 30 168 3 111 98 130 131 55 72 13 170 78 20 5 88 166 90 27 71 11 245 29 9 186 125 72 213 127 44 231 49 85 170 47 210 129 25 235 117 170 192 176 218 1 160 226 198 0 191 82 19 23 196 39 6 13 69 244 213 39 74 247 168 162 170 229 131 70 223 207 26 129 155 159 251 138 170 199 62 72 22 177 33 202 139 44 111 223 192 122 157 106 94 141 204 84 83 41 73 57 203 103 150 2 20 189 221 71 61 93 240 107 168 242 129 251 35 240 124 68 117 214 169 122 128 251 170 53 112 22 114 21 235 117 170 237 179 55 5 40 134 169 102 63 142 6 147 130 162 60 213 45 5 19 188 252 160 35 240 130 231 101 1 15 224 12 213 154 122 141 87 155 133 250 223 137 234 136 69 89 69 49 19 109 50 111 246 213 211 179 165 114 103 4 230 190 202 184 177 210 154 79 142 192 118 42 15 212 248 158 161 86 255 202 8 108 136 17 83 61 30 129 189 89 155 108 212 80 36 4 33 25 60 46 81 77 64 186 79 85 62 103 4 150 54 213 75 179 165 152 129 0 212 80 158 160 86 255 194 108 201 172 27 212 183 186 133 62 91 34 170 118 109 241 1 158 169 150 228 48 8 9 136 151 168 2 192 143 63 7 62 236 61 158 160 86 191 185 178 249 104 111 143 217 177 134 169 110 119 33 180 140 204 176 104 247 153 101 75 92 143 180 64 210 167 75 79 192 242 160 60 55 122 229 92 127 184 181 83 237 103 207 129 245 56 109 228 199 84 249 14 82 245 147 63 55 32 109 211 24 107 206 222 133 208 53 109 185 245 0 28 85 219 132 192 80 141 122 63 210 83 175 228 221 169 191 150 170 124 29 213 207 147 149 31 67 220 87 89 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 93 182 200 109 13 242 93 169 203 26 23 149 141 110 95 236 162 193 26 241 144 182 236 67 238 202 123 185 160 46 91 12 165 239 249 230 227 84 157 254 72 82 131 204 230 35 3 128 17 107 48 146 31 164 232 229 93 148 137 98 249 70 62 250 82 171 134 203 135 90 126 30 229 19 100 236 242 210 246 11 64 135 200 61 120 154 100 227 249 160 126 199 196 26 83 140 161 140 129 48 13 64 82 118 167 90 65 237 52 1 152 245 45 184 141 181 214 27 187 243 221 83 4 79 46 159 188 139 226 97 24 42 224 85 170 214 160 225 242 161 150 15 12 165 249 36 244 211 57 49 48 118 123 145 134 79 161 200 165 173 2 201 111 37 57 24 187 43 102 202 46 64 64 16 145 1 65 217 241 78 203 219 30 213 253 211 51 166 237 178 177 138 159 60 48 88 242 213 126 233 87 84 158 169 46 245 111 184 124 168 229 3 112 211 125 170 48 118 125 17 221 39 126 236 242 182 158 236 235 84 97 236 193 175 99 225 49 1 202 238 148 90 222 118 94 76 103 169 117 249 170 219 124 75 9 230 171 63 71 134 106 7 172 7 49 208 39 44 245 23 197 85 15 85 95 161 100 198 219 84 97 108 165 161 248 76 149 93 126 162 58 67 61 192 170 67 21 135 176 80 52 202 254 171 74 22 96 194 176 184 19 81 221 160 50 213 9 38 0 222 238 252 25 110 160 122 27 252 38 67 189 0 0 68 117 249 144 173 190 74 201 219 187 84 97 42 13 197 167 80 213 101 168 28 136 161 50 214 54 84 25 128 48 133 125 132 188 81 165 12 148 224 39 133 181 0 239 80 13 249 190 136 184 68 229 163 91 234 157 78 101 166 136 156 205 206 226 64 58 165 124 151 42 87 147 235 115 124 2 166 113 21 251 93 21 105 188 244 12 149 243 114 81 90 35 112 248 136 99 90 169 130 169 46 185 217 6 228 191 169 72 34 63 58 120 73 148 112 180 30 132 151 159 187 175 178 174 247 85 91 204 10 149 53 211 136 250 106 182 228 76 113 13 170 83 226 73 30 80 105 145 31 103 42 79 179 165 159 253 123 21 85 215 191 87 159 166 152 10 149 127 61 136 156 91 217 12 240 161 246 96 154 3 79 200 55 124 90 217 124 163 57 240 243 251 153 3 163 234 250 28 216 212 37 13 41 58 100 43 39 239 66 108 61 213 69 90 127 110 122 220 241 105 181 243 181 235 213 144 191 108 189 202 186 190 94 45 48 79 43 45 197 92 25 29 238 199 91 188 3 124 227 94 17 242 227 134 79 105 203 183 239 45 217 111 121 111 201 190 184 183 68 252 200 37 93 191 183 100 139 252 120 234 178 103 237 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 174 46 206 239 253 122 159 5 124 102 61 239 171 228 216 202 62 188 42 223 250 165 56 203 109 113 126 140 177 191 179 95 101 1 50 233 201 155 23 252 219 50 53 202 93 170 177 65 53 58 204 247 226 219 34 128 148 21 139 225 244 152 35 223 1 238 74 121 152 112 62 190 88 15 192 61 164 249 52 223 43 126 226 248 34 197 52 241 149 86 82 136 63 67 149 227 48 60 21 149 143 14 46 222 162 106 141 139 64 116 75 47 217 182 156 163 140 149 132 77 236 27 235 189 53 122 249 172 197 121 136 68 242 249 115 55 121 151 128 167 75 156 89 243 70 175 245 164 107 221 143 142 227 203 195 65 26 170 87 19 37 170 167 35 170 28 135 181 192 243 90 36 130 122 149 106 113 107 111 115 69 68 66 165 58 72 213 234 3 236 111 25 191 214 105 229 141 77 28 199 200 51 138 57 25 95 44 146 0 242 116 244 116 251 8 239 17 35 6 206 142 179 222 178 191 54 98 194 192 61 79 26 170 59 251 115 146 71 57 77 117 124 174 113 88 243 2 79 165 26 239 142 240 209 213 92 20 7 212 141 124 171 218 254 54 24 121 246 205 24 172 68 71 62 144 71 11 176 47 34 80 159 110 63 142 252 204 98 247 158 225 226 242 222 127 22 3 79 254 214 51 118 126 49 71 123 154 153 162 127 85 152 147 84 39 87 227 144 230 40 154 244 124 216 131 156 88 178 171 159 43 61 39 85 109 255 157 42 251 101 185 96 216 7 30 226 161 249 34 216 251 27 78 162 154 43 85 183 243 159 0 140 37 127 133 74 229 113 68 21 185 129 239 28 108 223 140 19 231 147 179 226 251 84 235 8 140 208 24 33 131 62 2 83 121 99 37 186 243 113 244 207 21 139 135 0 163 111 143 192 97 231 47 73 228 66 126 90 160 238 253 120 220 87 163 74 245 228 192 60 82 28 158 229 238 252 27 84 121 4 206 81 62 121 182 100 70 71 229 155 241 183 106 53 102 75 233 202 108 201 122 43 236 3 46 10 249 98 253 235 239 85 111 85 155 205 135 154 9 57 32 207 227 72 113 120 150 203 179 226 207 154 45 125 213 202 6 184 188 178 73 247 87 54 72 228 47 74 175 230 192 233 124 243 206 218 156 8 147 30 7 32 168 250 172 248 254 202 230 255 233 93 136 216 94 175 198 43 205 107 192 129 166 70 28 0 241 228 172 248 254 93 8 61 191 247 235 125 78 230 253 150 241 9 52 29 56 69 53 230 114 50 14 207 114 121 86 172 83 253 174 212 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 101 159 242 93 171 231 3 255 197 31 255 234 111 68 254 246 47 255 245 175 69 211 56 5 16 84 51 201 69 13 176 194 10 161 153 193 201 38 234 171 46 47 103 244 235 175 191 214 183 111 168 8 124 193 62 201 173 188 220 63 255 211 223 253 253 243 31 254 248 143 255 206 17 108 50 0 6 162 58 99 20 69 227 16 194 48 234 254 63 255 139 176 18 240 16 69 5 192 65 206 0 107 183 159 165 171 229 221 239 65 149 210 236 172 163 170 144 127 102 135 162 115 121 185 127 250 183 63 252 25 248 143 63 252 39 117 143 152 1 96 240 68 213 225 33 129 182 200 28 176 104 176 170 63 23 171 157 143 179 162 232 136 42 231 98 198 133 162 81 203 227 44 85 235 109 187 195 120 79 174 175 241 149 171 41 220 122 238 107 123 55 49 202 76 89 217 38 138 250 203 47 203 27 55 58 114 74 116 33 141 128 151 193 240 80 80 7 3 246 31 179 177 212 229 67 192 124 51 57 0 0 92 89 161 194 31 82 101 241 230 203 220 97 182 55 114 55 172 122 254 214 116 255 121 170 106 213 125 125 147 176 246 115 71 121 185 149 42 159 142 123 202 4 4 101 128 156 135 93 173 3 6 100 0 240 8 154 111 231 125 156 8 148 162 102 14 88 0 246 244 8 28 157 25 29 92 20 248 51 173 85 243 168 24 106 123 151 94 15 192 236 186 209 96 149 166 159 241 174 199 41 122 200 47 145 179 231 55 15 94 86 156 176 22 0 242 57 170 14 166 140 153 46 186 199 36 0 133 153 96 44 202 0 160 24 76 236 255 73 196 208 117 48 1 83 101 77 205 123 146 170 148 21 170 120 185 70 245 194 230 203 121 127 100 172 81 1 61 187 175 156 163 154 18 170 156 74 181 189 211 110 6 128 231 147 127 245 151 223 180 239 74 38 6 165 122 198 11 76 222 251 111 116 130 31 241 246 182 163 42 193 255 23 38 89 253 170 132 108 1 155 145 168 239 105 27 37 162 254 211 18 189 198 114 131 42 195 59 198 221 162 26 41 75 248 53 213 44 25 85 211 37 170 148 175 123 76 117 116 201 41 197 5 200 8 15 122 158 124 192 100 3 16 236 180 31 129 253 155 63 138 255 232 91 135 81 134 65 70 56 187 103 52 0 24 118 88 81 165 65 53 46 10 6 123 145 170 62 208 30 143 29 76 149 167 75 195 57 170 105 68 21 202 165 17 152 243 117 143 71 224 128 198 6 251 192 32 84 222 110 3 236 147 103 75 161 24 200 180 243 103 12 34 41 137 12 187 105 158 115 15 1 32 15 231 206 244 213 181 91 111 169 216 230 196 202 38 0 126 140 30 24 90 147 162 83 211 40 224 245 68 213 77 231 168 202 128 42 127 105 182 196 43 27 166 202 148 178 186 229 245 0 96 140 92 5 59 32 207 115 230 149 141 7 240 223 101 23 104 132 43 107 173 139 195 248 33 126 145 8 32 74 25 46 175 108 60 109 199 203 74 216 148 14 22 48 188 228 97 74 190 181 168 140 24 207 81 45 168 194 120 101 101 195 121 185 199 84 141 41 34 49 10 169 100 36 241 20 231 213 93 136 255 193 179 236 124 131 42 26 243 104 93 78 125 85 213 174 5 42 84 117 12 10 114 75 168 88 189 104 152 236 57 170 115 187 29 248 130 57 202 179 61 166 106 95 61 104 14 38 201 121 205 136 116 41 87 113 94 116 142 18 243 245 123 75 158 246 6 86 101 103 7 184 217 202 183 18 214 255 231 168 58 84 165 139 119 12 255 23 182 213 135 236 191 94 152 103 0 0 0 0 73 69 78 68 174 66 96 130) asByteArraytestIssue655  | tmp1 |  tmp1 := WAAccept fromString: 'text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2'.  self assert: tmp1 size = 5.  self assert: tmp1 at: 1 main: 'text' sub: 'html' quality: 1.0.  self assert: tmp1 at: 2 main: 'image' sub: 'gif' quality: 1.0.  self assert: tmp1 at: 3 main: 'image' sub: 'jpeg' quality: 1.0.  self assert: tmp1 at: 4 main: '*' sub: '*' quality: 0.2.  self assert: tmp1 at: 5 main: '*' sub: '*' quality: 0.2internalError: arg1  self makePlainTextAndPerform: #internalError.  self response     nextPutAll: 'Internal Error: ';     nextPutAll: (arg1 messageText ifNil: [ String new ])hiddenInput  ^self brush: WAHiddenInputTag newwasSuccessful  ^values notNil and: [ values isCollection and: [ values isString not and: [ values size = 2 and: [ (values includes: self firstParameterValue) and: [ values includes: self secondParameterValue ] ] ] ] ]renderTimeSelectorsOn: arg1  arg1 heading     level3;     with: 'Times'.  arg1 form     id: #timeForm;     with: [ arg1 table: [ arg1 tableRow                 class: 'from';                 with: [ arg1                       tableData: 'From';                       tableData: beginTime ].              arg1 tableRow                 class: 'to';                 with: [ arg1                       tableData: 'To';                       tableData: endTime ] ].        arg1 div: [ arg1 submitButton                 callback: [ self inform: (endTime time subtractTime: beginTime time) asSeconds greaseString , ' second(s)' onAnswer: [  ] ];                 text: 'Compute duration' ] ]renderEditVMParameterAt: arg1 callback: arg2 on: arg3  arg3 space.  arg3 render: $[.  arg3 anchor     title: 'edit';     callback: arg2;     with: $e.  arg3 render: $]paddedMinutes  ^(GRMappedPrinter block: [:arg1 |  arg1 minutes ] next: (GRNumberPrinter new           padding: $0;           digits: 2)) , ' min 'visitPainter: arg1  renderContentOn: arg1  arg1 heading     level: 1;     with: self trailName.  arg1 anchor     callback: [ self show: (self class new                 count: count + 1;                 yourself) ];     with: 'Call'.  arg1 space.  arg1 anchor     callback: [ self answer ];     with: 'Answer'style  ^'h1 {margin:0;padding:0;font-size:1.5em}	div.bench {padding-left:4px;position:relative;line-height:36px;width:320px;border: 1px solid #ccc;overflow:hidden;float:left;margin-bottom:2px}	div.result {margin:6px;color:#008aff;font-size:200%;font-weight:bold}	span.iteration {margin-left:6px}	div.rect {position:relative;border: 1px solid #ccc;;height:12px}	.spi{float:left;padding-left:4px;padding-top:2px}	'renderHeadingOn: arg1  arg1 heading     class: 'logo';     with: [ arg1 anchor           url: (WAUrl new                 host: 'www.seaside.st';                 yourself);           with: 'Seaside' ].  arg1 heading     class: 'title';     with: [ arg1 anchor           url: self dispatcher url;           with: self title ]testDefaultCallback  | tmp1 tmp2 tmp3 |  tmp1 := registry store: (WAValueCallback on: [:arg1 |  log add: arg1 ]).  tmp2 := registry store: (WAActionCallback on: [ log add: 'save' ]).  tmp3 := registry store: (WADefaultActionCallback on: [ log add: 'default' ]).  self should: [ self request: (WARequestFields new                 at: tmp1 put: 'a';                 at: tmp2 put: nil;                 at: tmp3 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #('a' 'save').  self should: [ self request: (WARequestFields new                 at: tmp3 put: nil;                 at: tmp2 put: nil;                 at: tmp1 put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #('b' 'save').  self should: [ self request: (WARequestFields new                 at: tmp1 put: 'a';                 at: tmp3 put: nil;                 yourself) ] raise: WARenderNotification.  self assertLog: #('a' 'default').  self should: [ self request: (WARequestFields new                 at: tmp3 put: nil;                 at: tmp1 put: 'b';                 yourself) ] raise: WARenderNotification.  self assertLog: #('b' 'default')updateStates: arg1  self filters do: [:arg2 |  arg2 updateStates: arg1 ].  arg1 register: filtercancelButton  ^self brush: WACancelButtonTag newdefault: arg1  super default: (Array withAll: arg1)preferenceAt: arg1 ifAbsent: arg2  ^self configuration at: arg1 ifAbsent: arg2testAsMIMEDocumentStreamColon  | tmp1 |  tmp1 := 'monkey' readStream seasideMimeDocument.  tmp1 mimeType: 'text/html'.  self assert: tmp1 contentType = WAMimeType textHtml.  self assert: tmp1 content = 'monkey'addToCreationEnd: arg1  | tmp1 |  tmp1 := byCreationEnd.  tmp1 isNil ifFalse: [ tmp1 next: arg1.        arg1 previous: tmp1 ].  byCreationEnd := arg1.  byCreationStart isNil ifTrue: [ byCreationStart := arg1 ]testMatchingHandlerPresent  | tmp1 tmp2 tmp3 |  registry := self createRegistryWithCookiesEnabled.  tmp3 := self registerNewHandler.  tmp2 := self createRequestContextWithFieldKey: tmp3 cookieKey: tmp3.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertDispatched: tmp1contentsDecodedUsing: arg1  ^(GRCodec forEncoding: arg1) decode: self rawContentstype: arg1  self attributeAt: 'type' put: arg1numberOfSessions  | tmp1 |  tmp1 := 0.  WASession allSubInstancesDo: [:arg1 |  tmp1 := tmp1 + 1 ].  ^tmp1sessionId  ^self remoteAddresslocalAttributesDo: arg1  self subclassResponsibilitycreateCodec  ^GRCodec forEncoding: 'iso-8859-1'nextPage  self isOnLastPage ifFalse: [ currentPage := self validPages after: currentPage ]renderSubItemsOn: arg1  keyHash  ^keyHashraiseDeprecated  self greaseDeprecatedApi: 'WAExceptionFunctionalTest>>#raiseDeprecated' details: 'Test action phase deprecation.'.  self inform: [:arg1 |  self greaseDeprecatedApi: 'WAExceptionFunctionalTest>>#raiseDeprecated' details: 'Test render phase deprecation.'.        arg1 paragraph: 'To be displayed' ] onAnswer: [  ]renderHeadingSpacerOn: arg1  arg1 tableData: ''at: arg1 put: arg2  ^self takeValue: arg2 forAttribute: (self attributeAt: arg1)serverInstance  ^self serverClass servernextPut: arg1  self subclassResponsibilitystore: arg1  ^mutex critical: [ cache store: arg1 ]deleted: arg1  self deleted with: arg1message: arg1  message := arg1documentOf: arg1  ^self perform: arg1host  ^hostsetContext: arg1  context := arg1createHandlers  ^Array with: self newApplicationmimeType  ^mimeTypedefaultConfiguration  ^super defaultConfiguration     removeParent: WARequestHandlingConfiguration instance;     addParent: WARegistryConfiguration instance;     yourselfisActive  ^self handler notNil and: [ self handler parent notNil ]keyFor: arg1 ifAbsent: arg2  ^arg1 keychoose: arg1  | tmp1 |  tmp1 := WriteStream on: Array new.  stack do: [:arg2 |  tmp1 nextPut: arg2.        arg2 == arg1 ifTrue: [ stack := tmp1 contents.              ^self ] ]encodePathParametersAt: arg1 on: arg2  self privatePathParameterMapAt: arg1 ifPresentDo: [:arg3 |  arg3 keysAndAllValuesDo: [:arg4 :arg5 |  arg2 nextPut: $;.              arg2 urlEncoder nextPutAll: arg4.              (arg5 size = 1 and: [ arg5 first isNil ]) ifFalse: [ arg2 nextPut: $=.                    arg5 do: [:arg6 |  arg2 urlEncoder nextPutAll: arg6 greaseString ] separatedBy: [ arg2 nextPut: $, ] ] ] ] ifAbsent: [  ]presenter: arg1  presenter := arg1chooseFrom: arg1 caption: arg2  ^self wait: [:arg3 |  self chooseFrom: arg1 caption: arg2 onAnswer: arg3 ]testUpdateRoot  | tmp1 tmp2 |  tmp1 := WAHtmlRoot new.  root onUpdateRoot: [:arg1 |  self assert: arg1 = tmp1.        self log: 'root' ].  child1 onUpdateRoot: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child1' ].  child2 onUpdateRoot: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child2' ].  child3 onUpdateRoot: [:arg1 |  self assert: arg1 = tmp1.        self log: 'child3' ].  decoration1 onUpdateRoot: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration1' ].  decoration2 onUpdateRoot: [:arg1 |  self assert: arg1 = tmp1.        self log: 'decoration2' ].  tmp2 := WAVisiblePresenterGuide client: (WAUpdateRootVisitor root: tmp1).  tmp2 start: root.  self assertLog: #('root').  root onChildren: [ Array with: child1 with: child2 ].  tmp2 start: root.  self assertLog: #('root' 'child1' 'child2').  root     addDecoration: decoration1;     addDecoration: decoration2.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child2').  child2 show: child3.  tmp2 start: root.  self assertLog: #('decoration2' 'decoration1' 'root' 'child1' 'child3')headerAt: arg1 forResponse: arg2  ^arg2 headerAt: arg1callbackValue: arg1  ^self valuesAt: values size + 1 put: arg1renderNodeButton: arg1 on: arg2  | tmp1 |  arg2 span     class: 'button';     with: [ (self hasChildren: arg1) ifTrue: [ tmp1 := self isExpanded: arg1.              self renderNodeButtonLink: arg1 action: (GRDelayedSend receiver: self selector: (tmp1 ifTrue: [ #collapse: ] ifFalse: [ #expand: ]) argument: arg1) text: (tmp1 ifTrue: [ '-' ] ifFalse: [ '+' ]) on: arg2 ] ]renderValue: arg1 on: arg2  arg2 tableData     align: 'right';     with: arg1parents  ^Array with: WARequestHandlingConfiguration instancestyle  ^nilnest: arg1  first := true.  super nest: arg1.  first := falsevalue: arg1  group isNil ifTrue: [ ^super value: arg1 ].  group hasSelection ifTrue: [ self selected: (group isSelected: arg1) ].  group hasCallback ifTrue: [ super value: (group callbackValue: arg1) ]keyField  ^'jsessionid'condition  ^conditionkeyFromContext: arg1  ^self queryFieldKeyFromContext: arg1pushAll: arg1 during: arg2  ^arg1 isEmpty ifTrue: [ arg2 value ] ifFalse: [ self requestContext push: arg1 first during: [ self pushAll: arg1 allButFirst during: arg2 ] ]childrenDo: arg1  children isNil ifFalse: [ children do: arg1 ]actionUrlForContinuation: arg1  ^self actionUrlForKey: (continuations store: (arg1                 setParent: self;                 yourself))renderRenderContentsOnCodeOn: arg1  arg1 preformatted     class: #codeSample;     with: [ arg1 span           class: #patternKeyword;           with: 'renderContentOn: '.        arg1 span           class: #patternArg;           with: 'html'.        arg1 break.        arg1 span           class: #instanceVar;           with: '    counters'.        arg1 break.        arg1 text: '        do: [ '.        arg1 span           class: #blockArg;           with: ':each'.        arg1 text: ' | '.        arg1 span           class: #receiver;           with: 'html'.        arg1 text: ' render: '.        arg1 span           class: #patternArg;           with: 'each'.        arg1 text: ' ]'.        arg1 break.        arg1 text: '         separatedBy: [ '.        arg1 span           class: #receiver;           with: 'html'.        arg1 text: ' horizontalRule ]' ]username: arg1  username := self sanitize: arg1defer  self attributeAt: 'defer' put: trueonPause: arg1  self document scriptGenerator event: 'pause' do: arg1 on: selfnext  ^next contentskeyboard: arg1  self keyboard with: arg1testPort  url     host: 'seaside.st';     port: 8080.  self assert: url port = 8080.  self assert: url greaseString = 'http://seaside.st:8080/'root  ^rootopenTag: arg1 attributes: arg2  self openTag: arg1 attributes: arg2 closed: falseaddMedia: arg1  self attributes addMedia: arg1testHasExpressionAt  | tmp1 tmp2 tmp3 |  tmp1 := self basicSystemConfiguration.  tmp2 := WAUserConfiguration new     addParent: tmp1;     yourself.  self deny: (tmp2 hasExpressionAt: #a).  tmp2 at: #a put: 2.  self assert: (tmp2 hasExpressionAt: #a).  tmp3 := WAUserConfiguration new     addParent: tmp2;     yourself.  self deny: (tmp3 hasExpressionAt: #a)orderedList: arg1  self orderedList with: arg1country: arg1  country := arg1visitCollectionAttribute: arg1  self visitListAttribute: arg1testBodyDecoded  | tmp1 tmp2 |  tmp1 := WARequest method: 'POST' uri: '/foo?bar=1'.  tmp1 setBody: ((GRCodec forEncoding: 'utf-8') encode: 'baz=2&bar=3&foo=é').  self should: [ tmp1 bodyDecoded ] raise: WAIllegalStateException.  tmp2 := Dictionary new.  tmp2 at: 'content-type' put: (WAMimeType formUrlencoded           charset: 'utf-8';           yourself) greaseString.  tmp1 setHeaders: tmp2.  self assert: tmp1 bodyDecoded equals: 'baz=2&bar=3&foo=é'.  tmp1 setBody: nil.  self assert: tmp1 bodyDecoded equals: nilrows  ^#()next  ^nexttestExclusion  | tmp1 tmp2 tmp3 tmp4 tmp5 |  tmp1 := nil.  tmp2 := GRPlatform current semaphoreClass new.  tmp3 := GRPlatform current semaphoreClass new.  tmp4 := GRPlatform current semaphoreClass new.  tmp5 := GRPlatform current semaphoreClass new.  process := [ mutex critical: [ tmp2 signal.        tmp3 wait.        tmp1 := 1 ] ] newProcess.  process2 := [ tmp4 signal.  mutex critical: [ tmp4 signal.        tmp5 wait.        tmp1 := 2.        tmp4 signal ] ] newProcess.  process resume.  tmp2 wait.  process2 resume.  tmp4 wait.  self assert: mutex owner == process.  self assert: tmp1 isNil.  tmp3 signal.  tmp4 wait.  self assert: mutex owner == process2.  self assert: tmp1 = 1.  tmp5 signal.  tmp4 wait.  self assert: mutex owner isNil.  self assert: tmp1 = 2body  ^bodyrenderContentOn: arg1  arg1 form     id: 'myform';     with: [ arg1 table: [ self renderUsernameOn: arg1.              self renderPasswordOn: arg1.              self renderFeedbackOn: arg1 ].        arg1 div: [ self renderButtonOn: arg1 ] ]close: arg1 on: arg2  self writeScriptTag: [ arg2 nextPutAll: 'function onLoad(){'.        self writeLoadScriptsOn: arg2.        arg2 nextPutAll: '};' ] on: arg2scope: arg1  self attributes at: 'scope' put: arg1attribute: arg1  attribute := arg1testConversion  | tmp1 |  url     host: 'example.com';     addToPath: 'foo';     addToPath: 'bar'.  tmp1 := 'http://example.com/foo/bar' seasideUrl.  self assert: (tmp1 isKindOf: WAUrl).  self assert: url = tmp1wait: arg1  ^GRPlatform current seasideSuspendFlowDo: [:arg2 |  arg1 value: arg2 ]values: arg1  valueBlock := arg1initializeWithInitialSize: arg1 maximumSize: arg2 maximumAbsoluteAge: arg3 maximumRelativeAge: arg4 overflowAction: arg5  super initializeWithInitialSize: arg1 maximumSize: arg2 maximumAbsoluteAge: arg3 maximumRelativeAge: arg4 overflowAction: arg5.  dictionary := GRPlatform current reducedConflictDictionary newtype  ^'tel'block: arg1  block := arg1testMismatchingWithNoHandlers  | tmp1 tmp2 |  registry := self createRegistryWithCookiesEnabled.  tmp2 := self createRequestContextWithFieldKey: '123' cookieKey: '456'.  tmp1 := self dispatch: tmp2 to: registry.  self assertNoCookies: tmp1.  self assertExpired: tmp1keyFromContext: arg1  | tmp1 |  tmp1 := self pathParameterKeyFromContext: arg1.  ^tmp1 isNil ifTrue: [ (self cookieFromContext: arg1 ifAbsent: [ ^nil ]) value ] ifFalse: [ tmp1 ]refreshAfter: arg1 location: arg2 message: arg3  self ifResetPossible: [ | tmp1 |        tmp1 := WAMimeType textPlain.        tmp1 charSet: self request charSet.        self response           contentType: tmp1;           refreshAfter: arg1 location: arg2 message: arg3 , (String with: Character cr) , 'You are being redirected to ' , arg2 greaseString ]columns  ^#(systemCategory class messageCategory message)label  ^'Image'tableFoot  ^self tag: 'tfoot'cookieKey  ^self fieldNamename  ^self class nametestUrlFor  | tmp1 tmp2 tmp3 tmp4 tmp5 |  handler class == WARegistry ifFalse: [ ^self ].  tmp2 := self requestWithMethod: 'GET'.  tmp2 setCookies: (Array with: (WARequestCookie key: '_s' value: 'sessionid')).  tmp3 := WABufferedResponse new.  tmp4 := WADocumentHandler document: 'ESUG 2015'.  tmp1 := WARequestContext request: tmp2 response: tmp3.  tmp5 := WACurrentRequestContext use: tmp1 during: [ handler           register: tmp4;           urlFor: tmp4 ].  self assert: (tmp5 queryFields includesKey: '_s').  tmp2 url addField: '_s' value: (tmp5 queryFields at: '_s').  [ handler handle: tmp1 ] on: WAResponseNotification do: [:arg1 |   ].  self assert: tmp3 status = 200.  self assert: tmp3 cookies isEmptypriority  ^60handleFiltered: arg1  self isClosed ifFalse: [ super handleFiltered: arg1 ] ifTrue: [ arg1 responseGenerator           pageExpired;           respond ]renderValidationErrorOn: arg1  arg1 span     class: 'error';     with: 'invalid date'writeIfNotFirst: arg1  first ifFalse: [ self document nextPutAll: arg1 ]beCanonical  self relationship: 'canonical'startOn: arg1  self resume.  self serverClass start: arg1style  ^'.chooser {	background-color: #eee;	padding: 5px;}.chooser form,.chooser form div {	display: inline;}.chooser form select {	margin-right: 5px;}.component {	padding: 5px;}.answer {	background-color: #eee;	padding: 5px;}'datalist: arg1  self datalist with: arg1renderRow: arg1 named: arg2 group: arg3 on: arg4  | tmp1 |  arg4 tableRow: [ arg4 tableHeading: [ tmp1 := arg3 radioButton                 ensureId;                 value: arg2;                 yourself.              arg4 label                 for: tmp1 id;                 with: [ (self isPrimitiveType: arg1) ifTrue: [ arg4 text: arg2 ] ifFalse: [ arg4 anchor                             callback: [ self chooseObject: arg1 named: arg2 ];                             with: arg2 ] ] ].        arg4 tableData: (arg1 printStringLimitedTo: 100) ]